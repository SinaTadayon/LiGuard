/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IProxy {
  export type ProxyInfoStruct = {
    domainSeparator: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
    version: PromiseOrValue<string>;
    acl: PromiseOrValue<string>;
    subject: PromiseOrValue<string>;
    localAdmin: PromiseOrValue<string>;
    initVersion: PromiseOrValue<BigNumberish>;
    sstat: PromiseOrValue<BigNumberish>;
    ustat: PromiseOrValue<BigNumberish>;
  };

  export type ProxyInfoStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    number,
    number,
    number
  ] & {
    domainSeparator: string;
    name: string;
    version: string;
    acl: string;
    subject: string;
    localAdmin: string;
    initVersion: number;
    sstat: number;
    ustat: number;
  };
}

export declare namespace IRealmManagement {
  export type RealmInfoStruct = {
    domainId: PromiseOrValue<BytesLike>;
    adminId: PromiseOrValue<BytesLike>;
    contextLimit: PromiseOrValue<BigNumberish>;
    agentLimit: PromiseOrValue<BigNumberish>;
    referredByAgent: PromiseOrValue<BigNumberish>;
    acstat: PromiseOrValue<BigNumberish>;
    alstate: PromiseOrValue<BigNumberish>;
    adminType: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type RealmInfoStructOutput = [
    string,
    string,
    number,
    number,
    number,
    number,
    number,
    number,
    string
  ] & {
    domainId: string;
    adminId: string;
    contextLimit: number;
    agentLimit: number;
    referredByAgent: number;
    acstat: number;
    alstate: number;
    adminType: number;
    name: string;
  };

  export type RealmRegisterRequestStruct = {
    domainId: PromiseOrValue<BytesLike>;
    adminId: PromiseOrValue<BytesLike>;
    contextLimit: PromiseOrValue<BigNumberish>;
    agentLimit: PromiseOrValue<BigNumberish>;
    acstat: PromiseOrValue<BigNumberish>;
    alstat: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type RealmRegisterRequestStructOutput = [
    string,
    string,
    number,
    number,
    number,
    number,
    string
  ] & {
    domainId: string;
    adminId: string;
    contextLimit: number;
    agentLimit: number;
    acstat: number;
    alstat: number;
    name: string;
  };

  export type RealmUpdateContextLimitRequestStruct = {
    realmId: PromiseOrValue<BytesLike>;
    contextLimit: PromiseOrValue<BigNumberish>;
  };

  export type RealmUpdateContextLimitRequestStructOutput = [string, number] & {
    realmId: string;
    contextLimit: number;
  };
}

export declare namespace IACLCommons {
  export type UpdateActivityRequestStruct = {
    id: PromiseOrValue<BytesLike>;
    acstat: PromiseOrValue<BigNumberish>;
  };

  export type UpdateActivityRequestStructOutput = [string, number] & {
    id: string;
    acstat: number;
  };

  export type UpdateAdminRequestStruct = {
    id: PromiseOrValue<BytesLike>;
    adminId: PromiseOrValue<BytesLike>;
  };

  export type UpdateAdminRequestStructOutput = [string, string] & {
    id: string;
    adminId: string;
  };

  export type ScopeUpdateAgentLimitRequestStruct = {
    scopeId: PromiseOrValue<BytesLike>;
    agentLimit: PromiseOrValue<BigNumberish>;
  };

  export type ScopeUpdateAgentLimitRequestStructOutput = [string, number] & {
    scopeId: string;
    agentLimit: number;
  };

  export type UpdateAlterabilityRequestStruct = {
    id: PromiseOrValue<BytesLike>;
    alstat: PromiseOrValue<BigNumberish>;
  };

  export type UpdateAlterabilityRequestStructOutput = [string, number] & {
    id: string;
    alstat: number;
  };
}

export interface RealmManagerInterface extends utils.Interface {
  functions: {
    "CTX_MESSAGE_TYPEHASH()": FunctionFragment;
    "FUNCTION_MESSAGE_TYPEHASH()": FunctionFragment;
    "PREDICT_CTX_MESSAGE_TYPEHASH()": FunctionFragment;
    "TYPE_HASH()": FunctionFragment;
    "accessControlManager()": FunctionFragment;
    "contractName()": FunctionFragment;
    "contractVersion()": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "initVersion()": FunctionFragment;
    "initialize(string,string,address)": FunctionFragment;
    "localAdmin()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "proxyInfo()": FunctionFragment;
    "realmCheckAdmin(bytes32,address)": FunctionFragment;
    "realmCheckId(bytes32)": FunctionFragment;
    "realmCheckName(string)": FunctionFragment;
    "realmGetContexts(bytes32)": FunctionFragment;
    "realmGetInfo(bytes32)": FunctionFragment;
    "realmHasContext(bytes32,bytes32)": FunctionFragment;
    "realmHasFunction(bytes32,bytes32)": FunctionFragment;
    "realmRegister((bytes32,bytes32,uint32,uint16,uint8,uint8,string)[])": FunctionFragment;
    "realmUpdateActivityStatus((bytes32,uint8)[])": FunctionFragment;
    "realmUpdateAdmin((bytes32,bytes32)[])": FunctionFragment;
    "realmUpdateAgentLimit((bytes32,uint16)[])": FunctionFragment;
    "realmUpdateAlterabilityStatus((bytes32,uint8)[])": FunctionFragment;
    "realmUpdateContextLimit((bytes32,uint32)[])": FunctionFragment;
    "safeModeStatus()": FunctionFragment;
    "setAccessControlManager(address)": FunctionFragment;
    "setLocalAdmin(address)": FunctionFragment;
    "setSafeModeStatus(uint8)": FunctionFragment;
    "setUpgradabilityStatus(uint8)": FunctionFragment;
    "subjectAddress()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradabilityStatus()": FunctionFragment;
    "upgradeTo(address,bytes,bool)": FunctionFragment;
    "withdrawBalance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CTX_MESSAGE_TYPEHASH"
      | "CTX_MESSAGE_TYPEHASH()"
      | "FUNCTION_MESSAGE_TYPEHASH"
      | "FUNCTION_MESSAGE_TYPEHASH()"
      | "PREDICT_CTX_MESSAGE_TYPEHASH"
      | "PREDICT_CTX_MESSAGE_TYPEHASH()"
      | "TYPE_HASH"
      | "TYPE_HASH()"
      | "accessControlManager"
      | "accessControlManager()"
      | "contractName"
      | "contractName()"
      | "contractVersion"
      | "contractVersion()"
      | "domainSeparator"
      | "domainSeparator()"
      | "initVersion"
      | "initVersion()"
      | "initialize"
      | "initialize(string,string,address)"
      | "localAdmin"
      | "localAdmin()"
      | "proxiableUUID"
      | "proxiableUUID()"
      | "proxyInfo"
      | "proxyInfo()"
      | "realmCheckAdmin"
      | "realmCheckAdmin(bytes32,address)"
      | "realmCheckId"
      | "realmCheckId(bytes32)"
      | "realmCheckName"
      | "realmCheckName(string)"
      | "realmGetContexts"
      | "realmGetContexts(bytes32)"
      | "realmGetInfo"
      | "realmGetInfo(bytes32)"
      | "realmHasContext"
      | "realmHasContext(bytes32,bytes32)"
      | "realmHasFunction"
      | "realmHasFunction(bytes32,bytes32)"
      | "realmRegister"
      | "realmRegister((bytes32,bytes32,uint32,uint16,uint8,uint8,string)[])"
      | "realmUpdateActivityStatus"
      | "realmUpdateActivityStatus((bytes32,uint8)[])"
      | "realmUpdateAdmin"
      | "realmUpdateAdmin((bytes32,bytes32)[])"
      | "realmUpdateAgentLimit"
      | "realmUpdateAgentLimit((bytes32,uint16)[])"
      | "realmUpdateAlterabilityStatus"
      | "realmUpdateAlterabilityStatus((bytes32,uint8)[])"
      | "realmUpdateContextLimit"
      | "realmUpdateContextLimit((bytes32,uint32)[])"
      | "safeModeStatus"
      | "safeModeStatus()"
      | "setAccessControlManager"
      | "setAccessControlManager(address)"
      | "setLocalAdmin"
      | "setLocalAdmin(address)"
      | "setSafeModeStatus"
      | "setSafeModeStatus(uint8)"
      | "setUpgradabilityStatus"
      | "setUpgradabilityStatus(uint8)"
      | "subjectAddress"
      | "subjectAddress()"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "upgradabilityStatus"
      | "upgradabilityStatus()"
      | "upgradeTo"
      | "upgradeTo(address,bytes,bool)"
      | "withdrawBalance"
      | "withdrawBalance(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CTX_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CTX_MESSAGE_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUNCTION_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUNCTION_MESSAGE_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TYPE_HASH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TYPE_HASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControlManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControlManager()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(string,string,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "localAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localAdmin()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proxyInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyInfo()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "realmCheckAdmin",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmCheckAdmin(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmCheckId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmCheckId(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmCheckName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmCheckName(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmGetContexts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmGetContexts(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmGetInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmGetInfo(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmHasContext",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmHasContext(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmHasFunction",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmHasFunction(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "realmRegister",
    values: [IRealmManagement.RealmRegisterRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmRegister((bytes32,bytes32,uint32,uint16,uint8,uint8,string)[])",
    values: [IRealmManagement.RealmRegisterRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateActivityStatus",
    values: [IACLCommons.UpdateActivityRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateActivityStatus((bytes32,uint8)[])",
    values: [IACLCommons.UpdateActivityRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateAdmin",
    values: [IACLCommons.UpdateAdminRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateAdmin((bytes32,bytes32)[])",
    values: [IACLCommons.UpdateAdminRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateAgentLimit",
    values: [IACLCommons.ScopeUpdateAgentLimitRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateAgentLimit((bytes32,uint16)[])",
    values: [IACLCommons.ScopeUpdateAgentLimitRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateAlterabilityStatus",
    values: [IACLCommons.UpdateAlterabilityRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateAlterabilityStatus((bytes32,uint8)[])",
    values: [IACLCommons.UpdateAlterabilityRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateContextLimit",
    values: [IRealmManagement.RealmUpdateContextLimitRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "realmUpdateContextLimit((bytes32,uint32)[])",
    values: [IRealmManagement.RealmUpdateContextLimitRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeModeStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeModeStatus()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessControlManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessControlManager(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLocalAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLocalAdmin(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeModeStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeModeStatus(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradabilityStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradabilityStatus(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subjectAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subjectAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradabilityStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradabilityStatus()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo(address,bytes,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CTX_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CTX_MESSAGE_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUNCTION_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUNCTION_MESSAGE_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TYPE_HASH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TYPE_HASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControlManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControlManager()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(string,string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "localAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localAdmin()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyInfo()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmCheckAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmCheckAdmin(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmCheckId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmCheckId(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmCheckName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmCheckName(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmGetContexts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmGetContexts(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmGetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmGetInfo(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmHasContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmHasContext(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmHasFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmHasFunction(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmRegister((bytes32,bytes32,uint32,uint16,uint8,uint8,string)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateActivityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateActivityStatus((bytes32,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateAdmin((bytes32,bytes32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateAgentLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateAgentLimit((bytes32,uint16)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateAlterabilityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateAlterabilityStatus((bytes32,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateContextLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realmUpdateContextLimit((bytes32,uint32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeModeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeModeStatus()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessControlManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessControlManager(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLocalAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLocalAdmin(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeModeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeModeStatus(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradabilityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradabilityStatus(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradabilityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradabilityStatus()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTo(address,bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance(address)",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(address,address,address,string,string,uint16)": EventFragment;
    "ProxyAccessControlUpdated(address,address,address)": EventFragment;
    "ProxyLocalAdminUpdated(address,address,address)": EventFragment;
    "ProxySafeModeUpdated(address,address,uint8)": EventFragment;
    "ProxyUpdatabilityUpdated(address,address,uint8)": EventFragment;
    "ProxyUpgraded(address,address,address)": EventFragment;
    "RealmActivityUpdated(address,bytes32,uint8)": EventFragment;
    "RealmAdminUpdated(address,bytes32,bytes32)": EventFragment;
    "RealmAgentLimitUpdated(address,bytes32,uint16)": EventFragment;
    "RealmAlterabilityUpdated(address,bytes32,uint8)": EventFragment;
    "RealmContextLimitUpdated(address,bytes32,uint32)": EventFragment;
    "RealmRegistered(address,bytes32,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Initialized(address,address,address,string,string,uint16)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyAccessControlUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxyAccessControlUpdated(address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyLocalAdminUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxyLocalAdminUpdated(address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxySafeModeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxySafeModeUpdated(address,address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyUpdatabilityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxyUpdatabilityUpdated(address,address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxyUpgraded(address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmActivityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmActivityUpdated(address,bytes32,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmAdminUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmAdminUpdated(address,bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmAgentLimitUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmAgentLimitUpdated(address,bytes32,uint16)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmAlterabilityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmAlterabilityUpdated(address,bytes32,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmContextLimitUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmContextLimitUpdated(address,bytes32,uint32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmRegistered(address,bytes32,bytes32,bytes32)"
  ): EventFragment;
}

export interface InitializedEventObject {
  sender: string;
  proxy: string;
  subject: string;
  name: string;
  version: string;
  initCount: number;
}
export type InitializedEvent = TypedEvent<
  [string, string, string, string, string, number],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ProxyAccessControlUpdatedEventObject {
  sender: string;
  proxy: string;
  acl: string;
}
export type ProxyAccessControlUpdatedEvent = TypedEvent<
  [string, string, string],
  ProxyAccessControlUpdatedEventObject
>;

export type ProxyAccessControlUpdatedEventFilter =
  TypedEventFilter<ProxyAccessControlUpdatedEvent>;

export interface ProxyLocalAdminUpdatedEventObject {
  sender: string;
  proxy: string;
  newAdmin: string;
}
export type ProxyLocalAdminUpdatedEvent = TypedEvent<
  [string, string, string],
  ProxyLocalAdminUpdatedEventObject
>;

export type ProxyLocalAdminUpdatedEventFilter =
  TypedEventFilter<ProxyLocalAdminUpdatedEvent>;

export interface ProxySafeModeUpdatedEventObject {
  sender: string;
  proxy: string;
  sstat: number;
}
export type ProxySafeModeUpdatedEvent = TypedEvent<
  [string, string, number],
  ProxySafeModeUpdatedEventObject
>;

export type ProxySafeModeUpdatedEventFilter =
  TypedEventFilter<ProxySafeModeUpdatedEvent>;

export interface ProxyUpdatabilityUpdatedEventObject {
  sender: string;
  proxy: string;
  ustat: number;
}
export type ProxyUpdatabilityUpdatedEvent = TypedEvent<
  [string, string, number],
  ProxyUpdatabilityUpdatedEventObject
>;

export type ProxyUpdatabilityUpdatedEventFilter =
  TypedEventFilter<ProxyUpdatabilityUpdatedEvent>;

export interface ProxyUpgradedEventObject {
  sender: string;
  proxy: string;
  newImplementation: string;
}
export type ProxyUpgradedEvent = TypedEvent<
  [string, string, string],
  ProxyUpgradedEventObject
>;

export type ProxyUpgradedEventFilter = TypedEventFilter<ProxyUpgradedEvent>;

export interface RealmActivityUpdatedEventObject {
  sender: string;
  realmId: string;
  acstat: number;
}
export type RealmActivityUpdatedEvent = TypedEvent<
  [string, string, number],
  RealmActivityUpdatedEventObject
>;

export type RealmActivityUpdatedEventFilter =
  TypedEventFilter<RealmActivityUpdatedEvent>;

export interface RealmAdminUpdatedEventObject {
  sender: string;
  realmId: string;
  adminId: string;
}
export type RealmAdminUpdatedEvent = TypedEvent<
  [string, string, string],
  RealmAdminUpdatedEventObject
>;

export type RealmAdminUpdatedEventFilter =
  TypedEventFilter<RealmAdminUpdatedEvent>;

export interface RealmAgentLimitUpdatedEventObject {
  sender: string;
  realmId: string;
  agentLimit: number;
}
export type RealmAgentLimitUpdatedEvent = TypedEvent<
  [string, string, number],
  RealmAgentLimitUpdatedEventObject
>;

export type RealmAgentLimitUpdatedEventFilter =
  TypedEventFilter<RealmAgentLimitUpdatedEvent>;

export interface RealmAlterabilityUpdatedEventObject {
  sender: string;
  realmId: string;
  alstat: number;
}
export type RealmAlterabilityUpdatedEvent = TypedEvent<
  [string, string, number],
  RealmAlterabilityUpdatedEventObject
>;

export type RealmAlterabilityUpdatedEventFilter =
  TypedEventFilter<RealmAlterabilityUpdatedEvent>;

export interface RealmContextLimitUpdatedEventObject {
  sender: string;
  realmId: string;
  contextLimit: number;
}
export type RealmContextLimitUpdatedEvent = TypedEvent<
  [string, string, number],
  RealmContextLimitUpdatedEventObject
>;

export type RealmContextLimitUpdatedEventFilter =
  TypedEventFilter<RealmContextLimitUpdatedEvent>;

export interface RealmRegisteredEventObject {
  sender: string;
  realmId: string;
  domainId: string;
  adminId: string;
}
export type RealmRegisteredEvent = TypedEvent<
  [string, string, string, string],
  RealmRegisteredEventObject
>;

export type RealmRegisteredEventFilter = TypedEventFilter<RealmRegisteredEvent>;

export interface RealmManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RealmManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    FUNCTION_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "FUNCTION_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<[string]>;

    accessControlManager(overrides?: CallOverrides): Promise<[string]>;

    "accessControlManager()"(overrides?: CallOverrides): Promise<[string]>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    "contractName()"(overrides?: CallOverrides): Promise<[string]>;

    contractVersion(overrides?: CallOverrides): Promise<[string]>;

    "contractVersion()"(overrides?: CallOverrides): Promise<[string]>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<[string]>;

    initVersion(overrides?: CallOverrides): Promise<[number]>;

    "initVersion()"(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      contractName: PromiseOrValue<string>,
      contractVersion: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(string,string,address)"(
      contractName: PromiseOrValue<string>,
      contractVersion: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    localAdmin(overrides?: CallOverrides): Promise<[string]>;

    "localAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    proxyInfo(
      overrides?: CallOverrides
    ): Promise<[IProxy.ProxyInfoStructOutput]>;

    "proxyInfo()"(
      overrides?: CallOverrides
    ): Promise<[IProxy.ProxyInfoStructOutput]>;

    realmCheckAdmin(
      realmId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "realmCheckAdmin(bytes32,address)"(
      realmId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    realmCheckId(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "realmCheckId(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    realmCheckName(
      realmName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "realmCheckName(string)"(
      realmName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    realmGetContexts(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "realmGetContexts(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    realmGetInfo(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IRealmManagement.RealmInfoStructOutput]>;

    "realmGetInfo(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IRealmManagement.RealmInfoStructOutput]>;

    realmHasContext(
      realmId: PromiseOrValue<BytesLike>,
      contextId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "realmHasContext(bytes32,bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      contextId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    realmHasFunction(
      realmId: PromiseOrValue<BytesLike>,
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "realmHasFunction(bytes32,bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    realmRegister(
      requests: IRealmManagement.RealmRegisterRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "realmRegister((bytes32,bytes32,uint32,uint16,uint8,uint8,string)[])"(
      requests: IRealmManagement.RealmRegisterRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    realmUpdateActivityStatus(
      requests: IACLCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "realmUpdateActivityStatus((bytes32,uint8)[])"(
      requests: IACLCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    realmUpdateAdmin(
      requests: IACLCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "realmUpdateAdmin((bytes32,bytes32)[])"(
      requests: IACLCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    realmUpdateAgentLimit(
      requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "realmUpdateAgentLimit((bytes32,uint16)[])"(
      requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    realmUpdateAlterabilityStatus(
      requests: IACLCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "realmUpdateAlterabilityStatus((bytes32,uint8)[])"(
      requests: IACLCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    realmUpdateContextLimit(
      requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "realmUpdateContextLimit((bytes32,uint32)[])"(
      requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeModeStatus(overrides?: CallOverrides): Promise<[number]>;

    "safeModeStatus()"(overrides?: CallOverrides): Promise<[number]>;

    setAccessControlManager(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setAccessControlManager(address)"(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLocalAdmin(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setLocalAdmin(address)"(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSafeModeStatus(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setSafeModeStatus(uint8)"(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpgradabilityStatus(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUpgradabilityStatus(uint8)"(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subjectAddress(overrides?: CallOverrides): Promise<[string]>;

    "subjectAddress()"(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradabilityStatus(overrides?: CallOverrides): Promise<[number]>;

    "upgradabilityStatus()"(overrides?: CallOverrides): Promise<[number]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  FUNCTION_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "FUNCTION_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PREDICT_CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  "TYPE_HASH()"(overrides?: CallOverrides): Promise<string>;

  accessControlManager(overrides?: CallOverrides): Promise<string>;

  "accessControlManager()"(overrides?: CallOverrides): Promise<string>;

  contractName(overrides?: CallOverrides): Promise<string>;

  "contractName()"(overrides?: CallOverrides): Promise<string>;

  contractVersion(overrides?: CallOverrides): Promise<string>;

  "contractVersion()"(overrides?: CallOverrides): Promise<string>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

  initVersion(overrides?: CallOverrides): Promise<number>;

  "initVersion()"(overrides?: CallOverrides): Promise<number>;

  initialize(
    contractName: PromiseOrValue<string>,
    contractVersion: PromiseOrValue<string>,
    accessControlManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(string,string,address)"(
    contractName: PromiseOrValue<string>,
    contractVersion: PromiseOrValue<string>,
    accessControlManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  localAdmin(overrides?: CallOverrides): Promise<string>;

  "localAdmin()"(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  proxyInfo(overrides?: CallOverrides): Promise<IProxy.ProxyInfoStructOutput>;

  "proxyInfo()"(
    overrides?: CallOverrides
  ): Promise<IProxy.ProxyInfoStructOutput>;

  realmCheckAdmin(
    realmId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "realmCheckAdmin(bytes32,address)"(
    realmId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  realmCheckId(
    realmId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "realmCheckId(bytes32)"(
    realmId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  realmCheckName(
    realmName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "realmCheckName(string)"(
    realmName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  realmGetContexts(
    realmId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "realmGetContexts(bytes32)"(
    realmId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  realmGetInfo(
    realmId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IRealmManagement.RealmInfoStructOutput>;

  "realmGetInfo(bytes32)"(
    realmId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IRealmManagement.RealmInfoStructOutput>;

  realmHasContext(
    realmId: PromiseOrValue<BytesLike>,
    contextId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "realmHasContext(bytes32,bytes32)"(
    realmId: PromiseOrValue<BytesLike>,
    contextId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  realmHasFunction(
    realmId: PromiseOrValue<BytesLike>,
    functionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "realmHasFunction(bytes32,bytes32)"(
    realmId: PromiseOrValue<BytesLike>,
    functionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  realmRegister(
    requests: IRealmManagement.RealmRegisterRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "realmRegister((bytes32,bytes32,uint32,uint16,uint8,uint8,string)[])"(
    requests: IRealmManagement.RealmRegisterRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  realmUpdateActivityStatus(
    requests: IACLCommons.UpdateActivityRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "realmUpdateActivityStatus((bytes32,uint8)[])"(
    requests: IACLCommons.UpdateActivityRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  realmUpdateAdmin(
    requests: IACLCommons.UpdateAdminRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "realmUpdateAdmin((bytes32,bytes32)[])"(
    requests: IACLCommons.UpdateAdminRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  realmUpdateAgentLimit(
    requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "realmUpdateAgentLimit((bytes32,uint16)[])"(
    requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  realmUpdateAlterabilityStatus(
    requests: IACLCommons.UpdateAlterabilityRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "realmUpdateAlterabilityStatus((bytes32,uint8)[])"(
    requests: IACLCommons.UpdateAlterabilityRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  realmUpdateContextLimit(
    requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "realmUpdateContextLimit((bytes32,uint32)[])"(
    requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeModeStatus(overrides?: CallOverrides): Promise<number>;

  "safeModeStatus()"(overrides?: CallOverrides): Promise<number>;

  setAccessControlManager(
    acl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setAccessControlManager(address)"(
    acl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLocalAdmin(
    newLocalAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setLocalAdmin(address)"(
    newLocalAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSafeModeStatus(
    sstat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setSafeModeStatus(uint8)"(
    sstat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpgradabilityStatus(
    ustat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUpgradabilityStatus(uint8)"(
    ustat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subjectAddress(overrides?: CallOverrides): Promise<string>;

  "subjectAddress()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradabilityStatus(overrides?: CallOverrides): Promise<number>;

  "upgradabilityStatus()"(overrides?: CallOverrides): Promise<number>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    forceCall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address,bytes,bool)"(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    forceCall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBalance(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawBalance(address)"(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    FUNCTION_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "FUNCTION_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<string>;

    accessControlManager(overrides?: CallOverrides): Promise<string>;

    "accessControlManager()"(overrides?: CallOverrides): Promise<string>;

    contractName(overrides?: CallOverrides): Promise<string>;

    "contractName()"(overrides?: CallOverrides): Promise<string>;

    contractVersion(overrides?: CallOverrides): Promise<string>;

    "contractVersion()"(overrides?: CallOverrides): Promise<string>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

    initVersion(overrides?: CallOverrides): Promise<number>;

    "initVersion()"(overrides?: CallOverrides): Promise<number>;

    initialize(
      contractName: PromiseOrValue<string>,
      contractVersion: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,address)"(
      contractName: PromiseOrValue<string>,
      contractVersion: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    localAdmin(overrides?: CallOverrides): Promise<string>;

    "localAdmin()"(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    proxyInfo(overrides?: CallOverrides): Promise<IProxy.ProxyInfoStructOutput>;

    "proxyInfo()"(
      overrides?: CallOverrides
    ): Promise<IProxy.ProxyInfoStructOutput>;

    realmCheckAdmin(
      realmId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmCheckAdmin(bytes32,address)"(
      realmId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmCheckId(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmCheckId(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmCheckName(
      realmName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmCheckName(string)"(
      realmName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmGetContexts(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "realmGetContexts(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    realmGetInfo(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IRealmManagement.RealmInfoStructOutput>;

    "realmGetInfo(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IRealmManagement.RealmInfoStructOutput>;

    realmHasContext(
      realmId: PromiseOrValue<BytesLike>,
      contextId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmHasContext(bytes32,bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      contextId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmHasFunction(
      realmId: PromiseOrValue<BytesLike>,
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmHasFunction(bytes32,bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmRegister(
      requests: IRealmManagement.RealmRegisterRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmRegister((bytes32,bytes32,uint32,uint16,uint8,uint8,string)[])"(
      requests: IRealmManagement.RealmRegisterRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmUpdateActivityStatus(
      requests: IACLCommons.UpdateActivityRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmUpdateActivityStatus((bytes32,uint8)[])"(
      requests: IACLCommons.UpdateActivityRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmUpdateAdmin(
      requests: IACLCommons.UpdateAdminRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmUpdateAdmin((bytes32,bytes32)[])"(
      requests: IACLCommons.UpdateAdminRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmUpdateAgentLimit(
      requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmUpdateAgentLimit((bytes32,uint16)[])"(
      requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmUpdateAlterabilityStatus(
      requests: IACLCommons.UpdateAlterabilityRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmUpdateAlterabilityStatus((bytes32,uint8)[])"(
      requests: IACLCommons.UpdateAlterabilityRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    realmUpdateContextLimit(
      requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "realmUpdateContextLimit((bytes32,uint32)[])"(
      requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    safeModeStatus(overrides?: CallOverrides): Promise<number>;

    "safeModeStatus()"(overrides?: CallOverrides): Promise<number>;

    setAccessControlManager(
      acl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setAccessControlManager(address)"(
      acl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setLocalAdmin(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setLocalAdmin(address)"(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setSafeModeStatus(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setSafeModeStatus(uint8)"(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUpgradabilityStatus(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setUpgradabilityStatus(uint8)"(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    subjectAddress(overrides?: CallOverrides): Promise<string>;

    "subjectAddress()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradabilityStatus(overrides?: CallOverrides): Promise<number>;

    "upgradabilityStatus()"(overrides?: CallOverrides): Promise<number>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(address,address,address,string,string,uint16)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      subject?: PromiseOrValue<string> | null,
      name?: null,
      version?: null,
      initCount?: null
    ): InitializedEventFilter;
    Initialized(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      subject?: PromiseOrValue<string> | null,
      name?: null,
      version?: null,
      initCount?: null
    ): InitializedEventFilter;

    "ProxyAccessControlUpdated(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      acl?: null
    ): ProxyAccessControlUpdatedEventFilter;
    ProxyAccessControlUpdated(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      acl?: null
    ): ProxyAccessControlUpdatedEventFilter;

    "ProxyLocalAdminUpdated(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): ProxyLocalAdminUpdatedEventFilter;
    ProxyLocalAdminUpdated(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): ProxyLocalAdminUpdatedEventFilter;

    "ProxySafeModeUpdated(address,address,uint8)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      sstat?: null
    ): ProxySafeModeUpdatedEventFilter;
    ProxySafeModeUpdated(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      sstat?: null
    ): ProxySafeModeUpdatedEventFilter;

    "ProxyUpdatabilityUpdated(address,address,uint8)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      ustat?: null
    ): ProxyUpdatabilityUpdatedEventFilter;
    ProxyUpdatabilityUpdated(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      ustat?: null
    ): ProxyUpdatabilityUpdatedEventFilter;

    "ProxyUpgraded(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): ProxyUpgradedEventFilter;
    ProxyUpgraded(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): ProxyUpgradedEventFilter;

    "RealmActivityUpdated(address,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      acstat?: null
    ): RealmActivityUpdatedEventFilter;
    RealmActivityUpdated(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      acstat?: null
    ): RealmActivityUpdatedEventFilter;

    "RealmAdminUpdated(address,bytes32,bytes32)"(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      adminId?: PromiseOrValue<BytesLike> | null
    ): RealmAdminUpdatedEventFilter;
    RealmAdminUpdated(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      adminId?: PromiseOrValue<BytesLike> | null
    ): RealmAdminUpdatedEventFilter;

    "RealmAgentLimitUpdated(address,bytes32,uint16)"(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      agentLimit?: null
    ): RealmAgentLimitUpdatedEventFilter;
    RealmAgentLimitUpdated(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      agentLimit?: null
    ): RealmAgentLimitUpdatedEventFilter;

    "RealmAlterabilityUpdated(address,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      alstat?: null
    ): RealmAlterabilityUpdatedEventFilter;
    RealmAlterabilityUpdated(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      alstat?: null
    ): RealmAlterabilityUpdatedEventFilter;

    "RealmContextLimitUpdated(address,bytes32,uint32)"(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      contextLimit?: null
    ): RealmContextLimitUpdatedEventFilter;
    RealmContextLimitUpdated(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      contextLimit?: null
    ): RealmContextLimitUpdatedEventFilter;

    "RealmRegistered(address,bytes32,bytes32,bytes32)"(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      domainId?: PromiseOrValue<BytesLike> | null,
      adminId?: null
    ): RealmRegisteredEventFilter;
    RealmRegistered(
      sender?: PromiseOrValue<string> | null,
      realmId?: PromiseOrValue<BytesLike> | null,
      domainId?: PromiseOrValue<BytesLike> | null,
      adminId?: null
    ): RealmRegisteredEventFilter;
  };

  estimateGas: {
    CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    FUNCTION_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "FUNCTION_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    accessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControlManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    "contractName()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "contractVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    initVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "initVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      contractName: PromiseOrValue<string>,
      contractVersion: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(string,string,address)"(
      contractName: PromiseOrValue<string>,
      contractVersion: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    localAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "localAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxyInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    realmCheckAdmin(
      realmId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realmCheckAdmin(bytes32,address)"(
      realmId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realmCheckId(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realmCheckId(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realmCheckName(
      realmName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realmCheckName(string)"(
      realmName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realmGetContexts(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realmGetContexts(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realmGetInfo(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realmGetInfo(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realmHasContext(
      realmId: PromiseOrValue<BytesLike>,
      contextId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realmHasContext(bytes32,bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      contextId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realmHasFunction(
      realmId: PromiseOrValue<BytesLike>,
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realmHasFunction(bytes32,bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realmRegister(
      requests: IRealmManagement.RealmRegisterRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "realmRegister((bytes32,bytes32,uint32,uint16,uint8,uint8,string)[])"(
      requests: IRealmManagement.RealmRegisterRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    realmUpdateActivityStatus(
      requests: IACLCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "realmUpdateActivityStatus((bytes32,uint8)[])"(
      requests: IACLCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    realmUpdateAdmin(
      requests: IACLCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "realmUpdateAdmin((bytes32,bytes32)[])"(
      requests: IACLCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    realmUpdateAgentLimit(
      requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "realmUpdateAgentLimit((bytes32,uint16)[])"(
      requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    realmUpdateAlterabilityStatus(
      requests: IACLCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "realmUpdateAlterabilityStatus((bytes32,uint8)[])"(
      requests: IACLCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    realmUpdateContextLimit(
      requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "realmUpdateContextLimit((bytes32,uint32)[])"(
      requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeModeStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "safeModeStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAccessControlManager(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setAccessControlManager(address)"(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLocalAdmin(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setLocalAdmin(address)"(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSafeModeStatus(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setSafeModeStatus(uint8)"(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpgradabilityStatus(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUpgradabilityStatus(uint8)"(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subjectAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "subjectAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradabilityStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradabilityStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CTX_MESSAGE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FUNCTION_MESSAGE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FUNCTION_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PREDICT_CTX_MESSAGE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accessControlManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accessControlManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      contractName: PromiseOrValue<string>,
      contractVersion: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,address)"(
      contractName: PromiseOrValue<string>,
      contractVersion: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    localAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "localAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxyInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    realmCheckAdmin(
      realmId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realmCheckAdmin(bytes32,address)"(
      realmId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realmCheckId(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realmCheckId(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realmCheckName(
      realmName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realmCheckName(string)"(
      realmName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realmGetContexts(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realmGetContexts(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realmGetInfo(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realmGetInfo(bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realmHasContext(
      realmId: PromiseOrValue<BytesLike>,
      contextId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realmHasContext(bytes32,bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      contextId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realmHasFunction(
      realmId: PromiseOrValue<BytesLike>,
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realmHasFunction(bytes32,bytes32)"(
      realmId: PromiseOrValue<BytesLike>,
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realmRegister(
      requests: IRealmManagement.RealmRegisterRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "realmRegister((bytes32,bytes32,uint32,uint16,uint8,uint8,string)[])"(
      requests: IRealmManagement.RealmRegisterRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    realmUpdateActivityStatus(
      requests: IACLCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "realmUpdateActivityStatus((bytes32,uint8)[])"(
      requests: IACLCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    realmUpdateAdmin(
      requests: IACLCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "realmUpdateAdmin((bytes32,bytes32)[])"(
      requests: IACLCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    realmUpdateAgentLimit(
      requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "realmUpdateAgentLimit((bytes32,uint16)[])"(
      requests: IACLCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    realmUpdateAlterabilityStatus(
      requests: IACLCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "realmUpdateAlterabilityStatus((bytes32,uint8)[])"(
      requests: IACLCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    realmUpdateContextLimit(
      requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "realmUpdateContextLimit((bytes32,uint32)[])"(
      requests: IRealmManagement.RealmUpdateContextLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeModeStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeModeStatus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAccessControlManager(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setAccessControlManager(address)"(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLocalAdmin(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setLocalAdmin(address)"(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSafeModeStatus(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setSafeModeStatus(uint8)"(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpgradabilityStatus(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUpgradabilityStatus(uint8)"(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subjectAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "subjectAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradabilityStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "upgradabilityStatus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
