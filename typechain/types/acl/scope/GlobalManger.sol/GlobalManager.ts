/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IGlobalManagement {
  export type GlobalInfoStruct = {
    id: PromiseOrValue<BytesLike>;
    adminId: PromiseOrValue<BytesLike>;
    domainLimit: PromiseOrValue<BigNumberish>;
    agentLimit: PromiseOrValue<BigNumberish>;
    referredByAgent: PromiseOrValue<BigNumberish>;
    referredByPolicy: PromiseOrValue<BigNumberish>;
    adminType: PromiseOrValue<BigNumberish>;
    acstat: PromiseOrValue<BigNumberish>;
    alstate: PromiseOrValue<BigNumberish>;
  };

  export type GlobalInfoStructOutput = [
    string,
    string,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ] & {
    id: string;
    adminId: string;
    domainLimit: number;
    agentLimit: number;
    referredByAgent: number;
    referredByPolicy: number;
    adminType: number;
    acstat: number;
    alstate: number;
  };
}

export declare namespace IProxy {
  export type ProxyInfoStruct = {
    contextId: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
    version: PromiseOrValue<string>;
    acl: PromiseOrValue<string>;
    subject: PromiseOrValue<string>;
    localAdmin: PromiseOrValue<string>;
    initVersion: PromiseOrValue<BigNumberish>;
    sstat: PromiseOrValue<BigNumberish>;
    ustat: PromiseOrValue<BigNumberish>;
  };

  export type ProxyInfoStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    number,
    number,
    number
  ] & {
    contextId: string;
    name: string;
    version: string;
    acl: string;
    subject: string;
    localAdmin: string;
    initVersion: number;
    sstat: number;
    ustat: number;
  };
}

export interface GlobalManagerInterface extends utils.Interface {
  functions: {
    "CTX_MESSAGE_TYPEHASH()": FunctionFragment;
    "FUNCTION_MESSAGE_TYPEHASH()": FunctionFragment;
    "PREDICT_CTX_MESSAGE_TYPEHASH()": FunctionFragment;
    "TYPE_HASH()": FunctionFragment;
    "accessControlManager()": FunctionFragment;
    "contractName()": FunctionFragment;
    "contractVersion()": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "globalCheckAdmin(address)": FunctionFragment;
    "globalGetDomains()": FunctionFragment;
    "globalGetInfo()": FunctionFragment;
    "globalUpdateActivityStatus(uint8)": FunctionFragment;
    "globalUpdateAdmin(bytes32)": FunctionFragment;
    "globalUpdateAgentLimit(uint16)": FunctionFragment;
    "globalUpdateAlterabilityStatus(uint8)": FunctionFragment;
    "globalUpdateDomainLimit(uint16)": FunctionFragment;
    "initVersion()": FunctionFragment;
    "localAdmin()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "proxyInfo()": FunctionFragment;
    "safeModeStatus()": FunctionFragment;
    "setAccessControlManager(address)": FunctionFragment;
    "setLocalAdmin(address)": FunctionFragment;
    "setSafeModeStatus(uint8)": FunctionFragment;
    "setUpgradabilityStatus(uint8)": FunctionFragment;
    "subjectAddress()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradabilityStatus()": FunctionFragment;
    "upgradeTo(address,bytes,bool)": FunctionFragment;
    "withdrawBalance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CTX_MESSAGE_TYPEHASH"
      | "CTX_MESSAGE_TYPEHASH()"
      | "FUNCTION_MESSAGE_TYPEHASH"
      | "FUNCTION_MESSAGE_TYPEHASH()"
      | "PREDICT_CTX_MESSAGE_TYPEHASH"
      | "PREDICT_CTX_MESSAGE_TYPEHASH()"
      | "TYPE_HASH"
      | "TYPE_HASH()"
      | "accessControlManager"
      | "accessControlManager()"
      | "contractName"
      | "contractName()"
      | "contractVersion"
      | "contractVersion()"
      | "domainSeparator"
      | "domainSeparator()"
      | "globalCheckAdmin"
      | "globalCheckAdmin(address)"
      | "globalGetDomains"
      | "globalGetDomains()"
      | "globalGetInfo"
      | "globalGetInfo()"
      | "globalUpdateActivityStatus"
      | "globalUpdateActivityStatus(uint8)"
      | "globalUpdateAdmin"
      | "globalUpdateAdmin(bytes32)"
      | "globalUpdateAgentLimit"
      | "globalUpdateAgentLimit(uint16)"
      | "globalUpdateAlterabilityStatus"
      | "globalUpdateAlterabilityStatus(uint8)"
      | "globalUpdateDomainLimit"
      | "globalUpdateDomainLimit(uint16)"
      | "initVersion"
      | "initVersion()"
      | "localAdmin"
      | "localAdmin()"
      | "proxiableUUID"
      | "proxiableUUID()"
      | "proxyInfo"
      | "proxyInfo()"
      | "safeModeStatus"
      | "safeModeStatus()"
      | "setAccessControlManager"
      | "setAccessControlManager(address)"
      | "setLocalAdmin"
      | "setLocalAdmin(address)"
      | "setSafeModeStatus"
      | "setSafeModeStatus(uint8)"
      | "setUpgradabilityStatus"
      | "setUpgradabilityStatus(uint8)"
      | "subjectAddress"
      | "subjectAddress()"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "upgradabilityStatus"
      | "upgradabilityStatus()"
      | "upgradeTo"
      | "upgradeTo(address,bytes,bool)"
      | "withdrawBalance"
      | "withdrawBalance(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CTX_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CTX_MESSAGE_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUNCTION_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUNCTION_MESSAGE_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TYPE_HASH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TYPE_HASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControlManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessControlManager()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalCheckAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalCheckAdmin(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalGetDomains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalGetDomains()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalGetInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalGetInfo()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateActivityStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateActivityStatus(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateAdmin(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateAgentLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateAgentLimit(uint16)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateAlterabilityStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateAlterabilityStatus(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateDomainLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalUpdateDomainLimit(uint16)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localAdmin()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proxyInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyInfo()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeModeStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeModeStatus()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessControlManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessControlManager(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLocalAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLocalAdmin(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeModeStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeModeStatus(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradabilityStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradabilityStatus(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subjectAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subjectAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradabilityStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradabilityStatus()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo(address,bytes,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CTX_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CTX_MESSAGE_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUNCTION_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUNCTION_MESSAGE_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TYPE_HASH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TYPE_HASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControlManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accessControlManager()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalCheckAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalCheckAdmin(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalGetDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalGetDomains()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalGetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalGetInfo()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateActivityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateActivityStatus(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateAdmin(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateAgentLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateAgentLimit(uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateAlterabilityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateAlterabilityStatus(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateDomainLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalUpdateDomainLimit(uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "localAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localAdmin()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyInfo()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeModeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeModeStatus()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessControlManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessControlManager(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLocalAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLocalAdmin(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeModeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeModeStatus(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradabilityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradabilityStatus(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradabilityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradabilityStatus()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTo(address,bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance(address)",
    data: BytesLike
  ): Result;

  events: {
    "AgentReferredByPolicyUpdated(address,bytes32,bytes32,uint8)": EventFragment;
    "AgentReferredByScopeUpdated(address,bytes32,bytes32,uint8)": EventFragment;
    "GlobalActivityUpdated(address,uint8)": EventFragment;
    "GlobalAdminUpdated(address,bytes32,uint8)": EventFragment;
    "GlobalAgentLimitUpdated(address,uint16)": EventFragment;
    "GlobalAlterabilityUpdated(address,uint8)": EventFragment;
    "GlobalDomainLimitUpdated(address,uint16)": EventFragment;
    "Initialized(address,address,address,string,string,uint16)": EventFragment;
    "ProxyAccessControlUpdated(address,address,address)": EventFragment;
    "ProxyLocalAdminUpdated(address,address,address)": EventFragment;
    "ProxySafeModeUpdated(address,address,uint8)": EventFragment;
    "ProxyUpdatabilityUpdated(address,address,uint8)": EventFragment;
    "ProxyUpgraded(address,address,address)": EventFragment;
    "ScopeReferredByAgentUpdated(address,bytes32,bytes32,uint8)": EventFragment;
    "ScopeReferredByPolicyUpdated(address,bytes32,bytes32,uint8)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AgentReferredByPolicyUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AgentReferredByPolicyUpdated(address,bytes32,bytes32,uint8)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AgentReferredByScopeUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AgentReferredByScopeUpdated(address,bytes32,bytes32,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalActivityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalActivityUpdated(address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalAdminUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalAdminUpdated(address,bytes32,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalAgentLimitUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalAgentLimitUpdated(address,uint16)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalAlterabilityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalAlterabilityUpdated(address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalDomainLimitUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GlobalDomainLimitUpdated(address,uint16)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Initialized(address,address,address,string,string,uint16)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyAccessControlUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxyAccessControlUpdated(address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyLocalAdminUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxyLocalAdminUpdated(address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxySafeModeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxySafeModeUpdated(address,address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyUpdatabilityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxyUpdatabilityUpdated(address,address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxyUpgraded(address,address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScopeReferredByAgentUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScopeReferredByAgentUpdated(address,bytes32,bytes32,uint8)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScopeReferredByPolicyUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScopeReferredByPolicyUpdated(address,bytes32,bytes32,uint8)"
  ): EventFragment;
}

export interface AgentReferredByPolicyUpdatedEventObject {
  sender: string;
  agentId: string;
  policyId: string;
  action: number;
}
export type AgentReferredByPolicyUpdatedEvent = TypedEvent<
  [string, string, string, number],
  AgentReferredByPolicyUpdatedEventObject
>;

export type AgentReferredByPolicyUpdatedEventFilter =
  TypedEventFilter<AgentReferredByPolicyUpdatedEvent>;

export interface AgentReferredByScopeUpdatedEventObject {
  sender: string;
  agentId: string;
  scopeId: string;
  action: number;
}
export type AgentReferredByScopeUpdatedEvent = TypedEvent<
  [string, string, string, number],
  AgentReferredByScopeUpdatedEventObject
>;

export type AgentReferredByScopeUpdatedEventFilter =
  TypedEventFilter<AgentReferredByScopeUpdatedEvent>;

export interface GlobalActivityUpdatedEventObject {
  sender: string;
  acstat: number;
}
export type GlobalActivityUpdatedEvent = TypedEvent<
  [string, number],
  GlobalActivityUpdatedEventObject
>;

export type GlobalActivityUpdatedEventFilter =
  TypedEventFilter<GlobalActivityUpdatedEvent>;

export interface GlobalAdminUpdatedEventObject {
  sender: string;
  adminId: string;
  adminType: number;
}
export type GlobalAdminUpdatedEvent = TypedEvent<
  [string, string, number],
  GlobalAdminUpdatedEventObject
>;

export type GlobalAdminUpdatedEventFilter =
  TypedEventFilter<GlobalAdminUpdatedEvent>;

export interface GlobalAgentLimitUpdatedEventObject {
  sender: string;
  agentLimit: number;
}
export type GlobalAgentLimitUpdatedEvent = TypedEvent<
  [string, number],
  GlobalAgentLimitUpdatedEventObject
>;

export type GlobalAgentLimitUpdatedEventFilter =
  TypedEventFilter<GlobalAgentLimitUpdatedEvent>;

export interface GlobalAlterabilityUpdatedEventObject {
  sender: string;
  alstat: number;
}
export type GlobalAlterabilityUpdatedEvent = TypedEvent<
  [string, number],
  GlobalAlterabilityUpdatedEventObject
>;

export type GlobalAlterabilityUpdatedEventFilter =
  TypedEventFilter<GlobalAlterabilityUpdatedEvent>;

export interface GlobalDomainLimitUpdatedEventObject {
  sender: string;
  domainLimit: number;
}
export type GlobalDomainLimitUpdatedEvent = TypedEvent<
  [string, number],
  GlobalDomainLimitUpdatedEventObject
>;

export type GlobalDomainLimitUpdatedEventFilter =
  TypedEventFilter<GlobalDomainLimitUpdatedEvent>;

export interface InitializedEventObject {
  sender: string;
  proxy: string;
  subject: string;
  name: string;
  version: string;
  initCount: number;
}
export type InitializedEvent = TypedEvent<
  [string, string, string, string, string, number],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ProxyAccessControlUpdatedEventObject {
  sender: string;
  proxy: string;
  acl: string;
}
export type ProxyAccessControlUpdatedEvent = TypedEvent<
  [string, string, string],
  ProxyAccessControlUpdatedEventObject
>;

export type ProxyAccessControlUpdatedEventFilter =
  TypedEventFilter<ProxyAccessControlUpdatedEvent>;

export interface ProxyLocalAdminUpdatedEventObject {
  sender: string;
  proxy: string;
  newAdmin: string;
}
export type ProxyLocalAdminUpdatedEvent = TypedEvent<
  [string, string, string],
  ProxyLocalAdminUpdatedEventObject
>;

export type ProxyLocalAdminUpdatedEventFilter =
  TypedEventFilter<ProxyLocalAdminUpdatedEvent>;

export interface ProxySafeModeUpdatedEventObject {
  sender: string;
  proxy: string;
  sstat: number;
}
export type ProxySafeModeUpdatedEvent = TypedEvent<
  [string, string, number],
  ProxySafeModeUpdatedEventObject
>;

export type ProxySafeModeUpdatedEventFilter =
  TypedEventFilter<ProxySafeModeUpdatedEvent>;

export interface ProxyUpdatabilityUpdatedEventObject {
  sender: string;
  proxy: string;
  ustat: number;
}
export type ProxyUpdatabilityUpdatedEvent = TypedEvent<
  [string, string, number],
  ProxyUpdatabilityUpdatedEventObject
>;

export type ProxyUpdatabilityUpdatedEventFilter =
  TypedEventFilter<ProxyUpdatabilityUpdatedEvent>;

export interface ProxyUpgradedEventObject {
  sender: string;
  proxy: string;
  newImplementation: string;
}
export type ProxyUpgradedEvent = TypedEvent<
  [string, string, string],
  ProxyUpgradedEventObject
>;

export type ProxyUpgradedEventFilter = TypedEventFilter<ProxyUpgradedEvent>;

export interface ScopeReferredByAgentUpdatedEventObject {
  sender: string;
  scopeId: string;
  agentId: string;
  action: number;
}
export type ScopeReferredByAgentUpdatedEvent = TypedEvent<
  [string, string, string, number],
  ScopeReferredByAgentUpdatedEventObject
>;

export type ScopeReferredByAgentUpdatedEventFilter =
  TypedEventFilter<ScopeReferredByAgentUpdatedEvent>;

export interface ScopeReferredByPolicyUpdatedEventObject {
  sender: string;
  scopeId: string;
  policyId: string;
  action: number;
}
export type ScopeReferredByPolicyUpdatedEvent = TypedEvent<
  [string, string, string, number],
  ScopeReferredByPolicyUpdatedEventObject
>;

export type ScopeReferredByPolicyUpdatedEventFilter =
  TypedEventFilter<ScopeReferredByPolicyUpdatedEvent>;

export interface GlobalManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlobalManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    FUNCTION_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "FUNCTION_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<[string]>;

    accessControlManager(overrides?: CallOverrides): Promise<[string]>;

    "accessControlManager()"(overrides?: CallOverrides): Promise<[string]>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    "contractName()"(overrides?: CallOverrides): Promise<[string]>;

    contractVersion(overrides?: CallOverrides): Promise<[string]>;

    "contractVersion()"(overrides?: CallOverrides): Promise<[string]>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<[string]>;

    globalCheckAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "globalCheckAdmin(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    globalGetDomains(overrides?: CallOverrides): Promise<[string[]]>;

    "globalGetDomains()"(overrides?: CallOverrides): Promise<[string[]]>;

    globalGetInfo(
      overrides?: CallOverrides
    ): Promise<[IGlobalManagement.GlobalInfoStructOutput]>;

    "globalGetInfo()"(
      overrides?: CallOverrides
    ): Promise<[IGlobalManagement.GlobalInfoStructOutput]>;

    globalUpdateActivityStatus(
      acstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "globalUpdateActivityStatus(uint8)"(
      acstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalUpdateAdmin(
      newAdminId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "globalUpdateAdmin(bytes32)"(
      newAdminId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalUpdateAgentLimit(
      agentLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "globalUpdateAgentLimit(uint16)"(
      agentLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalUpdateAlterabilityStatus(
      alstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "globalUpdateAlterabilityStatus(uint8)"(
      alstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalUpdateDomainLimit(
      domainLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "globalUpdateDomainLimit(uint16)"(
      domainLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initVersion(overrides?: CallOverrides): Promise<[number]>;

    "initVersion()"(overrides?: CallOverrides): Promise<[number]>;

    localAdmin(overrides?: CallOverrides): Promise<[string]>;

    "localAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    proxyInfo(
      overrides?: CallOverrides
    ): Promise<[IProxy.ProxyInfoStructOutput]>;

    "proxyInfo()"(
      overrides?: CallOverrides
    ): Promise<[IProxy.ProxyInfoStructOutput]>;

    safeModeStatus(overrides?: CallOverrides): Promise<[number]>;

    "safeModeStatus()"(overrides?: CallOverrides): Promise<[number]>;

    setAccessControlManager(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setAccessControlManager(address)"(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLocalAdmin(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setLocalAdmin(address)"(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSafeModeStatus(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setSafeModeStatus(uint8)"(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpgradabilityStatus(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUpgradabilityStatus(uint8)"(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subjectAddress(overrides?: CallOverrides): Promise<[string]>;

    "subjectAddress()"(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradabilityStatus(overrides?: CallOverrides): Promise<[number]>;

    "upgradabilityStatus()"(overrides?: CallOverrides): Promise<[number]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  FUNCTION_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "FUNCTION_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PREDICT_CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  "TYPE_HASH()"(overrides?: CallOverrides): Promise<string>;

  accessControlManager(overrides?: CallOverrides): Promise<string>;

  "accessControlManager()"(overrides?: CallOverrides): Promise<string>;

  contractName(overrides?: CallOverrides): Promise<string>;

  "contractName()"(overrides?: CallOverrides): Promise<string>;

  contractVersion(overrides?: CallOverrides): Promise<string>;

  "contractVersion()"(overrides?: CallOverrides): Promise<string>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

  globalCheckAdmin(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "globalCheckAdmin(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  globalGetDomains(overrides?: CallOverrides): Promise<string[]>;

  "globalGetDomains()"(overrides?: CallOverrides): Promise<string[]>;

  globalGetInfo(
    overrides?: CallOverrides
  ): Promise<IGlobalManagement.GlobalInfoStructOutput>;

  "globalGetInfo()"(
    overrides?: CallOverrides
  ): Promise<IGlobalManagement.GlobalInfoStructOutput>;

  globalUpdateActivityStatus(
    acstat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "globalUpdateActivityStatus(uint8)"(
    acstat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalUpdateAdmin(
    newAdminId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "globalUpdateAdmin(bytes32)"(
    newAdminId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalUpdateAgentLimit(
    agentLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "globalUpdateAgentLimit(uint16)"(
    agentLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalUpdateAlterabilityStatus(
    alstat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "globalUpdateAlterabilityStatus(uint8)"(
    alstat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalUpdateDomainLimit(
    domainLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "globalUpdateDomainLimit(uint16)"(
    domainLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initVersion(overrides?: CallOverrides): Promise<number>;

  "initVersion()"(overrides?: CallOverrides): Promise<number>;

  localAdmin(overrides?: CallOverrides): Promise<string>;

  "localAdmin()"(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  proxyInfo(overrides?: CallOverrides): Promise<IProxy.ProxyInfoStructOutput>;

  "proxyInfo()"(
    overrides?: CallOverrides
  ): Promise<IProxy.ProxyInfoStructOutput>;

  safeModeStatus(overrides?: CallOverrides): Promise<number>;

  "safeModeStatus()"(overrides?: CallOverrides): Promise<number>;

  setAccessControlManager(
    acl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setAccessControlManager(address)"(
    acl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLocalAdmin(
    newLocalAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setLocalAdmin(address)"(
    newLocalAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSafeModeStatus(
    sstat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setSafeModeStatus(uint8)"(
    sstat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpgradabilityStatus(
    ustat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUpgradabilityStatus(uint8)"(
    ustat: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subjectAddress(overrides?: CallOverrides): Promise<string>;

  "subjectAddress()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradabilityStatus(overrides?: CallOverrides): Promise<number>;

  "upgradabilityStatus()"(overrides?: CallOverrides): Promise<number>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    forceCall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address,bytes,bool)"(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    forceCall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBalance(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawBalance(address)"(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    FUNCTION_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "FUNCTION_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<string>;

    accessControlManager(overrides?: CallOverrides): Promise<string>;

    "accessControlManager()"(overrides?: CallOverrides): Promise<string>;

    contractName(overrides?: CallOverrides): Promise<string>;

    "contractName()"(overrides?: CallOverrides): Promise<string>;

    contractVersion(overrides?: CallOverrides): Promise<string>;

    "contractVersion()"(overrides?: CallOverrides): Promise<string>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

    globalCheckAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "globalCheckAdmin(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    globalGetDomains(overrides?: CallOverrides): Promise<string[]>;

    "globalGetDomains()"(overrides?: CallOverrides): Promise<string[]>;

    globalGetInfo(
      overrides?: CallOverrides
    ): Promise<IGlobalManagement.GlobalInfoStructOutput>;

    "globalGetInfo()"(
      overrides?: CallOverrides
    ): Promise<IGlobalManagement.GlobalInfoStructOutput>;

    globalUpdateActivityStatus(
      acstat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "globalUpdateActivityStatus(uint8)"(
      acstat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    globalUpdateAdmin(
      newAdminId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "globalUpdateAdmin(bytes32)"(
      newAdminId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    globalUpdateAgentLimit(
      agentLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "globalUpdateAgentLimit(uint16)"(
      agentLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    globalUpdateAlterabilityStatus(
      alstat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "globalUpdateAlterabilityStatus(uint8)"(
      alstat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    globalUpdateDomainLimit(
      domainLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "globalUpdateDomainLimit(uint16)"(
      domainLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initVersion(overrides?: CallOverrides): Promise<number>;

    "initVersion()"(overrides?: CallOverrides): Promise<number>;

    localAdmin(overrides?: CallOverrides): Promise<string>;

    "localAdmin()"(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    proxyInfo(overrides?: CallOverrides): Promise<IProxy.ProxyInfoStructOutput>;

    "proxyInfo()"(
      overrides?: CallOverrides
    ): Promise<IProxy.ProxyInfoStructOutput>;

    safeModeStatus(overrides?: CallOverrides): Promise<number>;

    "safeModeStatus()"(overrides?: CallOverrides): Promise<number>;

    setAccessControlManager(
      acl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setAccessControlManager(address)"(
      acl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setLocalAdmin(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setLocalAdmin(address)"(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setSafeModeStatus(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setSafeModeStatus(uint8)"(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUpgradabilityStatus(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setUpgradabilityStatus(uint8)"(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    subjectAddress(overrides?: CallOverrides): Promise<string>;

    "subjectAddress()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradabilityStatus(overrides?: CallOverrides): Promise<number>;

    "upgradabilityStatus()"(overrides?: CallOverrides): Promise<number>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AgentReferredByPolicyUpdated(address,bytes32,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      policyId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): AgentReferredByPolicyUpdatedEventFilter;
    AgentReferredByPolicyUpdated(
      sender?: PromiseOrValue<string> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      policyId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): AgentReferredByPolicyUpdatedEventFilter;

    "AgentReferredByScopeUpdated(address,bytes32,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): AgentReferredByScopeUpdatedEventFilter;
    AgentReferredByScopeUpdated(
      sender?: PromiseOrValue<string> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): AgentReferredByScopeUpdatedEventFilter;

    "GlobalActivityUpdated(address,uint8)"(
      sender?: PromiseOrValue<string> | null,
      acstat?: null
    ): GlobalActivityUpdatedEventFilter;
    GlobalActivityUpdated(
      sender?: PromiseOrValue<string> | null,
      acstat?: null
    ): GlobalActivityUpdatedEventFilter;

    "GlobalAdminUpdated(address,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      adminId?: PromiseOrValue<BytesLike> | null,
      adminType?: null
    ): GlobalAdminUpdatedEventFilter;
    GlobalAdminUpdated(
      sender?: PromiseOrValue<string> | null,
      adminId?: PromiseOrValue<BytesLike> | null,
      adminType?: null
    ): GlobalAdminUpdatedEventFilter;

    "GlobalAgentLimitUpdated(address,uint16)"(
      sender?: PromiseOrValue<string> | null,
      agentLimit?: null
    ): GlobalAgentLimitUpdatedEventFilter;
    GlobalAgentLimitUpdated(
      sender?: PromiseOrValue<string> | null,
      agentLimit?: null
    ): GlobalAgentLimitUpdatedEventFilter;

    "GlobalAlterabilityUpdated(address,uint8)"(
      sender?: PromiseOrValue<string> | null,
      alstat?: null
    ): GlobalAlterabilityUpdatedEventFilter;
    GlobalAlterabilityUpdated(
      sender?: PromiseOrValue<string> | null,
      alstat?: null
    ): GlobalAlterabilityUpdatedEventFilter;

    "GlobalDomainLimitUpdated(address,uint16)"(
      sender?: PromiseOrValue<string> | null,
      domainLimit?: null
    ): GlobalDomainLimitUpdatedEventFilter;
    GlobalDomainLimitUpdated(
      sender?: PromiseOrValue<string> | null,
      domainLimit?: null
    ): GlobalDomainLimitUpdatedEventFilter;

    "Initialized(address,address,address,string,string,uint16)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      subject?: PromiseOrValue<string> | null,
      name?: null,
      version?: null,
      initCount?: null
    ): InitializedEventFilter;
    Initialized(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      subject?: PromiseOrValue<string> | null,
      name?: null,
      version?: null,
      initCount?: null
    ): InitializedEventFilter;

    "ProxyAccessControlUpdated(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      acl?: null
    ): ProxyAccessControlUpdatedEventFilter;
    ProxyAccessControlUpdated(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      acl?: null
    ): ProxyAccessControlUpdatedEventFilter;

    "ProxyLocalAdminUpdated(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): ProxyLocalAdminUpdatedEventFilter;
    ProxyLocalAdminUpdated(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): ProxyLocalAdminUpdatedEventFilter;

    "ProxySafeModeUpdated(address,address,uint8)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      sstat?: null
    ): ProxySafeModeUpdatedEventFilter;
    ProxySafeModeUpdated(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      sstat?: null
    ): ProxySafeModeUpdatedEventFilter;

    "ProxyUpdatabilityUpdated(address,address,uint8)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      ustat?: null
    ): ProxyUpdatabilityUpdatedEventFilter;
    ProxyUpdatabilityUpdated(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      ustat?: null
    ): ProxyUpdatabilityUpdatedEventFilter;

    "ProxyUpgraded(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): ProxyUpgradedEventFilter;
    ProxyUpgraded(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): ProxyUpgradedEventFilter;

    "ScopeReferredByAgentUpdated(address,bytes32,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): ScopeReferredByAgentUpdatedEventFilter;
    ScopeReferredByAgentUpdated(
      sender?: PromiseOrValue<string> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): ScopeReferredByAgentUpdatedEventFilter;

    "ScopeReferredByPolicyUpdated(address,bytes32,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      policyId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): ScopeReferredByPolicyUpdatedEventFilter;
    ScopeReferredByPolicyUpdated(
      sender?: PromiseOrValue<string> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      policyId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): ScopeReferredByPolicyUpdatedEventFilter;
  };

  estimateGas: {
    CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    FUNCTION_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "FUNCTION_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    accessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    "accessControlManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    "contractName()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "contractVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    globalCheckAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "globalCheckAdmin(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalGetDomains(overrides?: CallOverrides): Promise<BigNumber>;

    "globalGetDomains()"(overrides?: CallOverrides): Promise<BigNumber>;

    globalGetInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "globalGetInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    globalUpdateActivityStatus(
      acstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "globalUpdateActivityStatus(uint8)"(
      acstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalUpdateAdmin(
      newAdminId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "globalUpdateAdmin(bytes32)"(
      newAdminId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalUpdateAgentLimit(
      agentLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "globalUpdateAgentLimit(uint16)"(
      agentLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalUpdateAlterabilityStatus(
      alstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "globalUpdateAlterabilityStatus(uint8)"(
      alstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalUpdateDomainLimit(
      domainLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "globalUpdateDomainLimit(uint16)"(
      domainLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "initVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    localAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "localAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxyInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "proxyInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    safeModeStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "safeModeStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAccessControlManager(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setAccessControlManager(address)"(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLocalAdmin(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setLocalAdmin(address)"(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSafeModeStatus(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setSafeModeStatus(uint8)"(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpgradabilityStatus(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUpgradabilityStatus(uint8)"(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subjectAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "subjectAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradabilityStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradabilityStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CTX_MESSAGE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FUNCTION_MESSAGE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FUNCTION_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PREDICT_CTX_MESSAGE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accessControlManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accessControlManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalCheckAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "globalCheckAdmin(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalGetDomains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "globalGetDomains()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalGetInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "globalGetInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalUpdateActivityStatus(
      acstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "globalUpdateActivityStatus(uint8)"(
      acstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalUpdateAdmin(
      newAdminId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "globalUpdateAdmin(bytes32)"(
      newAdminId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalUpdateAgentLimit(
      agentLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "globalUpdateAgentLimit(uint16)"(
      agentLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalUpdateAlterabilityStatus(
      alstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "globalUpdateAlterabilityStatus(uint8)"(
      alstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalUpdateDomainLimit(
      domainLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "globalUpdateDomainLimit(uint16)"(
      domainLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "localAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxyInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeModeStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeModeStatus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAccessControlManager(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setAccessControlManager(address)"(
      acl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLocalAdmin(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setLocalAdmin(address)"(
      newLocalAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSafeModeStatus(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setSafeModeStatus(uint8)"(
      sstat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpgradabilityStatus(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUpgradabilityStatus(uint8)"(
      ustat: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subjectAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "subjectAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradabilityStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "upgradabilityStatus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
