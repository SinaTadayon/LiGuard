/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IFunctionManagement {
  export type FunctionInfoStruct = {
    adminId: PromiseOrValue<BytesLike>;
    agentId: PromiseOrValue<BytesLike>;
    contextId: PromiseOrValue<BytesLike>;
    selector: PromiseOrValue<BytesLike>;
    agentLimit: PromiseOrValue<BigNumberish>;
    referredByAgent: PromiseOrValue<BigNumberish>;
    referredByPolicy: PromiseOrValue<BigNumberish>;
    acstat: PromiseOrValue<BigNumberish>;
    alstat: PromiseOrValue<BigNumberish>;
    adminType: PromiseOrValue<BigNumberish>;
    agentType: PromiseOrValue<BigNumberish>;
    policyCode: PromiseOrValue<BigNumberish>;
  };

  export type FunctionInfoStructOutput = [
    string,
    string,
    string,
    string,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
  ] & {
    adminId: string;
    agentId: string;
    contextId: string;
    selector: string;
    agentLimit: number;
    referredByAgent: number;
    referredByPolicy: number;
    acstat: number;
    alstat: number;
    adminType: number;
    agentType: number;
    policyCode: number;
  };

  export type FunctionUpdateAgentRequestStruct = {
    functionId: PromiseOrValue<BytesLike>;
    agentId: PromiseOrValue<BytesLike>;
  };

  export type FunctionUpdateAgentRequestStructOutput = [string, string] & {
    functionId: string;
    agentId: string;
  };

  export type FunctionUpdatePolicyRequestStruct = {
    functionId: PromiseOrValue<BytesLike>;
    policyCode: PromiseOrValue<BigNumberish>;
  };

  export type FunctionUpdatePolicyRequestStructOutput = [string, number] & {
    functionId: string;
    policyCode: number;
  };
}

export declare namespace IAclCommons {
  export type UpdateActivityRequestStruct = {
    id: PromiseOrValue<BytesLike>;
    acstat: PromiseOrValue<BigNumberish>;
  };

  export type UpdateActivityRequestStructOutput = [string, number] & {
    id: string;
    acstat: number;
  };

  export type UpdateAdminRequestStruct = {
    id: PromiseOrValue<BytesLike>;
    adminId: PromiseOrValue<BytesLike>;
  };

  export type UpdateAdminRequestStructOutput = [string, string] & {
    id: string;
    adminId: string;
  };

  export type ScopeUpdateAgentLimitRequestStruct = {
    scopeId: PromiseOrValue<BytesLike>;
    agentLimit: PromiseOrValue<BigNumberish>;
  };

  export type ScopeUpdateAgentLimitRequestStructOutput = [string, number] & {
    scopeId: string;
    agentLimit: number;
  };

  export type UpdateAlterabilityRequestStruct = {
    id: PromiseOrValue<BytesLike>;
    alstat: PromiseOrValue<BigNumberish>;
  };

  export type UpdateAlterabilityRequestStructOutput = [string, number] & {
    id: string;
    alstat: number;
  };
}

export interface FunctionManagerInterface extends utils.Interface {
  functions: {
    "CTX_MESSAGE_TYPEHASH()": FunctionFragment;
    "LIVELY_VERSE_ADMIN_TYPE_ID()": FunctionFragment;
    "LIVELY_VERSE_AGENT_MASTER_TYPE_ID()": FunctionFragment;
    "LIVELY_VERSE_ANONYMOUSE_TYPE_ID()": FunctionFragment;
    "LIVELY_VERSE_ANY_TYPE_ID()": FunctionFragment;
    "LIVELY_VERSE_POLICY_MASTER_TYPE_ID()": FunctionFragment;
    "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID()": FunctionFragment;
    "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID()": FunctionFragment;
    "PREDICT_CTX_MESSAGE_TYPEHASH()": FunctionFragment;
    "TYPE_HASH()": FunctionFragment;
    "functionCheckAdmin(bytes32,address)": FunctionFragment;
    "functionCheckAgent(bytes32,address)": FunctionFragment;
    "functionCheckId(bytes32)": FunctionFragment;
    "functionCheckSelector(address,bytes4)": FunctionFragment;
    "functionDeleteActivity(bytes32[])": FunctionFragment;
    "functionGetInfo(bytes32)": FunctionFragment;
    "functionUpdateActivityStatus((bytes32,uint8)[])": FunctionFragment;
    "functionUpdateAdmin((bytes32,bytes32)[])": FunctionFragment;
    "functionUpdateAgent((bytes32,bytes32)[])": FunctionFragment;
    "functionUpdateAgentLimit((bytes32,uint16)[])": FunctionFragment;
    "functionUpdateAlterabilityStatus((bytes32,uint8)[])": FunctionFragment;
    "functionUpdatePolicy((bytes32,uint8)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CTX_MESSAGE_TYPEHASH"
      | "CTX_MESSAGE_TYPEHASH()"
      | "LIVELY_VERSE_ADMIN_TYPE_ID"
      | "LIVELY_VERSE_ADMIN_TYPE_ID()"
      | "LIVELY_VERSE_AGENT_MASTER_TYPE_ID"
      | "LIVELY_VERSE_AGENT_MASTER_TYPE_ID()"
      | "LIVELY_VERSE_ANONYMOUSE_TYPE_ID"
      | "LIVELY_VERSE_ANONYMOUSE_TYPE_ID()"
      | "LIVELY_VERSE_ANY_TYPE_ID"
      | "LIVELY_VERSE_ANY_TYPE_ID()"
      | "LIVELY_VERSE_POLICY_MASTER_TYPE_ID"
      | "LIVELY_VERSE_POLICY_MASTER_TYPE_ID()"
      | "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID"
      | "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID()"
      | "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID"
      | "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID()"
      | "PREDICT_CTX_MESSAGE_TYPEHASH"
      | "PREDICT_CTX_MESSAGE_TYPEHASH()"
      | "TYPE_HASH"
      | "TYPE_HASH()"
      | "functionCheckAdmin"
      | "functionCheckAdmin(bytes32,address)"
      | "functionCheckAgent"
      | "functionCheckAgent(bytes32,address)"
      | "functionCheckId"
      | "functionCheckId(bytes32)"
      | "functionCheckSelector"
      | "functionCheckSelector(address,bytes4)"
      | "functionDeleteActivity"
      | "functionDeleteActivity(bytes32[])"
      | "functionGetInfo"
      | "functionGetInfo(bytes32)"
      | "functionUpdateActivityStatus"
      | "functionUpdateActivityStatus((bytes32,uint8)[])"
      | "functionUpdateAdmin"
      | "functionUpdateAdmin((bytes32,bytes32)[])"
      | "functionUpdateAgent"
      | "functionUpdateAgent((bytes32,bytes32)[])"
      | "functionUpdateAgentLimit"
      | "functionUpdateAgentLimit((bytes32,uint16)[])"
      | "functionUpdateAlterabilityStatus"
      | "functionUpdateAlterabilityStatus((bytes32,uint8)[])"
      | "functionUpdatePolicy"
      | "functionUpdatePolicy((bytes32,uint8)[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CTX_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CTX_MESSAGE_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_ADMIN_TYPE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_ADMIN_TYPE_ID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_AGENT_MASTER_TYPE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_AGENT_MASTER_TYPE_ID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_ANONYMOUSE_TYPE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_ANONYMOUSE_TYPE_ID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_ANY_TYPE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_ANY_TYPE_ID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_POLICY_MASTER_TYPE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_POLICY_MASTER_TYPE_ID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TYPE_HASH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TYPE_HASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "functionCheckAdmin",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCheckAdmin(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCheckAgent",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCheckAgent(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCheckId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCheckId(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCheckSelector",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCheckSelector(address,bytes4)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionDeleteActivity",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionDeleteActivity(bytes32[])",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionGetInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionGetInfo(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateActivityStatus",
    values: [IAclCommons.UpdateActivityRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateActivityStatus((bytes32,uint8)[])",
    values: [IAclCommons.UpdateActivityRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateAdmin",
    values: [IAclCommons.UpdateAdminRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateAdmin((bytes32,bytes32)[])",
    values: [IAclCommons.UpdateAdminRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateAgent",
    values: [IFunctionManagement.FunctionUpdateAgentRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateAgent((bytes32,bytes32)[])",
    values: [IFunctionManagement.FunctionUpdateAgentRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateAgentLimit",
    values: [IAclCommons.ScopeUpdateAgentLimitRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateAgentLimit((bytes32,uint16)[])",
    values: [IAclCommons.ScopeUpdateAgentLimitRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateAlterabilityStatus",
    values: [IAclCommons.UpdateAlterabilityRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdateAlterabilityStatus((bytes32,uint8)[])",
    values: [IAclCommons.UpdateAlterabilityRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdatePolicy",
    values: [IFunctionManagement.FunctionUpdatePolicyRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionUpdatePolicy((bytes32,uint8)[])",
    values: [IFunctionManagement.FunctionUpdatePolicyRequestStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "CTX_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CTX_MESSAGE_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_ADMIN_TYPE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_ADMIN_TYPE_ID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_AGENT_MASTER_TYPE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_AGENT_MASTER_TYPE_ID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_ANONYMOUSE_TYPE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_ANONYMOUSE_TYPE_ID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_ANY_TYPE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_ANY_TYPE_ID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_POLICY_MASTER_TYPE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_POLICY_MASTER_TYPE_ID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PREDICT_CTX_MESSAGE_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TYPE_HASH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TYPE_HASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCheckAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCheckAdmin(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCheckAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCheckAgent(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCheckId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCheckId(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCheckSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCheckSelector(address,bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionDeleteActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionDeleteActivity(bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionGetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionGetInfo(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateActivityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateActivityStatus((bytes32,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateAdmin((bytes32,bytes32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateAgent((bytes32,bytes32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateAgentLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateAgentLimit((bytes32,uint16)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateAlterabilityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdateAlterabilityStatus((bytes32,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdatePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionUpdatePolicy((bytes32,uint8)[])",
    data: BytesLike
  ): Result;

  events: {
    "AgentReferredByPolicyUpdated(address,bytes32,bytes32,uint8)": EventFragment;
    "AgentReferredByScopeUpdated(address,bytes32,bytes32,uint8)": EventFragment;
    "FunctionActivityUpdated(address,bytes32,uint8)": EventFragment;
    "FunctionAdminUpdated(address,bytes32,bytes32)": EventFragment;
    "FunctionAgentLimitUpdated(address,bytes32,uint16)": EventFragment;
    "FunctionAgentUpdated(address,bytes32,bytes32)": EventFragment;
    "FunctionAlterabilityUpdated(address,bytes32,uint8)": EventFragment;
    "FunctionPolicyUpdated(address,bytes32,uint8)": EventFragment;
    "ProxyUpgraded(address,address,address)": EventFragment;
    "ScopeReferredByAgentUpdated(address,bytes32,bytes32,uint8)": EventFragment;
    "ScopeReferredByPolicyUpdated(address,bytes32,bytes32,uint8)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AgentReferredByPolicyUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AgentReferredByPolicyUpdated(address,bytes32,bytes32,uint8)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AgentReferredByScopeUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AgentReferredByScopeUpdated(address,bytes32,bytes32,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionActivityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FunctionActivityUpdated(address,bytes32,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionAdminUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FunctionAdminUpdated(address,bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionAgentLimitUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FunctionAgentLimitUpdated(address,bytes32,uint16)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionAgentUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FunctionAgentUpdated(address,bytes32,bytes32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FunctionAlterabilityUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FunctionAlterabilityUpdated(address,bytes32,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionPolicyUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FunctionPolicyUpdated(address,bytes32,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyUpgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProxyUpgraded(address,address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScopeReferredByAgentUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScopeReferredByAgentUpdated(address,bytes32,bytes32,uint8)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScopeReferredByPolicyUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScopeReferredByPolicyUpdated(address,bytes32,bytes32,uint8)"
  ): EventFragment;
}

export interface AgentReferredByPolicyUpdatedEventObject {
  sender: string;
  agentId: string;
  policyId: string;
  action: number;
}
export type AgentReferredByPolicyUpdatedEvent = TypedEvent<
  [string, string, string, number],
  AgentReferredByPolicyUpdatedEventObject
>;

export type AgentReferredByPolicyUpdatedEventFilter =
  TypedEventFilter<AgentReferredByPolicyUpdatedEvent>;

export interface AgentReferredByScopeUpdatedEventObject {
  sender: string;
  agentId: string;
  scopeId: string;
  action: number;
}
export type AgentReferredByScopeUpdatedEvent = TypedEvent<
  [string, string, string, number],
  AgentReferredByScopeUpdatedEventObject
>;

export type AgentReferredByScopeUpdatedEventFilter =
  TypedEventFilter<AgentReferredByScopeUpdatedEvent>;

export interface FunctionActivityUpdatedEventObject {
  sender: string;
  functionId: string;
  acstat: number;
}
export type FunctionActivityUpdatedEvent = TypedEvent<
  [string, string, number],
  FunctionActivityUpdatedEventObject
>;

export type FunctionActivityUpdatedEventFilter =
  TypedEventFilter<FunctionActivityUpdatedEvent>;

export interface FunctionAdminUpdatedEventObject {
  sender: string;
  functionId: string;
  adminId: string;
}
export type FunctionAdminUpdatedEvent = TypedEvent<
  [string, string, string],
  FunctionAdminUpdatedEventObject
>;

export type FunctionAdminUpdatedEventFilter =
  TypedEventFilter<FunctionAdminUpdatedEvent>;

export interface FunctionAgentLimitUpdatedEventObject {
  sender: string;
  functionId: string;
  typeLimit: number;
}
export type FunctionAgentLimitUpdatedEvent = TypedEvent<
  [string, string, number],
  FunctionAgentLimitUpdatedEventObject
>;

export type FunctionAgentLimitUpdatedEventFilter =
  TypedEventFilter<FunctionAgentLimitUpdatedEvent>;

export interface FunctionAgentUpdatedEventObject {
  sender: string;
  functionId: string;
  agentId: string;
}
export type FunctionAgentUpdatedEvent = TypedEvent<
  [string, string, string],
  FunctionAgentUpdatedEventObject
>;

export type FunctionAgentUpdatedEventFilter =
  TypedEventFilter<FunctionAgentUpdatedEvent>;

export interface FunctionAlterabilityUpdatedEventObject {
  sender: string;
  functionId: string;
  alstat: number;
}
export type FunctionAlterabilityUpdatedEvent = TypedEvent<
  [string, string, number],
  FunctionAlterabilityUpdatedEventObject
>;

export type FunctionAlterabilityUpdatedEventFilter =
  TypedEventFilter<FunctionAlterabilityUpdatedEvent>;

export interface FunctionPolicyUpdatedEventObject {
  sender: string;
  functionId: string;
  policyCode: number;
}
export type FunctionPolicyUpdatedEvent = TypedEvent<
  [string, string, number],
  FunctionPolicyUpdatedEventObject
>;

export type FunctionPolicyUpdatedEventFilter =
  TypedEventFilter<FunctionPolicyUpdatedEvent>;

export interface ProxyUpgradedEventObject {
  sender: string;
  proxy: string;
  newImplementation: string;
}
export type ProxyUpgradedEvent = TypedEvent<
  [string, string, string],
  ProxyUpgradedEventObject
>;

export type ProxyUpgradedEventFilter = TypedEventFilter<ProxyUpgradedEvent>;

export interface ScopeReferredByAgentUpdatedEventObject {
  sender: string;
  scopeId: string;
  agentId: string;
  action: number;
}
export type ScopeReferredByAgentUpdatedEvent = TypedEvent<
  [string, string, string, number],
  ScopeReferredByAgentUpdatedEventObject
>;

export type ScopeReferredByAgentUpdatedEventFilter =
  TypedEventFilter<ScopeReferredByAgentUpdatedEvent>;

export interface ScopeReferredByPolicyUpdatedEventObject {
  sender: string;
  scopeId: string;
  policyId: string;
  action: number;
}
export type ScopeReferredByPolicyUpdatedEvent = TypedEvent<
  [string, string, string, number],
  ScopeReferredByPolicyUpdatedEventObject
>;

export type ScopeReferredByPolicyUpdatedEventFilter =
  TypedEventFilter<ScopeReferredByPolicyUpdatedEvent>;

export interface FunctionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FunctionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    LIVELY_VERSE_ADMIN_TYPE_ID(overrides?: CallOverrides): Promise<[string]>;

    "LIVELY_VERSE_ADMIN_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    LIVELY_VERSE_AGENT_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "LIVELY_VERSE_AGENT_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    LIVELY_VERSE_ANONYMOUSE_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "LIVELY_VERSE_ANONYMOUSE_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    LIVELY_VERSE_ANY_TYPE_ID(overrides?: CallOverrides): Promise<[string]>;

    "LIVELY_VERSE_ANY_TYPE_ID()"(overrides?: CallOverrides): Promise<[string]>;

    LIVELY_VERSE_POLICY_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "LIVELY_VERSE_POLICY_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    LIVELY_VERSE_SCOPE_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<[string]>;

    functionCheckAdmin(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "functionCheckAdmin(bytes32,address)"(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    functionCheckAgent(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "functionCheckAgent(bytes32,address)"(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    functionCheckId(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "functionCheckId(bytes32)"(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    functionCheckSelector(
      contractId: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "functionCheckSelector(address,bytes4)"(
      contractId: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    functionDeleteActivity(
      requests: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "functionDeleteActivity(bytes32[])"(
      requests: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionGetInfo(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IFunctionManagement.FunctionInfoStructOutput]>;

    "functionGetInfo(bytes32)"(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IFunctionManagement.FunctionInfoStructOutput]>;

    functionUpdateActivityStatus(
      requests: IAclCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "functionUpdateActivityStatus((bytes32,uint8)[])"(
      requests: IAclCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionUpdateAdmin(
      requests: IAclCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "functionUpdateAdmin((bytes32,bytes32)[])"(
      requests: IAclCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionUpdateAgent(
      requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "functionUpdateAgent((bytes32,bytes32)[])"(
      requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionUpdateAgentLimit(
      requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "functionUpdateAgentLimit((bytes32,uint16)[])"(
      requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionUpdateAlterabilityStatus(
      requests: IAclCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "functionUpdateAlterabilityStatus((bytes32,uint8)[])"(
      requests: IAclCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionUpdatePolicy(
      requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "functionUpdatePolicy((bytes32,uint8)[])"(
      requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  LIVELY_VERSE_ADMIN_TYPE_ID(overrides?: CallOverrides): Promise<string>;

  "LIVELY_VERSE_ADMIN_TYPE_ID()"(overrides?: CallOverrides): Promise<string>;

  LIVELY_VERSE_AGENT_MASTER_TYPE_ID(overrides?: CallOverrides): Promise<string>;

  "LIVELY_VERSE_AGENT_MASTER_TYPE_ID()"(
    overrides?: CallOverrides
  ): Promise<string>;

  LIVELY_VERSE_ANONYMOUSE_TYPE_ID(overrides?: CallOverrides): Promise<string>;

  "LIVELY_VERSE_ANONYMOUSE_TYPE_ID()"(
    overrides?: CallOverrides
  ): Promise<string>;

  LIVELY_VERSE_ANY_TYPE_ID(overrides?: CallOverrides): Promise<string>;

  "LIVELY_VERSE_ANY_TYPE_ID()"(overrides?: CallOverrides): Promise<string>;

  LIVELY_VERSE_POLICY_MASTER_TYPE_ID(
    overrides?: CallOverrides
  ): Promise<string>;

  "LIVELY_VERSE_POLICY_MASTER_TYPE_ID()"(
    overrides?: CallOverrides
  ): Promise<string>;

  LIVELY_VERSE_SCOPE_MASTER_TYPE_ID(overrides?: CallOverrides): Promise<string>;

  "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID()"(
    overrides?: CallOverrides
  ): Promise<string>;

  LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID(overrides?: CallOverrides): Promise<string>;

  "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID()"(
    overrides?: CallOverrides
  ): Promise<string>;

  PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PREDICT_CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  "TYPE_HASH()"(overrides?: CallOverrides): Promise<string>;

  functionCheckAdmin(
    functionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "functionCheckAdmin(bytes32,address)"(
    functionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  functionCheckAgent(
    functionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "functionCheckAgent(bytes32,address)"(
    functionId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  functionCheckId(
    functionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "functionCheckId(bytes32)"(
    functionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  functionCheckSelector(
    contractId: PromiseOrValue<string>,
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "functionCheckSelector(address,bytes4)"(
    contractId: PromiseOrValue<string>,
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  functionDeleteActivity(
    requests: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "functionDeleteActivity(bytes32[])"(
    requests: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionGetInfo(
    functionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IFunctionManagement.FunctionInfoStructOutput>;

  "functionGetInfo(bytes32)"(
    functionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IFunctionManagement.FunctionInfoStructOutput>;

  functionUpdateActivityStatus(
    requests: IAclCommons.UpdateActivityRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "functionUpdateActivityStatus((bytes32,uint8)[])"(
    requests: IAclCommons.UpdateActivityRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionUpdateAdmin(
    requests: IAclCommons.UpdateAdminRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "functionUpdateAdmin((bytes32,bytes32)[])"(
    requests: IAclCommons.UpdateAdminRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionUpdateAgent(
    requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "functionUpdateAgent((bytes32,bytes32)[])"(
    requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionUpdateAgentLimit(
    requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "functionUpdateAgentLimit((bytes32,uint16)[])"(
    requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionUpdateAlterabilityStatus(
    requests: IAclCommons.UpdateAlterabilityRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "functionUpdateAlterabilityStatus((bytes32,uint8)[])"(
    requests: IAclCommons.UpdateAlterabilityRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionUpdatePolicy(
    requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "functionUpdatePolicy((bytes32,uint8)[])"(
    requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    LIVELY_VERSE_ADMIN_TYPE_ID(overrides?: CallOverrides): Promise<string>;

    "LIVELY_VERSE_ADMIN_TYPE_ID()"(overrides?: CallOverrides): Promise<string>;

    LIVELY_VERSE_AGENT_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    "LIVELY_VERSE_AGENT_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<string>;

    LIVELY_VERSE_ANONYMOUSE_TYPE_ID(overrides?: CallOverrides): Promise<string>;

    "LIVELY_VERSE_ANONYMOUSE_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<string>;

    LIVELY_VERSE_ANY_TYPE_ID(overrides?: CallOverrides): Promise<string>;

    "LIVELY_VERSE_ANY_TYPE_ID()"(overrides?: CallOverrides): Promise<string>;

    LIVELY_VERSE_POLICY_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    "LIVELY_VERSE_POLICY_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<string>;

    LIVELY_VERSE_SCOPE_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<string>;

    LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<string>;

    PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<string>;

    functionCheckAdmin(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionCheckAdmin(bytes32,address)"(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionCheckAgent(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionCheckAgent(bytes32,address)"(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionCheckId(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionCheckId(bytes32)"(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionCheckSelector(
      contractId: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionCheckSelector(address,bytes4)"(
      contractId: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionDeleteActivity(
      requests: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionDeleteActivity(bytes32[])"(
      requests: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionGetInfo(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IFunctionManagement.FunctionInfoStructOutput>;

    "functionGetInfo(bytes32)"(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IFunctionManagement.FunctionInfoStructOutput>;

    functionUpdateActivityStatus(
      requests: IAclCommons.UpdateActivityRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionUpdateActivityStatus((bytes32,uint8)[])"(
      requests: IAclCommons.UpdateActivityRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionUpdateAdmin(
      requests: IAclCommons.UpdateAdminRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionUpdateAdmin((bytes32,bytes32)[])"(
      requests: IAclCommons.UpdateAdminRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionUpdateAgent(
      requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionUpdateAgent((bytes32,bytes32)[])"(
      requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionUpdateAgentLimit(
      requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionUpdateAgentLimit((bytes32,uint16)[])"(
      requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionUpdateAlterabilityStatus(
      requests: IAclCommons.UpdateAlterabilityRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionUpdateAlterabilityStatus((bytes32,uint8)[])"(
      requests: IAclCommons.UpdateAlterabilityRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    functionUpdatePolicy(
      requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "functionUpdatePolicy((bytes32,uint8)[])"(
      requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AgentReferredByPolicyUpdated(address,bytes32,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      policyId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): AgentReferredByPolicyUpdatedEventFilter;
    AgentReferredByPolicyUpdated(
      sender?: PromiseOrValue<string> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      policyId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): AgentReferredByPolicyUpdatedEventFilter;

    "AgentReferredByScopeUpdated(address,bytes32,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): AgentReferredByScopeUpdatedEventFilter;
    AgentReferredByScopeUpdated(
      sender?: PromiseOrValue<string> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): AgentReferredByScopeUpdatedEventFilter;

    "FunctionActivityUpdated(address,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      acstat?: null
    ): FunctionActivityUpdatedEventFilter;
    FunctionActivityUpdated(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      acstat?: null
    ): FunctionActivityUpdatedEventFilter;

    "FunctionAdminUpdated(address,bytes32,bytes32)"(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      adminId?: PromiseOrValue<BytesLike> | null
    ): FunctionAdminUpdatedEventFilter;
    FunctionAdminUpdated(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      adminId?: PromiseOrValue<BytesLike> | null
    ): FunctionAdminUpdatedEventFilter;

    "FunctionAgentLimitUpdated(address,bytes32,uint16)"(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      typeLimit?: null
    ): FunctionAgentLimitUpdatedEventFilter;
    FunctionAgentLimitUpdated(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      typeLimit?: null
    ): FunctionAgentLimitUpdatedEventFilter;

    "FunctionAgentUpdated(address,bytes32,bytes32)"(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      agentId?: PromiseOrValue<BytesLike> | null
    ): FunctionAgentUpdatedEventFilter;
    FunctionAgentUpdated(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      agentId?: PromiseOrValue<BytesLike> | null
    ): FunctionAgentUpdatedEventFilter;

    "FunctionAlterabilityUpdated(address,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      alstat?: null
    ): FunctionAlterabilityUpdatedEventFilter;
    FunctionAlterabilityUpdated(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      alstat?: null
    ): FunctionAlterabilityUpdatedEventFilter;

    "FunctionPolicyUpdated(address,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      policyCode?: null
    ): FunctionPolicyUpdatedEventFilter;
    FunctionPolicyUpdated(
      sender?: PromiseOrValue<string> | null,
      functionId?: PromiseOrValue<BytesLike> | null,
      policyCode?: null
    ): FunctionPolicyUpdatedEventFilter;

    "ProxyUpgraded(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): ProxyUpgradedEventFilter;
    ProxyUpgraded(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): ProxyUpgradedEventFilter;

    "ScopeReferredByAgentUpdated(address,bytes32,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): ScopeReferredByAgentUpdatedEventFilter;
    ScopeReferredByAgentUpdated(
      sender?: PromiseOrValue<string> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      agentId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): ScopeReferredByAgentUpdatedEventFilter;

    "ScopeReferredByPolicyUpdated(address,bytes32,bytes32,uint8)"(
      sender?: PromiseOrValue<string> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      policyId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): ScopeReferredByPolicyUpdatedEventFilter;
    ScopeReferredByPolicyUpdated(
      sender?: PromiseOrValue<string> | null,
      scopeId?: PromiseOrValue<BytesLike> | null,
      policyId?: PromiseOrValue<BytesLike> | null,
      action?: null
    ): ScopeReferredByPolicyUpdatedEventFilter;
  };

  estimateGas: {
    CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "CTX_MESSAGE_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    LIVELY_VERSE_ADMIN_TYPE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "LIVELY_VERSE_ADMIN_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LIVELY_VERSE_AGENT_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LIVELY_VERSE_AGENT_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LIVELY_VERSE_ANONYMOUSE_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LIVELY_VERSE_ANONYMOUSE_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LIVELY_VERSE_ANY_TYPE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "LIVELY_VERSE_ANY_TYPE_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    LIVELY_VERSE_POLICY_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LIVELY_VERSE_POLICY_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LIVELY_VERSE_SCOPE_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PREDICT_CTX_MESSAGE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    functionCheckAdmin(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "functionCheckAdmin(bytes32,address)"(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    functionCheckAgent(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "functionCheckAgent(bytes32,address)"(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    functionCheckId(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "functionCheckId(bytes32)"(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    functionCheckSelector(
      contractId: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "functionCheckSelector(address,bytes4)"(
      contractId: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    functionDeleteActivity(
      requests: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "functionDeleteActivity(bytes32[])"(
      requests: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionGetInfo(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "functionGetInfo(bytes32)"(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    functionUpdateActivityStatus(
      requests: IAclCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "functionUpdateActivityStatus((bytes32,uint8)[])"(
      requests: IAclCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionUpdateAdmin(
      requests: IAclCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "functionUpdateAdmin((bytes32,bytes32)[])"(
      requests: IAclCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionUpdateAgent(
      requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "functionUpdateAgent((bytes32,bytes32)[])"(
      requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionUpdateAgentLimit(
      requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "functionUpdateAgentLimit((bytes32,uint16)[])"(
      requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionUpdateAlterabilityStatus(
      requests: IAclCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "functionUpdateAlterabilityStatus((bytes32,uint8)[])"(
      requests: IAclCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionUpdatePolicy(
      requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "functionUpdatePolicy((bytes32,uint8)[])"(
      requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CTX_MESSAGE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_VERSE_ADMIN_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_VERSE_ADMIN_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_VERSE_AGENT_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_VERSE_AGENT_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_VERSE_ANONYMOUSE_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_VERSE_ANONYMOUSE_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_VERSE_ANY_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_VERSE_ANY_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_VERSE_POLICY_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_VERSE_POLICY_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_VERSE_SCOPE_MASTER_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_VERSE_SYSTEM_ADMIN_TYPE_ID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PREDICT_CTX_MESSAGE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PREDICT_CTX_MESSAGE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TYPE_HASH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    functionCheckAdmin(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "functionCheckAdmin(bytes32,address)"(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionCheckAgent(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "functionCheckAgent(bytes32,address)"(
      functionId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionCheckId(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "functionCheckId(bytes32)"(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionCheckSelector(
      contractId: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "functionCheckSelector(address,bytes4)"(
      contractId: PromiseOrValue<string>,
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionDeleteActivity(
      requests: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "functionDeleteActivity(bytes32[])"(
      requests: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionGetInfo(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "functionGetInfo(bytes32)"(
      functionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionUpdateActivityStatus(
      requests: IAclCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "functionUpdateActivityStatus((bytes32,uint8)[])"(
      requests: IAclCommons.UpdateActivityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionUpdateAdmin(
      requests: IAclCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "functionUpdateAdmin((bytes32,bytes32)[])"(
      requests: IAclCommons.UpdateAdminRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionUpdateAgent(
      requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "functionUpdateAgent((bytes32,bytes32)[])"(
      requests: IFunctionManagement.FunctionUpdateAgentRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionUpdateAgentLimit(
      requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "functionUpdateAgentLimit((bytes32,uint16)[])"(
      requests: IAclCommons.ScopeUpdateAgentLimitRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionUpdateAlterabilityStatus(
      requests: IAclCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "functionUpdateAlterabilityStatus((bytes32,uint8)[])"(
      requests: IAclCommons.UpdateAlterabilityRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionUpdatePolicy(
      requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "functionUpdatePolicy((bytes32,uint8)[])"(
      requests: IFunctionManagement.FunctionUpdatePolicyRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
