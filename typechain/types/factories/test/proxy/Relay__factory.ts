/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Relay, RelayInterface } from "../../../test/proxy/Relay";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "destContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161010d38038061010d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b607b806100926000396000f3fe608060405236601057600e6013565b005b600e5b601a34601c565b565b600054366000803760008036600085855af190503d6000803e8080156040573d6000f35b3d6000fdfea2646970667358221220827d61a65f18b19506ab3ad3537ec5141bedee6f3b1512617eb29bc2c49dceb064736f6c634300080f0033";

type RelayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RelayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Relay__factory extends ContractFactory {
  constructor(...args: RelayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    destContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Relay> {
    return super.deploy(destContract, overrides || {}) as Promise<Relay>;
  }
  override getDeployTransaction(
    destContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(destContract, overrides || {});
  }
  override attach(address: string): Relay {
    return super.attach(address) as Relay;
  }
  override connect(signer: Signer): Relay__factory {
    return super.connect(signer) as Relay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RelayInterface {
    return new utils.Interface(_abi) as RelayInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Relay {
    return new Contract(address, _abi, signerOrProvider) as Relay;
  }
}
