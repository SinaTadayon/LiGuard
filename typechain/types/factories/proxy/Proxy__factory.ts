/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BytesLike,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Proxy, ProxyInterface } from "../../proxy/Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "logic",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "proxy",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a0604081905230608052610ac5388190039081908339810160408190526100269161065d565b61005160017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd61072b565b600080516020610aa58339815191521461006d5761006d61074c565b61009860017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610461072b565b600080516020610a85833981519152146100b4576100b461074c565b336100d9600080516020610a8583398151915260001b61011860201b6100521760201c565b80546001600160a01b0319166001600160a01b03929092169190911790556004805460ff191660011790556101108282600061011b565b5050506107ec565b90565b60606101537f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b61011860201b6100521760201c565b5460ff161561017a5761016584610399565b50604080516000815260208101909152610392565b836001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156101d4575060408051601f3d908101601f191682019092526101d191810190610762565b60015b6102255760405162461bcd60e51b815260206004820152601560248201527f496c6c6567616c205555505320436f6e7472616374000000000000000000000060448201526064015b60405180910390fd5b600080516020610aa583398151915281146102825760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964205555505320436f6e74726163740000000000000000000000604482015260640161021c565b506040516301ffc9a760e01b81526314751dbf60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa9250505080156102ea575060408051601f3d908101601f191682019092526102e79181019061077b565b60015b6103365760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204950726f787920436f6e7472616374000000000000000000604482015260640161021c565b806103835760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204950726f787920436f6e7472616374000000000000000000604482015260640161021c565b5061038f8484846103df565b90505b9392505050565b806103be600080516020610aa583398151915260001b61011860201b6100521760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606103ea84610427565b6000835111806103f75750815b156104105761038f848461047560201b6100551760201c565b505060408051600081526020810190915292915050565b61043081610399565b6104386104c6565b6040516001600160a01b039190911690309033907f354bd4b6eb65d64e6c79c53fa4f983a5e6bec4824ce4627c71be0b2722f4917e90600090a450565b60606104bd83836040518060400160405280601481526020017f44656c65676174652043616c6c204661696c65640000000000000000000000008152506104fb60201b60201c565b90505b92915050565b60006104ec600080516020610aa583398151915260001b61011860201b6100521760201c565b546001600160a01b0316919050565b6060610510846105db60201b6100951760201c565b61055c5760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20436f6e747261637420416464726573730000000000000000604482015260640161021c565b600080856001600160a01b031685604051610577919061079d565b600060405180830381855af49150503d80600081146105b2576040519150601f19603f3d011682016040523d82523d6000602084013e6105b7565b606091505b50915091506105d18282866105ea60201b6100a41760201c565b9695505050505050565b6001600160a01b03163b151590565b606083156105f9575081610392565b8251156106095782518084602001fd5b8160405162461bcd60e51b815260040161021c91906107b9565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561065457818101518382015260200161063c565b50506000910152565b6000806040838503121561067057600080fd5b82516001600160a01b038116811461068757600080fd5b60208401519092506001600160401b03808211156106a457600080fd5b818501915085601f8301126106b857600080fd5b8151818111156106ca576106ca610623565b604051601f8201601f19908116603f011681019083821181831017156106f2576106f2610623565b8160405282815288602084870101111561070b57600080fd5b61071c836020830160208801610639565b80955050505050509250929050565b818103818111156104c057634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b60006020828403121561077457600080fd5b5051919050565b60006020828403121561078d57600080fd5b8151801515811461039257600080fd5b600082516107af818460208701610639565b9190910192915050565b60208152600082518060208401526107d8816040850160208701610639565b601f01601f19169190910160400192915050565b608051610281610804600039600050506102816000f3fe60806040523661001357610011610017565b005b6100115b61005061004b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6100e6565b565b90565b606061008e83836040518060400160405280601481526020017311195b1959d85d194810d85b1b0811985a5b195960621b81525061010a565b9392505050565b6001600160a01b03163b151590565b606083156100b357508161008e565b8251156100c35782518084602001fd5b8160405162461bcd60e51b81526004016100dd91906101fc565b60405180910390fd5b3660008037600080366000845af43d6000803e808015610105573d6000f35b3d6000fd5b60606001600160a01b0384163b6101635760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20436f6e74726163742041646472657373000000000000000060448201526064016100dd565b600080856001600160a01b03168560405161017e919061022f565b600060405180830381855af49150503d80600081146101b9576040519150601f19603f3d011682016040523d82523d6000602084013e6101be565b606091505b50915091506101ce8282866100a4565b9695505050505050565b60005b838110156101f35781810151838201526020016101db565b50506000910152565b602081526000825180602084015261021b8160408501602087016101d8565b601f01601f19169190910160400192915050565b600082516102418184602087016101d8565b919091019291505056fea2646970667358221220e48d4572fee3c38ed705e0128acc8236f2634b148ceded5a8c4430ce04e7e57e64736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";

type ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proxy__factory extends ContractFactory {
  constructor(...args: ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    logic: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Proxy> {
    return super.deploy(logic, data, overrides || {}) as Promise<Proxy>;
  }
  override getDeployTransaction(
    logic: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(logic, data, overrides || {});
  }
  override attach(address: string): Proxy {
    return super.attach(address) as Proxy;
  }
  override connect(signer: Signer): Proxy__factory {
    return super.connect(signer) as Proxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyInterface {
    return new utils.Interface(_abi) as ProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Proxy {
    return new Contract(address, _abi, signerOrProvider) as Proxy;
  }
}
