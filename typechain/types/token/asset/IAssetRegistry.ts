/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IAssetRegistry {
  export type AssetInfoStruct = {
    balance: PromiseOrValue<BigNumberish>;
    assetId: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    version: PromiseOrValue<string>;
  };

  export type AssetInfoStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string
  ] & {
    balance: BigNumber;
    assetId: string;
    token: string;
    name: string;
    version: string;
  };
}

export interface IAssetRegistryInterface extends utils.Interface {
  functions: {
    "createAsset(string,string,address)": FunctionFragment;
    "getAllAssets()": FunctionFragment;
    "getAsset(address)": FunctionFragment;
    "registerAsset(string,address)": FunctionFragment;
    "removeAsset(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createAsset"
      | "createAsset(string,string,address)"
      | "getAllAssets"
      | "getAllAssets()"
      | "getAsset"
      | "getAsset(address)"
      | "registerAsset"
      | "registerAsset(string,address)"
      | "removeAsset"
      | "removeAsset(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createAsset(string,string,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAssets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAsset(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset(string,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsset(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAsset(string,string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAssets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAsset(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset(string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset(address)",
    data: BytesLike
  ): Result;

  events: {
    "AssetCreated(address,address,string,string,address)": EventFragment;
    "AssetRegistered(address,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetCreated(address,address,string,string,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetRegistered(address,address,string)"
  ): EventFragment;
}

export interface AssetCreatedEventObject {
  sender: string;
  assetId: string;
  assetName: string;
  assetVersion: string;
  erc20Token: string;
}
export type AssetCreatedEvent = TypedEvent<
  [string, string, string, string, string],
  AssetCreatedEventObject
>;

export type AssetCreatedEventFilter = TypedEventFilter<AssetCreatedEvent>;

export interface AssetRegisteredEventObject {
  sender: string;
  assetId: string;
  assetName: string;
}
export type AssetRegisteredEvent = TypedEvent<
  [string, string, string],
  AssetRegisteredEventObject
>;

export type AssetRegisteredEventFilter = TypedEventFilter<AssetRegisteredEvent>;

export interface IAssetRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAssetRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createAsset(
      assetName: PromiseOrValue<string>,
      assetVersion: PromiseOrValue<string>,
      erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createAsset(string,string,address)"(
      assetName: PromiseOrValue<string>,
      assetVersion: PromiseOrValue<string>,
      erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllAssets(
      overrides?: CallOverrides
    ): Promise<[IAssetRegistry.AssetInfoStructOutput[]]>;

    "getAllAssets()"(
      overrides?: CallOverrides
    ): Promise<[IAssetRegistry.AssetInfoStructOutput[]]>;

    getAsset(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IAssetRegistry.AssetInfoStructOutput]>;

    "getAsset(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IAssetRegistry.AssetInfoStructOutput]>;

    registerAsset(
      assetName: PromiseOrValue<string>,
      assetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerAsset(string,address)"(
      assetName: PromiseOrValue<string>,
      assetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAsset(
      assetId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeAsset(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createAsset(
    assetName: PromiseOrValue<string>,
    assetVersion: PromiseOrValue<string>,
    erc20Token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createAsset(string,string,address)"(
    assetName: PromiseOrValue<string>,
    assetVersion: PromiseOrValue<string>,
    erc20Token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllAssets(
    overrides?: CallOverrides
  ): Promise<IAssetRegistry.AssetInfoStructOutput[]>;

  "getAllAssets()"(
    overrides?: CallOverrides
  ): Promise<IAssetRegistry.AssetInfoStructOutput[]>;

  getAsset(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IAssetRegistry.AssetInfoStructOutput>;

  "getAsset(address)"(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IAssetRegistry.AssetInfoStructOutput>;

  registerAsset(
    assetName: PromiseOrValue<string>,
    assetAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerAsset(string,address)"(
    assetName: PromiseOrValue<string>,
    assetAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAsset(
    assetId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeAsset(address)"(
    assetId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createAsset(
      assetName: PromiseOrValue<string>,
      assetVersion: PromiseOrValue<string>,
      erc20Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "createAsset(string,string,address)"(
      assetName: PromiseOrValue<string>,
      assetVersion: PromiseOrValue<string>,
      erc20Token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllAssets(
      overrides?: CallOverrides
    ): Promise<IAssetRegistry.AssetInfoStructOutput[]>;

    "getAllAssets()"(
      overrides?: CallOverrides
    ): Promise<IAssetRegistry.AssetInfoStructOutput[]>;

    getAsset(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IAssetRegistry.AssetInfoStructOutput>;

    "getAsset(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IAssetRegistry.AssetInfoStructOutput>;

    registerAsset(
      assetName: PromiseOrValue<string>,
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "registerAsset(string,address)"(
      assetName: PromiseOrValue<string>,
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeAsset(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "removeAsset(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AssetCreated(address,address,string,string,address)"(
      sender?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<string> | null,
      assetName?: null,
      assetVersion?: null,
      erc20Token?: null
    ): AssetCreatedEventFilter;
    AssetCreated(
      sender?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<string> | null,
      assetName?: null,
      assetVersion?: null,
      erc20Token?: null
    ): AssetCreatedEventFilter;

    "AssetRegistered(address,address,string)"(
      sender?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<string> | null,
      assetName?: null
    ): AssetRegisteredEventFilter;
    AssetRegistered(
      sender?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<string> | null,
      assetName?: null
    ): AssetRegisteredEventFilter;
  };

  estimateGas: {
    createAsset(
      assetName: PromiseOrValue<string>,
      assetVersion: PromiseOrValue<string>,
      erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createAsset(string,string,address)"(
      assetName: PromiseOrValue<string>,
      assetVersion: PromiseOrValue<string>,
      erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAsset(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAsset(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAsset(
      assetName: PromiseOrValue<string>,
      assetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerAsset(string,address)"(
      assetName: PromiseOrValue<string>,
      assetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAsset(
      assetId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeAsset(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createAsset(
      assetName: PromiseOrValue<string>,
      assetVersion: PromiseOrValue<string>,
      erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createAsset(string,string,address)"(
      assetName: PromiseOrValue<string>,
      assetVersion: PromiseOrValue<string>,
      erc20Token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllAssets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAsset(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAsset(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAsset(
      assetName: PromiseOrValue<string>,
      assetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerAsset(string,address)"(
      assetName: PromiseOrValue<string>,
      assetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAsset(
      assetId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeAsset(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
