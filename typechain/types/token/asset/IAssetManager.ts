/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IERC20Lock {
  export type LockTokenRequestStruct = {
    source: PromiseOrValue<string>;
    dest: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type LockTokenRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & { source: string; dest: string; timestamp: BigNumber; amount: BigNumber };
}

export declare namespace IERC20Extra {
  export type BatchTransferRequestStruct = {
    to: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type BatchTransferRequestStructOutput = [string, BigNumber] & {
    to: string;
    amount: BigNumber;
  };

  export type BatchTransferFromRequestStruct = {
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type BatchTransferFromRequestStructOutput = [
    string,
    string,
    BigNumber
  ] & { from: string; to: string; amount: BigNumber };
}

export interface IAssetManagerInterface extends utils.Interface {
  functions: {
    "assetApprove(address,address,uint256)": FunctionFragment;
    "assetBalance(address)": FunctionFragment;
    "assetBatchLockToken(address,(address,address,uint256,uint256)[])": FunctionFragment;
    "assetBatchTransfer(address,(address,uint256)[])": FunctionFragment;
    "assetBatchTransferFrom(address,(address,address,uint256)[])": FunctionFragment;
    "assetDecreaseAllowance(address,address,uint256)": FunctionFragment;
    "assetERC20Token(address)": FunctionFragment;
    "assetIncreaseAllowance(address,address,uint256)": FunctionFragment;
    "assetLockToken(address,(address,address,uint256,uint256))": FunctionFragment;
    "assetName(address)": FunctionFragment;
    "assetPermit(address,address,address,uint256,uint256,bytes)": FunctionFragment;
    "assetTransfer(address,address,uint256)": FunctionFragment;
    "assetTransferFrom(address,address,address,uint256)": FunctionFragment;
    "assetVersion(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetApprove"
      | "assetApprove(address,address,uint256)"
      | "assetBalance"
      | "assetBalance(address)"
      | "assetBatchLockToken"
      | "assetBatchLockToken(address,(address,address,uint256,uint256)[])"
      | "assetBatchTransfer"
      | "assetBatchTransfer(address,(address,uint256)[])"
      | "assetBatchTransferFrom"
      | "assetBatchTransferFrom(address,(address,address,uint256)[])"
      | "assetDecreaseAllowance"
      | "assetDecreaseAllowance(address,address,uint256)"
      | "assetERC20Token"
      | "assetERC20Token(address)"
      | "assetIncreaseAllowance"
      | "assetIncreaseAllowance(address,address,uint256)"
      | "assetLockToken"
      | "assetLockToken(address,(address,address,uint256,uint256))"
      | "assetName"
      | "assetName(address)"
      | "assetPermit"
      | "assetPermit(address,address,address,uint256,uint256,bytes)"
      | "assetTransfer"
      | "assetTransfer(address,address,uint256)"
      | "assetTransferFrom"
      | "assetTransferFrom(address,address,address,uint256)"
      | "assetVersion"
      | "assetVersion(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetApprove(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBalance(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBatchLockToken",
    values: [PromiseOrValue<string>, IERC20Lock.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBatchLockToken(address,(address,address,uint256,uint256)[])",
    values: [PromiseOrValue<string>, IERC20Lock.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBatchTransfer",
    values: [PromiseOrValue<string>, IERC20Extra.BatchTransferRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBatchTransfer(address,(address,uint256)[])",
    values: [PromiseOrValue<string>, IERC20Extra.BatchTransferRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      IERC20Extra.BatchTransferFromRequestStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetBatchTransferFrom(address,(address,address,uint256)[])",
    values: [
      PromiseOrValue<string>,
      IERC20Extra.BatchTransferFromRequestStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetDecreaseAllowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetDecreaseAllowance(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetERC20Token",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetERC20Token(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetIncreaseAllowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetIncreaseAllowance(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetLockToken",
    values: [PromiseOrValue<string>, IERC20Lock.LockTokenRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "assetLockToken(address,(address,address,uint256,uint256))",
    values: [PromiseOrValue<string>, IERC20Lock.LockTokenRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "assetName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetName(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetPermit(address,address,address,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetTransfer(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetTransferFrom(address,address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assetVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetVersion(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetApprove(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBalance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBatchLockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBatchLockToken(address,(address,address,uint256,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBatchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBatchTransfer(address,(address,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBatchTransferFrom(address,(address,address,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetDecreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetDecreaseAllowance(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetERC20Token(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetIncreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetIncreaseAllowance(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetLockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetLockToken(address,(address,address,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetName(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetPermit(address,address,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTransfer(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTransferFrom(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetVersion(address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAssetManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAssetManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetApprove(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetApprove(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetBalance(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "assetBalance(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetBatchLockToken(
      assetId: PromiseOrValue<string>,
      lockRequests: IERC20Lock.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetBatchLockToken(address,(address,address,uint256,uint256)[])"(
      assetId: PromiseOrValue<string>,
      lockRequests: IERC20Lock.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetBatchTransfer(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetBatchTransfer(address,(address,uint256)[])"(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetBatchTransferFrom(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetBatchTransferFrom(address,(address,address,uint256)[])"(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetDecreaseAllowance(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetDecreaseAllowance(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetERC20Token(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "assetERC20Token(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetIncreaseAllowance(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetIncreaseAllowance(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetLockToken(
      assetId: PromiseOrValue<string>,
      lockRequest: IERC20Lock.LockTokenRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetLockToken(address,(address,address,uint256,uint256))"(
      assetId: PromiseOrValue<string>,
      lockRequest: IERC20Lock.LockTokenRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetName(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "assetName(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetPermit(
      assetId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetPermit(address,address,address,uint256,uint256,bytes)"(
      assetId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetTransfer(
      assetId: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetTransfer(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetTransferFrom(
      assetId: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetTransferFrom(address,address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetVersion(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "assetVersion(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  assetApprove(
    assetId: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetApprove(address,address,uint256)"(
    assetId: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetBalance(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "assetBalance(address)"(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetBatchLockToken(
    assetId: PromiseOrValue<string>,
    lockRequests: IERC20Lock.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetBatchLockToken(address,(address,address,uint256,uint256)[])"(
    assetId: PromiseOrValue<string>,
    lockRequests: IERC20Lock.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetBatchTransfer(
    assetId: PromiseOrValue<string>,
    request: IERC20Extra.BatchTransferRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetBatchTransfer(address,(address,uint256)[])"(
    assetId: PromiseOrValue<string>,
    request: IERC20Extra.BatchTransferRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetBatchTransferFrom(
    assetId: PromiseOrValue<string>,
    request: IERC20Extra.BatchTransferFromRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetBatchTransferFrom(address,(address,address,uint256)[])"(
    assetId: PromiseOrValue<string>,
    request: IERC20Extra.BatchTransferFromRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetDecreaseAllowance(
    assetId: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetDecreaseAllowance(address,address,uint256)"(
    assetId: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetERC20Token(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "assetERC20Token(address)"(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  assetIncreaseAllowance(
    assetId: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetIncreaseAllowance(address,address,uint256)"(
    assetId: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetLockToken(
    assetId: PromiseOrValue<string>,
    lockRequest: IERC20Lock.LockTokenRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetLockToken(address,(address,address,uint256,uint256))"(
    assetId: PromiseOrValue<string>,
    lockRequest: IERC20Lock.LockTokenRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetName(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "assetName(address)"(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  assetPermit(
    assetId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetPermit(address,address,address,uint256,uint256,bytes)"(
    assetId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetTransfer(
    assetId: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetTransfer(address,address,uint256)"(
    assetId: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetTransferFrom(
    assetId: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetTransferFrom(address,address,address,uint256)"(
    assetId: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetVersion(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "assetVersion(address)"(
    assetId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    assetApprove(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "assetApprove(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetBalance(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetBalance(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetBatchLockToken(
      assetId: PromiseOrValue<string>,
      lockRequests: IERC20Lock.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "assetBatchLockToken(address,(address,address,uint256,uint256)[])"(
      assetId: PromiseOrValue<string>,
      lockRequests: IERC20Lock.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    assetBatchTransfer(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "assetBatchTransfer(address,(address,uint256)[])"(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetBatchTransferFrom(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "assetBatchTransferFrom(address,(address,address,uint256)[])"(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetDecreaseAllowance(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetDecreaseAllowance(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetERC20Token(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "assetERC20Token(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    assetIncreaseAllowance(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetIncreaseAllowance(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetLockToken(
      assetId: PromiseOrValue<string>,
      lockRequest: IERC20Lock.LockTokenRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "assetLockToken(address,(address,address,uint256,uint256))"(
      assetId: PromiseOrValue<string>,
      lockRequest: IERC20Lock.LockTokenRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    assetName(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "assetName(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    assetPermit(
      assetId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "assetPermit(address,address,address,uint256,uint256,bytes)"(
      assetId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetTransfer(
      assetId: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "assetTransfer(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetTransferFrom(
      assetId: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "assetTransferFrom(address,address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetVersion(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "assetVersion(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    assetApprove(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetApprove(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetBalance(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetBalance(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetBatchLockToken(
      assetId: PromiseOrValue<string>,
      lockRequests: IERC20Lock.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetBatchLockToken(address,(address,address,uint256,uint256)[])"(
      assetId: PromiseOrValue<string>,
      lockRequests: IERC20Lock.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetBatchTransfer(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetBatchTransfer(address,(address,uint256)[])"(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetBatchTransferFrom(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetBatchTransferFrom(address,(address,address,uint256)[])"(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetDecreaseAllowance(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetDecreaseAllowance(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetERC20Token(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetERC20Token(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetIncreaseAllowance(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetIncreaseAllowance(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetLockToken(
      assetId: PromiseOrValue<string>,
      lockRequest: IERC20Lock.LockTokenRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetLockToken(address,(address,address,uint256,uint256))"(
      assetId: PromiseOrValue<string>,
      lockRequest: IERC20Lock.LockTokenRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetName(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetName(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetPermit(
      assetId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetPermit(address,address,address,uint256,uint256,bytes)"(
      assetId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetTransfer(
      assetId: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetTransfer(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetTransferFrom(
      assetId: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetTransferFrom(address,address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetVersion(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetVersion(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetApprove(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetApprove(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetBalance(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetBalance(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetBatchLockToken(
      assetId: PromiseOrValue<string>,
      lockRequests: IERC20Lock.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetBatchLockToken(address,(address,address,uint256,uint256)[])"(
      assetId: PromiseOrValue<string>,
      lockRequests: IERC20Lock.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetBatchTransfer(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetBatchTransfer(address,(address,uint256)[])"(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetBatchTransferFrom(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetBatchTransferFrom(address,(address,address,uint256)[])"(
      assetId: PromiseOrValue<string>,
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetDecreaseAllowance(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetDecreaseAllowance(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetERC20Token(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetERC20Token(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetIncreaseAllowance(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetIncreaseAllowance(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetLockToken(
      assetId: PromiseOrValue<string>,
      lockRequest: IERC20Lock.LockTokenRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetLockToken(address,(address,address,uint256,uint256))"(
      assetId: PromiseOrValue<string>,
      lockRequest: IERC20Lock.LockTokenRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetName(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetName(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetPermit(
      assetId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetPermit(address,address,address,uint256,uint256,bytes)"(
      assetId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetTransfer(
      assetId: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetTransfer(address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetTransferFrom(
      assetId: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetTransferFrom(address,address,address,uint256)"(
      assetId: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetVersion(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetVersion(address)"(
      assetId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
