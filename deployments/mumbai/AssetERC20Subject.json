{
  "address": "0x4631596d85d8CED5FE1a96F40198d2d886e4b427",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "AssetERC20Called",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetSubject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "AssetInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "AssetSafeModeChanged",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "assetAcl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetInitVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetRealm",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetSafeMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "assetSafeModeSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetType",
      "outputs": [
        {
          "internalType": "enum IAssetEntity.AssetType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetVersion",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainRealm",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "assetRole",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "subject",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "erc20Token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "accessControl",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetManager",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "domainName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "domainVersion",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AssetERC20.InitRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenApprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dest",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Lock.LockTokenRequest[]",
          "name": "lockRequests",
          "type": "tuple[]"
        }
      ],
      "name": "tokenBatchLock",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Extra.BatchTransferRequest[]",
          "name": "request",
          "type": "tuple[]"
        }
      ],
      "name": "tokenBatchTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Extra.BatchTransferFromRequest[]",
          "name": "request",
          "type": "tuple[]"
        }
      ],
      "name": "tokenBatchTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenDecreaseAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenIncreaseAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dest",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Lock.LockTokenRequest",
          "name": "lockRequest",
          "type": "tuple"
        }
      ],
      "name": "tokenLock",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8b78294d4d3e1491590d25756e2bcc515276521cbf457fe5019d4552687cdbea",
  "receipt": {
    "to": null,
    "from": "0x1654E08a4963D92846B7cC12bfE911887EA6930c",
    "contractAddress": "0x4631596d85d8CED5FE1a96F40198d2d886e4b427",
    "transactionIndex": 25,
    "gasUsed": "2145410",
    "logsBloom": "0x
    "blockHash": "0xf2206d61392b1ca2cce37813f4b3ff460c99f7ce5e7adabea730f86a7377a22f",
    "transactionHash": "0x8b78294d4d3e1491590d25756e2bcc515276521cbf457fe5019d4552687cdbea",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 28823994,
        "transactionHash": "0x8b78294d4d3e1491590d25756e2bcc515276521cbf457fe5019d4552687cdbea",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001654e08a4963d92846b7cc12bfe911887ea6930c",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b6edbc98c9a820000000000000000000000000000000000000000000000003f8a526343a8a7f400000000000000000000000000000000000000000000000027a284749d5bc15f0000000000000000000000000000000000000000000000003f7ee3877a1c0d7200000000000000000000000000000000000000000000000027adf35066e85be1",
        "logIndex": 137,
        "blockHash": "0xf2206d61392b1ca2cce37813f4b3ff460c99f7ce5e7adabea730f86a7377a22f"
      }
    ],
    "blockNumber": 28823994,
    "cumulativeGasUsed": "6165463",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "45271bbf9385da8a7b2f4f7bb0ef2c6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"AssetERC20Called\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetSubject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"AssetInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AssetSafeModeChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"assetAcl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetInitVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetRealm\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"assetSafeModeSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetType\",\"outputs\":[{\"internalType\":\"enum IAssetEntity.AssetType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainRealm\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"assetRole\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"domainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainVersion\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AssetERC20.InitRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Lock.LockTokenRequest[]\",\"name\":\"lockRequests\",\"type\":\"tuple[]\"}],\"name\":\"tokenBatchLock\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Extra.BatchTransferRequest[]\",\"name\":\"request\",\"type\":\"tuple[]\"}],\"name\":\"tokenBatchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Extra.BatchTransferFromRequest[]\",\"name\":\"request\",\"type\":\"tuple[]\"}],\"name\":\"tokenBatchTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenDecreaseAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenIncreaseAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Lock.LockTokenRequest\",\"name\":\"lockRequest\",\"type\":\"tuple\"}],\"name\":\"tokenLock\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/token/asset/ERC20/AssetERC20.sol\":\"AssetERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAccessControl {\\n  /**\\n   * @dev Function called by apps to check ACL\\n   * @return boolean indicating whether the ACL allows\\n   */\\n  function hasAccess(\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool);\\n\\n  function isLivelySystemAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyAssetManagerRole(address account) external view returns (bool);\\n\\n  function isLivelyAssetAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyCommunityDaoRole(address account) external view returns (bool);\\n\\n  function isLivelyCommunityDaoExecutorRole(address account) external view returns (bool);\\n\\n  function isLivelyGeneralGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyDaoGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyAssetGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyGeneralRealm(bytes32 context) external view returns (bool);\\n\\n  function isLivelyAssetRealm(bytes32 context) external view returns (bool);\\n\\n  function isContextSafeMode(bytes32 context) external view returns (bool);\\n\\n  function isContextUpgradable(bytes32 context) external view returns (bool);\\n\\n  function isContextExists(bytes32 context) external view returns (bool);\\n\\n  function isContextFunctionExists(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextFunctionEnabled(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextEnabled(bytes32 context) external view returns (bool);\\n\\n  function isGroupExists(bytes32 group) external view returns (bool);\\n\\n  function isGroupEnabled(bytes32 group) external view returns (bool);\\n\\n  function isRoleExists(bytes32 role) external view returns (bool);\\n\\n  function isRoleEnabled(bytes32 role) external view returns (bool);\\n\\n  function isRealmExists(bytes32 realm) external view returns (bool);\\n\\n  function isRealmEnabled(bytes32 realm) external view returns (bool); \\n\\n  function isRealmUpgradable(bytes32 realm) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x625c97e65b5c357c09f26f92a6c8f7e8043aeb191323a71fa6aed0670d8d1dca\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool status;\\n  }\\n\\n   struct RequestPredictContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    bytes32 salt;\\n    address subject;\\n    address deployer;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, bytes32 realm);\\n\\n  event PredictContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, address deployer, address subject, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed contractId, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function registerPredictContext(\\n    bytes memory signature,\\n    RequestPredictContext calldata rpc,\\n    RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0x4811f66509db07ea5b29faf433bf0209e8fd13a822ec371a0da2178289fce71b\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x995554efb87ebf8f119a614386797064b9c6cbed2111e67ba821449067486288\",\"license\":\"MIT\"},\"src/contracts/lib/LContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the context\\n */\\nlibrary LContextUtils {\\n  function generateCtx(address contractId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId));\\n  }\\n}\\n\",\"keccak256\":\"0x379d3f1670e48d86daed450ef0f5b75e59c592aa92b0d9ca2034d1888730969d\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n      return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0x24ae105c45515c06b38bbb435d508d4569a2d03f4b060dc43680bde225c8ee14\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0xc8056320321b6983c6685741b1ba607513a7c6817f4e4a7319b6b45ac9194565\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0xced45d5b03d0fcf6c7bef560d630a997ac0dd182cdbc55549fa3efceb932ea74\",\"license\":\"MIT\"},\"src/contracts/token/asset/ERC20/AssetERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IAssetERC20.sol\\\";\\nimport \\\"../IAssetEntity.sol\\\";\\nimport \\\"../IAssetManagerERC20.sol\\\";\\nimport \\\"../../lively/IERC20.sol\\\";\\nimport \\\"../../../proxy/Initializable.sol\\\";\\nimport \\\"../../../utils/Message.sol\\\";\\nimport \\\"../../../utils/ERC165.sol\\\";\\nimport \\\"../../../lib/cryptography/LECDSA.sol\\\";\\nimport \\\"../../../lib/LContextUtils.sol\\\";\\nimport \\\"../../../lib/LAddress.sol\\\";\\nimport \\\"../../../acl/IAccessControl.sol\\\";\\nimport \\\"../../../acl/IContextManagement.sol\\\";\\n\\ncontract AssetERC20 is Initializable, Message, ERC165, IAssetERC20, IAssetEntity {\\n  using LAddress for address;\\n\\n  struct InitRequest {\\n    bytes32 domainRealm;\\n    bytes32 assetRole;\\n    bytes32 salt;\\n    address subject;\\n    address erc20Token;\\n    address accessControl;\\n    address assetManager;\\n    string domainName;\\n    string domainVersion;\\n    bytes signature;\\n  }\\n\\n  bytes32 private constant _LIVELY_ASSET_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_GROUP\\\"));\\n  bytes32 private constant _LIVELY_ASSET_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_ADMIN_ROLE\\\"));\\n  bytes32 private constant _LIVELY_ASSET_MANAGER_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_MANAGER_ROLE\\\"));\\n\\n  address private _accessControlManager;\\n  address private _erc20Token;\\n  bytes32 private _domainName;\\n  bytes32 private _domainVersion;\\n  bytes32 private _domainRealm;\\n  bytes32 private _assetRole;\\n  bool private _isSafeMode;\\n  \\n  constructor() { _isSafeMode = true; }\\n\\n  function initialize(InitRequest calldata request) public initializer {\\n\\n    try IERC165(request.erc20Token).supportsInterface(type(IERC20).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid ERC20Token Address\\\");\\n    } catch {\\n      revert(\\\"Illegal ERC20Token Address\\\");\\n    }\\n\\n    try IERC165(request.erc20Token).supportsInterface(type(IERC20Extra).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid ERC20TokenExtra Address\\\");\\n    } catch {\\n      revert(\\\"Illegal ERC20TokenExtra Address\\\");\\n    }\\n\\n    try IERC165(request.erc20Token).supportsInterface(type(IERC20Lock).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid ERC20TokenLock Address\\\");\\n    } catch {\\n      revert(\\\"Illegal ERC20TokenLock\\\");\\n    }\\n\\n    try IERC165(request.accessControl).supportsInterface(type(IAccessControl).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid AccessControlManager\\\");\\n    } catch {\\n      revert(\\\"Illegal AccessControlManager\\\");\\n    }     \\n\\n    try IERC165(request.assetManager).supportsInterface(type(IAssetManagerERC20).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid IAssetManagerERC20\\\");\\n    } catch {\\n      revert(\\\"Illegal IAssetManagerERC20\\\");\\n    }     \\n\\n    _accessControlManager = request.accessControl;\\n    require(IAccessControl(_accessControlManager).isRoleEnabled(request.assetRole), \\\"Role Not Found OR Disabled \\\");\\n\\n    _domainRealm = request.domainRealm;    \\n    _domainName = keccak256(abi.encodePacked(request.domainName));\\n    _domainVersion = keccak256(abi.encodePacked(request.domainVersion));    \\n    _erc20Token = request.erc20Token;\\n    _assetRole = request.assetRole;\\n    _isSafeMode = false;\\n  \\n    (IContextManagement.RequestPredictContext memory rpc, IContextManagement.RequestRegisterContext[] memory rrc) = \\n      _createRequestContext(_domainName, _domainVersion, _domainRealm, _assetRole, request.salt, request.subject, request.assetManager);\\n\\n    IContextManagement(_accessControlManager).registerPredictContext(request.signature, rpc, rrc);\\n\\n    emit AssetInitialized(\\n      _msgSender(),\\n      address(this),\\n      _erc20Token,\\n      request.assetManager,\\n      request.subject,\\n      request.domainName,\\n      request.domainVersion,\\n      _domainRealm,\\n      _assetRole      \\n    );\\n  }\\n\\n  function _createRequestContext(\\n    bytes32 domainName,\\n    bytes32 domainVersion,\\n    bytes32 realm,\\n    bytes32 role,\\n    bytes32 salt,\\n    address subject,\\n    address deployer\\n  )\\n    internal\\n    pure\\n    returns (IContextManagement.RequestPredictContext memory, IContextManagement.RequestRegisterContext[] memory)\\n  {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](2);\\n\\n    rrc[0].role = _LIVELY_ASSET_ADMIN_ROLE;\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](1);\\n    rrc[0].funcSelectors[0] = this.assetSafeModeSet.selector;\\n\\n    rrc[1].role = role;\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](10);\\n    rrc[1].funcSelectors[0] = IAssetERC20.tokenLock.selector;\\n    rrc[1].funcSelectors[1] = IAssetERC20.tokenBatchLock.selector;\\n    rrc[1].funcSelectors[2] = IAssetERC20.tokenTransfer.selector;\\n    rrc[1].funcSelectors[3] = IAssetERC20.tokenBatchTransfer.selector;\\n    rrc[1].funcSelectors[4] = IAssetERC20.tokenTransferFrom.selector;\\n    rrc[1].funcSelectors[5] = IAssetERC20.tokenBatchTransferFrom.selector;\\n    rrc[1].funcSelectors[6] = IAssetERC20.tokenApprove.selector;\\n    rrc[1].funcSelectors[7] = IAssetERC20.tokenIncreaseAllowance.selector;\\n    rrc[1].funcSelectors[8] = IAssetERC20.tokenDecreaseAllowance.selector;\\n    rrc[1].funcSelectors[9] = this.withdrawBalance.selector;\\n\\n    IContextManagement.RequestPredictContext memory rpc = IContextManagement.RequestPredictContext({\\n      name: domainName,\\n      version: domainVersion,\\n      realm: realm,\\n      salt: salt,\\n      subject: subject, \\n      deployer: deployer,\\n      status: true\\n    });\\n\\n    return (rpc, rrc);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IAssetEntity).interfaceId ||\\n      interfaceId == type(IAssetERC20).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function tokenLock(IERC20Lock.LockTokenRequest calldata lockRequest) external returns (bytes32) {\\n    _policyInterceptor(this.tokenLock.selector);\\n    require(lockRequest.source == address(this), \\\"Illegal Source Addres\\\");\\n\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenLock.selector);\\n    return IERC20Lock(_erc20Token).lockToken(lockRequest);\\n  }\\n\\n  function tokenBatchLock(IERC20Lock.LockTokenRequest[] calldata lockRequests) external returns (bytes32[] memory) {\\n    _policyInterceptor(this.tokenBatchLock.selector);\\n    for(uint i = 0; i < lockRequests.length; i++) {\\n      require(lockRequests[i].source == address(this), \\\"Illegal Source Addres\\\");\\n    }\\n\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenBatchLock.selector);  \\n    return IERC20Lock(_erc20Token).batchLockToken(lockRequests);\\n  }\\n\\n  function tokenTransfer(address to, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.tokenTransfer.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenTransfer.selector);\\n    return IERC20(_erc20Token).transfer(to, amount);\\n  }\\n\\n  function tokenBatchTransfer(IERC20Extra.BatchTransferRequest[] calldata request) external returns (bool) {\\n    _policyInterceptor(this.tokenBatchTransfer.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenBatchTransfer.selector);\\n    return IERC20Extra(_erc20Token).batchTransfer(request);\\n  }\\n\\n  function tokenTransferFrom(address from, address to, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.tokenTransferFrom.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenTransferFrom.selector);\\n    return IERC20(_erc20Token).transferFrom(from, to, amount);\\n  }\\n\\n  function tokenBatchTransferFrom(IERC20Extra.BatchTransferFromRequest[] calldata request) external returns (bool) {\\n    _policyInterceptor(this.tokenBatchTransferFrom.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenBatchTransferFrom.selector);\\n    return IERC20Extra(_erc20Token).batchTransferFrom(request);\\n  }\\n\\n  function tokenApprove(address spender, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.tokenApprove.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenApprove.selector);\\n    return IERC20(_erc20Token).approve(spender, amount);\\n  }\\n\\n  function tokenIncreaseAllowance(address spender, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.tokenIncreaseAllowance.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenIncreaseAllowance.selector);\\n    return IERC20Extra(_erc20Token).increaseAllowance(spender, amount);\\n  }\\n\\n  function tokenDecreaseAllowance(address spender, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.tokenDecreaseAllowance.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenDecreaseAllowance.selector);\\n    return IERC20Extra(_erc20Token).decreaseAllowance(spender, amount);\\n  }\\n\\n  function assetSafeModeSet(bool status) override public returns (bool) {\\n    require(IAccessControl(_accessControlManager).hasAccess(LContextUtils.generateCtx(address(this)),_msgSender(),this.assetSafeModeSet.selector), \\\"AssetERC20 Access Denied\\\");\\n    require(_getInitializedCount() > 0, \\\"AssetERC20 Not Initialized\\\");\\n    _isSafeMode = status;    \\n    emit AssetSafeModeChanged(_msgSender(), address(this), _domainRealm, status);\\n    return status;  \\n  }\\n\\n  function withdrawBalance(address recepient) public {\\n    _policyInterceptor(this.withdrawBalance.selector);\\n    payable(recepient).transfer(address(this).balance);\\n  }\\n\\n  function assetSafeMode() external view returns (bool) {\\n    return _isSafeMode;\\n  }\\n\\n  function assetType() external pure returns (AssetType) {\\n    return AssetType.ERC20;\\n  }\\n\\n  function assetToken() external view returns (address) {\\n    return _erc20Token;\\n  }\\n\\n  function assetName() external view returns (bytes32) {\\n    return _domainName;\\n  }\\n\\n  function assetVersion() external view returns (bytes32) {\\n    return _domainVersion;\\n  }\\n\\n  function assetRealm() external view returns (bytes32) {\\n    return _domainRealm;\\n  }\\n\\n  function assetRole() external view returns (bytes32) {\\n    return _assetRole;\\n  }\\n\\n   function assetAcl() external view returns (address) {\\n    return _accessControlManager;\\n   }\\n\\n  function assetInitVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable {}\\n\\n  function tokenBalance() external view returns (uint256) {\\n    return IERC20(_erc20Token).balanceOf(address(this));\\n  }\\n\\n  function assetBalance() external view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  function _policyInterceptor(bytes4 funcSelector) private view {\\n    require(!_isSafeMode, \\\"SafeMode: AssetERC20 Call Rejected\\\");\\n    require(IAccessControl(_accessControlManager).hasAccess(LContextUtils.generateCtx(address(this)),_msgSender(),funcSelector), \\\"AssetERC20 Access Denied\\\");\\n  }\\n\\n}\",\"keccak256\":\"0xbd8deb6d49e81a3b9865e7dc7758433201711e3aead062cf2158566b9744d031\",\"license\":\"MIT\"},\"src/contracts/token/asset/ERC20/IAssetERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../lively/IERC20Extra.sol\\\";\\nimport \\\"../../lively/IERC20Lock.sol\\\";\\n\\ninterface IAssetERC20 {\\n\\n  event AssetERC20Called(address indexed sender, address indexed assetId, bytes4 indexed functionSelector);\\n\\n  function tokenLock(IERC20Lock.LockTokenRequest calldata lockRequest) external returns (bytes32);\\n\\n  function tokenBatchLock(IERC20Lock.LockTokenRequest[] calldata lockRequests) external returns (bytes32[] memory);\\n\\n  function tokenTransfer(address to, uint256 amount) external returns (bool);\\n\\n  function tokenBatchTransfer(IERC20Extra.BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function tokenTransferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n  function tokenBatchTransferFrom(IERC20Extra.BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function tokenApprove(address spender, uint256 amount) external returns (bool);\\n\\n  function tokenIncreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function tokenDecreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function tokenBalance() external view returns (uint256); \\n\\n  function assetBalance() external view returns (uint256); \\n}\",\"keccak256\":\"0xe7321bb2c672276566569647e6128a3053883a6c8f4f86905ebb15b1bfeb9b16\",\"license\":\"MIT\"},\"src/contracts/token/asset/IAssetEntity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAssetEntity {\\n\\n  enum Status {\\n    NONE,\\n    ACTIVE,\\n    SAFE_MODE\\n  }\\n\\n  enum AssetType {\\n    NONE,\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n  }\\n\\n  event AssetInitialized(\\n    address indexed sender,\\n    address indexed assetId,\\n    address indexed tokenId,\\n    address assetManager,\\n    address assetSubject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    bytes32 role\\n  );\\n  \\n  event AssetSafeModeChanged(address indexed sender, address indexed assetId, bytes32 indexed realm, bool status);\\n\\n  function assetSafeModeSet(bool status) external returns (bool);\\n\\n  function assetSafeMode() external view returns (bool);\\n\\n  function assetType() external view returns (AssetType);\\n\\n  function assetToken() external view returns (address);\\n\\n  function assetName() external view returns (bytes32);\\n\\n  function assetVersion() external view returns (bytes32);\\n\\n  function assetRealm() external view returns (bytes32);\\n\\n  function assetRole() external view returns (bytes32);\\n\\n  function assetAcl() external view returns (address);\\n\\n  function assetInitVersion() external view returns (uint16);\\n}\",\"keccak256\":\"0x5bdbbd9e7eabcce9c556b4afb4ac4c99eacf279d965373ad399ecf7fc18fd808\",\"license\":\"MIT\"},\"src/contracts/token/asset/IAssetManagerERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../lively/IERC20Extra.sol\\\";\\nimport \\\"../lively/IERC20Lock.sol\\\";\\nimport \\\"./IAssetEntity.sol\\\";\\n\\ninterface IAssetManagerERC20 {\\n\\n  struct CreateAssetRequest {\\n    bytes32 role; \\n    bytes32 salt;\\n    address tokenId; \\n    string assetName; \\n    string assetVersion;     \\n  }\\n\\n  event AssetSubjectUpdated(address indexed sender, address indexed assetSubject);\\n\\n  event TokenRegistered(address indexed sender, address indexed tokenId, string tokenName, string tokenSymbol);\\n  \\n  event AssetCreated(address indexed sender, address indexed assetId, address indexed tokenId, address assetSubject);\\n\\n  event AssetRegistered(address indexed sender, address indexed assetId, address indexed tokenId);\\n\\n  event AssetRemoved(address indexed sender, address indexed assetId, address indexed tokenId);\\n  \\n  event TokenSafeModeChanged(address indexed sender, address indexed tokenId, bool isEnabled);\\n\\n  function createAsset(CreateAssetRequest calldata request) external returns (address);\\n\\n  function updateAssetSubject(address assetSubject, bytes calldata assetCreationSignature) external returns (bool);\\n\\n  function registerToken(address tokenId) external returns (bool);\\n\\n  function registerAsset(address assetId) external returns (bool);\\n\\n  function removeAsset(address assetId) external returns (bool);\\n\\n  function setSafeModeToken(address tokenId, bool isEnabled) external returns (bool);\\n\\n  function tokenLock(address assetId, IERC20Lock.LockTokenRequest calldata lockRequest) external returns (bytes32);\\n\\n  function tokenBatchLock(address assetId, IERC20Lock.LockTokenRequest[] calldata lockRequests) external returns (bytes32[] memory);\\n\\n  function tokenTransfer(address assetId, address to, uint256 amount) external returns (bool);\\n\\n  function tokenBatchTransfer(address assetId, IERC20Extra.BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function tokenTransferFrom(address assetId, address from, address to, uint256 amount) external returns (bool);\\n\\n  function tokenBatchTransferFrom(address assetId, IERC20Extra.BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function tokenApprove(address assetId, address spender, uint256 amount) external returns (bool);\\n\\n  function tokenIncreaseAllowance(address assetId, address spender, uint256 amount) external returns (uint256);\\n\\n  function tokenDecreaseAllowance(address assetId, address spender, uint256 amount) external returns (uint256);\\n\\n  function getAllTokens() external view returns(address[] memory);\\n\\n  function getTokenInfo(address tokenId) external view returns (IAssetEntity.Status, address[] memory);\\n\\n  function isAssetExists(address assetId) external view returns (bool);\\n\\n  function isTokenExists(address tokenId) external view returns (bool);\\n\\n  function getAssetSubject() external view returns (address);\\n\\n  function predictAddress(address implementation, bytes32 salt, address deployer) external view returns (address);\\n}\",\"keccak256\":\"0x2db21dafc5684ef6137735295311169ba4aeb3c1dc6029a3d95eb6aefc8b41b7\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4eb0307590f721f5944b1237ca63905ee5d0a495b0ba26f18a61a25568259ca0\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Extra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERC20Extra {\\n  struct BatchTransferRequest {\\n    address to;\\n    uint256 amount;\\n  }\\n\\n  struct BatchTransferFromRequest {\\n    address from;\\n    address to;\\n    uint256 amount;\\n  }\\n\\n  struct BatchUpdateTaxWhitelistRequest {\\n    address account;\\n    bool isDeleted;\\n  }\\n\\n  event ApprovalIncreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event ApprovalDecreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event TransferFrom(address indexed sender, address indexed from, address indexed to, uint256 amount);\\n\\n  event BatchTransfer(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTransferFrom(address indexed sender, uint256 totalAmount);\\n\\n  event TaxRateUpdated(address indexed sender, uint256 rate);\\n\\n  event TaxWhitelistUpdated(address indexed sender, address indexed account, bool isDeleted);\\n\\n  event Burn(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  event Mint(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  function increaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function decreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function burn(address account, uint256 amount) external returns (uint256);\\n\\n  function mint(address account, uint256 amount) external returns (uint256);\\n\\n  function batchTransfer(BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function batchTransferFrom(BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function updateTaxRate(uint256 taxRate) external returns (bool);\\n\\n  function updateTaxWhitelist(address account, bool isDeleted) external returns (bool);\\n\\n  function batchUpdateTaxWhitelist(BatchUpdateTaxWhitelistRequest[] calldata request) external;\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    bytes calldata signature\\n  ) external returns (bool);\\n\\n  function taxRate() external view returns (uint256);\\n\\n  function taxTreasury() external view returns (address);\\n\\n  function taxWhitelist() external view returns (address[] memory);\\n\\n  function nonce(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbb59e24c40eb21a277d7af836ce202f1a61c5ffc0223f15dbc73a89565b72f2c\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERC20Lock {\\n\\n  struct LockTokenRequest {\\n    address source;\\n    address dest;\\n    uint256 timestamp;\\n    uint256 amount;\\n  }\\n\\n  struct UnLockTokenRequest {\\n    bytes32 lockId;\\n    address account;\\n    string reason;\\n  }\\n\\n  event TokenLocked(bytes32 indexed id, address indexed sender, address indexed src, address account, uint256 timestamp, uint256 amount);\\n\\n  event TokenClaimed(bytes32 indexed id, address indexed sender, address indexed src, uint256 amount);\\n\\n  event TokenUnlocked(bytes32 indexed id, address indexed sender, address indexed account, address dest, uint256 amount, string reason);\\n\\n  event BatchTokenClaimed(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTokenUnlocked(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTokenLocked(address indexed sender, uint256 totalAmount);\\n\\n  function lockToken(LockTokenRequest calldata lockRequest) external returns (bytes32);\\n\\n  function batchLockToken(LockTokenRequest[] calldata lockRequest) external returns (bytes32[] memory);\\n\\n  function unlockToken(UnLockTokenRequest calldata unlockRequest) external returns (uint256);\\n\\n  function batchUnlockToken(UnLockTokenRequest[] calldata unlockRequest) external returns (uint256);\\n\\n  function claimToken(bytes32 lockId) external returns (uint256);\\n\\n  function batchClaimToken(bytes32[] calldata lockIds) external returns (uint256);\\n\\n  function lockInfo(bytes32 lockId, address account) external view returns (uint256, uint128, uint128, address, uint8);\\n\\n  function totalBalanceOf(address account) external view returns (uint256);\\n\\n  function lockBalanceOf(address account) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0x2764455aaa3a143ac77bb473819c6bfdecd278f40a6bee8492a91d59a3e0f051\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xe50c06dcb5dd747db00a5fe5c5e9561408d8b334609990bf331902d87ee7fd07\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1a29e5e4f28e3c4116c0e31faa26fab4960723dd167b122ed9fc12b04753d1a8\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xd7f32a98cfe501a9cf4367741613707a55b5201aac314bd36c63af9733b3df72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506006805460ff191660011790556125748061002d6000396000f3fe6080604052600436106101435760003560e01c8063961974ba116100b0578063c66f24551161006c578063c66f2455146103a5578063c9230c5d146103b8578063dbc2d852146103cd578063e9dbebbd146103ed578063f1296fc51461040d578063fc5240641461042257005b8063961974ba146102f85780639c42c5ec146103185780639e00fcc2146103385780639e1a4d191461035b578063a52e8e6014610370578063ba4771ba1461039057005b80634cfb9949116100ff5780634cfb9949146102335780635ce6e2001461024b57806368cdafe61461026b57806370c55c021461028b578063756af45f146102b8578063846981c8146102d857005b806301ffc9a71461014c5780630cd689f5146101815780630ee0f6c2146101a15780631083f761146101da5780633c872e5f146101f85780633fe3347a1461021757005b3661014a57005b005b34801561015857600080fd5b5061016c610167366004611d55565b610442565b60405190151581526020015b60405180910390f35b34801561018d57600080fd5b5061016c61019c366004611d9b565b610494565b3480156101ad57600080fd5b50600054630100000090046001600160a01b03165b6040516001600160a01b039091168152602001610178565b3480156101e657600080fd5b506001546001600160a01b03166101c2565b34801561020457600080fd5b506003545b604051908152602001610178565b34801561022357600080fd5b5060016040516101789190611dc5565b34801561023f57600080fd5b5060065460ff1661016c565b34801561025757600080fd5b5061014a610266366004611ded565b610549565b34801561027757600080fd5b5061016c610286366004611d9b565b610e7d565b34801561029757600080fd5b506102ab6102a6366004611e29565b610eec565b6040516101789190611e9e565b3480156102c457600080fd5b5061014a6102d3366004611ee2565b611030565b3480156102e457600080fd5b506102096102f3366004611efd565b611075565b34801561030457600080fd5b5061016c610313366004611f15565b61117a565b34801561032457600080fd5b5061016c610333366004611f51565b611237565b34801561034457600080fd5b5060005460405161ffff9091168152602001610178565b34801561036757600080fd5b506102096112a4565b34801561037c57600080fd5b5061020961038b366004611d9b565b611311565b34801561039c57600080fd5b50600554610209565b3480156103b157600080fd5b5047610209565b3480156103c457600080fd5b50600254610209565b3480156103d957600080fd5b5061016c6103e8366004611fc2565b6113bf565b3480156103f957600080fd5b5061016c610408366004611fdf565b611543565b34801561041957600080fd5b50600454610209565b34801561042e57600080fd5b5061020961043d366004611d9b565b6115ab565b60006001600160e01b03198216639673b47d60e01b148061047357506001600160e01b0319821663391f033d60e11b145b8061048e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006104a6630cd689f560e01b61161a565b604051630cd689f560e01b903090339060008051602061251f83398151915290600090a460015460405163095ea7b360e01b81526001600160a01b038581166004830152602482018590529091169063095ea7b3906044015b6020604051808303816000875af115801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190612042565b9392505050565b60005462010000900460ff161580801561056b5750600054600161ffff909116105b806105865750303b158015610586575060005461ffff166001145b6105d75760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a65640000000060448201526064015b60405180910390fd5b6000805461ffff1916600117905580156105fd576000805462ff00001916620100001790555b61060d60a0830160808401611ee2565b6001600160a01b03166301ffc9a7634a17459160e11b6040518263ffffffff1660e01b815260040161063f919061205f565b602060405180830381865afa925050508015610678575060408051601f3d908101601f1916820190925261067591810190612042565b60015b6106c45760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204552433230546f6b656e204164647265737300000000000060448201526064016105ce565b806107115760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204552433230546f6b656e204164647265737300000000000060448201526064016105ce565b5061072260a0830160808401611ee2565b6001600160a01b03166301ffc9a763e3a31a9d60e01b6040518263ffffffff1660e01b8152600401610754919061205f565b602060405180830381865afa92505050801561078d575060408051601f3d908101601f1916820190925261078a91810190612042565b60015b6107d95760405162461bcd60e51b815260206004820152601f60248201527f496c6c6567616c204552433230546f6b656e457874726120416464726573730060448201526064016105ce565b806108265760405162461bcd60e51b815260206004820152601f60248201527f496e76616c6964204552433230546f6b656e457874726120416464726573730060448201526064016105ce565b5061083760a0830160808401611ee2565b6001600160a01b03166301ffc9a7627b720760e91b6040518263ffffffff1660e01b8152600401610868919061205f565b602060405180830381865afa9250505080156108a1575060408051601f3d908101601f1916820190925261089e91810190612042565b60015b6108e65760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c204552433230546f6b656e4c6f636b60501b60448201526064016105ce565b806109335760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964204552433230546f6b656e4c6f636b2041646472657373000060448201526064016105ce565b5061094460c0830160a08401611ee2565b6001600160a01b03166301ffc9a76314b8343560e31b6040518263ffffffff1660e01b8152600401610976919061205f565b602060405180830381865afa9250505080156109af575060408051601f3d908101601f191682019092526109ac91810190612042565b60015b6109fb5760405162461bcd60e51b815260206004820152601c60248201527f496c6c6567616c20416363657373436f6e74726f6c4d616e616765720000000060448201526064016105ce565b80610a485760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420416363657373436f6e74726f6c4d616e616765720000000060448201526064016105ce565b50610a5960e0830160c08401611ee2565b6001600160a01b03166301ffc9a7631c8b5d5b60e11b6040518263ffffffff1660e01b8152600401610a8b919061205f565b602060405180830381865afa925050508015610ac4575060408051601f3d908101601f19168201909252610ac191810190612042565b60015b610b105760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204941737365744d616e61676572455243323000000000000060448201526064016105ce565b80610b5d5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204941737365744d616e61676572455243323000000000000060448201526064016105ce565b50610b6e60c0830160a08401611ee2565b600080546301000000600160b81b03191663010000006001600160a01b0393841681029190911791829055604051632f032edd60e01b815260208601356004820152910490911690632f032edd90602401602060405180830381865afa158015610bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c009190612042565b610c4c5760405162461bcd60e51b815260206004820152601b60248201527f526f6c65204e6f7420466f756e64204f522044697361626c656420000000000060448201526064016105ce565b8135600455610c5e60e0830183612074565b604051602001610c6f9291906120c2565b60408051601f198184030181529190528051602090910120600255610c98610100830183612074565b604051602001610ca99291906120c2565b60408051601f198184030181529190528051602090910120600355610cd460a0830160808401611ee2565b600180546001600160a01b0319166001600160a01b0392909216919091179055602082013560058190556006805460ff191690556002546003546004546000938493610d4893909290916040890135610d3360808b0160608c01611ee2565b610d4360e08c0160c08d01611ee2565b611744565b6000549193509150630100000090046001600160a01b0316637b443379610d73610120870187612074565b85856040518563ffffffff1660e01b8152600401610d9494939291906121a7565b6020604051808303816000875af1158015610db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd7919061222f565b506001546001600160a01b031630337f4e149bf06550b750e3ae2aa4b8f3300c462ddb3af0ae64e461d380004fd39e96610e1760e0890160c08a01611ee2565b610e2760808a0160608b01611ee2565b610e3460e08b018b612074565b610e426101008d018d612074565b600454600554604051610e5c989796959493929190612248565b60405180910390a450508015610e79576000805462ff0000191690555b5050565b6000610e8f633466d7f360e11b61161a565b604051633466d7f360e11b903090339060008051602061251f83398151915290600090a460015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016104ff565b6060610efe633862ae0160e11b61161a565b60005b82811015610f925730848483818110610f1c57610f1c6122a0565b610f329260206080909202019081019150611ee2565b6001600160a01b031614610f805760405162461bcd60e51b8152602060048201526015602482015274496c6c6567616c20536f757263652041646472657360581b60448201526064016105ce565b80610f8a816122b6565b915050610f01565b50604051633862ae0160e11b903090339060008051602061251f83398151915290600090a4600154604051639a7e187360e01b81526001600160a01b0390911690639a7e187390610fe9908690869060040161231b565b6000604051808303816000875af1158015611008573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105429190810190612373565b61104063756af45f60e01b61161a565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610e79573d6000803e3d6000fd5b600061108763108d303960e31b61161a565b306110956020840184611ee2565b6001600160a01b0316146110e35760405162461bcd60e51b8152602060048201526015602482015274496c6c6567616c20536f757263652041646472657360581b60448201526064016105ce565b60405163108d303960e31b903090339060008051602061251f83398151915290600090a46001546040516335c1ca4960e11b81526001600160a01b0390911690636b83949290611137908590600401612431565b6020604051808303816000875af1158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e919061222f565b600061118c634b0cba5d60e11b61161a565b604051634b0cba5d60e11b903090339060008051602061251f83398151915290600090a46001546040516323b872dd60e01b81526001600160a01b038681166004830152858116602483015260448201859052909116906323b872dd906064016020604051808303816000875af115801561120b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f9190612042565b949350505050565b6000611249632710b17b60e21b61161a565b604051632710b17b60e21b903090339060008051602061251f83398151915290600090a460015460405163038d251d60e31b81526001600160a01b0390911690631c6928e8906104ff908690869060040161243f565b905090565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f919061222f565b6000611323630529747360e51b61161a565b604051630529747360e51b903090339060008051602061251f83398151915290600090a460015460405163a457c2d760e01b81526001600160a01b038581166004830152602482018590529091169063a457c2d7906044015b6020604051808303816000875af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610542919061222f565b60008054630100000090046001600160a01b031663c7ab39e66113e130611d16565b336040516001600160e01b031960e085901b16815261140d929190636de16c2960e11b906004016124ab565b602060405180830381865afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e9190612042565b6114955760405162461bcd60e51b8152602060048201526018602482015277105cdcd95d115490cc8c081058d8d95cdcc811195b9a595960421b60448201526064016105ce565b60005461ffff166114e85760405162461bcd60e51b815260206004820152601a60248201527f41737365744552433230204e6f7420496e697469616c697a656400000000000060448201526064016105ce565b6006805460ff191683151517905560045430336001600160a01b03167f81142a54c3126b9c1789bd912322adcca4d73a5010d8049eaa6d63ab4c0b515485604051611537911515815260200190565b60405180910390a45090565b600061155563e9dbebbd60e01b61161a565b60405163e9dbebbd60e01b903090339060008051602061251f83398151915290600090a4600154604051631f54aa5560e31b81526001600160a01b039091169063faa552a8906104ff90869086906004016124d4565b60006115bd633f14901960e21b61161a565b604051633f14901960e21b903090339060008051602061251f83398151915290600090a4600154604051633950935160e01b81526001600160a01b038581166004830152602482018590529091169063395093519060440161137c565b60065460ff16156116785760405162461bcd60e51b815260206004820152602260248201527f536166654d6f64653a20417373657445524332302043616c6c2052656a656374604482015261195960f21b60648201526084016105ce565b600054630100000090046001600160a01b031663c7ab39e661169930611d16565b33846040518463ffffffff1660e01b81526004016116b9939291906124ab565b602060405180830381865afa1580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fa9190612042565b6117415760405162461bcd60e51b8152602060048201526018602482015277105cdcd95d115490cc8c081058d8d95cdcc811195b9a595960421b60448201526064016105ce565b50565b6040805160e08101825260008082526020820181905281830181905260608083018290526080830182905260a0830182905260c08301829052835160028082528183019095529293909290816020015b60408051606080820183526000808352602083019190915291810191909152815260200190600190039081611794579050506040517f4c4956454c595f41535345545f41444d494e5f524f4c450000000000000000006020820152909150603701604051602081830303815290604052805190602001208160008151811061181e5761181e6122a0565b60200260200101516000018181525050600181600081518110611843576118436122a0565b602090810291909101015190151560409182015280516001808252818301909252908160200160208202803683370190505081600081518110611888576118886122a0565b60200260200101516020018190525063dbc2d85260e01b816000815181106118b2576118b26122a0565b6020026020010151602001516000815181106118d0576118d06122a0565b60200260200101906001600160e01b03191690816001600160e01b031916815250508681600181518110611906576119066122a0565b6020026020010151600001818152505060018160018151811061192b5761192b6122a0565b6020908102919091018101519115156040928301528151600a808252610160820190935291908201610140803683370190505081600181518110611971576119716122a0565b60200260200101516020018190525063846981c860e01b8160018151811061199b5761199b6122a0565b6020026020010151602001516000815181106119b9576119b96122a0565b6001600160e01b0319909216602092830291909101909101528051633862ae0160e11b90829060019081106119f0576119f06122a0565b602002602001015160200151600181518110611a0e57611a0e6122a0565b6001600160e01b0319909216602092830291909101909101528051633466d7f360e11b9082906001908110611a4557611a456122a0565b602002602001015160200151600281518110611a6357611a636122a0565b6001600160e01b031990921660209283029190910190910152805163e9dbebbd60e01b9082906001908110611a9a57611a9a6122a0565b602002602001015160200151600381518110611ab857611ab86122a0565b6001600160e01b0319909216602092830291909101909101528051634b0cba5d60e11b9082906001908110611aef57611aef6122a0565b602002602001015160200151600481518110611b0d57611b0d6122a0565b6001600160e01b0319909216602092830291909101909101528051632710b17b60e21b9082906001908110611b4457611b446122a0565b602002602001015160200151600581518110611b6257611b626122a0565b6001600160e01b0319909216602092830291909101909101528051630cd689f560e01b9082906001908110611b9957611b996122a0565b602002602001015160200151600681518110611bb757611bb76122a0565b6001600160e01b0319909216602092830291909101909101528051633f14901960e21b9082906001908110611bee57611bee6122a0565b602002602001015160200151600781518110611c0c57611c0c6122a0565b6001600160e01b0319909216602092830291909101909101528051630529747360e51b9082906001908110611c4357611c436122a0565b602002602001015160200151600881518110611c6157611c616122a0565b6001600160e01b031990921660209283029190910190910152805163756af45f60e01b9082906001908110611c9857611c986122a0565b602002602001015160200151600981518110611cb657611cb66122a0565b6001600160e01b0319929092166020928302919091018201526040805160e0810182529b8c52908b0199909952978901969096525060608701929092526001600160a01b0390811660808701521660a08501525050600160c08301529091565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b600060208284031215611d6757600080fd5b81356001600160e01b03198116811461054257600080fd5b80356001600160a01b0381168114611d9657600080fd5b919050565b60008060408385031215611dae57600080fd5b611db783611d7f565b946020939093013593505050565b6020810160048310611de757634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215611dff57600080fd5b813567ffffffffffffffff811115611e1657600080fd5b8201610140818503121561054257600080fd5b60008060208385031215611e3c57600080fd5b823567ffffffffffffffff80821115611e5457600080fd5b818501915085601f830112611e6857600080fd5b813581811115611e7757600080fd5b8660208260071b8501011115611e8c57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015611ed657835183529284019291840191600101611eba565b50909695505050505050565b600060208284031215611ef457600080fd5b61054282611d7f565b600060808284031215611f0f57600080fd5b50919050565b600080600060608486031215611f2a57600080fd5b611f3384611d7f565b9250611f4160208501611d7f565b9150604084013590509250925092565b60008060208385031215611f6457600080fd5b823567ffffffffffffffff80821115611f7c57600080fd5b818501915085601f830112611f9057600080fd5b813581811115611f9f57600080fd5b866020606083028501011115611e8c57600080fd5b801515811461174157600080fd5b600060208284031215611fd457600080fd5b813561054281611fb4565b60008060208385031215611ff257600080fd5b823567ffffffffffffffff8082111561200a57600080fd5b818501915085601f83011261201e57600080fd5b81358181111561202d57600080fd5b8660208260061b8501011115611e8c57600080fd5b60006020828403121561205457600080fd5b815161054281611fb4565b6001600160e01b031991909116815260200190565b6000808335601e1984360301811261208b57600080fd5b83018035915067ffffffffffffffff8211156120a657600080fd5b6020019150368190038213156120bb57600080fd5b9250929050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526020808501808196508360051b810191508286016000805b86811015612199578385038a528251805186528681015160608888018190528151908801819052608088019189019085905b808210156121765782516001600160e01b0319168452928a0192918a01916001919091019061214c565b50505060409182015115159690910195909552988501989185019160010161211a565b509298975050505050505050565b60006101208083526121bc81840187896120d2565b905084516020840152602085015160408401526040850151606084015260608501516080840152608085015160018060a01b0380821660a08601528060a08801511660c0860152505060c0850151151560e084015282810361010084015261222481856120fb565b979650505050505050565b60006020828403121561224157600080fd5b5051919050565b6001600160a01b0389811682528816602082015260c060408201819052600090612275908301888a6120d2565b82810360608401526122888187896120d2565b6080840195909552505060a001529695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016122d657634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b03806122ef83611d7f565b168352806122ff60208401611d7f565b1660208401525060408181013590830152606090810135910152565b6020808252810182905260008360408301825b858110156123535761234082846122dd565b608092830192919091019060010161232e565b5095945050505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561238657600080fd5b825167ffffffffffffffff8082111561239e57600080fd5b818501915085601f8301126123b257600080fd5b8151818111156123c4576123c461235d565b8060051b604051601f19603f830116810181811085821117156123e9576123e961235d565b60405291825284820192508381018501918883111561240757600080fd5b938501935b828510156124255784518452938501939285019261240c565b98975050505050505050565b6080810161048e82846122dd565b6020808252818101839052600090604080840186845b8781101561249e576001600160a01b038061246f84611d7f565b1684528061247e878501611d7f565b168487015250818401358484015260609283019290910190600101612455565b5090979650505050505050565b9283526001600160a01b039190911660208301526001600160e01b031916604082015260600190565b6020808252818101839052600090604080840186845b8781101561249e576001600160a01b0361250383611d7f565b168352818501358584015291830191908301906001016124ea56fe33c2ad0e769b5a5e7f07ab57ff61ae195b76839fc48d116ffe8dc881334fa213a26469706673582212200e4a3819805780b213c745a0a0c12a2d83fabf2bb0fe218a2c539178c24bad7164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101435760003560e01c8063961974ba116100b0578063c66f24551161006c578063c66f2455146103a5578063c9230c5d146103b8578063dbc2d852146103cd578063e9dbebbd146103ed578063f1296fc51461040d578063fc5240641461042257005b8063961974ba146102f85780639c42c5ec146103185780639e00fcc2146103385780639e1a4d191461035b578063a52e8e6014610370578063ba4771ba1461039057005b80634cfb9949116100ff5780634cfb9949146102335780635ce6e2001461024b57806368cdafe61461026b57806370c55c021461028b578063756af45f146102b8578063846981c8146102d857005b806301ffc9a71461014c5780630cd689f5146101815780630ee0f6c2146101a15780631083f761146101da5780633c872e5f146101f85780633fe3347a1461021757005b3661014a57005b005b34801561015857600080fd5b5061016c610167366004611d55565b610442565b60405190151581526020015b60405180910390f35b34801561018d57600080fd5b5061016c61019c366004611d9b565b610494565b3480156101ad57600080fd5b50600054630100000090046001600160a01b03165b6040516001600160a01b039091168152602001610178565b3480156101e657600080fd5b506001546001600160a01b03166101c2565b34801561020457600080fd5b506003545b604051908152602001610178565b34801561022357600080fd5b5060016040516101789190611dc5565b34801561023f57600080fd5b5060065460ff1661016c565b34801561025757600080fd5b5061014a610266366004611ded565b610549565b34801561027757600080fd5b5061016c610286366004611d9b565b610e7d565b34801561029757600080fd5b506102ab6102a6366004611e29565b610eec565b6040516101789190611e9e565b3480156102c457600080fd5b5061014a6102d3366004611ee2565b611030565b3480156102e457600080fd5b506102096102f3366004611efd565b611075565b34801561030457600080fd5b5061016c610313366004611f15565b61117a565b34801561032457600080fd5b5061016c610333366004611f51565b611237565b34801561034457600080fd5b5060005460405161ffff9091168152602001610178565b34801561036757600080fd5b506102096112a4565b34801561037c57600080fd5b5061020961038b366004611d9b565b611311565b34801561039c57600080fd5b50600554610209565b3480156103b157600080fd5b5047610209565b3480156103c457600080fd5b50600254610209565b3480156103d957600080fd5b5061016c6103e8366004611fc2565b6113bf565b3480156103f957600080fd5b5061016c610408366004611fdf565b611543565b34801561041957600080fd5b50600454610209565b34801561042e57600080fd5b5061020961043d366004611d9b565b6115ab565b60006001600160e01b03198216639673b47d60e01b148061047357506001600160e01b0319821663391f033d60e11b145b8061048e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006104a6630cd689f560e01b61161a565b604051630cd689f560e01b903090339060008051602061251f83398151915290600090a460015460405163095ea7b360e01b81526001600160a01b038581166004830152602482018590529091169063095ea7b3906044015b6020604051808303816000875af115801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190612042565b9392505050565b60005462010000900460ff161580801561056b5750600054600161ffff909116105b806105865750303b158015610586575060005461ffff166001145b6105d75760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a65640000000060448201526064015b60405180910390fd5b6000805461ffff1916600117905580156105fd576000805462ff00001916620100001790555b61060d60a0830160808401611ee2565b6001600160a01b03166301ffc9a7634a17459160e11b6040518263ffffffff1660e01b815260040161063f919061205f565b602060405180830381865afa925050508015610678575060408051601f3d908101601f1916820190925261067591810190612042565b60015b6106c45760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204552433230546f6b656e204164647265737300000000000060448201526064016105ce565b806107115760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204552433230546f6b656e204164647265737300000000000060448201526064016105ce565b5061072260a0830160808401611ee2565b6001600160a01b03166301ffc9a763e3a31a9d60e01b6040518263ffffffff1660e01b8152600401610754919061205f565b602060405180830381865afa92505050801561078d575060408051601f3d908101601f1916820190925261078a91810190612042565b60015b6107d95760405162461bcd60e51b815260206004820152601f60248201527f496c6c6567616c204552433230546f6b656e457874726120416464726573730060448201526064016105ce565b806108265760405162461bcd60e51b815260206004820152601f60248201527f496e76616c6964204552433230546f6b656e457874726120416464726573730060448201526064016105ce565b5061083760a0830160808401611ee2565b6001600160a01b03166301ffc9a7627b720760e91b6040518263ffffffff1660e01b8152600401610868919061205f565b602060405180830381865afa9250505080156108a1575060408051601f3d908101601f1916820190925261089e91810190612042565b60015b6108e65760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c204552433230546f6b656e4c6f636b60501b60448201526064016105ce565b806109335760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964204552433230546f6b656e4c6f636b2041646472657373000060448201526064016105ce565b5061094460c0830160a08401611ee2565b6001600160a01b03166301ffc9a76314b8343560e31b6040518263ffffffff1660e01b8152600401610976919061205f565b602060405180830381865afa9250505080156109af575060408051601f3d908101601f191682019092526109ac91810190612042565b60015b6109fb5760405162461bcd60e51b815260206004820152601c60248201527f496c6c6567616c20416363657373436f6e74726f6c4d616e616765720000000060448201526064016105ce565b80610a485760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420416363657373436f6e74726f6c4d616e616765720000000060448201526064016105ce565b50610a5960e0830160c08401611ee2565b6001600160a01b03166301ffc9a7631c8b5d5b60e11b6040518263ffffffff1660e01b8152600401610a8b919061205f565b602060405180830381865afa925050508015610ac4575060408051601f3d908101601f19168201909252610ac191810190612042565b60015b610b105760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204941737365744d616e61676572455243323000000000000060448201526064016105ce565b80610b5d5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204941737365744d616e61676572455243323000000000000060448201526064016105ce565b50610b6e60c0830160a08401611ee2565b600080546301000000600160b81b03191663010000006001600160a01b0393841681029190911791829055604051632f032edd60e01b815260208601356004820152910490911690632f032edd90602401602060405180830381865afa158015610bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c009190612042565b610c4c5760405162461bcd60e51b815260206004820152601b60248201527f526f6c65204e6f7420466f756e64204f522044697361626c656420000000000060448201526064016105ce565b8135600455610c5e60e0830183612074565b604051602001610c6f9291906120c2565b60408051601f198184030181529190528051602090910120600255610c98610100830183612074565b604051602001610ca99291906120c2565b60408051601f198184030181529190528051602090910120600355610cd460a0830160808401611ee2565b600180546001600160a01b0319166001600160a01b0392909216919091179055602082013560058190556006805460ff191690556002546003546004546000938493610d4893909290916040890135610d3360808b0160608c01611ee2565b610d4360e08c0160c08d01611ee2565b611744565b6000549193509150630100000090046001600160a01b0316637b443379610d73610120870187612074565b85856040518563ffffffff1660e01b8152600401610d9494939291906121a7565b6020604051808303816000875af1158015610db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd7919061222f565b506001546001600160a01b031630337f4e149bf06550b750e3ae2aa4b8f3300c462ddb3af0ae64e461d380004fd39e96610e1760e0890160c08a01611ee2565b610e2760808a0160608b01611ee2565b610e3460e08b018b612074565b610e426101008d018d612074565b600454600554604051610e5c989796959493929190612248565b60405180910390a450508015610e79576000805462ff0000191690555b5050565b6000610e8f633466d7f360e11b61161a565b604051633466d7f360e11b903090339060008051602061251f83398151915290600090a460015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016104ff565b6060610efe633862ae0160e11b61161a565b60005b82811015610f925730848483818110610f1c57610f1c6122a0565b610f329260206080909202019081019150611ee2565b6001600160a01b031614610f805760405162461bcd60e51b8152602060048201526015602482015274496c6c6567616c20536f757263652041646472657360581b60448201526064016105ce565b80610f8a816122b6565b915050610f01565b50604051633862ae0160e11b903090339060008051602061251f83398151915290600090a4600154604051639a7e187360e01b81526001600160a01b0390911690639a7e187390610fe9908690869060040161231b565b6000604051808303816000875af1158015611008573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105429190810190612373565b61104063756af45f60e01b61161a565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610e79573d6000803e3d6000fd5b600061108763108d303960e31b61161a565b306110956020840184611ee2565b6001600160a01b0316146110e35760405162461bcd60e51b8152602060048201526015602482015274496c6c6567616c20536f757263652041646472657360581b60448201526064016105ce565b60405163108d303960e31b903090339060008051602061251f83398151915290600090a46001546040516335c1ca4960e11b81526001600160a01b0390911690636b83949290611137908590600401612431565b6020604051808303816000875af1158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048e919061222f565b600061118c634b0cba5d60e11b61161a565b604051634b0cba5d60e11b903090339060008051602061251f83398151915290600090a46001546040516323b872dd60e01b81526001600160a01b038681166004830152858116602483015260448201859052909116906323b872dd906064016020604051808303816000875af115801561120b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122f9190612042565b949350505050565b6000611249632710b17b60e21b61161a565b604051632710b17b60e21b903090339060008051602061251f83398151915290600090a460015460405163038d251d60e31b81526001600160a01b0390911690631c6928e8906104ff908690869060040161243f565b905090565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156112ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f919061222f565b6000611323630529747360e51b61161a565b604051630529747360e51b903090339060008051602061251f83398151915290600090a460015460405163a457c2d760e01b81526001600160a01b038581166004830152602482018590529091169063a457c2d7906044015b6020604051808303816000875af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610542919061222f565b60008054630100000090046001600160a01b031663c7ab39e66113e130611d16565b336040516001600160e01b031960e085901b16815261140d929190636de16c2960e11b906004016124ab565b602060405180830381865afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e9190612042565b6114955760405162461bcd60e51b8152602060048201526018602482015277105cdcd95d115490cc8c081058d8d95cdcc811195b9a595960421b60448201526064016105ce565b60005461ffff166114e85760405162461bcd60e51b815260206004820152601a60248201527f41737365744552433230204e6f7420496e697469616c697a656400000000000060448201526064016105ce565b6006805460ff191683151517905560045430336001600160a01b03167f81142a54c3126b9c1789bd912322adcca4d73a5010d8049eaa6d63ab4c0b515485604051611537911515815260200190565b60405180910390a45090565b600061155563e9dbebbd60e01b61161a565b60405163e9dbebbd60e01b903090339060008051602061251f83398151915290600090a4600154604051631f54aa5560e31b81526001600160a01b039091169063faa552a8906104ff90869086906004016124d4565b60006115bd633f14901960e21b61161a565b604051633f14901960e21b903090339060008051602061251f83398151915290600090a4600154604051633950935160e01b81526001600160a01b038581166004830152602482018590529091169063395093519060440161137c565b60065460ff16156116785760405162461bcd60e51b815260206004820152602260248201527f536166654d6f64653a20417373657445524332302043616c6c2052656a656374604482015261195960f21b60648201526084016105ce565b600054630100000090046001600160a01b031663c7ab39e661169930611d16565b33846040518463ffffffff1660e01b81526004016116b9939291906124ab565b602060405180830381865afa1580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fa9190612042565b6117415760405162461bcd60e51b8152602060048201526018602482015277105cdcd95d115490cc8c081058d8d95cdcc811195b9a595960421b60448201526064016105ce565b50565b6040805160e08101825260008082526020820181905281830181905260608083018290526080830182905260a0830182905260c08301829052835160028082528183019095529293909290816020015b60408051606080820183526000808352602083019190915291810191909152815260200190600190039081611794579050506040517f4c4956454c595f41535345545f41444d494e5f524f4c450000000000000000006020820152909150603701604051602081830303815290604052805190602001208160008151811061181e5761181e6122a0565b60200260200101516000018181525050600181600081518110611843576118436122a0565b602090810291909101015190151560409182015280516001808252818301909252908160200160208202803683370190505081600081518110611888576118886122a0565b60200260200101516020018190525063dbc2d85260e01b816000815181106118b2576118b26122a0565b6020026020010151602001516000815181106118d0576118d06122a0565b60200260200101906001600160e01b03191690816001600160e01b031916815250508681600181518110611906576119066122a0565b6020026020010151600001818152505060018160018151811061192b5761192b6122a0565b6020908102919091018101519115156040928301528151600a808252610160820190935291908201610140803683370190505081600181518110611971576119716122a0565b60200260200101516020018190525063846981c860e01b8160018151811061199b5761199b6122a0565b6020026020010151602001516000815181106119b9576119b96122a0565b6001600160e01b0319909216602092830291909101909101528051633862ae0160e11b90829060019081106119f0576119f06122a0565b602002602001015160200151600181518110611a0e57611a0e6122a0565b6001600160e01b0319909216602092830291909101909101528051633466d7f360e11b9082906001908110611a4557611a456122a0565b602002602001015160200151600281518110611a6357611a636122a0565b6001600160e01b031990921660209283029190910190910152805163e9dbebbd60e01b9082906001908110611a9a57611a9a6122a0565b602002602001015160200151600381518110611ab857611ab86122a0565b6001600160e01b0319909216602092830291909101909101528051634b0cba5d60e11b9082906001908110611aef57611aef6122a0565b602002602001015160200151600481518110611b0d57611b0d6122a0565b6001600160e01b0319909216602092830291909101909101528051632710b17b60e21b9082906001908110611b4457611b446122a0565b602002602001015160200151600581518110611b6257611b626122a0565b6001600160e01b0319909216602092830291909101909101528051630cd689f560e01b9082906001908110611b9957611b996122a0565b602002602001015160200151600681518110611bb757611bb76122a0565b6001600160e01b0319909216602092830291909101909101528051633f14901960e21b9082906001908110611bee57611bee6122a0565b602002602001015160200151600781518110611c0c57611c0c6122a0565b6001600160e01b0319909216602092830291909101909101528051630529747360e51b9082906001908110611c4357611c436122a0565b602002602001015160200151600881518110611c6157611c616122a0565b6001600160e01b031990921660209283029190910190910152805163756af45f60e01b9082906001908110611c9857611c986122a0565b602002602001015160200151600981518110611cb657611cb66122a0565b6001600160e01b0319929092166020928302919091018201526040805160e0810182529b8c52908b0199909952978901969096525060608701929092526001600160a01b0390811660808701521660a08501525050600160c08301529091565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b600060208284031215611d6757600080fd5b81356001600160e01b03198116811461054257600080fd5b80356001600160a01b0381168114611d9657600080fd5b919050565b60008060408385031215611dae57600080fd5b611db783611d7f565b946020939093013593505050565b6020810160048310611de757634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215611dff57600080fd5b813567ffffffffffffffff811115611e1657600080fd5b8201610140818503121561054257600080fd5b60008060208385031215611e3c57600080fd5b823567ffffffffffffffff80821115611e5457600080fd5b818501915085601f830112611e6857600080fd5b813581811115611e7757600080fd5b8660208260071b8501011115611e8c57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015611ed657835183529284019291840191600101611eba565b50909695505050505050565b600060208284031215611ef457600080fd5b61054282611d7f565b600060808284031215611f0f57600080fd5b50919050565b600080600060608486031215611f2a57600080fd5b611f3384611d7f565b9250611f4160208501611d7f565b9150604084013590509250925092565b60008060208385031215611f6457600080fd5b823567ffffffffffffffff80821115611f7c57600080fd5b818501915085601f830112611f9057600080fd5b813581811115611f9f57600080fd5b866020606083028501011115611e8c57600080fd5b801515811461174157600080fd5b600060208284031215611fd457600080fd5b813561054281611fb4565b60008060208385031215611ff257600080fd5b823567ffffffffffffffff8082111561200a57600080fd5b818501915085601f83011261201e57600080fd5b81358181111561202d57600080fd5b8660208260061b8501011115611e8c57600080fd5b60006020828403121561205457600080fd5b815161054281611fb4565b6001600160e01b031991909116815260200190565b6000808335601e1984360301811261208b57600080fd5b83018035915067ffffffffffffffff8211156120a657600080fd5b6020019150368190038213156120bb57600080fd5b9250929050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526020808501808196508360051b810191508286016000805b86811015612199578385038a528251805186528681015160608888018190528151908801819052608088019189019085905b808210156121765782516001600160e01b0319168452928a0192918a01916001919091019061214c565b50505060409182015115159690910195909552988501989185019160010161211a565b509298975050505050505050565b60006101208083526121bc81840187896120d2565b905084516020840152602085015160408401526040850151606084015260608501516080840152608085015160018060a01b0380821660a08601528060a08801511660c0860152505060c0850151151560e084015282810361010084015261222481856120fb565b979650505050505050565b60006020828403121561224157600080fd5b5051919050565b6001600160a01b0389811682528816602082015260c060408201819052600090612275908301888a6120d2565b82810360608401526122888187896120d2565b6080840195909552505060a001529695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016122d657634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b03806122ef83611d7f565b168352806122ff60208401611d7f565b1660208401525060408181013590830152606090810135910152565b6020808252810182905260008360408301825b858110156123535761234082846122dd565b608092830192919091019060010161232e565b5095945050505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561238657600080fd5b825167ffffffffffffffff8082111561239e57600080fd5b818501915085601f8301126123b257600080fd5b8151818111156123c4576123c461235d565b8060051b604051601f19603f830116810181811085821117156123e9576123e961235d565b60405291825284820192508381018501918883111561240757600080fd5b938501935b828510156124255784518452938501939285019261240c565b98975050505050505050565b6080810161048e82846122dd565b6020808252818101839052600090604080840186845b8781101561249e576001600160a01b038061246f84611d7f565b1684528061247e878501611d7f565b168487015250818401358484015260609283019290910190600101612455565b5090979650505050505050565b9283526001600160a01b039190911660208301526001600160e01b031916604082015260600190565b6020808252818101839052600090604080840186845b8781101561249e576001600160a01b0361250383611d7f565b168352818501358584015291830191908301906001016124ea56fe33c2ad0e769b5a5e7f07ab57ff61ae195b76839fc48d116ffe8dc881334fa213a26469706673582212200e4a3819805780b213c745a0a0c12a2d83fabf2bb0fe218a2c539178c24bad7164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15499,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 15502,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_initializing",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18728,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_accessControlManager",
        "offset": 3,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18730,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_erc20Token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18732,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_domainName",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 18734,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_domainVersion",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 18736,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_domainRealm",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 18738,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_assetRole",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 18740,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_isSafeMode",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}