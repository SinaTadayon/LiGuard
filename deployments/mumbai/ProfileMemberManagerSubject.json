{
  "address": "0x8b40E292c00F4a7f25bf96bCD12c665600ba45CB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum IACL.AuthorizationStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "ACLActionForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessFunctionNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessNotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessPolicyForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessRoleActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessRoleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessTypeActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum IProfileACL.ProfileAdminAccessStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "ProfileSetAdminForbidden",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "initCount",
          "type": "uint16"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IACLCommons.ActivityStatus",
          "name": "acstat",
          "type": "uint8"
        }
      ],
      "name": "ProfileMemberActivityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "adminId",
          "type": "bytes32"
        }
      ],
      "name": "ProfileMemberAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IACLCommons.AlterabilityStatus",
          "name": "alstat",
          "type": "uint8"
        }
      ],
      "name": "ProfileMemberAlterabilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "callLimit",
          "type": "uint16"
        }
      ],
      "name": "ProfileMemberCallLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "memberRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "roleRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "typeRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "contextRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "realmRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "domainRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "policyRegisterLimit",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct IACLCommons.ProfileRegisterLimit",
          "name": "registerLimit",
          "type": "tuple"
        }
      ],
      "name": "ProfileMemberRegisterLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roleId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "adminId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "memberRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "roleRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "typeRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "functionRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "contextRegisterLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "realmRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "domainRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "policyRegisterLimit",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct IACLCommons.ProfileRegisterLimit",
          "name": "registerLimit",
          "type": "tuple"
        }
      ],
      "name": "ProfileMemberRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCompleted",
          "type": "bool"
        }
      ],
      "name": "ProfileMemberRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roleId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        }
      ],
      "name": "ProfileMemberRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "typeLimit",
          "type": "uint16"
        }
      ],
      "name": "ProfileMemberTypeLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "acl",
          "type": "address"
        }
      ],
      "name": "ProxyAccessControlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "ProxyLocalAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "sstat",
          "type": "uint8"
        }
      ],
      "name": "ProxySafeModeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "ustat",
          "type": "uint8"
        }
      ],
      "name": "ProxyUpdatabilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "ProxyUpgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEMBER_SIGNATURE_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PREDICT_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractVersion",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accessControlManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "profileMemberCheckAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "profileMemberCheckAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        }
      ],
      "name": "profileMemberCheckId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        }
      ],
      "name": "profileMemberGetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "typeLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "typeCount",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "callLimit",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "memberRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roleRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "typeRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "functionRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "contextRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "realmRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "domainRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "policyRegisterLimit",
                  "type": "uint16"
                }
              ],
              "internalType": "struct IACLCommons.ProfileRegisterLimit",
              "name": "registerLimit",
              "type": "tuple"
            },
            {
              "internalType": "enum IACLCommons.AgentType",
              "name": "adminType",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AgentType",
              "name": "atype",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IProfileMemberManagement.ProfileMemberInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        }
      ],
      "name": "profileMemberGetTypes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        }
      ],
      "name": "profileMemberHasType",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "roleId",
              "type": "bytes32"
            },
            {
              "internalType": "int24",
              "name": "typeLimit",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "callLimit",
              "type": "int24"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "memberRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roleRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "typeRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "functionRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "contextRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "realmRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "domainRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "policyRegisterLimit",
                  "type": "uint16"
                }
              ],
              "internalType": "struct IACLCommons.ProfileRegisterLimit",
              "name": "registerLimit",
              "type": "tuple"
            }
          ],
          "internalType": "struct IProfileMemberManagement.ProfileMemberRegisterRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileMemberRegister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "members",
          "type": "bytes32[]"
        }
      ],
      "name": "profileMemberRemove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "entityId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IACLCommons.ProfileUpdateActivityRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileMemberUpdateActivityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "entityId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IACLCommons.ProfileUpdateAdminRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileMemberUpdateAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "entityId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IACLCommons.ProfileUpdateAlterabilityRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileMemberUpdateAlterabilityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "memberId",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "limit",
              "type": "uint16"
            }
          ],
          "internalType": "struct IProfileMemberManagement.ProfileMemberUpdateLimitRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileMemberUpdateCallLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "memberId",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "memberRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roleRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "typeRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "functionRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "contextRegisterLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "realmRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "domainRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "policyRegisterLimit",
                  "type": "uint16"
                }
              ],
              "internalType": "struct IACLCommons.ProfileRegisterLimit",
              "name": "registerLimit",
              "type": "tuple"
            }
          ],
          "internalType": "struct IProfileMemberManagement.ProfileMemberUpdateRegisterLimitRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileMemberUpdateRegisterLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "memberId",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "limit",
              "type": "uint16"
            }
          ],
          "internalType": "struct IProfileMemberManagement.ProfileMemberUpdateLimitRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileMemberUpdateTypeLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeModeStatus",
      "outputs": [
        {
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "acl",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLocalAdmin",
          "type": "address"
        }
      ],
      "name": "setLocalAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "sstat",
          "type": "uint8"
        }
      ],
      "name": "setSafeModeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "ustat",
          "type": "uint8"
        }
      ],
      "name": "setUpdatabilityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatabilityStatus",
      "outputs": [
        {
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "forceCall",
          "type": "bool"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc5b0491c8c4e2def6936b788a509cb814abc93e24b1eb3dd9fe1591a2f5b9733",
  "receipt": {
    "to": null,
    "from": "0x1654E08a4963D92846B7cC12bfE911887EA6930c",
    "contractAddress": "0x8b40E292c00F4a7f25bf96bCD12c665600ba45CB",
    "transactionIndex": 19,
    "gasUsed": "5318078",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000008000000000000000000000008000000000020000000000000000000000800000000000000000000100000000000000000000000000010000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000080000000000000000000000000000000000000000004000000000000000000001000000000100000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xb1293c160a260d5faf5859e2ac0a628c73fd05351bc8d6df0218b9990fc6527d",
    "transactionHash": "0xc5b0491c8c4e2def6936b788a509cb814abc93e24b1eb3dd9fe1591a2f5b9733",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 32749782,
        "transactionHash": "0xc5b0491c8c4e2def6936b788a509cb814abc93e24b1eb3dd9fe1591a2f5b9733",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001654e08a4963d92846b7cc12bfe911887ea6930c",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000bcefa33763b6620000000000000000000000000000000000000000000000004d2ed0723a3c557d00000000000000000000000000000000000000000000031da015520d7c35b2300000000000000000000000000000000000000000000000004c71e0cf02d89f1b00000000000000000000000000000000000000000000031da0d241b0b3996892",
        "logIndex": 38,
        "blockHash": "0xb1293c160a260d5faf5859e2ac0a628c73fd05351bc8d6df0218b9990fc6527d"
      }
    ],
    "blockNumber": 32749782,
    "cumulativeGasUsed": "5773230",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3d37f12163392c6a812b5af749abec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum IACL.AuthorizationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ACLActionForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessFunctionNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessNotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessPolicyForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessRoleActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessRoleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessTypeActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IProfileACL.ProfileAdminAccessStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ProfileSetAdminForbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"initCount\",\"type\":\"uint16\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"}],\"name\":\"ProfileMemberActivityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"}],\"name\":\"ProfileMemberAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"name\":\"ProfileMemberAlterabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"callLimit\",\"type\":\"uint16\"}],\"name\":\"ProfileMemberCallLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"memberRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roleRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"typeRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"contextRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"realmRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"policyRegisterLimit\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct IACLCommons.ProfileRegisterLimit\",\"name\":\"registerLimit\",\"type\":\"tuple\"}],\"name\":\"ProfileMemberRegisterLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"memberRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roleRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"typeRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"contextRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"realmRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"policyRegisterLimit\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct IACLCommons.ProfileRegisterLimit\",\"name\":\"registerLimit\",\"type\":\"tuple\"}],\"name\":\"ProfileMemberRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"name\":\"ProfileMemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"}],\"name\":\"ProfileMemberRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"typeLimit\",\"type\":\"uint16\"}],\"name\":\"ProfileMemberTypeLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acl\",\"type\":\"address\"}],\"name\":\"ProxyAccessControlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ProxyLocalAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"sstat\",\"type\":\"uint8\"}],\"name\":\"ProxySafeModeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"ustat\",\"type\":\"uint8\"}],\"name\":\"ProxyUpdatabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ProxyUpgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMBER_SIGNATURE_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREDICT_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accessControlManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"profileMemberCheckAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"profileMemberCheckAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"}],\"name\":\"profileMemberCheckId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"}],\"name\":\"profileMemberGetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"typeLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"callLimit\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"memberRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roleRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"typeRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"contextRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"realmRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"policyRegisterLimit\",\"type\":\"uint16\"}],\"internalType\":\"struct IACLCommons.ProfileRegisterLimit\",\"name\":\"registerLimit\",\"type\":\"tuple\"},{\"internalType\":\"enum IACLCommons.AgentType\",\"name\":\"adminType\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AgentType\",\"name\":\"atype\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IProfileMemberManagement.ProfileMemberInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"}],\"name\":\"profileMemberGetTypes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"}],\"name\":\"profileMemberHasType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"roleId\",\"type\":\"bytes32\"},{\"internalType\":\"int24\",\"name\":\"typeLimit\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"callLimit\",\"type\":\"int24\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"memberRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roleRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"typeRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"contextRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"realmRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"policyRegisterLimit\",\"type\":\"uint16\"}],\"internalType\":\"struct IACLCommons.ProfileRegisterLimit\",\"name\":\"registerLimit\",\"type\":\"tuple\"}],\"internalType\":\"struct IProfileMemberManagement.ProfileMemberRegisterRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileMemberRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"members\",\"type\":\"bytes32[]\"}],\"name\":\"profileMemberRemove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"entityId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.ProfileUpdateActivityRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileMemberUpdateActivityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"entityId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IACLCommons.ProfileUpdateAdminRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileMemberUpdateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"entityId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.ProfileUpdateAlterabilityRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileMemberUpdateAlterabilityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"limit\",\"type\":\"uint16\"}],\"internalType\":\"struct IProfileMemberManagement.ProfileMemberUpdateLimitRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileMemberUpdateCallLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"memberRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roleRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"typeRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"functionRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"contextRegisterLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"realmRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"policyRegisterLimit\",\"type\":\"uint16\"}],\"internalType\":\"struct IACLCommons.ProfileRegisterLimit\",\"name\":\"registerLimit\",\"type\":\"tuple\"}],\"internalType\":\"struct IProfileMemberManagement.ProfileMemberUpdateRegisterLimitRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileMemberUpdateRegisterLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"limit\",\"type\":\"uint16\"}],\"internalType\":\"struct IProfileMemberManagement.ProfileMemberUpdateLimitRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileMemberUpdateTypeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeModeStatus\",\"outputs\":[{\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acl\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLocalAdmin\",\"type\":\"address\"}],\"name\":\"setLocalAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"sstat\",\"type\":\"uint8\"}],\"name\":\"setSafeModeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"ustat\",\"type\":\"uint8\"}],\"name\":\"setUpdatabilityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatabilityStatus\",\"outputs\":[{\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forceCall\",\"type\":\"bool\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Sina Tadayon, https://github.com/SinaTadayon\",\"events\":{\"Initialized(address,address,address,string,string,uint16)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ProxyLocalAdminUpdated(address,address,address)\":{\"details\":\"Emitted when the admin account has changed.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"ACL Profile Member Manager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/acl/profile/agent/ProfileMemberManager.sol\":\"ProfileMemberManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/contracts/acl/ACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Abstract Access Control List Storage Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract ACLStorage is BaseUUPSStorage, IACLCommons {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  struct DataCollection {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    mapping(bytes32 => ProfileEntity) profiles;\\n    mapping(address => ProfileAccount) profileAccounts;\\n    mapping(bytes4 => address) selectors;\\n    mapping(address => FacetEntity) facets;\\n    LEnumerableSet.AddressSet facetSet;\\n  }\\n\\n  bytes32 public constant CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"PredictContext(address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"MemberSignature(address account,uint256 expiredAt)\\\");\\n\\n  bytes32 public constant PROFILE_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileContext(string profile,address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfilePredictContext(string profile,address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileMemberSignature(string profile,address account,uint256 expiredAt)\\\");\\n\\n  // General Types ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SCOPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_MEMBER_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_TYPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_POLICY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_PROFILE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\"));\\n\\n  // Universe Scope ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_VERSE\\\"));\\n\\n  // General Profile Type\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n\\n  bool internal _firstInit;\\n  DataCollection internal _data;\\n  // Note: for next upgrade add new variables after this line\\n}\\n\",\"keccak256\":\"0x748ba9ee4ce4e5492afd3261bf61e8360b3f45ae3588218c1bbf90699df2065b\",\"license\":\"MIT\"},\"src/contracts/acl/IACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACL {\\n  enum AuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ACLUnauthorized();\\n  error ACLPolicyForbidden();\\n  error ACLCallForbidden();\\n  error ACLRoleScopeForbidden();\\n  error ACLMemberNotFound();\\n  error ACLRoleNotFound();\\n  error ACLTypeNotFound();\\n  error ACLFunctionNotFound();\\n  error ACLContextNotFound();\\n  error ACLRealmNotFound();\\n  error ACLDomainNotFound();\\n  error ACLMemberActivityForbidden();\\n  error ACLRoleActivityForbidden();\\n  error ACLTypeActivityForbidden();\\n  error ACLFunctionActivityForbidden();\\n  error ACLContextActivityForbidden();\\n  error ACLRealmActivityForbidden();\\n  error ACLDomainActivityForbidden();\\n  error ACLUniverseActivityForbidden();\\n\\n  error ACLActionForbidden(AuthorizationStatus);\\n\\n  enum AdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error AdminAccessNotPermitted();\\n  error AdminAccessPolicyForbidden();\\n  error AdminAccessRoleNotFound();\\n  error AdminAccessTypeNotFound();\\n  error AdminAccessFunctionNotFound();\\n  error AdminAccessRoleActivityForbidden();\\n  error AdminAccessTypeActivityForbidden();\\n\\n  error SetAdminForbidden(AdminAccessStatus);\\n\\n  function hasAccess(bytes32 functionId) external returns (AuthorizationStatus);\\n\\n  function hasMemberAccess(bytes32 functionId, bytes32 memberId) external returns (AuthorizationStatus);\\n\\n  function hasCSAccess(address contractId, bytes4 selector) external returns (AuthorizationStatus);\\n\\n  function hasAccountAccess(\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (AuthorizationStatus);\\n}\\n\",\"keccak256\":\"0x3b4bd5cd73079a4bcbc82fe3699b21fcc08fdafc964f978a9c540756302dbb2e\",\"license\":\"MIT\"},\"src/contracts/acl/IACLCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLCommons {\\n  enum AgentType {\\n    NONE,\\n    MEMBER,\\n    ROLE,\\n    TYPE\\n  }\\n\\n  enum ActivityStatus {\\n    NONE,\\n    DELETED,\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum AlterabilityStatus {\\n    NONE,\\n    DISABLED,\\n    UPDATABLE,\\n    UPGRADABLE\\n  }\\n\\n  enum ScopeType {\\n    NONE,\\n    FUNCTION,\\n    CONTEXT,\\n    REALM,\\n    DOMAIN,\\n    UNIVERSE\\n  }\\n\\n  enum ActionType {\\n    ADD,\\n    UPDATE,\\n    REMOVE\\n  }\\n\\n  enum PolicyType {\\n    UNLOCK, // 0\\n    SLOCK, // soft lock, 1 - 63\\n    MLOCK, // medium lock, 64 - 127\\n    RLOCK, // restrict lock, 128 - 191\\n    HLOCK, // hard lock, 192 - 254\\n    LOCK // 255\\n  }\\n\\n  struct BaseAgent {\\n    bytes32 adminId;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct BaseScope {\\n    bytes32 adminId;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    uint32 referredByAgent;\\n  }\\n\\n  struct PolicyEntity {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint8 policyCode;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FunctionEntity {\\n    BaseScope bs;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n  }\\n\\n  struct ContextEntity {\\n    BaseScope bs;\\n    bytes32 realmId;\\n    address contractId;\\n    uint8 functionLimit;\\n    LEnumerableSet.Bytes32Set functions;\\n  }\\n\\n  struct RealmEntity {\\n    BaseScope bs;\\n    bytes32 domainId;\\n    uint32 contextLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set contexts;\\n  }\\n\\n  struct DomainEntity {\\n    BaseScope bs;\\n    bytes32 universeId;\\n    uint16 realmLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set realms;\\n  }\\n\\n  struct UniverseEntity {\\n    BaseScope bs;\\n    uint16 domainLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set domains;\\n  }\\n\\n  struct GeneralLimit {\\n    uint24 memberLimit;\\n    uint16 memberRegisterLimit;\\n    uint16 contextRegisterLimit;\\n    uint16 functionRegisterLimit;\\n    uint16 profileRegisterLimit;\\n    uint16 contextLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 callLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint8 roleRegisterLimit;\\n    uint8 typeRegisterLimit;\\n    uint8 realmRegisterLimit;\\n    uint8 domainRegisterLimit;\\n    uint8 policyRegisterLimit;\\n    uint8 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct MemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    GeneralLimit limits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct MemberSignature {\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct RoleEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n  }\\n\\n  struct TypeEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    mapping(bytes32 => bytes32) members;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FacetEntity {\\n    address subjectId;\\n  }\\n\\n  struct UpdateActivityRequest {\\n    bytes32 id;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct UpdateAlterabilityRequest {\\n    bytes32 id;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct UpdateAdminRequest {\\n    bytes32 id;\\n    bytes32 adminId;\\n  }\\n\\n  // used in Policy / Role / Type\\n  struct UpdateScopeRequest {\\n    bytes32 id;\\n    bytes32 scopeId;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////\\n  // Profiles\\n\\n  struct ProfileMemberSignature {\\n    string profileName;\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct ProfileRegisterLimit {\\n    uint32 memberRegisterLimit;\\n    uint32 roleRegisterLimit;\\n    uint32 typeRegisterLimit;\\n    uint32 functionRegisterLimit;\\n    uint32 contextRegisterLimit;\\n    uint16 realmRegisterLimit;\\n    uint16 domainRegisterLimit;\\n    uint16 policyRegisterLimit;\\n  }\\n\\n  struct ProfileLimit {\\n    uint32 profileCallLimit;\\n    uint32 contextLimit;\\n    uint24 memberLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 memberCallLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint16 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ProfileAccount {\\n    bytes32[] profiles;\\n  }\\n\\n  struct ProfileEntity {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    LEnumerableSet.Bytes32Set admins;\\n    bytes32 adminId;\\n    string name;\\n    address owner;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileMemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    uint16 callLimit;\\n    uint16 typeLimit;\\n    ProfileRegisterLimit registerLimits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct ProfileUpdateActivityRequest {\\n    bytes32 entityId;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct ProfileUpdateAlterabilityRequest {\\n    bytes32 entityId;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct ProfileUpdateAdminRequest {\\n    bytes32 entityId;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateScopeRequest {\\n    bytes32 entityId;\\n    bytes32 scopeId;\\n  }\\n}\\n\",\"keccak256\":\"0x2269cec662cb8f25c0523b281f8f97bd9b5115ea80771c7d1e4083031f4a1c87\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACL {\\n  enum ProfileAuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    PROFILE_CALL_FORBIDDEN,\\n    MEMBER_CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN,\\n    PROFILE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileACLUnauthorized();\\n  error ProfileACLPolicyForbidden();\\n  error ProfileACLCallForbidden();\\n  error ProfileACLRoleScopeForbidden();\\n  error ProfileACLMemberCallForbidden();\\n  error ProfileACLMemberNotFound();\\n  error ProfileACLRoleNotFound();\\n  error ProfileACLTypeNotFound();\\n  error ProfileACLFunctionNotFound();\\n  error ProfileACLContextNotFound();\\n  error ProfileACLRealmNotFound();\\n  error ProfileACLDomainNotFound();\\n  error ProfileACLMemberActivityForbidden();\\n  error ProfileACLRoleActivityForbidden();\\n  error ProfileACLTypeActivityForbidden();\\n  error ProfileACLFunctionActivityForbidden();\\n  error ProfileACLContextActivityForbidden();\\n  error ProfileACLRealmActivityForbidden();\\n  error ProfileACLDomainActivityForbidden();\\n  error ProfileACLUniverseActivityForbidden();\\n  error ProfileACLProfileActivityForbidden();\\n\\n  enum ProfileAdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileAdminAccessNotPermitted();\\n  error ProfileAdminAccessPolicyForbidden();\\n  error ProfileAdminAccessRoleNotFound();\\n  error ProfileAdminAccessTypeNotFound();\\n  error ProfileAdminAccessFunctionNotFound();\\n  error ProfileAdminAccessRoleActivityForbidden();\\n  error ProfileAdminAccessTypeActivityForbidden();\\n\\n  error ProfileSetAdminForbidden(ProfileAdminAccessStatus);\\n\\n  function profileHasAccess(bytes32 profileId, bytes32 functionId) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasCSAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasAccountAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (ProfileAuthorizationStatus);\\n}\\n\",\"keccak256\":\"0xb3687f11a1d2d28b78e815657864fbe1ef4aeba750e8c9760b3d3f97e467efc2\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control General Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function profileAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function profileAnyType() external pure returns (bytes32);\\n\\n  // system master type\\n  function profileSystemMasterType() external pure returns (bytes32);\\n\\n  // profile master type\\n  function profileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function profileUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function profileIsAgentExist(bytes32 profileId, bytes32 agentId) external view returns (bool);\\n\\n  function profileIsScopeExist(bytes32 profileId, bytes32 scopeId) external view returns (bool);\\n\\n  function profileScopeBaseInfo(bytes32 profileId, bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function profileAgentBaseInfo(bytes32 profileId, bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function profileIsScopesCompatible(\\n    bytes32 profileId,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5eeaa7ce1f5f26662cf0368f1c9b415214f37f1659c3a2defccedf0d1943760f\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileManagement is IACLCommons {\\n  struct ProfileRegisterRequest {\\n    string name;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    address profileOwner;\\n    address profileSystemAdmin;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateOwnerAccountRequest {\\n    bytes32 profileId;\\n    address newOwner;\\n  }\\n\\n  struct ProfileUpdateLimitsRequest {\\n    bytes32 profileId;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileInfo {\\n    string name;\\n    bytes32 adminId;\\n    address owner;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    AgentType adminType;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfileRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed profileOwner,\\n    address profileSystemAdmin,\\n    bytes32 adminId,\\n    ProfileRegisterLimit registerlimits,\\n    ProfileLimit limits\\n  );\\n\\n  event ProfileAdminUpdated(address indexed sender, bytes32 indexed profileId, bytes32 indexed adminId);\\n\\n  event ProfileActivityUpdated(address indexed sender, bytes32 indexed profileId, ActivityStatus acstat);\\n\\n  event ProfileAlterabilityUpdated(address indexed sender, bytes32 indexed profileId, AlterabilityStatus alstat);\\n\\n  event ProfileLimitsUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    ProfileLimit limit,\\n    ProfileRegisterLimit registerLimit\\n  );\\n\\n  event ProfileOwnerAccountUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed owner,\\n    address newOwner\\n  );\\n\\n  function profileRegister(MemberSignature calldata memberSign, ProfileRegisterRequest[] calldata request)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateLimits(MemberSignature calldata memberSign, ProfileUpdateLimitsRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateOwnerAccount(\\n    MemberSignature calldata memberSign,\\n    ProfileUpdateOwnerAccountRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileCheckId(bytes32 profileId) external view returns (bool);\\n\\n  function profileCheckName(string calldata name) external view returns (bool);\\n\\n  function profileCheckOwner(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileSystemAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileGetProfileAccount(address account) external view returns (bytes32[] memory);\\n\\n  function profileGetAdmins(bytes32 profileId) external view returns (bytes32[] memory);\\n\\n  function profileGetInfo(bytes32 profileId) external view returns (ProfileInfo memory);\\n}\\n\",\"keccak256\":\"0x32153a5a19ef691b56e8987b82b455e024cfc24c42393955d12d43e0c148d6fc\",\"license\":\"MIT\"},\"src/contracts/acl/profile/ProfileAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./policy/IProfilePolicyManagement.sol\\\";\\nimport \\\"./IProfileACL.sol\\\";\\nimport \\\"./IProfileACLGenerals.sol\\\";\\nimport \\\"./scope/IProfileFunctionManagement.sol\\\";\\nimport \\\"./agent/IProfileRoleManagement.sol\\\";\\nimport \\\"./agent/IProfileTypeManagement.sol\\\";\\nimport \\\"../ACLStorage.sol\\\";\\nimport \\\"../IACL.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../lib/acl/LACLUtils.sol\\\";\\nimport \\\"../../lib/acl/LProfileStorage.sol\\\";\\nimport \\\"../../lib/acl/LACLStorage.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/BaseUUPSProxy.sol\\\";\\n\\n/**\\n * @title Profile AccessControl Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ncontract ProfileAccessControl is ACLStorage, BaseUUPSProxy, IProfileACLGenerals, IProfileACL {\\n  using LACLStorage for DataCollection;\\n  using LProfileStorage for ProfileEntity;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  constructor() {}\\n\\n  function initialize(\\n    string calldata contractName,\\n    string calldata contractVersion,\\n    address accessControlManager\\n  ) public onlyProxy onlyLocalAdmin initializer {\\n    __BASE_UUPS_init(contractName, contractVersion, accessControlManager);\\n\\n    emit Initialized(\\n      _msgSender(),\\n      address(this),\\n      _implementation(),\\n      contractName,\\n      contractVersion,\\n      _getInitializedCount()\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IProfileACL).interfaceId ||\\n      interfaceId == type(IProfileACLGenerals).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function profileHasAccess(bytes32 profileId, bytes32 functionId) external returns (ProfileAuthorizationStatus) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN;\\n    (FunctionEntity storage functionEntity, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return ProfileAuthorizationStatus.FUNCTION_NOT_FOUND;\\n    return _doProfileHasAccess(profileEntity, LACLUtils.accountGenerateId(msg.sender), functionEntity);\\n  }\\n\\n  function profileHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) external returns (ProfileAuthorizationStatus) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN;\\n    (FunctionEntity storage functionEntity, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return ProfileAuthorizationStatus.FUNCTION_NOT_FOUND;\\n    return _doProfileHasAccess(profileEntity, memberId, functionEntity);\\n  }\\n\\n  function profileHasCSAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external returns (ProfileAuthorizationStatus) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN;\\n    bytes32 functionId = LACLUtils.functionGenerateId(contractId, selector);\\n    (FunctionEntity storage functionEntity, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return ProfileAuthorizationStatus.FUNCTION_NOT_FOUND;\\n    return _doProfileHasAccess(profileEntity, LACLUtils.accountGenerateId(msg.sender), functionEntity);\\n  }\\n\\n  function profileHasAccountAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (ProfileAuthorizationStatus) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN;\\n    bytes32 functionId = LACLUtils.functionGenerateId(contractId, selector);\\n    bytes32 memberId = LACLUtils.accountGenerateId(accountId);\\n    (FunctionEntity storage functionEntity, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return ProfileAuthorizationStatus.FUNCTION_NOT_FOUND;\\n    return _doProfileHasAccess(profileEntity, memberId, functionEntity);\\n  }\\n\\n  function profileAclHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) public {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN);\\n    (FunctionEntity storage functionEntity, bool result) = _data.functionTryReadSlot(functionId);\\n    if (!result) LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.FUNCTION_NOT_FOUND);\\n    _doAclHasAccess(profileEntity, memberId, functionEntity);\\n  }\\n\\n  function _doProfileHasAccess(\\n    ProfileEntity storage profileEntity,\\n    bytes32 memberId,\\n    FunctionEntity storage functionEntity\\n  ) internal returns (ProfileAuthorizationStatus) {\\n    if (profileEntity.limits.profileCallLimit > 0) {\\n      unchecked {\\n        profileEntity.limits.profileCallLimit -= 1;\\n      }\\n    } else {\\n      return ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN;\\n    }\\n\\n    AgentType atype = profileEntity.agents[functionEntity.agentId].atype;\\n    if (atype == AgentType.ROLE) {\\n      // check member activation\\n      (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n        memberId\\n      );\\n      if (!result0) return ProfileAuthorizationStatus.MEMBER_NOT_FOUND;\\n      if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n        return ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN;\\n      if (profileEntity.owner != profileMemberEntity.account) {\\n        if (profileMemberEntity.callLimit > 0) {\\n          unchecked {\\n            profileMemberEntity.callLimit -= 1;\\n          }\\n        } else {\\n          return ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN;\\n        }\\n      }\\n\\n      // check role activation\\n      (RoleEntity storage roleEntity, bool result1) = profileEntity.profileRoleTryReadSlot(functionEntity.agentId);\\n      if (!result1) return ProfileAuthorizationStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN;\\n      if (\\n        profileEntity.scopes[roleEntity.scopeId].stype == ScopeType.FUNCTION &&\\n        roleEntity.scopeId != functionEntity.agentId\\n      ) return ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN;\\n\\n      // check type activation\\n      (TypeEntity storage typeEntity, bool result2) = profileEntity.profileTypeTryReadSlot(roleEntity.typeId);\\n      if (!result2) return ProfileAuthorizationStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      // check memberId with agentId role\\n      if (typeEntity.members[memberId] != functionEntity.agentId) return ProfileAuthorizationStatus.UNAUTHORIZED;\\n\\n      // check policy activation\\n      PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[functionEntity.agentId]];\\n      if (policyEntity.acstat == ActivityStatus.ENABLED && policyEntity.policyCode >= functionEntity.policyCode)\\n        return ProfileAuthorizationStatus.POLICY_FORBIDDEN;\\n    } else if (atype == AgentType.TYPE) {\\n      if (functionEntity.agentId == _LIVELY_PROFILE_ANY_TYPE_ID) {\\n        (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n          memberId\\n        );\\n        if (!result0) return ProfileAuthorizationStatus.MEMBER_NOT_FOUND;\\n        if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n          return ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN;\\n        if (profileEntity.owner != profileMemberEntity.account) {\\n          if (profileMemberEntity.callLimit > 0) {\\n            unchecked {\\n              profileMemberEntity.callLimit -= 1;\\n            }\\n          } else {\\n            return ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN;\\n          }\\n        }\\n      } else if (functionEntity.agentId != _LIVELY_VERSE_ANONYMOUS_TYPE_ID) {\\n        // check member activation\\n        (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n          memberId\\n        );\\n        if (!result0) return ProfileAuthorizationStatus.MEMBER_NOT_FOUND;\\n        if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n          return ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN;\\n        if (profileEntity.owner != profileMemberEntity.account) {\\n          if (profileMemberEntity.callLimit > 0) {\\n            unchecked {\\n              profileMemberEntity.callLimit -= 1;\\n            }\\n          } else {\\n            return ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN;\\n          }\\n        }\\n\\n        // check type activation\\n        (TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(functionEntity.agentId);\\n        if (!result1) return ProfileAuthorizationStatus.TYPE_NOT_FOUND;\\n        if (typeEntity.ba.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n        // check role activation\\n        bytes32 roleId = typeEntity.members[memberId];\\n        (RoleEntity storage roleEntity, bool result2) = profileEntity.profileRoleTryReadSlot(roleId);\\n        if (!result2) return ProfileAuthorizationStatus.ROLE_NOT_FOUND;\\n        if (roleEntity.ba.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN;\\n        if (\\n          profileEntity.scopes[roleEntity.scopeId].stype == ScopeType.FUNCTION &&\\n          roleEntity.scopeId != functionEntity.agentId\\n        ) return ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN;\\n\\n        // check policy activation\\n        PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[roleId]];\\n        if (policyEntity.acstat == ActivityStatus.ENABLED && policyEntity.policyCode >= functionEntity.policyCode)\\n          return ProfileAuthorizationStatus.POLICY_FORBIDDEN;\\n      }\\n    } else if (atype <= AgentType.MEMBER) {\\n      return ProfileAuthorizationStatus.UNAUTHORIZED;\\n    }\\n\\n    // check function activity\\n    if (functionEntity.bs.acstat != ActivityStatus.ENABLED)\\n      return ProfileAuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN;\\n\\n    // check context activity\\n    (ContextEntity storage contextEntity, bool res1) = profileEntity.profileContextTryReadSlot(\\n      functionEntity.contextId\\n    );\\n    if (!res1) return ProfileAuthorizationStatus.CONTEXT_NOT_FOUND;\\n    if (contextEntity.bs.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN;\\n\\n    // check realm activity\\n    (RealmEntity storage realmEntity, bool res2) = profileEntity.profileRealmTryReadSlot(contextEntity.realmId);\\n    if (!res2) return ProfileAuthorizationStatus.REALM_NOT_FOUND;\\n    if (realmEntity.bs.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.REALM_ACTIVITY_FORBIDDEN;\\n\\n    // check domain activity\\n    (DomainEntity storage domainEntity, bool res3) = profileEntity.profileDomainTryReadSlot(realmEntity.domainId);\\n    if (!res3) return ProfileAuthorizationStatus.DOMAIN_NOT_FOUND;\\n    if (domainEntity.bs.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN;\\n\\n    // check universe activity\\n    UniverseEntity storage universeEntity = profileEntity.profileUniverseReadSlot(\\n      _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID\\n    );\\n    if (universeEntity.bs.acstat != ActivityStatus.ENABLED)\\n      return ProfileAuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN;\\n\\n    return ProfileAuthorizationStatus.PERMITTED;\\n  }\\n\\n  function _doAclHasAccess(\\n    ProfileEntity storage profileEntity,\\n    bytes32 memberId,\\n    FunctionEntity storage functionEntity\\n  ) internal {\\n    if (profileEntity.limits.profileCallLimit > 0) {\\n      unchecked {\\n        profileEntity.limits.profileCallLimit -= 1;\\n      }\\n    } else {\\n      LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN);\\n    }\\n\\n    AgentType atype = profileEntity.agents[functionEntity.agentId].atype;\\n\\n    if (atype == AgentType.ROLE) {\\n      // check member activation\\n      (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n        memberId\\n      );\\n      if (!result0) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_NOT_FOUND);\\n      if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN);\\n      if (profileEntity.owner != profileMemberEntity.account) {\\n        if (profileMemberEntity.callLimit > 0) {\\n          unchecked {\\n            profileMemberEntity.callLimit -= 1;\\n          }\\n        } else {\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN);\\n        }\\n      }\\n\\n      // check role activation\\n      (RoleEntity storage roleEntity, bool result1) = profileEntity.profileRoleTryReadSlot(functionEntity.agentId);\\n      if (!result1) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_NOT_FOUND);\\n      if (roleEntity.ba.acstat != ActivityStatus.ENABLED)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN);\\n      // if(profileEntity.scopes[roleEntity.scopeId].stype == ScopeType.FUNCTION && roleEntity.scopeId != functionEntity.agentId)\\n      //   LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN);\\n\\n      // check type activation\\n      (TypeEntity storage typeEntity, bool result2) = profileEntity.profileTypeTryReadSlot(roleEntity.typeId);\\n      if (!result2) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.TYPE_NOT_FOUND);\\n      if (typeEntity.ba.acstat != ActivityStatus.ENABLED)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN);\\n\\n      // check memberId with agentId role\\n      if (typeEntity.members[memberId] != functionEntity.agentId)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.UNAUTHORIZED);\\n\\n      // check policy activation\\n      PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[functionEntity.agentId]];\\n      if (policyEntity.acstat == ActivityStatus.ENABLED && policyEntity.policyCode >= functionEntity.policyCode)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.POLICY_FORBIDDEN);\\n    } else if (atype == AgentType.TYPE) {\\n      if (functionEntity.agentId == _LIVELY_PROFILE_ANY_TYPE_ID) {\\n        (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n          memberId\\n        );\\n        if (!result0) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_NOT_FOUND);\\n        if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN);\\n        if (profileEntity.owner != profileMemberEntity.account) {\\n          if (profileMemberEntity.callLimit > 0) {\\n            unchecked {\\n              profileMemberEntity.callLimit -= 1;\\n            }\\n          } else {\\n            LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN);\\n          }\\n        }\\n      } else if (functionEntity.agentId != _LIVELY_VERSE_ANONYMOUS_TYPE_ID) {\\n        // check member activation\\n        (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n          memberId\\n        );\\n        if (!result0) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_NOT_FOUND);\\n        if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN);\\n        if (profileEntity.owner != profileMemberEntity.account) {\\n          if (profileMemberEntity.callLimit > 0) {\\n            unchecked {\\n              profileMemberEntity.callLimit -= 1;\\n            }\\n          } else {\\n            LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN);\\n          }\\n        }\\n\\n        // check type activation\\n        (TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(functionEntity.agentId);\\n        if (!result1) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.TYPE_NOT_FOUND);\\n        if (typeEntity.ba.acstat != ActivityStatus.ENABLED)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN);\\n\\n        // check role activation\\n        bytes32 roleId = typeEntity.members[memberId];\\n        (RoleEntity storage roleEntity, bool result2) = profileEntity.profileRoleTryReadSlot(roleId);\\n        if (!result2) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_NOT_FOUND);\\n        if (roleEntity.ba.acstat != ActivityStatus.ENABLED)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN);\\n        // if(profileEntity.scopes[roleEntity.scopeId].stype == ScopeType.FUNCTION && roleEntity.scopeId != functionEntity.agentId)\\n        //   LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN);\\n\\n        // check policy activation\\n        PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[roleId]];\\n        if (policyEntity.acstat == ActivityStatus.ENABLED && policyEntity.policyCode >= functionEntity.policyCode)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.POLICY_FORBIDDEN);\\n      }\\n    } else if (atype <= AgentType.MEMBER) {\\n      LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.UNAUTHORIZED);\\n    }\\n\\n    // check function activity\\n    if (functionEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN);\\n\\n    // check context activity\\n    (ContextEntity storage contextEntity, bool res1) = _data.contextTryReadSlot(functionEntity.contextId);\\n    if (!res1) LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.CONTEXT_NOT_FOUND);\\n    if (contextEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN);\\n\\n    // check realm activity\\n    (RealmEntity storage realmEntity, bool res2) = _data.realmTryReadSlot(contextEntity.realmId);\\n    if (!res2) LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.REALM_NOT_FOUND);\\n    if (realmEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.REALM_ACTIVITY_FORBIDDEN);\\n\\n    // check domain activity\\n    (DomainEntity storage domainEntity, bool res3) = _data.domainTryReadSlot(realmEntity.domainId);\\n    if (!res3) LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.DOMAIN_NOT_FOUND);\\n    if (domainEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN);\\n\\n    // check universe activity\\n    UniverseEntity storage universeEntity = _data.universeReadSlot(_LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID);\\n    if (universeEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN);\\n  }\\n\\n  // Anonymouse type\\n  function profileAnonymousType() external pure returns (bytes32) {\\n    return _LIVELY_VERSE_ANONYMOUS_TYPE_ID;\\n  }\\n\\n  // Any type\\n  function profileAnyType() external pure returns (bytes32) {\\n    return _LIVELY_PROFILE_ANY_TYPE_ID;\\n  }\\n\\n  // system admin type\\n  function profileSystemMasterType() external pure returns (bytes32) {\\n    return _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID;\\n  }\\n\\n  // admin type\\n  function profileMasterType() external pure returns (bytes32) {\\n    return _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID;\\n  }\\n\\n  function profileUniverseScope() external pure returns (bytes32) {\\n    return _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n  }\\n\\n  // general\\n  function profileIsAgentExist(bytes32 profileId, bytes32 agentId) external view returns (bool) {\\n    return _data.profiles[profileId].agents[agentId].atype != AgentType.NONE;\\n  }\\n\\n  function profileIsScopeExist(bytes32 profileId, bytes32 scopeId) external view returns (bool) {\\n    return _data.profiles[profileId].scopes[scopeId].stype != ScopeType.NONE;\\n  }\\n\\n  function profileScopeBaseInfo(bytes32 profileId, bytes32 scopeId) external view returns (BaseScope memory) {\\n    return _data.profiles[profileId].scopes[scopeId];\\n  }\\n\\n  function profileAgentBaseInfo(bytes32 profileId, bytes32 agentId) external view returns (BaseAgent memory) {\\n    return _data.profiles[profileId].agents[agentId];\\n  }\\n\\n  function profileIsScopesCompatible(\\n    bytes32 profileId,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) external view returns (bool) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat == ActivityStatus.NONE) return false;\\n    return _doProfileScopesCompatible(profileEntity, destScopeId, srcScopeId);\\n  }\\n\\n  function _doProfileScopesCompatible(\\n    ProfileEntity storage profileEntity,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) internal view returns (bool) {\\n    ScopeType destScopeType = profileEntity.scopes[destScopeId].stype;\\n    ScopeType srcScopeType = profileEntity.scopes[srcScopeId].stype;\\n    if (destScopeType == ScopeType.NONE || srcScopeType == ScopeType.NONE) return false;\\n    if (destScopeType == ScopeType.UNIVERSE) return true;\\n\\n    if (destScopeType == ScopeType.CONTEXT && srcScopeType == ScopeType.FUNCTION) {\\n      ContextEntity storage ce = profileEntity.profileContextReadSlot(destScopeId);\\n      return ce.functions.contains(srcScopeId);\\n    } else if (destScopeType == ScopeType.REALM && srcScopeType == ScopeType.FUNCTION) {\\n      FunctionEntity storage fe = profileEntity.profileFunctionReadSlot(srcScopeId);\\n      RealmEntity storage re = profileEntity.profileRealmReadSlot(destScopeId);\\n      return re.contexts.contains(fe.contextId);\\n    } else if (destScopeType == ScopeType.DOMAIN && srcScopeType == ScopeType.FUNCTION) {\\n      FunctionEntity storage fe = profileEntity.profileFunctionReadSlot(srcScopeId);\\n      ContextEntity storage ce = profileEntity.profileContextReadSlot(fe.contextId);\\n      DomainEntity storage de = profileEntity.profileDomainReadSlot(destScopeId);\\n      return de.realms.contains(ce.realmId);\\n    } else if (destScopeType == ScopeType.REALM && srcScopeType == ScopeType.CONTEXT) {\\n      RealmEntity storage re = profileEntity.profileRealmReadSlot(destScopeId);\\n      return re.contexts.contains(srcScopeId);\\n    } else if (destScopeType == ScopeType.DOMAIN && srcScopeType == ScopeType.CONTEXT) {\\n      ContextEntity storage ce = profileEntity.profileContextReadSlot(srcScopeId);\\n      DomainEntity storage de = profileEntity.profileDomainReadSlot(destScopeId);\\n      return de.realms.contains(ce.realmId);\\n    } else if (destScopeType == ScopeType.DOMAIN && srcScopeType == ScopeType.REALM) {\\n      DomainEntity storage de = profileEntity.profileDomainReadSlot(destScopeId);\\n      return de.realms.contains(srcScopeId);\\n    }\\n\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0xea172c7abeaa47789e933a7f84ae407c8d06929e719851ccae2396410068938d\",\"license\":\"MIT\"},\"src/contracts/acl/profile/agent/IProfileMemberManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Member Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileMemberManagement is IACLCommons {\\n  struct ProfileMemberRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 roleId;\\n    int24 typeLimit;\\n    int24 callLimit;\\n    address account;\\n    ProfileRegisterLimit registerLimit;\\n  }\\n\\n  struct ProfileMemberUpdateLimitRequest {\\n    bytes32 memberId;\\n    uint16 limit;\\n  }\\n\\n  struct ProfileMemberUpdateRegisterLimitRequest {\\n    bytes32 memberId;\\n    ProfileRegisterLimit registerLimit;\\n  }\\n\\n  struct ProfileMemberInfo {\\n    bytes32 adminId;\\n    address account;\\n    uint16 typeLimit;\\n    uint16 typeCount;\\n    uint16 callLimit;\\n    ProfileRegisterLimit registerLimit;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfileMemberRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bytes32 roleId,\\n    bytes32 adminId,\\n    ProfileRegisterLimit registerLimit\\n  );\\n\\n  event ProfileMemberTypeLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    uint16 typeLimit\\n  );\\n\\n  event ProfileMemberRegisterLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    ProfileRegisterLimit registerLimit\\n  );\\n\\n  event ProfileMemberCallLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    uint16 callLimit\\n  );\\n\\n  event ProfileMemberAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileMemberActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileMemberAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileMemberRoleRevoked(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bytes32 roleId,\\n    bytes32 typeId\\n  );\\n\\n  event ProfileMemberRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bool isCompleted\\n  );\\n\\n  function profileMemberRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateTypeLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberUpdateLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateRegisterLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberUpdateRegisterLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateCallLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberUpdateLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata members)\\n    external\\n    returns (bool);\\n\\n  function profileMemberCheckId(bytes32 profileId, bytes32 memberId) external view returns (bool);\\n\\n  function profileMemberCheckAccount(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileMemberCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 memberId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileMemberHasType(\\n    bytes32 profileId,\\n    bytes32 memberId,\\n    bytes32 typeId\\n  ) external view returns (bool);\\n\\n  function profileMemberGetTypes(bytes32 profileId, bytes32 memberId) external view returns (bytes32[] memory);\\n\\n  function profileMemberGetInfo(bytes32 profileId, bytes32 memberId) external view returns (ProfileMemberInfo memory);\\n}\\n\",\"keccak256\":\"0x0eede94e2540614f8f5827c0dcd472b1a1a24f60621d937392ec265c54cc8df9\",\"license\":\"MIT\"},\"src/contracts/acl/profile/agent/IProfileRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Role Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileRoleManagement is IACLCommons {\\n  struct ProfileRoleRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    int32 memberLimit;\\n  }\\n\\n  struct ProfileRoleGrantMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct ProfileRoleRevokeMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct ProfileRoleUpdateMemberLimitRequest {\\n    bytes32 roleId;\\n    uint24 memberLimit;\\n  }\\n\\n  struct ProfileRoleInfo {\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    bytes32 adminId;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event ProfileRoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 typeId,\\n    bytes32 adminId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfileRoleMemberDeleted(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bytes32 roleId,\\n    bytes32 typeId,\\n    address account\\n  );\\n\\n  event ProfileRoleMemberGranted(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 memberId,\\n    bytes32 typeId\\n  );\\n\\n  event ProfileRoleMemberRevoked(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 memberId,\\n    bytes32 typeId\\n  );\\n\\n  event ProfileRoleMemberLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    uint24 memberLimit\\n  );\\n\\n  event ProfileRoleAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileRoleScopeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfileRoleActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileRoleAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileRoleRemoved(address indexed sender, bytes32 indexed profileId, bytes32 indexed roleId);\\n\\n  function profileRoleRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleGrantMembers(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleGrantMembersRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleRevokeMembers(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleRevokeMembersRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateScope(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateScopeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateMemberLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleUpdateMemberLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata roles)\\n    external\\n    returns (bool);\\n\\n  function profileRoleCheckId(bytes32 profileId, bytes32 roleId) external view returns (bool);\\n\\n  function profileRoleCheckName(bytes32 profileId, string calldata roleName) external view returns (bool);\\n\\n  function profileRoleCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileRoleHasAccount(\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileRoleGetInfo(bytes32 profileId, bytes32 roleId) external view returns (ProfileRoleInfo memory);\\n}\\n\",\"keccak256\":\"0xc3257ac97de5fe7b1223711664d58bb79e0e7bf8c16a96eba61e1ca6c31ed465\",\"license\":\"MIT\"},\"src/contracts/acl/profile/agent/IProfileTypeManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Type Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileTypeManagement is IACLCommons {\\n  struct ProfileTypeRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    int24 roleLimit;\\n  }\\n\\n  struct ProfileTypeUpdateRoleLimitRequest {\\n    bytes32 typeId;\\n    uint16 roleLimit;\\n  }\\n\\n  struct ProfileTypeInfo {\\n    bytes32 scopeId;\\n    bytes32 adminId;\\n    uint16 roleLimit;\\n    uint16 roleCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event ProfileTypeRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    bytes32 scopeId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileTypeActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileTypeAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileTypeRoleLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    uint16 roleLimit\\n  );\\n\\n  event ProfileTypeScopeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfileTypeAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileTypeRemoved(address indexed sender, bytes32 indexed profileId, bytes32 indexed typeId);\\n\\n  function profileTypeRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileTypeRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateScope(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateScopeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateRoleLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileTypeUpdateRoleLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata types)\\n    external\\n    returns (bool);\\n\\n  function profileTypeCheckId(bytes32 profileId, bytes32 typeId) external view returns (bool);\\n\\n  function profileTypeCheckName(bytes32 profileId, string calldata typeName) external view returns (bool);\\n\\n  function profileTypeCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileTypeHasAccount(\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileTypeHasRole(\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    bytes32 roleId\\n  ) external view returns (bool);\\n\\n  function profileTypeGetRoles(bytes32 profileId, bytes32 typeId) external view returns (bytes32[] memory);\\n\\n  function profileTypeGetInfo(bytes32 profileId, bytes32 typeId) external view returns (ProfileTypeInfo memory);\\n}\\n\",\"keccak256\":\"0x1f4b731b0539721268bf6a3bb3efbd137090d64fc95dfa8e1a2e0b96d8227f21\",\"license\":\"MIT\"},\"src/contracts/acl/profile/agent/ProfileMemberManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IProfileMemberManagement.sol\\\";\\nimport \\\"./IProfileRoleManagement.sol\\\";\\nimport \\\"./IProfileTypeManagement.sol\\\";\\nimport \\\"../IProfileACL.sol\\\";\\nimport \\\"../ProfileAccessControl.sol\\\";\\nimport \\\"../IProfileACLGenerals.sol\\\";\\nimport \\\"../scope/IProfileFunctionManagement.sol\\\";\\nimport \\\"../../ACLStorage.sol\\\";\\nimport \\\"../../../lib/acl/LProfileStorage.sol\\\";\\nimport \\\"../../../lib/acl/LACLStorage.sol\\\";\\nimport \\\"../../../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../../../lib/acl/LACLUtils.sol\\\";\\nimport \\\"../../../lib/acl/LProfileCommons.sol\\\";\\nimport \\\"../../../proxy/IProxy.sol\\\";\\nimport \\\"../../../proxy/BaseUUPSProxy.sol\\\";\\n\\n/**\\n * @title ACL Profile Member Manager Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ncontract ProfileMemberManager is ACLStorage, BaseUUPSProxy, IProfileMemberManagement {\\n  using LACLStorage for DataCollection;\\n  using LProfileStorage for ProfileEntity;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  constructor() {}\\n\\n  function initialize(\\n    string calldata contractName,\\n    string calldata contractVersion,\\n    address accessControlManager\\n  ) public onlyProxy onlyLocalAdmin initializer {\\n    __BASE_UUPS_init(contractName, contractVersion, accessControlManager);\\n\\n    emit Initialized(\\n      _msgSender(),\\n      address(this),\\n      _implementation(),\\n      contractName,\\n      contractVersion,\\n      _getInitializedCount()\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IProfileMemberManagement).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  // Note: called by any admin of role\\n  function profileMemberRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberRegisterRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileMemberManagement.profileMemberRegister.selector);\\n    ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    uint32 memberRegisterLimit = profileMemberEntity.registerLimits.memberRegisterLimit;\\n    LProfileCommons.profileCheckMemberForMemberRegister(\\n      profileEntity,\\n      profileMemberEntity,\\n      uint16(requests.length),\\n      senderId\\n    );\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      // check register limits\\n      if (profileMemberEntity.types.contains(_LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID)) {\\n        _doCheckRegisterLimit(profileEntity.registerLimits, requests[i].registerLimit, memberRegisterLimit, true);\\n      } else {\\n        _doCheckRegisterLimit(profileMemberEntity.registerLimits, requests[i].registerLimit, memberRegisterLimit, true);\\n      }\\n\\n      _doProfileMemberRegister(profileEntity, requests[i], functionEntity, senderId, profileId, sender);\\n    }\\n\\n    return true;\\n  }\\n\\n  function profileMemberUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileMemberManagement.profileMemberUpdateActivityStatus.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      ProfileMemberEntity storage memberEntity = _doGetEntityAndCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        requests[i].entityId,\\n        senderId\\n      );\\n      require(profileEntity.owner != memberEntity.account, \\\"Illegal Member\\\");\\n      require(requests[i].acstat > ActivityStatus.DELETED, \\\"Illegal Activity\\\");\\n      memberEntity.ba.acstat = requests[i].acstat;\\n      emit ProfileMemberActivityUpdated(sender, profileId, requests[i].entityId, requests[i].acstat);\\n    }\\n    return true;\\n  }\\n\\n  function profileMemberUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileMemberManagement.profileMemberUpdateAlterabilityStatus.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      ProfileMemberEntity storage memberEntity = profileEntity.profileMemberReadSlot(requests[i].entityId);\\n      IProfileACL.ProfileAdminAccessStatus status = _doCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        memberEntity.ba.adminId,\\n        senderId\\n      );\\n      if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n      require(requests[i].alstat != AlterabilityStatus.NONE, \\\"Illegal Alterability\\\");\\n      memberEntity.ba.alstat = requests[i].alstat;\\n      emit ProfileMemberAlterabilityUpdated(sender, profileId, requests[i].entityId, requests[i].alstat);\\n    }\\n    return true;\\n  }\\n\\n  // Note: member default admin is\\n  function profileMemberUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileMemberManagement.profileMemberUpdateAdmin.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      ProfileMemberEntity storage memberEntity = _doGetEntityAndCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        requests[i].entityId,\\n        senderId\\n      );\\n\\n      // checking requested admin of member\\n      if (requests[i].adminId != bytes32(0)) {\\n        BaseAgent storage requestedAdminAgent = profileEntity.agents[requests[i].adminId];\\n        require(requestedAdminAgent.atype > AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n        memberEntity.ba.adminId = requests[i].adminId;\\n      } else {\\n        memberEntity.ba.adminId = _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID;\\n      }\\n      emit ProfileMemberAdminUpdated(sender, profileId, requests[i].entityId, requests[i].adminId);\\n    }\\n    return true;\\n  }\\n\\n  function profileMemberUpdateTypeLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberUpdateLimitRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileMemberManagement.profileMemberUpdateTypeLimit.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      ProfileMemberEntity storage memberEntity = _doGetEntityAndCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        requests[i].memberId,\\n        senderId\\n      );\\n      require(requests[i].limit > memberEntity.types.length(), \\\"Illegal Limit\\\");\\n      memberEntity.typeLimit = requests[i].limit;\\n      emit ProfileMemberTypeLimitUpdated(sender, profileId, requests[i].memberId, requests[i].limit);\\n    }\\n    return true;\\n  }\\n\\n  function profileMemberUpdateRegisterLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberUpdateRegisterLimitRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileMemberManagement.profileMemberUpdateRegisterLimit.selector);\\n    ProfileMemberEntity storage senderMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      ProfileMemberEntity storage memberEntity = _doGetEntityAndCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        requests[i].memberId,\\n        senderId\\n      );\\n\\n      // check register limits\\n      if (memberEntity.types.contains(_LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID)) {\\n        _doCheckRegisterLimit(profileEntity.registerLimits, requests[i].registerLimit, 0, false);\\n      } else {\\n        _doCheckRegisterLimit(senderMemberEntity.registerLimits, requests[i].registerLimit, 0, false);\\n      }\\n      memberEntity.registerLimits = requests[i].registerLimit;\\n      emit ProfileMemberRegisterLimitUpdated(sender, profileId, requests[i].memberId, requests[i].registerLimit);\\n    }\\n    return true;\\n  }\\n\\n  function profileMemberUpdateCallLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberUpdateLimitRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileMemberManagement.profileMemberUpdateCallLimit.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      ProfileMemberEntity storage memberEntity = _doGetEntityAndCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        requests[i].memberId,\\n        senderId\\n      );\\n      memberEntity.callLimit = requests[i].limit;\\n      emit ProfileMemberCallLimitUpdated(sender, profileId, requests[i].memberId, requests[i].limit);\\n    }\\n    return true;\\n  }\\n\\n  function profileMemberRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata members)\\n    external\\n    returns (bool)\\n  {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileMemberManagement.profileMemberRemove.selector);\\n\\n    for (uint256 i = 0; i < members.length; i++) {\\n      ProfileMemberEntity storage memberEntity = profileEntity.profileMemberReadSlot(members[i]);\\n      IProfileACL.ProfileAdminAccessStatus status = _doCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        memberEntity.ba.adminId,\\n        senderId\\n      );\\n      if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n\\n      // check and remove member from admin\\n      require(profileEntity.owner != memberEntity.account, \\\"Illegal Owner Remove\\\");\\n      profileEntity.admins.remove(members[i]);\\n\\n      _doProfileRemoveMember(profileEntity, memberEntity, members[i], profileId, sender);\\n    }\\n    return true;\\n  }\\n\\n  function profileMemberCheckId(bytes32 profileId, bytes32 memberId) external view returns (bool) {\\n    return _data.profiles[profileId].agents[memberId].atype == AgentType.MEMBER;\\n  }\\n\\n  function profileMemberCheckAccount(bytes32 profileId, address account) external view returns (bool) {\\n    return _data.profiles[profileId].agents[keccak256(abi.encodePacked(account))].atype == AgentType.MEMBER;\\n  }\\n\\n  function profileMemberCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 memberId,\\n    address account\\n  ) external view returns (bool) {\\n    return LProfileCommons.profileMemberCheckAdmin(_data, profileId, memberId, account);\\n  }\\n\\n  function profileMemberHasType(\\n    bytes32 profileId,\\n    bytes32 memberId,\\n    bytes32 typeId\\n  ) external view returns (bool) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat == ActivityStatus.NONE) return false;\\n    (ProfileMemberEntity storage member, bool result) = profileEntity.profileMemberTryReadSlot(memberId);\\n    if (result) return member.types.contains(typeId);\\n    return false;\\n  }\\n\\n  function profileMemberGetTypes(bytes32 profileId, bytes32 memberId) external view returns (bytes32[] memory) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat == ActivityStatus.NONE) return new bytes32[](0);\\n    (ProfileMemberEntity storage member, bool result) = profileEntity.profileMemberTryReadSlot(memberId);\\n    if (!result) return new bytes32[](0);\\n    return member.types.values();\\n  }\\n\\n  function profileMemberGetInfo(bytes32 profileId, bytes32 memberId) external view returns (ProfileMemberInfo memory) {\\n    return LProfileCommons.profileMemberGetInfo(_data, profileId, memberId);\\n  }\\n\\n  function _doCheckAdminAccess(\\n    ProfileEntity storage profileEntity,\\n    FunctionEntity storage functionEntity,\\n    bytes32 adminId,\\n    bytes32 senderId\\n  ) internal view returns (IProfileACL.ProfileAdminAccessStatus) {\\n    return LProfileCommons.profileCheckAdminAccess(profileEntity, functionEntity, adminId, senderId);\\n  }\\n\\n  function _accessPermission(ProfileMemberSignature calldata memberSign, bytes4 selector)\\n    internal\\n    returns (\\n      ProfileEntity storage,\\n      FunctionEntity storage,\\n      bytes32,\\n      bytes32,\\n      address\\n    )\\n  {\\n    require(IProxy(address(this)).safeModeStatus() == IBaseProxy.ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(bytes(memberSign.profileName).length > 0, \\\"Illegal ProfileName\\\");\\n\\n    address signer;\\n\\n    if (memberSign.signature.length > 0) {\\n      require(memberSign.expiredAt > block.timestamp, \\\"Expired Signature\\\");\\n      signer = LACLUtils.getProfileMemeberSignerAddress(memberSign, PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH);\\n    } else {\\n      signer = msg.sender;\\n    }\\n\\n    bytes32 profileId = LACLUtils.generateId(memberSign.profileName);\\n    address functionFacetId = _data.selectors[selector];\\n    bytes32 functionId = LACLUtils.functionGenerateId(functionFacetId, selector);\\n    bytes32 senderId = LACLUtils.accountGenerateId(signer);\\n\\n    ProfileAccessControl(payable(address(this))).profileAclHasMemberAccess(profileId, functionId, senderId);\\n\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    FunctionEntity storage functionEntity = _data.functionReadSlot(functionId);\\n    return (profileEntity, functionEntity, profileId, senderId, signer);\\n  }\\n\\n  function _doGetEntityAndCheckAdminAccess(\\n    ProfileEntity storage profileEntity,\\n    FunctionEntity storage functionEntity,\\n    bytes32 memberId,\\n    bytes32 senderId\\n  ) internal view returns (ProfileMemberEntity storage) {\\n    ProfileMemberEntity storage memberEntity = profileEntity.profileMemberReadSlot(memberId);\\n    require(memberEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Updatable\\\");\\n    IProfileACL.ProfileAdminAccessStatus status = _doCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      memberEntity.ba.adminId,\\n      senderId\\n    );\\n    if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n    return memberEntity;\\n  }\\n\\n  function _doProfileMemberRegister(\\n    ProfileEntity storage profileEntity,\\n    ProfileMemberRegisterRequest calldata memberRequest,\\n    FunctionEntity storage functionEntity,\\n    bytes32 senderId,\\n    bytes32 profileId,\\n    address sender\\n  ) internal {\\n    bytes32 newMemberId = LACLUtils.accountGenerateId(memberRequest.account);\\n    require(profileEntity.agents[newMemberId].acstat == ActivityStatus.NONE, \\\"Already Exist\\\");\\n\\n    // check role\\n    RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(memberRequest.roleId);\\n    require(roleEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Role Updatable\\\");\\n    require(roleEntity.memberLimit > roleEntity.memberCount, \\\"Illegal Register\\\");\\n\\n    // check type\\n    TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(roleEntity.typeId);\\n    require(typeEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Type Updatable\\\");\\n\\n    // check access\\n    {\\n      IProfileACL.ProfileAdminAccessStatus adminAccessStatus = _doCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        roleEntity.ba.adminId,\\n        senderId\\n      );\\n      if (adminAccessStatus != IProfileACL.ProfileAdminAccessStatus.PERMITTED)\\n        LACLUtils.generateProfileAdminAccessError(adminAccessStatus);\\n    }\\n\\n    // check and add member to profile admin\\n    if (roleEntity.typeId == _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID) profileEntity.admins.add(newMemberId);\\n\\n    // add new member to type\\n    typeEntity.members[newMemberId] = memberRequest.roleId;\\n\\n    // add new member to role\\n    roleEntity.memberCount += 1;\\n\\n    // create new member\\n    ProfileMemberEntity storage newMember = profileEntity.profileMemberWriteSlot(newMemberId);\\n\\n    // create profileAccount\\n    ProfileAccount storage newProfileAccount = _data.profileAccounts[memberRequest.account];\\n    require(newProfileAccount.profiles.length == 0, \\\"PA Already Exist\\\");\\n    newProfileAccount.profiles.push(profileId);\\n\\n    // check adminId\\n    if (memberRequest.adminId != bytes32(0)) {\\n      require(profileEntity.agents[memberRequest.adminId].atype > AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      IProfileACL.ProfileAdminAccessStatus adminAccessStatus = _doCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID,\\n        senderId\\n      );\\n      if (adminAccessStatus != IProfileACL.ProfileAdminAccessStatus.PERMITTED)\\n        revert IProfileACL.ProfileSetAdminForbidden(adminAccessStatus);\\n      newMember.ba.adminId = memberRequest.adminId;\\n    } else {\\n      newMember.ba.adminId = _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID;\\n    }\\n\\n    newMember.ba.atype = AgentType.MEMBER;\\n    newMember.ba.acstat = ActivityStatus.ENABLED;\\n    newMember.ba.alstat = AlterabilityStatus.UPDATABLE;\\n    newMember.account = memberRequest.account;\\n    newMember.types.add(roleEntity.typeId);\\n    newMember.typeLimit = memberRequest.typeLimit >= 1\\n      ? uint16(uint24(memberRequest.typeLimit))\\n      : profileEntity.limits.typeLimit;\\n    newMember.callLimit = memberRequest.callLimit >= 0\\n      ? uint16(uint24(memberRequest.callLimit))\\n      : profileEntity.limits.memberCallLimit;\\n    newMember.registerLimits = memberRequest.registerLimit;\\n\\n    emit ProfileMemberRegistered(\\n      sender,\\n      profileId,\\n      newMemberId,\\n      memberRequest.roleId,\\n      newMember.ba.adminId,\\n      memberRequest.registerLimit\\n    );\\n  }\\n\\n  function _doCheckRegisterLimit(\\n    ProfileRegisterLimit storage registerLimits,\\n    ProfileRegisterLimit calldata registerLimitRequest,\\n    uint32 memberRegisterLimit,\\n    bool isMemberRegister\\n  ) internal view {\\n    if (isMemberRegister) {\\n      require(memberRegisterLimit >= registerLimitRequest.memberRegisterLimit, \\\"Illegal MemberRegisterLimit\\\");\\n    } else {\\n      require(\\n        registerLimits.memberRegisterLimit >= registerLimitRequest.memberRegisterLimit,\\n        \\\"Illegal MemberRegisterLimit\\\"\\n      );\\n    }\\n    require(registerLimits.roleRegisterLimit >= registerLimitRequest.roleRegisterLimit, \\\"Illegal RoleRegisterLimit\\\");\\n    require(registerLimits.typeRegisterLimit >= registerLimitRequest.typeRegisterLimit, \\\"Illegal TypeRegisterLimit\\\");\\n    require(\\n      registerLimits.functionRegisterLimit >= registerLimitRequest.functionRegisterLimit,\\n      \\\"Illegal FunctionRegisterLimit\\\"\\n    );\\n    require(\\n      registerLimits.contextRegisterLimit >= registerLimitRequest.contextRegisterLimit,\\n      \\\"Illegal ContextRegisterLimit\\\"\\n    );\\n    require(registerLimits.realmRegisterLimit >= registerLimitRequest.realmRegisterLimit, \\\"Illegal RealmRegisterLimit\\\");\\n    require(\\n      registerLimits.domainRegisterLimit >= registerLimitRequest.domainRegisterLimit,\\n      \\\"Illegal DomainRegisterLimit\\\"\\n    );\\n    require(\\n      registerLimits.policyRegisterLimit >= registerLimitRequest.policyRegisterLimit,\\n      \\\"Illegal PolicyRegisterLimit\\\"\\n    );\\n  }\\n\\n  function _doProfileRemoveMember(\\n    ProfileEntity storage profileEntity,\\n    ProfileMemberEntity storage memberEntity,\\n    bytes32 memberId,\\n    bytes32 profileId,\\n    address sender\\n  ) internal {\\n    bytes32 typeId;\\n    for (uint256 j = 0; j < memberEntity.types.length() && j < 16; j++) {\\n      // check type\\n      typeId = memberEntity.types.at(j);\\n      TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(typeId);\\n      require(typeEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Type Updatable\\\");\\n\\n      // check role\\n      bytes32 roleId = typeEntity.members[memberId];\\n      RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(roleId);\\n      require(roleEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Role Updatable\\\");\\n      require(roleEntity.memberCount > 0, \\\"Illegal MemberCount\\\");\\n      unchecked {\\n        roleEntity.memberCount -= 1;\\n      }\\n\\n      // delete member from type\\n      delete typeEntity.members[memberId];\\n\\n      // delete type from member\\n      memberEntity.types.remove(typeId);\\n      emit ProfileMemberRoleRevoked(sender, profileId, memberId, roleId, typeId);\\n    }\\n\\n    if (memberEntity.types.length() == 0) {\\n      // revoke member from profile Account\\n      LProfileCommons.updateProfileAccount(_data, memberEntity, profileId, typeId, true);\\n\\n      // delete member entity\\n      delete memberEntity.ba;\\n      delete memberEntity.account;\\n      delete memberEntity.callLimit;\\n      delete memberEntity.typeLimit;\\n      delete memberEntity.registerLimits;\\n      delete memberEntity.types;\\n      emit ProfileMemberRemoved(sender, profileId, memberId, true);\\n    } else {\\n      emit ProfileMemberRemoved(sender, profileId, memberId, false);\\n    }\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LProfileCommons);\\n  }\\n}\\n\",\"keccak256\":\"0x70848b52b4d7ebdfd5557cf14f309624c670cedb7f6f7c5ea60ab90a70061bfd\",\"license\":\"MIT\"},\"src/contracts/acl/profile/policy/IProfilePolicyManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Policy Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\n\\ninterface IProfilePolicyManagement is IACLCommons {\\n  struct ProfilePolicyRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    int24 roleLimit;\\n    uint8 policyCode;\\n    string name;\\n  }\\n\\n  struct ProfilePolicyAddRolesRequest {\\n    bytes32 policyId;\\n    bytes32[] roles;\\n  }\\n\\n  struct ProfilePolicyRemoveRolesRequest {\\n    bytes32 policyId;\\n    bytes32[] roles;\\n  }\\n\\n  struct ProfilePolicyUpdateCodeRequest {\\n    bytes32 policyId;\\n    uint8 policyCode;\\n  }\\n\\n  struct ProfilePolicyUpdateRoleLimitRequest {\\n    bytes32 policyId;\\n    uint16 roleLimit;\\n  }\\n\\n  struct ProfilePolicyInfo {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint16 roleCount;\\n    uint8 policyCode;\\n    AgentType adminType;\\n    ScopeType scopeType;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfilePolicyRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed policyId,\\n    bytes32 scopeId,\\n    bytes32 adminId,\\n    uint8 policyCode\\n  );\\n\\n  event ProfilePolicyRoleAdded(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 roleId\\n  );\\n\\n  event ProfilePolicyRoleRemoved(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 roleId\\n  );\\n\\n  event ProfilePolicyActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfilePolicyAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfilePolicyCodeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    uint8 policyCode,\\n    PolicyType ptype\\n  );\\n\\n  event ProfilePolicyRoleLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    uint16 roleLimit\\n  );\\n\\n  event ProfilePolicyAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfilePolicyScopeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfilePolicyRemoved(address indexed sender, bytes32 indexed profieId, bytes32 indexed policyId);\\n\\n  function profilePolicyRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyAddRoles(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyAddRolesRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyRemoveRoles(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyRemoveRolesRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateCodes(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyUpdateCodeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateScope(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateScopeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateRoleLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyUpdateRoleLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata policies)\\n    external\\n    returns (bool);\\n\\n  function profilePolicyCheckId(bytes32 profileId, bytes32 policyId) external view returns (bool);\\n\\n  function profilePolicyCheckName(bytes32 profileId, string calldata policyName) external view returns (bool);\\n\\n  function profilePolicyCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profilePolicyCheckRole(bytes32 profileId, bytes32 roleId) external view returns (bool);\\n\\n  function profilePolicyCheckAccess(\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profilePolicyCheckRoleAccess(\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profilePolicyHasRole(\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    bytes32 roleId\\n  ) external view returns (bool);\\n\\n  function profilePolicyGetInfoByRole(bytes32 profileId, bytes32 roleId)\\n    external\\n    view\\n    returns (ProfilePolicyInfo memory);\\n\\n  function profilePolicyGetInfo(bytes32 profileId, bytes32 policyId) external view returns (ProfilePolicyInfo memory);\\n\\n  function profilePolicyGetRoles(bytes32 profileId, bytes32 policyId) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x9d51bfe8539cc15c01407605d10c5c2656d932b56f8e208683746a17f6051a5e\",\"license\":\"MIT\"},\"src/contracts/acl/profile/scope/IProfileContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Context Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileContextManagement is IACLCommons {\\n  struct ProfileContextRegisterRequest {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address contractId;\\n    address subject;\\n    address deployer;\\n    int16 functionLimit;\\n    bytes signature;\\n  }\\n\\n  struct ProfileContextUpdateFunctionLimitRequest {\\n    bytes32 contextId;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ProfileContextInfo {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    address contractId;\\n    uint8 functionCount;\\n    uint8 functionLimit;\\n    uint32 referredByAgent;\\n    AgentType adminType;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfileContextRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    bytes32 realmId,\\n    bytes32 adminId,\\n    address contractId,\\n    address deployer,\\n    address subject\\n  );\\n\\n  event ProfileContextAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileContextActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileContextAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileContextFunctionLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    uint8 functionLimit\\n  );\\n\\n  event ProfileContextRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    bool isSoftDelete\\n  );\\n\\n  function profileContextRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileContextRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextUpdateFunctionLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileContextUpdateFunctionLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata contexts)\\n    external\\n    returns (bool);\\n\\n  function profileContextCheckId(bytes32 profileId, bytes32 contextId) external view returns (bool);\\n\\n  function profileContextCheckAccount(bytes32 profileId, address contractId) external view returns (bool);\\n\\n  function profileContextCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 contextId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileContextHasFunction(\\n    bytes32 profileId,\\n    bytes32 contextId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profileContextHasSelector(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external view returns (bool);\\n\\n  function profileContextGetFunctions(bytes32 profileId, bytes32 contextId) external view returns (bytes32[] memory);\\n\\n  function profileContextGetInfo(bytes32 profileId, bytes32 contextId)\\n    external\\n    view\\n    returns (ProfileContextInfo memory);\\n}\\n\",\"keccak256\":\"0xb5f547b020a95d4632815ba580bdcd3ce5e35eb2cf715186e08c370e31323100\",\"license\":\"MIT\"},\"src/contracts/acl/profile/scope/IProfileDomainManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Profile Domain Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\ninterface IProfileDomainManagement is IACLCommons {\\n  struct ProfileDomainRegisterRequest {\\n    bytes32 adminId;\\n    int24 realmLimit;\\n    string name;\\n  }\\n\\n  struct ProfileDomainMoveRealmRequest {\\n    bytes32 domainId;\\n    bytes32 targetDomainId;\\n    bytes32 realmId;\\n  }\\n\\n  struct ProfileDomainUpdateRealmLimitRequest {\\n    bytes32 domainId;\\n    uint16 realmLimit;\\n  }\\n\\n  struct ProfileDomainInfo {\\n    bytes32 adminId;\\n    bytes32 universeId;\\n    uint16 realmLimit;\\n    uint16 realmCount;\\n    uint32 referredByAgent;\\n    ScopeType stype;\\n    AgentType adminType;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event ProfileDomainRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileDomainRealmMoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    bytes32 realmId,\\n    bytes32 newDomainId\\n  );\\n\\n  event ProfileDomainAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileDomainRealmLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    uint16 realmLimit\\n  );\\n\\n  event ProfileDomainActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileDomainAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileDomainRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    bool isSoftDeleted\\n  );\\n\\n  function profileDomainRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileDomainRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainMoveRealm(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileDomainMoveRealmRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainUpdateRealmLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileDomainUpdateRealmLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata domains)\\n    external\\n    returns (bool);\\n\\n  function profileDomainCheckId(bytes32 profileId, bytes32 domainId) external view returns (bool);\\n\\n  function profileDomainCheckName(bytes32 profileId, string calldata domainName) external view returns (bool);\\n\\n  function profileDomainCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 domainId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileDomainHasFunction(\\n    bytes32 profileId,\\n    bytes32 domainId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profileDomainHasContext(\\n    bytes32 profileId,\\n    bytes32 domainId,\\n    bytes32 contextId\\n  ) external view returns (bool);\\n\\n  function profileDomainHasRealm(\\n    bytes32 profileId,\\n    bytes32 domainId,\\n    bytes32 realmId\\n  ) external view returns (bool);\\n\\n  function profileDomainGetRealms(bytes32 profileId, bytes32 domainId) external view returns (bytes32[] memory);\\n\\n  function profileDomainGetInfo(bytes32 profileId, bytes32 domainId) external view returns (ProfileDomainInfo memory);\\n}\\n\",\"keccak256\":\"0xca2fccdacbc85bb94aed9f9f9cb7a91d89ee3d970480e760e8524ac8947e0d59\",\"license\":\"MIT\"},\"src/contracts/acl/profile/scope/IProfileFunctionManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Function Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileFunctionManagement is IACLCommons {\\n  struct ProfileFunctionRegisterRequest {\\n    bytes signature;\\n    bytes32 realmId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address subject;\\n    address deployer;\\n    address contractId;\\n    ProfileFunctionRequest[] functions;\\n  }\\n\\n  struct ProfileFunctionRequest {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n  }\\n\\n  struct ProfileFunctionUpdatePolicyRequest {\\n    bytes32 functionId;\\n    uint8 policyCode;\\n  }\\n\\n  struct ProfileFunctionUpdateAgentRequest {\\n    bytes32 functionId;\\n    bytes32 agentId;\\n  }\\n\\n  struct ProfileFunctionInfo {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint32 referredByAgent;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    AgentType adminType;\\n    AgentType agentType;\\n    uint8 policyCode;\\n  }\\n\\n  event ProfileFunctionRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    bytes32 contextId,\\n    bytes32 adminId,\\n    bytes32 agentId\\n  );\\n\\n  event ProfileFunctionAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileFunctionAgentUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    bytes32 agentId\\n  );\\n\\n  event ProfileFunctionActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileFunctionAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileFunctionPolicyUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    uint8 policyCode\\n  );\\n\\n  event ProfileFunctionRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    bool isSoftDeleted\\n  );\\n\\n  function profileFunctionRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileFunctionRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdateAgent(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileFunctionUpdateAgentRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdatePolicyCode(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileFunctionUpdatePolicyRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata functions)\\n    external\\n    returns (bool);\\n\\n  function profileFunctionCheckId(bytes32 profileId, bytes32 functionId) external view returns (bool);\\n\\n  function profileFunctionCheckSelector(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external view returns (bool);\\n\\n  function profileFunctionCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileFunctionCheckAgent(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileFunctionGetInfo(bytes32 profileId, bytes32 functionId)\\n    external\\n    view\\n    returns (ProfileFunctionInfo memory);\\n}\\n\",\"keccak256\":\"0xcfd8191982b7b5679b9c06cf890331cd86e89ba81bbaa5ccb8afde9ac4cb8191\",\"license\":\"MIT\"},\"src/contracts/acl/profile/scope/IProfileRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Realm Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\n\\ninterface IProfileRealmManagement is IACLCommons {\\n  struct ProfileRealmRegisterRequest {\\n    bytes32 domainId;\\n    bytes32 adminId;\\n    int64 contextLimit;\\n    string name;\\n  }\\n\\n  struct ProfileRealmMoveContextRequest {\\n    bytes32 realmId;\\n    bytes32 targetRealmId;\\n    bytes32 contextId;\\n  }\\n\\n  struct ProfileRealmUpdateContextLimitRequest {\\n    bytes32 realmId;\\n    uint32 contextLimit;\\n  }\\n\\n  struct ProfileRealmInfo {\\n    bytes32 domainId;\\n    bytes32 adminId;\\n    uint32 contextLimit;\\n    uint32 contextCount;\\n    uint32 referredByAgent;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    AgentType adminType;\\n    string name;\\n  }\\n\\n  event ProfileRealmRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    bytes32 domainId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileRealmContextMoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    bytes32 contextId,\\n    bytes32 newRealmId\\n  );\\n\\n  event ProfileRealmAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileRealmContextLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    uint32 contextLimit\\n  );\\n\\n  event ProfileRealmActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileRealmAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileRealmRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    bool isSoftDeleted\\n  );\\n\\n  function profileRealmRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRealmRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmMoveContext(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRealmMoveContextRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmUpdateContextLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRealmUpdateContextLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata realms)\\n    external\\n    returns (bool);\\n\\n  function profileRealmCheckId(bytes32 profileId, bytes32 realmId) external view returns (bool);\\n\\n  function profileRealmCheckName(bytes32 profileId, string calldata realmName) external view returns (bool);\\n\\n  function profileRealmCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 realmId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileRealmHasFunction(\\n    bytes32 profileId,\\n    bytes32 realmId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profileRealmHasContext(\\n    bytes32 profileId,\\n    bytes32 realmId,\\n    bytes32 contextId\\n  ) external view returns (bool);\\n\\n  function profileRealmGetContexts(bytes32 profileId, bytes32 realmId) external view returns (bytes32[] memory);\\n\\n  function profileRealmGetInfo(bytes32 profileId, bytes32 realmId) external view returns (ProfileRealmInfo memory);\\n}\\n\",\"keccak256\":\"0xa7684f1c01772607b6c210d018be3ef089381910cc9f51e653233d7353ced074\",\"license\":\"MIT\"},\"src/contracts/acl/scope/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Context Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IContextManagement is IACLCommons {\\n  struct ContextRegisterRequest {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address contractId;\\n    address subject;\\n    address deployer;\\n    int16 functionLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    bytes signature;\\n  }\\n\\n  struct ContextUpdateFunctionLimitRequest {\\n    bytes32 contextId;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ContextInfo {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    address contractId;\\n    uint8 functionCount;\\n    uint8 functionLimit;\\n    uint32 referredByAgent;\\n    AgentType adminType;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ContextRegistered(\\n    address indexed sender,\\n    bytes32 indexed contextId,\\n    address indexed contractId,\\n    bytes32 realmId,\\n    address deployer,\\n    address subject,\\n    bytes32 adminId\\n  );\\n\\n  event ContextAdminUpdated(address indexed sender, bytes32 indexed contextId, bytes32 indexed adminId);\\n\\n  event ContextActivityUpdated(address indexed sender, bytes32 indexed contextId, ActivityStatus acstat);\\n\\n  event ContextAlterabilityUpdated(address indexed sender, bytes32 indexed contextId, AlterabilityStatus alstat);\\n\\n  event ContextFunctionLimitUpdated(address indexed sender, bytes32 indexed contextId, uint8 functionLimit);\\n\\n  event ContextRemoved(address indexed sender, bytes32 indexed contextId, bool isSoftDelete);\\n\\n  function contextRegister(MemberSignature calldata memberSign, ContextRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateFunctionLimit(\\n    MemberSignature calldata memberSign,\\n    ContextUpdateFunctionLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextRemove(MemberSignature calldata memberSign, bytes32[] calldata contexts) external returns (bool);\\n\\n  function contextCheckId(bytes32 contextId) external view returns (bool);\\n\\n  function contextCheckAccount(address contractId) external view returns (bool);\\n\\n  function contextCheckAdmin(bytes32 contextId, address account) external view returns (bool);\\n\\n  function contextHasFunction(bytes32 contextId, bytes32 functionId) external view returns (bool);\\n\\n  function contextHasSelector(address contractId, bytes4 selector) external view returns (bool);\\n\\n  function contextGetFunctions(bytes32 contextId) external view returns (bytes32[] memory);\\n\\n  function contextGetInfo(bytes32 contextId) external view returns (ContextInfo memory);\\n}\\n\",\"keccak256\":\"0x3db7b4eaff9522c669111ec8e268f603b57da7b4c0846d3d6ffb74d9f9a07f08\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  function isContract2(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-universe-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb46e5ff7d2a40ad64a6ca16bf560fef69391201577931c8c0b8395292014035e\",\"license\":\"MIT\"},\"src/contracts/lib/LStorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary LStorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfe230bd4ca404541c3f9b857b24b92ed65ca09a1cbfc6222e8c308e131eca256\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0xf6b56daea1f2692628dff63bd57ff8ad0bc38ecbc34887db37a8305162ce1394\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLStorage {\\n  function universeReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function universeWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function functionReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fc.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function functionWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1db1476a40cb3e0912d1c07d6ed6c1e9171f6960014e49b66e3532610c80bb6d\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\n\\n/**\\n * @title Context Utils Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLUtils {\\n  function functionGenerateId(address contractId, bytes4 selector) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId, selector));\\n  }\\n\\n  function accountGenerateId(address account) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(account));\\n  }\\n\\n  function generateId(string calldata name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateId2(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateHash(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function getMemeberSignerAddress(IACLCommons.MemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateMemberSignMsgHash(msgTypeHash, memberSign.account, memberSign.expiredAt)\\n      );\\n  }\\n\\n  function getProfileMemeberSignerAddress(IACLCommons.ProfileMemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateProfileMemberSignMsgHash(\\n          msgTypeHash,\\n          generateId(memberSign.profileName),\\n          memberSign.account,\\n          memberSign.expiredAt\\n        )\\n      );\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) private view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(IProxy(address(this)).domainSeparator(), structHash);\\n  }\\n\\n  function _generateMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, account, expiredAt));\\n  }\\n\\n  function _generateProfileMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    bytes32 profileName,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, profileName, account, expiredAt));\\n  }\\n\\n  function getSignerAddress(bytes memory signature, bytes32 structHash) internal view returns (address) {\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal Signature\\\");\\n    return msgSigner;\\n  }\\n\\n  function generateAuthorizationError(IACL.AuthorizationStatus status) internal pure {\\n    if (status == IACL.AuthorizationStatus.UNAUTHORIZED) revert IACL.ACLUnauthorized();\\n    else if (status == IACL.AuthorizationStatus.POLICY_FORBIDDEN) revert IACL.ACLPolicyForbidden();\\n    else if (status == IACL.AuthorizationStatus.CALL_FORBIDDEN) revert IACL.ACLCallForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_SCOPE_FORBIDDEN) revert IACL.ACLRoleScopeForbidden();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_NOT_FOUND) revert IACL.ACLMemberNotFound();\\n    else if (status == IACL.AuthorizationStatus.ROLE_NOT_FOUND) revert IACL.ACLRoleNotFound();\\n    else if (status == IACL.AuthorizationStatus.TYPE_NOT_FOUND) revert IACL.ACLTypeNotFound();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_NOT_FOUND) revert IACL.ACLFunctionNotFound();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_NOT_FOUND) revert IACL.ACLContextNotFound();\\n    else if (status == IACL.AuthorizationStatus.REALM_NOT_FOUND) revert IACL.ACLRealmNotFound();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_NOT_FOUND) revert IACL.ACLDomainNotFound();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN) revert IACL.ACLMemberActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.ACLRoleActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.ACLTypeActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN) revert IACL.ACLFunctionActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN) revert IACL.ACLContextActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.REALM_ACTIVITY_FORBIDDEN) revert IACL.ACLRealmActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN) revert IACL.ACLDomainActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN) revert IACL.ACLUniverseActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAuthorizationError(IProfileACL.ProfileAuthorizationStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAuthorizationStatus.UNAUTHORIZED) revert IProfileACL.ProfileACLUnauthorized();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleScopeForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_NOT_FOUND)\\n      revert IProfileACL.ProfileACLMemberNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRoleNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLTypeNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileACLFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_NOT_FOUND)\\n      revert IProfileACL.ProfileACLContextNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRealmNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_NOT_FOUND)\\n      revert IProfileACL.ProfileACLDomainNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLTypeActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLFunctionActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLContextActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRealmActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLDomainActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLUniverseActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLProfileActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAdminAccessError(IProfileACL.ProfileAdminAccessStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED)\\n      revert IProfileACL.ProfileAdminAccessNotPermitted();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessRoleNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessTypeNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateAdminAccessError(IACL.AdminAccessStatus status) internal pure {\\n    if (status == IACL.AdminAccessStatus.NOT_PERMITTED) revert IACL.AdminAccessNotPermitted();\\n    else if (status == IACL.AdminAccessStatus.POLICY_FORBIDDEN) revert IACL.AdminAccessPolicyForbidden();\\n    else if (status == IACL.AdminAccessStatus.ROLE_NOT_FOUND) revert IACL.AdminAccessRoleNotFound();\\n    else if (status == IACL.AdminAccessStatus.TYPE_NOT_FOUND) revert IACL.AdminAccessTypeNotFound();\\n    else if (status == IACL.AdminAccessStatus.FUNCTION_NOT_FOUND) revert IACL.AdminAccessFunctionNotFound();\\n    else if (status == IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessRoleActivityForbidden();\\n    else if (status == IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x0a1ead86733fdae5c48faf98479dea608f2a5743722b7d458981c33ff13489c1\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LProfileCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./LACLUtils.sol\\\";\\nimport \\\"./LProfileStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/ProfileAccessControl.sol\\\";\\nimport \\\"../../acl/profile/IProfileACLGenerals.sol\\\";\\nimport \\\"../../acl/profile/IProfileManagement.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../proxy/IERC1822.sol\\\";\\nimport \\\"../../utils/IERC165.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/profile/scope/IProfileContextManagement.sol\\\";\\nimport \\\"../../acl/profile/scope/IProfileFunctionManagement.sol\\\";\\nimport \\\"../../acl/profile/scope/IProfileRealmManagement.sol\\\";\\nimport \\\"../../acl/profile/scope/IProfileDomainManagement.sol\\\";\\nimport \\\"../../acl/profile/agent/IProfileMemberManagement.sol\\\";\\n\\n/**\\n * @title Profile Commons Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LProfileCommons {\\n  using LProfileStorage for IACLCommons.ProfileEntity;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  string public constant LIB_NAME = \\\"LProfileCommons\\\";\\n  string public constant LIB_VERSION = \\\"3.0.0\\\";\\n\\n  bytes32 public constant LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 public constant LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER_ADMIN\\\"));\\n\\n  function profileCheckAdminAccess(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 adminId,\\n    bytes32 senderId\\n  ) external view returns (IProfileACL.ProfileAdminAccessStatus) {\\n    return _doProfileCheckAdminAccess(profileEntity, functionEntity, adminId, senderId);\\n  }\\n\\n  function profileAgentGetScopeInfo(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    external\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    return _doGetAgentScopeInfo(profileEntity, agentId);\\n  }\\n\\n  function profileRegisterContext(\\n    ACLStorage.DataCollection storage data,\\n    IProfileContextManagement.ProfileContextRegisterRequest calldata request,\\n    bytes32 profileId,\\n    address contractId,\\n    address signer\\n  ) external returns (bytes32) {\\n    bytes32 functionId = LACLUtils.functionGenerateId(\\n      data.selectors[IProfileContextManagement.profileContextRegister.selector],\\n      IProfileContextManagement.profileContextRegister.selector\\n    );\\n    bytes32 signerId = LACLUtils.accountGenerateId(signer);\\n    bytes32 newContextId = LACLUtils.accountGenerateId(contractId);\\n\\n    {\\n      IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n      ProfileAccessControl(payable(address(this))).profileAclHasMemberAccess(profileId, functionId, signerId);\\n      require(profileEntity.scopes[newContextId].stype == IACLCommons.ScopeType.NONE, \\\"Already Exist\\\");\\n\\n      // check profile and type limitations and update it\\n      IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(signerId);\\n      require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n      require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n      require(profileMemberEntity.registerLimits.contextRegisterLimit > 0, \\\"Illegal Member ContextRegisterLimit\\\");\\n      require(profileEntity.registerLimits.contextRegisterLimit > 0, \\\"Illegal Profile ContextRegisterLimit\\\");\\n      unchecked {\\n        profileMemberEntity.registerLimits.contextRegisterLimit -= 1;\\n        profileEntity.registerLimits.contextRegisterLimit -= 1;\\n      }\\n\\n      // check realm\\n      IACLCommons.RealmEntity storage realmEntity = profileEntity.profileRealmReadSlot(request.realmId);\\n      require(realmEntity.bs.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Realm Updatable\\\");\\n      require(realmEntity.contextLimit > realmEntity.contexts.length(), \\\"Illegal Register\\\");\\n\\n      // check system scope\\n      require(_doCheckContextSystemScope(profileEntity, request.realmId, signerId, profileId), \\\"Forbidden\\\");\\n\\n      // add context to realm\\n      realmEntity.contexts.add(newContextId);\\n\\n      // create new context\\n      IACLCommons.ContextEntity storage newContext = profileEntity.profileContextWriteSlot(newContextId);\\n      newContext.realmId = request.realmId;\\n      newContext.contractId = contractId;\\n      newContext.functionLimit = request.functionLimit >= 0\\n        ? uint8(uint16(request.functionLimit))\\n        : profileEntity.limits.functionLimit;\\n      newContext.bs.stype = IACLCommons.ScopeType.CONTEXT;\\n      newContext.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      newContext.bs.alstat = IACLCommons.AlterabilityStatus.UPGRADABLE;\\n      newContext.bs.adminId = _doGetContextAdmin(\\n        profileEntity,\\n        request,\\n        profileId,\\n        newContextId,\\n        realmEntity.bs.adminId\\n      );\\n    }\\n\\n    return newContextId;\\n  }\\n\\n  function profileCheckMemberForDomainRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    uint16 requestLength,\\n    bytes32 senderId\\n  ) external {\\n    // check profile and type limitations and update it\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(uint32(profileMemberEntity.registerLimits.domainRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Member DomainRegisterLimit\\\"\\n      );\\n      require(\\n        int32(uint32(profileEntity.registerLimits.domainRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile DomainRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.domainRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.domainRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileCheckMemberForFunctionRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    uint16 requestLength,\\n    bytes32 signerId\\n  ) external {\\n    // check profile and type limitations and update it\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(signerId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(profileMemberEntity.registerLimits.functionRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Member FunctionRegisterLimit\\\"\\n      );\\n      require(\\n        int32(profileEntity.registerLimits.functionRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile FunctionRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.functionRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.functionRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileCheckMemberForRealmRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    uint16 requestLength,\\n    bytes32 senderId\\n  ) external {\\n    // check profile and realm limitations and update it\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(uint32(profileMemberEntity.registerLimits.realmRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Member RealmRegisterLimit\\\"\\n      );\\n      require(\\n        int32(uint32(profileEntity.registerLimits.realmRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile MemberRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.realmRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.realmRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileCheckMemberForMemberRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.ProfileMemberEntity storage,\\n    uint16 requestLength,\\n    bytes32 senderId\\n  ) external {\\n    // check profile and member limitations and update it\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(profileMemberEntity.registerLimits.memberRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Member MemberRegisterLimit\\\"\\n      );\\n      require(\\n        int32(profileEntity.registerLimits.memberRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile MemberRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.memberRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.memberRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileDomainRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfileDomainManagement.ProfileDomainRegisterRequest calldata request,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 senderId\\n  ) external returns (bytes32) {\\n    bytes32 newDomainId = LACLUtils.generateId(request.name);\\n    require(profileEntity.scopes[newDomainId].stype == IACLCommons.ScopeType.NONE, \\\"Already Exist\\\");\\n\\n    // check sender scopes\\n    IACLCommons.UniverseEntity storage livelyUniverseEntity = profileEntity.profileUniverseReadSlot(\\n      LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID\\n    );\\n\\n    require(livelyUniverseEntity.bs.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Universe Updatable\\\");\\n    require(livelyUniverseEntity.domainLimit > livelyUniverseEntity.domains.length(), \\\"Illegal Register\\\");\\n\\n    // check access admin universe\\n    IProfileACL.ProfileAdminAccessStatus status = _doProfileCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      livelyUniverseEntity.bs.adminId,\\n      senderId\\n    );\\n    if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n\\n    // add domain to universe\\n    livelyUniverseEntity.domains.add(newDomainId);\\n\\n    // create new domain entity\\n    IACLCommons.DomainEntity storage newDomain = profileEntity.profileDomainWriteSlot(newDomainId);\\n    newDomain.bs.stype = IACLCommons.ScopeType.DOMAIN;\\n    newDomain.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    newDomain.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    newDomain.name = request.name;\\n    newDomain.universeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    newDomain.realmLimit = request.realmLimit >= 0\\n      ? uint16(uint24(request.realmLimit))\\n      : profileEntity.limits.realmLimit;\\n\\n    // checking requested domain admin\\n    if (request.adminId != bytes32(0)) {\\n      require(profileEntity.agents[request.adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      bytes32 requestAdminScopeId = _doDomainAgentGetScopeInfo(profileEntity, request.adminId);\\n      require(requestAdminScopeId == LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Admin Scope\\\");\\n      newDomain.bs.adminId = request.adminId;\\n    } else {\\n      newDomain.bs.adminId = livelyUniverseEntity.bs.adminId;\\n    }\\n\\n    return newDomainId;\\n  }\\n\\n  function profileRealmRegister(\\n    IProfileRealmManagement.ProfileRealmRegisterRequest calldata request,\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 senderId,\\n    IACLCommons.ScopeType memberScopeType,\\n    bytes32 memberScopeId\\n  ) external returns (bytes32) {\\n    bytes32 newRealmId = LACLUtils.generateId(request.name);\\n    require(profileEntity.scopes[newRealmId].stype == IACLCommons.ScopeType.NONE, \\\"Already Exist\\\");\\n\\n    // check sender scopes\\n    require(memberScopeType >= IACLCommons.ScopeType.DOMAIN, \\\"Illegal ScopeType\\\");\\n    if (memberScopeType == IACLCommons.ScopeType.DOMAIN) {\\n      require(memberScopeId == request.domainId, \\\"Illegal Domain Scope\\\");\\n    } else {\\n      require(memberScopeId == LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Universe Scope\\\");\\n    }\\n\\n    IACLCommons.DomainEntity storage domainEntity = profileEntity.profileDomainReadSlot(request.domainId);\\n    require(domainEntity.bs.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Domain Updatable\\\");\\n    require(domainEntity.realmLimit > domainEntity.realms.length(), \\\"Illegal Register\\\");\\n\\n    // check access admin realm\\n    IProfileACL.ProfileAdminAccessStatus status = _doProfileCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      domainEntity.bs.adminId,\\n      senderId\\n    );\\n    if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n\\n    // add to domain\\n    domainEntity.realms.add(newRealmId);\\n\\n    // create new realm entity\\n    IACLCommons.RealmEntity storage newRealm = profileEntity.profileRealmWriteSlot(newRealmId);\\n    newRealm.bs.stype = IACLCommons.ScopeType.REALM;\\n    newRealm.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    newRealm.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    newRealm.name = request.name;\\n    newRealm.domainId = request.domainId;\\n    newRealm.contextLimit = request.contextLimit >= 0\\n      ? uint32(uint64(request.contextLimit))\\n      : profileEntity.limits.contextLimit;\\n    newRealm.bs.adminId = _getProfileRealmAdmin(\\n      profileEntity,\\n      domainEntity.bs.adminId,\\n      request.domainId,\\n      request.adminId\\n    );\\n\\n    return newRealmId;\\n  }\\n\\n  function profileGetAndCheckRequestScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    IACLCommons.ScopeType senderScopeType,\\n    bytes32 profileId\\n  ) external view returns (IACLCommons.BaseScope storage) {\\n    return _doProfileGetAndCheckRequestScope(profileEntity, requestScopeId, senderScopeId, senderScopeType, profileId);\\n  }\\n\\n  function profileFunctionRegistration(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfileFunctionManagement.ProfileFunctionRequest calldata functionRequest,\\n    bytes32 profileId,\\n    bytes32 contextId\\n  ) external returns (bytes32) {\\n    IACLCommons.ContextEntity storage contextEntity = profileEntity.profileContextReadSlot(contextId);\\n    require(contextEntity.bs.alstat == IACLCommons.AlterabilityStatus.UPGRADABLE, \\\"Illegal Upgrade\\\");\\n    require(contextEntity.functionLimit > contextEntity.functions.length(), \\\"Illegal Limit\\\");\\n\\n    bytes32 newFunctionId = LACLUtils.functionGenerateId(contextEntity.contractId, functionRequest.selector);\\n\\n    require(profileEntity.scopes[newFunctionId].stype == IACLCommons.ScopeType.NONE, \\\"Already Exist\\\");\\n\\n    _doCheckAgentId(profileEntity, profileId, functionRequest.agentId, contextId);\\n    IACLCommons.FunctionEntity storage functionEntity = profileEntity.profileFunctionWriteSlot(newFunctionId);\\n    functionEntity.bs.stype = IACLCommons.ScopeType.FUNCTION;\\n    functionEntity.contextId = contextId;\\n    functionEntity.agentId = functionRequest.agentId;\\n    functionEntity.policyCode = functionRequest.policyCode;\\n    functionEntity.selector = functionRequest.selector;\\n    functionEntity.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionEntity.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    functionEntity.bs.adminId = _doGetAndCheckFunctionAdmin(\\n      profileEntity,\\n      contextEntity.bs.adminId,\\n      contextId,\\n      functionRequest.adminId,\\n      profileId\\n    );\\n\\n    // add function to context\\n    contextEntity.functions.add(newFunctionId);\\n\\n    return newFunctionId;\\n  }\\n\\n  function profileGetAndCheckFunctionAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 contextAdminId,\\n    bytes32 contextId,\\n    bytes32 adminId,\\n    bytes32 profileId\\n  ) external view returns (bytes32 functionAdminId) {\\n    return _doGetAndCheckFunctionAdmin(profileEntity, contextAdminId, contextId, adminId, profileId);\\n  }\\n\\n  function profileMemberGetInfo(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    bytes32 memberId\\n  ) external view returns (IProfileMemberManagement.ProfileMemberInfo memory) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    (IACLCommons.ProfileMemberEntity storage member, bool result) = profileEntity.profileMemberTryReadSlot(memberId);\\n    if (!result || profileEntity.acstat == IACLCommons.ActivityStatus.NONE) {\\n      return\\n        IProfileMemberManagement.ProfileMemberInfo({\\n          adminId: bytes32(0),\\n          account: address(0),\\n          typeLimit: 0,\\n          typeCount: 0,\\n          callLimit: 0,\\n          registerLimit: IACLCommons.ProfileRegisterLimit({\\n            memberRegisterLimit: 0,\\n            roleRegisterLimit: 0,\\n            typeRegisterLimit: 0,\\n            functionRegisterLimit: 0,\\n            contextRegisterLimit: 0,\\n            realmRegisterLimit: 0,\\n            domainRegisterLimit: 0,\\n            policyRegisterLimit: 0\\n          }),\\n          adminType: IACLCommons.AgentType.NONE,\\n          atype: IACLCommons.AgentType.NONE,\\n          acstat: IACLCommons.ActivityStatus.NONE,\\n          alstat: IACLCommons.AlterabilityStatus.NONE\\n        });\\n    }\\n\\n    return\\n      IProfileMemberManagement.ProfileMemberInfo({\\n        adminId: member.ba.adminId,\\n        account: member.account,\\n        typeLimit: member.typeLimit,\\n        typeCount: uint16(member.types.length()),\\n        callLimit: member.callLimit,\\n        registerLimit: IACLCommons.ProfileRegisterLimit({\\n          memberRegisterLimit: member.registerLimits.memberRegisterLimit,\\n          roleRegisterLimit: member.registerLimits.roleRegisterLimit,\\n          typeRegisterLimit: member.registerLimits.typeRegisterLimit,\\n          functionRegisterLimit: member.registerLimits.functionRegisterLimit,\\n          contextRegisterLimit: member.registerLimits.contextRegisterLimit,\\n          realmRegisterLimit: member.registerLimits.realmRegisterLimit,\\n          domainRegisterLimit: member.registerLimits.domainRegisterLimit,\\n          policyRegisterLimit: member.registerLimits.policyRegisterLimit\\n        }),\\n        adminType: profileEntity.agents[member.ba.adminId].atype,\\n        atype: member.ba.atype,\\n        acstat: member.ba.acstat,\\n        alstat: member.ba.alstat\\n      });\\n  }\\n\\n  function profileMemberCheckAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    bytes32 memberId,\\n    address account\\n  ) external view returns (bool) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    if (profileEntity.acstat == IACLCommons.ActivityStatus.NONE) return false;\\n    if (profileEntity.agents[memberId].atype != IACLCommons.AgentType.MEMBER) return false;\\n\\n    bytes32 memberAdminId = profileEntity.agents[memberId].adminId;\\n    IACLCommons.AgentType adminAgenType = profileEntity.agents[memberAdminId].atype;\\n    bytes32 accountId = LACLUtils.accountGenerateId(account);\\n\\n    if (adminAgenType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(memberAdminId);\\n      if (!result) return false;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(\\n        roleEntity.typeId\\n      );\\n      if (!result1) return false;\\n\\n      return typeEntity.members[accountId] == memberAdminId;\\n    } else if (adminAgenType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(memberAdminId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[accountId] != bytes32(0);\\n    }\\n\\n    return false;\\n  }\\n\\n  function updateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity,\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    bool isRevoke\\n  ) external {\\n    return _updateProfileAccount(data, profileMemberEntity, profileId, typeId, isRevoke);\\n  }\\n\\n  function _updateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity,\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    bool isRevoke\\n  ) private {\\n    IACLCommons.ProfileAccount storage profileAccount = data.profileAccounts[profileMemberEntity.account];\\n    require(profileAccount.profiles.length > 0, \\\"ProfileAccount Not Found\\\");\\n    bool findFlag = false;\\n    for (uint256 i = 0; i < profileAccount.profiles.length; i++) {\\n      if (profileAccount.profiles[i] == profileId) {\\n        findFlag = true;\\n        if (!isRevoke) {\\n          if (\\n            (profileMemberEntity.types.contains(LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID) ||\\n              profileMemberEntity.types.contains(LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID)) &&\\n            (typeId == LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID || typeId == LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID)\\n          ) {\\n            revert(\\\"Illegal GrantMemberType\\\");\\n          }\\n        } else {\\n          if (profileAccount.profiles.length > 1) {\\n            if (i < profileAccount.profiles.length - 1)\\n              profileAccount.profiles[i] = profileAccount.profiles[profileAccount.profiles.length - 1];\\n            profileAccount.profiles.pop();\\n          } else {\\n            profileAccount.profiles.pop();\\n            delete profileAccount.profiles;\\n          }\\n        }\\n        break;\\n      }\\n    }\\n\\n    require(findFlag, \\\"Illegal ProfileAccount\\\");\\n  }\\n\\n  function _doProfileGetAndCheckRequestScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    IACLCommons.ScopeType senderScopeType,\\n    bytes32 profileId\\n  ) private view returns (IACLCommons.BaseScope storage) {\\n    // checking requested type scope\\n    IACLCommons.BaseScope storage requestedScope = profileEntity.scopes[requestScopeId];\\n    require(requestedScope.stype != IACLCommons.ScopeType.NONE, \\\"Scope Not Found\\\");\\n    require(requestedScope.acstat > IACLCommons.ActivityStatus.DELETED, \\\"Deleted\\\");\\n\\n    require(requestedScope.stype <= senderScopeType, \\\"Illegal ScopeType\\\");\\n    if (requestedScope.stype == senderScopeType) {\\n      require(requestScopeId == senderScopeId, \\\"Illegal Scope\\\");\\n    } else {\\n      require(\\n        IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, senderScopeId, requestScopeId),\\n        \\\"Illegal Scope\\\"\\n      );\\n    }\\n\\n    return requestedScope;\\n  }\\n\\n  function _getProfileRealmAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 requestScopeAdmin,\\n    bytes32 domainId,\\n    bytes32 adminId\\n  ) private view returns (bytes32 realmAdminId) {\\n    // checking requested context admin\\n    if (adminId != bytes32(0)) {\\n      require(profileEntity.agents[adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doGetAgentScopeInfo(\\n        profileEntity,\\n        adminId\\n      );\\n      require(IACLCommons.ScopeType.DOMAIN <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (IACLCommons.ScopeType.DOMAIN == requestAdminScopeType) {\\n        require(requestAdminScopeId == domainId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(requestAdminScopeId == LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Admin Scope\\\");\\n      }\\n      realmAdminId = adminId;\\n    } else {\\n      realmAdminId = requestScopeAdmin;\\n    }\\n  }\\n\\n  function _doProfileCheckAdminAccess(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 adminId,\\n    bytes32 senderId\\n  ) private view returns (IProfileACL.ProfileAdminAccessStatus) {\\n    // owners always access to all entities to modify those\\n    if (profileEntity.admins.contains(senderId)) return IProfileACL.ProfileAdminAccessStatus.PERMITTED;\\n\\n    IACLCommons.AgentType adminAgentType = profileEntity.agents[adminId].atype;\\n    if (adminAgentType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(adminId);\\n      if (!result) return IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(\\n        roleEntity.typeId\\n      );\\n      if (!result1) return IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      if (typeEntity.members[senderId] != adminId) return IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[adminId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IProfileACL.ProfileAdminAccessStatus.PERMITTED;\\n    } else if (adminAgentType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(adminId);\\n      if (!result1) return IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      bytes32 roleId = typeEntity.members[senderId];\\n      (IACLCommons.RoleEntity storage roleEntity, bool result2) = profileEntity.profileRoleTryReadSlot(roleId);\\n      if (!result2) return IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[roleId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IProfileACL.ProfileAdminAccessStatus.PERMITTED;\\n    }\\n\\n    return IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED;\\n  }\\n\\n  function _doGetContextAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfileContextManagement.ProfileContextRegisterRequest calldata request,\\n    bytes32 profileId,\\n    bytes32 scopeId,\\n    bytes32 realmAdminId\\n  ) private view returns (bytes32 contextAdminId) {\\n    // checking requested context admin\\n    if (request.adminId != bytes32(0)) {\\n      require(profileEntity.agents[request.adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doGetAgentScopeInfo(\\n        profileEntity,\\n        request.adminId\\n      );\\n      require(IACLCommons.ScopeType.REALM <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (IACLCommons.ScopeType.REALM == requestAdminScopeType) {\\n        require(requestAdminScopeId == request.realmId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(\\n          IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, requestAdminScopeId, scopeId),\\n          \\\"Illegal Admin Scope\\\"\\n        );\\n      }\\n      contextAdminId = request.adminId;\\n    } else {\\n      contextAdminId = realmAdminId;\\n    }\\n  }\\n\\n  function _doGetAgentScopeInfo(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    private\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    IACLCommons.AgentType atype = profileEntity.agents[agentId].atype;\\n    if (atype == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = profileEntity.scopes[roleEntity.scopeId];\\n      return (baseScope.stype, roleEntity.scopeId);\\n    } else if (atype == IACLCommons.AgentType.TYPE) {\\n      IACLCommons.TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = profileEntity.scopes[typeEntity.scopeId];\\n      return (baseScope.stype, typeEntity.scopeId);\\n    }\\n\\n    return (IACLCommons.ScopeType.NONE, bytes32(0));\\n  }\\n\\n  function _doCheckContextSystemScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 scopeId,\\n    bytes32 memberId,\\n    bytes32 profileId\\n  ) private view returns (bool) {\\n    IACLCommons.TypeEntity storage systemType = profileEntity.profileTypeReadSlot(LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID);\\n    bytes32 memberRoleId = systemType.members[memberId];\\n    IACLCommons.RoleEntity storage memberSystemRole = profileEntity.profileRoleReadSlot(memberRoleId);\\n    if (profileEntity.scopes[memberSystemRole.scopeId].stype < IACLCommons.ScopeType.REALM) return false;\\n    if (memberSystemRole.scopeId == scopeId) {\\n      return true;\\n    }\\n\\n    return IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, memberSystemRole.scopeId, scopeId);\\n  }\\n\\n  function _doCheckAgentId(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 profileId,\\n    bytes32 agentId,\\n    bytes32 contextId\\n  ) private view {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    require(ba.atype > IACLCommons.AgentType.MEMBER, \\\"Illegal AgentId\\\");\\n\\n    (IACLCommons.ScopeType requestAgentScopeType, bytes32 requestAgentScopeId) = _doGetAgentScopeInfo(\\n      profileEntity,\\n      agentId\\n    );\\n    require(IACLCommons.ScopeType.CONTEXT <= requestAgentScopeType, \\\"Illegal Agent ScopeType\\\");\\n    if (IACLCommons.ScopeType.CONTEXT == requestAgentScopeType) {\\n      require(requestAgentScopeId == contextId, \\\"Illegal Agent Scope\\\");\\n    } else {\\n      require(\\n        IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, requestAgentScopeId, contextId),\\n        \\\"Illegal Agent Scope\\\"\\n      );\\n    }\\n  }\\n\\n  function _doGetAndCheckFunctionAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 contextAdminId,\\n    bytes32 contextId,\\n    bytes32 requestAdminId,\\n    bytes32 profileId\\n  ) private view returns (bytes32 functionAdminId) {\\n    // checking requested functionAdmin admin\\n    if (requestAdminId != bytes32(0)) {\\n      require(profileEntity.agents[requestAdminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n\\n      (IACLCommons.ScopeType requestAdminFuncType, bytes32 requestAdminFuncId) = _doGetAgentScopeInfo(\\n        profileEntity,\\n        requestAdminId\\n      );\\n      require(IACLCommons.ScopeType.CONTEXT <= requestAdminFuncType, \\\"Illegal Admin ScopeType\\\");\\n\\n      if (IACLCommons.ScopeType.CONTEXT == requestAdminFuncType) {\\n        require(requestAdminFuncId == contextAdminId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(\\n          IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, requestAdminFuncId, contextId),\\n          \\\"Illegal Admin Scope\\\"\\n        );\\n      }\\n      functionAdminId = requestAdminId;\\n    } else {\\n      functionAdminId = contextAdminId;\\n    }\\n  }\\n\\n  function _doDomainAgentGetScopeInfo(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    private\\n    view\\n    returns (bytes32)\\n  {\\n    IACLCommons.AgentType atype = profileEntity.agents[agentId].atype;\\n    if (atype == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(agentId);\\n      return roleEntity.scopeId;\\n    } else if (atype == IACLCommons.AgentType.TYPE) {\\n      IACLCommons.TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(agentId);\\n      return typeEntity.scopeId;\\n    }\\n\\n    return bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0x3114eee7b89801f54fd178e51aa54112f1ed4f62fa8fc062b27abf1275e7873f\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LProfileStorage {\\n  function profileUniverseReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function profileUniverseWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileFunctionWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n}\\n\",\"keccak256\":\"0xe95300b9bb0c9fa78648108acf843bd0609e08a60b03b61a79f271f5fcb46b91\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0x75b905d070ebb72fa3358e262ab18166f6c6386c11171324f235058ce9185ca4\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe49098eb2019f9d9628a399f6a06ec310fe8a10785c369cc508c56df1f203dd0\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Abstract Base Proxy Contract\\n * @dev\\n *\\n */\\nabstract contract BaseProxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overridden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xbfec492ce3aa18df2eb26ce155269056e8039eaccec4a3146dd9036b565396a6\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC1822.sol\\\";\\nimport \\\"./IProxy.sol\\\";\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"./BaseUUPSStorage.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"../lib/LAddress.sol\\\";\\nimport \\\"../lib/LStorageSlot.sol\\\";\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/scope/IContextManagement.sol\\\";\\nimport \\\"../utils/Message.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"../lib/acl/LACLUtils.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Proxy Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSProxy is\\n  BaseUUPSStorage,\\n  BaseProxy,\\n  Initializable,\\n  IProxy,\\n  IERC1822Proxiable,\\n  Message,\\n  ERC165\\n{\\n  /**\\n   * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n   * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n   * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n   * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n   * fail.\\n   */\\n  modifier onlyProxy() {\\n    require(address(this) != __self, \\\"Illegal Call\\\"); // Illegal Contract Call\\n    require(_implementation() == __self, \\\"Invalid Call\\\"); // Invalid Proxy Call\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyLocalAdmin() {\\n    require(_getLocalAdmin() == _msgSender(), \\\"Access Denied\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n   * callable on the implementing contract but not through proxies.\\n   */\\n  modifier notDelegated() {\\n    require(address(this) == __self, \\\"Illegal Call\\\"); // Illegal Contract Delegatecall\\n    _;\\n  }\\n\\n  modifier safeModeCheck() {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    _;\\n  }\\n\\n  modifier aclCheck(bytes4 selector) {\\n    IACL.AuthorizationStatus status = _hasPermission(selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _;\\n  }\\n\\n  function _hasPermission(bytes4 selector) internal returns (IACL.AuthorizationStatus) {\\n    return IACL(_accessControlManager).hasAccountAccess(address(this), selector, _msgSender());\\n  }\\n\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n   */\\n\\n  constructor() {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n    // set contract Admin (implementation contract)\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = _msgSender();\\n\\n    // set _isUpgradable and _isSafeMode of contact\\n    _ustat = ProxyUpdatabilityStatus.DISABLED;\\n    _sstat = ProxySafeModeStatus.ENABLED;\\n  }\\n\\n  function __BASE_UUPS_init(\\n    string calldata cname,\\n    string calldata cverion,\\n    address accessControl\\n  ) internal {\\n    __BASE_UUPS_init_unchained(cname, cverion, accessControl);\\n  }\\n\\n  function __BASE_UUPS_init_unchained(\\n    string calldata cname,\\n    string calldata cverion,\\n    address accessControl\\n  ) internal onlyInitializing {\\n    _contractName = cname;\\n    _contractVersion = cverion;\\n\\n    if (accessControl != address(this)) {\\n      require(LAddress.isContract(accessControl), \\\"Illegal Contract\\\");\\n      if (!IERC165(accessControl).supportsInterface(type(IACL).interfaceId)) {\\n        revert(\\\"Illegal ACL\\\");\\n      }\\n    } else {\\n      if (!supportsInterface(type(IACL).interfaceId)) {\\n        revert(\\\"Not Supported\\\");\\n      }\\n    }\\n\\n    _accessControlManager = accessControl;\\n    _ustat = ProxyUpdatabilityStatus.DISABLED;\\n    _sstat = ProxySafeModeStatus.DISABLED;\\n    _setLocalAdmin(_msgSender());\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IProxy).interfaceId ||\\n      interfaceId == type(IERC1822Proxiable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation() internal view override returns (address) {\\n    return LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit ProxyUpgraded(msg.sender, address(this), newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      return LAddress.functionDelegateCall(newImplementation, data, \\\"Call Failed\\\"); // delegatecall failed\\n    }\\n    return new bytes(0);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCallUUPS(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\n    if (LStorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n      _setImplementation(newImplementation);\\n      return new bytes(0);\\n    } else {\\n      if (IERC1822Proxiable(newImplementation).proxiableUUID() != _IMPLEMENTATION_SLOT) {\\n        revert(\\\"Illegal UUPS\\\");\\n      }\\n\\n      if (!IERC165(newImplementation).supportsInterface(type(IProxy).interfaceId)) {\\n        revert(\\\"Illegal IProxy\\\");\\n      }\\n\\n      return _upgradeToAndCall(newImplementation, data, forceCall);\\n    }\\n  }\\n\\n  /**\\n   * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n   * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n   */\\n  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n    return _IMPLEMENTATION_SLOT;\\n  }\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external virtual onlyProxy returns (bytes memory) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    require(LAddress.isContract(newImplementation), \\\"Illegal Contract\\\");\\n    _authorizeUpgrade(newImplementation);\\n    return _upgradeToAndCallUUPS(newImplementation, data, forceCall);\\n  }\\n\\n  /**\\n   * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n   * {upgradeTo} and {upgradeToAndCall}.\\n   *\\n   * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n   *\\n   * ```solidity\\n   * function _authorizeUpgrade(address) internal override onlyOwner {}\\n   * ```\\n   */\\n  function _authorizeUpgrade(address newImplementation) internal virtual {\\n    require(newImplementation != _implementation(), \\\"Illegal\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.upgradeTo.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n  }\\n\\n  function localAdmin() external view returns (address) {\\n    return _getLocalAdmin();\\n  }\\n\\n  function setLocalAdmin(address newLocalAdmin) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setLocalAdmin.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    require(newLocalAdmin != address(0), \\\"Invalid\\\");\\n    _setLocalAdmin(newLocalAdmin);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.require(!_isSafeMode, \\\"Rejected\\\");\\n   */\\n  function _getLocalAdmin() internal view returns (address) {\\n    return LStorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setLocalAdmin(address newAdmin) internal {\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    emit ProxyLocalAdminUpdated(_msgSender(), address(this), newAdmin);\\n  }\\n\\n  // In each upgrade the initialize requirement must be changed\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external onlyProxy returns (bool) {\\n    require(_getInitializedCount() > 0, \\\"NOT INIT\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setSafeModeStatus.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _sstat = sstat;\\n    emit ProxySafeModeUpdated(_msgSender(), address(this), sstat);\\n    return true;\\n  }\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setUpdatabilityStatus.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _ustat = ustat;\\n    emit ProxyUpdatabilityUpdated(_msgSender(), address(this), ustat);\\n    return true;\\n  }\\n\\n  function setAccessControlManager(address acl) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    require(acl != address(0) && LAddress.isContract(acl), \\\"Illegal Contract\\\");\\n\\n    if (_accessControlManager != address(0)) {\\n      IACL.AuthorizationStatus status = _hasPermission(this.setAccessControlManager.selector);\\n      if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    } else {\\n      require(_getLocalAdmin() == _msgSender(), \\\"Access Denied\\\");\\n    }\\n\\n    if (!IERC165(acl).supportsInterface(type(IACL).interfaceId)) {\\n      revert(\\\"Illegal ACL\\\");\\n    }\\n\\n    _accessControlManager = acl;\\n    emit ProxyAccessControlUpdated(_msgSender(), address(this), _accessControlManager);\\n    return true;\\n  }\\n\\n  function contractName() external view returns (string memory) {\\n    return _contractName;\\n  }\\n\\n  function contractVersion() external view returns (string memory) {\\n    return _contractVersion;\\n  }\\n\\n  function accessControlManager() external view returns (address) {\\n    return _accessControlManager;\\n  }\\n\\n  function subjectAddress() external view returns (address) {\\n    return _implementation();\\n  }\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus) {\\n    return _sstat;\\n  }\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus) {\\n    return _ustat;\\n  }\\n\\n  function domainSeparator() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          keccak256(abi.encodePacked(_contractName)),\\n          keccak256(abi.encodePacked(_contractVersion)),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  function initVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  function withdrawBalance(address recepient) external returns (uint256) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.withdrawBalance.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    uint256 balance = address(this).balance;\\n    payable(recepient).transfer(address(this).balance);\\n    return balance;\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable override {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable override {}\\n}\\n\",\"keccak256\":\"0x711f8267d66a827c0cf581e8f070580586aa0fddd197637fac5b85bfd371627b\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Storage Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSStorage is IBaseProxy {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  address internal immutable __self = address(this);\\n\\n  string internal _contractName;\\n  string internal _contractVersion;\\n  address internal _accessControlManager;\\n  ProxySafeModeStatus internal _sstat;\\n  ProxyUpdatabilityStatus internal _ustat;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x4ff079fd2fd1ad102d42e82a72bff6bb1ffb8f9ab29cec2dd8e970b892ea415e\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IBaseProxy {\\n  enum ProxySafeModeStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum ProxyUpdatabilityStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  event ProxyUpgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x4b2695303b3acb300ba472d17da71a16367191af571d325d43171503d7c92846\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x98571e9bc4231bb67b3c8b339c052fa968e56b0bef3e35f5d82c391335336ae8\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event ProxyLocalAdminUpdated(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event ProxyAccessControlUpdated(address indexed sender, address indexed proxy, address acl);\\n\\n  event ProxySafeModeUpdated(address indexed sender, address indexed proxy, ProxySafeModeStatus sstat);\\n\\n  event ProxyUpdatabilityUpdated(address indexed sender, address indexed proxy, ProxyUpdatabilityStatus ustat);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external returns (bool);\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function setAccessControlManager(address acl) external returns (bool);\\n\\n  function withdrawBalance(address recepient) external returns (uint256);\\n\\n  function contractName() external view returns (string memory);\\n\\n  function contractVersion() external view returns (string memory);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus);\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xaadf51e846486cf9dc7387ad1dcac9a67e6a2d9354ce71694d79de783e1dea3b\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0x5603924c0330dcabd0b81d2b6a8113be8ad3ecbbfd0e75795a79221c21990f45\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xd4388084c83f15ac54be8d4e28a9d0f7be51c87efc357a33e7080e9769d5553a\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x95ac867088cd7cca6d583788b83e56e0c521c847aa9844f6184c14f5ce3ddf90\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Abstract Message Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x9fe52fdf93ebcdcbe224c4eba70bd3d8f6b4479fcc67d681b18070975d1ba970\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200004360017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620000fd565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc1462000074576200007462000125565b620000a160017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620000fd565b6000805160206200601283398151915214620000c157620000c162000125565b6000805160206200601283398151915280546001600160a01b0319163317905560028054600160a01b61ffff60a01b199091161790556200013b565b818103818111156200011f57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052600160045260246000fd5b608051615e67620001ab600039600081816108250152818161086e01528181610a5d01528181610a9d01528181610e4f015281816110ea0152818161112a01528181611ed401528181611f14015281816121a9015281816121e90152818161235d015261239d0152615e676000f3fe6080604052600436106102275760003560e01c806379419a4911610122578063beeba2bc116100a5578063f698da251161006c578063f698da2514610766578063f708ceb01461077b578063f94a0adb1461079b578063fcc40178146107b0578063fd25ed27146107d057005b8063beeba2bc146106a5578063d017969c146106c5578063d9dc1f19146106e5578063f0b15def14610705578063f44c33c21461073957005b8063a0a8e460116100e9578063a0a8e46014610613578063a304e35314610628578063ae1f24e814610647578063b1b483f914610667578063b4a0bdf31461068757005b806379419a491461055f5780638d17a0dc1461057f5780638e8fc22f1461059f5780638fec1024146105bf5780639b97b534146105df57005b80634bf0414d116101aa578063658ce4a711610171578063658ce4a7146104b65780637147855d146104d6578063756af45f1461050357806375d0c0dc146105235780637678922e1461053857005b80634bf0414d146103ec57806352d1902d1461042057806358dbc45d1461043557806364d4c81914610462578063652441b71461049657005b8063301c1280116101ee578063301c12801461030757806333049f9a1461033b57806334109de21461036857806338d38c971461039c5780634888f482146103c457005b806301ffc9a714610230578063077f224a146102655780630e32cb86146102855780631b452f4b146102a55780631ec1d33c146102e757005b3661022e57005b005b34801561023c57600080fd5b5061025061024b366004614c2c565b6107f0565b60405190151581526020015b60405180910390f35b34801561027157600080fd5b5061022e610280366004614cac565b61081b565b34801561029157600080fd5b506102506102a0366004614d2f565b610a51565b3480156102b157600080fd5b506102d97f7bfb2abd6084c8ce20d7ff92c1620e7e7267603f0eac446b9176959d243306bc81565b60405190815260200161025c565b3480156102f357600080fd5b50610250610302366004614d4c565b610d5f565b34801561031357600080fd5b506102d97f541cf898e7c3085cbc6b7402ba06e7237285bc4bd5baa510e708e35537a71ffd81565b34801561034757600080fd5b5061035b610356366004614d4c565b610d9c565b60405161025c9190614d6e565b34801561037457600080fd5b506102d97f7aabe2571874f2a330ea11c8972d9cc3792d973efc6b36e3e29005861a34418881565b3480156103a857600080fd5b506103b1610e2e565b60405161ffff909116815260200161025c565b3480156103d057600080fd5b50600254600160a81b900460ff165b60405161025c9190614dd8565b3480156103f857600080fd5b506102d97f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d5581565b34801561042c57600080fd5b506102d9610e42565b34801561044157600080fd5b5061044a610e9f565b6040516001600160a01b03909116815260200161025c565b34801561046e57600080fd5b506102d97f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b3480156104a257600080fd5b506102506104b1366004614e03565b610ea9565b3480156104c257600080fd5b506102506104d1366004614e9d565b611042565b3480156104e257600080fd5b506104f66104f1366004614f5e565b6110de565b60405161025c9190615065565b34801561050f57600080fd5b506102d961051e366004614d2f565b611235565b34801561052f57600080fd5b506104f66112fa565b34801561054457600080fd5b50737F11D5bb7c99667ac0E8851c6B72633d35244c6C61044a565b34801561056b57600080fd5b5061025061057a366004615078565b61138c565b34801561058b57600080fd5b5061025061059a366004615142565b6114f5565b3480156105ab57600080fd5b506102506105ba3660046151aa565b611709565b3480156105cb57600080fd5b506102506105da366004615142565b611782565b3480156105eb57600080fd5b506102d97fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b881565b34801561061f57600080fd5b506104f66118ad565b34801561063457600080fd5b50600254600160a01b900460ff166103df565b34801561065357600080fd5b50610250610662366004615142565b6118bc565b34801561067357600080fd5b506102506106823660046151d6565b611aaf565b34801561069357600080fd5b506002546001600160a01b031661044a565b3480156106b157600080fd5b506102506106c0366004615206565b611b0d565b3480156106d157600080fd5b506102506106e0366004615142565b611ccb565b3480156106f157600080fd5b50610250610700366004614d2f565b611ec8565b34801561071157600080fd5b506102d97ffc434588684348dd50856b075c47bed14245c1030aa04c32955af5549981462781565b34801561074557600080fd5b50610759610754366004614d4c565b61207e565b60405161025c919061531e565b34801561077257600080fd5b506102d9612193565b34801561078757600080fd5b506102506107963660046153f6565b61219d565b3480156107a757600080fd5b5061044a612347565b3480156107bc57600080fd5b506102506107cb3660046153f6565b612351565b3480156107dc57600080fd5b506102506107eb366004615142565b6124dc565b60006001600160e01b03198216632819933f60e21b148061081557506108158261267e565b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361086c5760405162461bcd60e51b815260040161086390615413565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661089e6126ce565b6001600160a01b0316146108c45760405162461bcd60e51b815260040161086390615439565b336108cd6126ef565b6001600160a01b0316146109135760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610863565b604e5462010000900460ff16158080156109355750604e54600161ffff909116105b806109505750303b1580156109505750604e5461ffff166001145b61099c5760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a6564000000006044820152606401610863565b604e805461ffff1916600117905580156109c257604e805462ff00001916620100001790555b6109cf8686868686612717565b6109d76126ce565b6001600160a01b031630336001600160a01b03167f247ab7b17ee489fa140c6666edc3822eefed2727610cd6e37192462b87244c6089898989610a1d604e5461ffff1690565b604051610a2e959493929190615488565b60405180910390a48015610a4957604e805462ff0000191690555b505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a9b5760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610acd6126ce565b6001600160a01b031614610af35760405162461bcd60e51b815260040161086390615439565b6000600254600160a01b900460ff166001811115610b1357610b13614db2565b14610b305760405162461bcd60e51b8152600401610863906154c6565b6001600254600160a81b900460ff166001811115610b5057610b50614db2565b14610b6d5760405162461bcd60e51b8152600401610863906154e8565b6001600160a01b03821615801590610b8e57506001600160a01b0382163b15155b610baa5760405162461bcd60e51b815260040161086390615513565b6002546001600160a01b031615610c09576000610bcd63071965c360e11b61272b565b90506000816013811115610be357610be3614db2565b14610c035780604051637f0911d160e01b8152600401610863919061553d565b50610c58565b33610c126126ef565b6001600160a01b031614610c585760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610863565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc79190615551565b610d015760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610863565b600280546001600160a01b0384166001600160a01b031990911681179091556040805191825251309133917f410bf468eebeeed60acaedb904afb2db7c0bb0131f7d14c3714d81b14fe8ed3c9181900360200190a35060015b919050565b60006001600084815260486020908152604080832086845290915290206001015460ff166003811115610d9457610d94614db2565b149392505050565b60008281526048602052604081206060916008820154600160a01b900460ff166003811115610dcd57610dcd614db2565b03610de8575050604080516000815260208101909152610815565b600080610df583866127b6565b9150915080610e1857505060408051600081526020810190915291506108159050565b610e2482600401612811565b9695505050505050565b6000610e3d604e5461ffff1690565b905090565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e8c5760405162461bcd60e51b815260040161086390615413565b50600080516020615e1283398151915290565b6000610e3d6126ce565b60008080808080610ec18963652441b760e01b61281c565b9398509196509450925090506000610ed98684612a93565b6003810154604051636823e89960e01b8152600481018990526024810183905261ffff8b1660448201526064810186905291925063ffffffff1690737F11D5bb7c99667ac0E8851c6B72633d35244c6C90636823e8999060840160006040518083038186803b158015610f4b57600080fd5b505af4158015610f5f573d6000803e3d6000fd5b5050505060005b8981101561102e57610fa8604051602001610f809061556e565b6040516020818303038152906040528051906020012084600401612b7090919063ffffffff16565b15610fdd57610fd8886009018c8c84818110610fc657610fc66155a1565b90506101a0020160a001846001612b88565b610ff6565b610ff6836003018c8c84818110610fc657610fc66155a1565b61101c888c8c8481811061100c5761100c6155a1565b90506101a0020189888a89612f8e565b80611026816155cd565b915050610f66565b5060019750505050505050505b9392505050565b6040516329f6088560e21b81526044600482018190526024820185905281018390526001600160a01b0382166064820152600090737F11D5bb7c99667ac0E8851c6B72633d35244c6C9063a7d8221490608401602060405180830381865af41580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190615551565b949350505050565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111285760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661115a6126ce565b6001600160a01b0316146111805760405162461bcd60e51b815260040161086390615439565b6000600254600160a01b900460ff1660018111156111a0576111a0614db2565b146111bd5760405162461bcd60e51b8152600401610863906154c6565b6001600254600160a81b900460ff1660018111156111dd576111dd614db2565b146111fa5760405162461bcd60e51b8152600401610863906154e8565b6001600160a01b0384163b6112215760405162461bcd60e51b815260040161086390615513565b61122a8461357e565b6110d684848461361c565b600080600254600160a01b900460ff16600181111561125657611256614db2565b146112735760405162461bcd60e51b8152600401610863906154c6565b600061128563756af45f60e01b61272b565b9050600081601381111561129b5761129b614db2565b146112bb5780604051637f0911d160e01b8152600401610863919061553d565b60405147906001600160a01b038516904780156108fc02916000818181858888f193505050501580156112f2573d6000803e3d6000fd5b509392505050565b606060008054611309906155e6565b80601f0160208091040260200160405190810160405280929190818152602001828054611335906155e6565b80156113825780601f1061135757610100808354040283529160200191611382565b820191906000526020600020905b81548152906001019060200180831161136557829003601f168201915b5050505050905090565b600080808080806113a4896379419a4960e01b61281c565b9450945094509450945060005b878110156114e55760006113e68a8a848181106113d0576113d06155a1565b9050602002013588612a9390919063ffffffff16565b905060006113fd88888460000160000154886137d4565b9050600081600781111561141357611413614db2565b146114215761142181613869565b600282015460088901546001600160a01b0391821691160361147c5760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c204f776e65722052656d6f766560601b6044820152606401610863565b6114aa8b8b85818110611491576114916155a1565b9050602002013589600401613a0090919063ffffffff16565b506114d088838d8d878181106114c2576114c26155a1565b905060200201358988613a0c565b505080806114dd906155cd565b9150506113b1565b5060019998505050505050505050565b6000808080808061150d89632345e83760e21b61281c565b9450945094509450945060005b878110156114e557600061154b87878c8c8681811061153b5761153b6155a1565b9050604002016000013587613db8565b600281015460088901549192506001600160a01b039081169116036115a35760405162461bcd60e51b815260206004820152600e60248201526d24b63632b3b0b61026b2b6b132b960911b6044820152606401610863565b60018a8a848181106115b7576115b76155a1565b90506040020160200160208101906115cf9190615627565b60038111156115e0576115e0614db2565b116116205760405162461bcd60e51b815260206004820152601060248201526f496c6c6567616c20416374697669747960801b6044820152606401610863565b898983818110611632576116326155a1565b905060400201602001602081019061164a9190615627565b60018201805461ff00191661010083600381111561166a5761166a614db2565b0217905550898983818110611681576116816155a1565b9050604002016000013585846001600160a01b03167f614068ea5e443448b2d57b5b5e76ef7da3156d6f02b307fe21ee6552055da5a38d8d878181106116c9576116c96155a1565b90506040020160200160208101906116e19190615627565b6040516116ee9190615644565b60405180910390a45080611701816155cd565b91505061151a565b6000838152604860205260408120816008820154600160a01b900460ff16600381111561173857611738614db2565b0361174757600091505061103b565b60008061175483876127b6565b9150915080156117755761176b6004830186612b70565b935050505061103b565b5060009695505050505050565b6000808080808061179a896323fb040960e21b61281c565b9450945094509450945060005b878110156114e55760006117c887878c8c8681811061153b5761153b6155a1565b90508989838181106117dc576117dc6155a1565b90506040020160200160208101906117f4919061566c565b8160020160146101000a81548161ffff021916908361ffff160217905550898983818110611824576118246155a1565b9050604002016000013585846001600160a01b03167f4f8dd5af3f9ab0d704d9fdef2a549bde295a13dfbf7f19cd1b5a5df767ca10758d8d8781811061186c5761186c6155a1565b9050604002016020016020810190611884919061566c565b60405161ffff909116815260200160405180910390a450806118a5816155cd565b9150506117a7565b606060018054611309906155e6565b600080808080806118d4896315c3e49d60e31b61281c565b9450945094509450945060005b878110156114e557600061190287878c8c8681811061153b5761153b6155a1565b905060008a8a84818110611918576119186155a1565b90506040020160200135146119f757600087818c8c8681811061193d5761193d6155a1565b90506040020160200135815260200190815260200160002090506001600381111561196a5761196a614db2565b600182015460ff16600381111561198357611983614db2565b116119ca5760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b6044820152606401610863565b8a8a848181106119dc576119dc6155a1565b90506040020160200135826000016000018190555050611a21565b604051602001611a069061556e565b60408051601f19818403018152919052805160209091012081555b898983818110611a3357611a336155a1565b9050604002016000013585846001600160a01b03167ff655eaec035c3c45561737846acc84ade9b0ef5b6108c0a210c36ccfbafb499a8d8d87818110611a7b57611a7b6155a1565b90506040020160200135604051611a9491815260200190565b60405180910390a45080611aa7816155cd565b9150506118e1565b60008281526048602090815260408083208151606086901b6001600160601b0319168185015282516014818303018152603490910183528051908401208452909152812060019081015460ff166003811115610d9457610d94614db2565b60008080808080611b2589632fbae8af60e21b61281c565b9398509196509450925090506000611b3d8684612a93565b905060005b88811015611cba576000611b7488888d8d86818110611b6357611b636155a1565b905061012002016000013588613db8565b9050611bb0604051602001611b889061556e565b6040516020818303038152906040528051906020012082600401612b7090919063ffffffff16565b15611be557611be0886009018c8c85818110611bce57611bce6155a1565b90506101200201602001600080612b88565b611bfe565b611bfe836003018c8c85818110611bce57611bce6155a1565b8a8a83818110611c1057611c106155a1565b90506101200201602001816003018181611c2a91906156b5565b9050508a8a83818110611c3f57611c3f6155a1565b905061012002016000013586856001600160a01b03167fc84302b091cce5e28ca7d019afc4d17e0ab167d8fe4acbf1b84a85af733265858e8e87818110611c8857611c886155a1565b90506101200201602001604051611c9f91906158ee565b60405180910390a45080611cb2816155cd565b915050611b42565b5060019a9950505050505050505050565b60008080808080611ce389633405e5a760e21b61281c565b9450945094509450945060005b878110156114e5576000611d1f8a8a84818110611d0f57611d0f6155a1565b8a92604090910201359050612a93565b90506000611d3688888460000160000154886137d4565b90506000816007811115611d4c57611d4c614db2565b14611d5a57611d5a81613869565b60008b8b85818110611d6e57611d6e6155a1565b9050604002016020016020810190611d869190615627565b6003811115611d9757611d97614db2565b03611ddb5760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20416c7465726162696c69747960601b6044820152606401610863565b8a8a84818110611ded57611ded6155a1565b9050604002016020016020810190611e059190615627565b60018301805462ff0000191662010000836003811115611e2757611e27614db2565b02179055508a8a84818110611e3e57611e3e6155a1565b9050604002016000013586856001600160a01b03167f82c3684f7384c190b92a838689114ba643b25ca472daf25e7481f3469697b1d48e8e88818110611e8657611e866155a1565b9050604002016020016020810190611e9e9190615627565b604051611eab9190615644565b60405180910390a450508080611ec0906155cd565b915050611cf0565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611f125760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611f446126ce565b6001600160a01b031614611f6a5760405162461bcd60e51b815260040161086390615439565b6000600254600160a01b900460ff166001811115611f8a57611f8a614db2565b14611fa75760405162461bcd60e51b8152600401610863906154c6565b6001600254600160a81b900460ff166001811115611fc757611fc7614db2565b14611fe45760405162461bcd60e51b8152600401610863906154e8565b6000611ff663d9dc1f1960e01b61272b565b9050600081601381111561200c5761200c614db2565b1461202c5780604051637f0911d160e01b8152600401610863919061553d565b6001600160a01b03831661206c5760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606401610863565b61207583613e49565b50600192915050565b61211060408051610140810182526000808252602080830182905282840182905260608084018390526080808501849052855161010081018752848152928301849052948201839052810182905292830181905260a083810182905260c0840182905260e084019190915290919082019081526020016000815260200160008152602001600081526020016000905290565b604051631b79144d60e11b8152604460048201819052602482018590528101839052737F11D5bb7c99667ac0E8851c6B72633d35244c6C906336f2289a9060640161022060405180830381865af415801561216f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b91906159f5565b6000610e3d613ec0565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036121e75760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166122196126ce565b6001600160a01b03161461223f5760405162461bcd60e51b815260040161086390615439565b600061224e604e5461ffff1690565b61ffff161161228a5760405162461bcd60e51b81526020600482015260086024820152671393d5081253925560c21b6044820152606401610863565b600061229c630f708ceb60e41b61272b565b905060008160138111156122b2576122b2614db2565b146122d25780604051637f0911d160e01b8152600401610863919061553d565b6002805484919060ff60a01b1916600160a01b8360018111156122f7576122f7614db2565b021790555030336001600160a01b03167fc08ec585c25f1907baaab6f278c5994531a2e34c59935b3fcfe813067a3b4878856040516123369190614dd8565b60405180910390a350600192915050565b6000610e3d6126ef565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361239b5760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166123cd6126ce565b6001600160a01b0316146123f35760405162461bcd60e51b815260040161086390615439565b6000600254600160a01b900460ff16600181111561241357612413614db2565b146124305760405162461bcd60e51b8152600401610863906154c6565b6000612442631f98802f60e31b61272b565b9050600081601381111561245857612458614db2565b146124785780604051637f0911d160e01b8152600401610863919061553d565b6002805484919060ff60a81b1916600160a81b83600181111561249d5761249d614db2565b021790555030336001600160a01b03167ff5912c5e436152157ed2b4a84bc313b4b1fe09a15b941f195d23c99a1b8c45ad856040516123369190614dd8565b600080808080806124f48963fd25ed2760e01b61281c565b9450945094509450945060005b878110156114e557600061252287878c8c8681811061153b5761153b6155a1565b905061253081600401613f74565b8a8a84818110612542576125426155a1565b905060400201602001602081019061255a919061566c565b61ffff161161259b5760405162461bcd60e51b815260206004820152600d60248201526c125b1b1959d85b08131a5b5a5d609a1b6044820152606401610863565b8989838181106125ad576125ad6155a1565b90506040020160200160208101906125c5919061566c565b8160020160166101000a81548161ffff021916908361ffff1602179055508989838181106125f5576125f56155a1565b9050604002016000013585846001600160a01b03167fe0a90df53b179e67d00740573c501f6b75a628c9b7ed21ceebb13dd85cdadfe48d8d8781811061263d5761263d6155a1565b9050604002016020016020810190612655919061566c565b60405161ffff909116815260200160405180910390a45080612676816155cd565b915050612501565b60006001600160e01b03198216633d817cff60e01b14806126af57506001600160e01b031982166352d1902d60e01b145b8061081557506301ffc9a760e01b6001600160e01b0319831614610815565b6000600080516020615e128339815191525b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036126e0565b6127248585858585613f7e565b5050505050565b6002546040805163172cb29d60e11b81523060048201526001600160e01b03198416602482015233604482015290516000926001600160a01b031691632e59653a916064808301926020929190829003018187875af1158015612792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190615abb565b6000818152602083905260408120819060018082015460ff1660038111156127e0576127e0614db2565b036127ff5750506040805183815260208101859052209050600161280a565b600019925060009150505b9250929050565b606061081582614147565b60008080808080306001600160a01b031663a304e3536040518163ffffffff1660e01b8152600401602060405180830381865afa158015612861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128859190615adc565b600181111561289657612896614db2565b146128b35760405162461bcd60e51b8152600401610863906154c6565b60006128bf8880615af9565b9050116129045760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2050726f66696c654e616d6560681b6044820152606401610863565b60008061291460608a018a615af9565b905011156129a8574261292d60608a0160408b01615b3f565b6001600160401b0316116129775760405162461bcd60e51b815260206004820152601160248201527045787069726564205369676e617475726560781b6044820152606401610863565b6129a1887f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d556141a3565b90506129ab565b50335b60006129bf6129ba8a80615af9565b614272565b6001600160e01b031989166000908152604a60205260408120549192506001600160a01b03909116906129f2828b6142a5565b905060006129ff856142d7565b60405163a66ce52f60e01b8152600481018690526024810184905260448101829052909150309063a66ce52f90606401600060405180830381600087803b158015612a4957600080fd5b505af1158015612a5d573d6000803e3d6000fd5b50505060008581526048602052604081209150612a7b604485614311565b919e919d50949b509099509397509295505050505050565b600081815260208390526040812060018082015460ff166003811115612abb57612abb614db2565b03612ad6576040805184815260208101869052209150612b69565b6000600182015460ff166003811115612af157612af1614db2565b03612b2e5760405162461bcd60e51b815260206004820152600d60248201526c13525108139bdd08119bdd5b99609a1b6044820152606401610863565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081352510814db1bdd60821b6044820152606401610863565b5092915050565b6000818152600183016020526040812054151561103b565b8015612bfb57612b9b6020840184615b68565b63ffffffff168263ffffffff161015612bf65760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c204d656d62657252656769737465724c696d697400000000006044820152606401610863565b612c62565b612c086020840184615b68565b845463ffffffff91821691161015612c625760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c204d656d62657252656769737465724c696d697400000000006044820152606401610863565b612c726040840160208501615b68565b845463ffffffff9182166401000000009091049091161015612cd65760405162461bcd60e51b815260206004820152601960248201527f496c6c6567616c20526f6c6552656769737465724c696d6974000000000000006044820152606401610863565b612ce66060840160408501615b68565b845463ffffffff918216680100000000000000009091049091161015612d4e5760405162461bcd60e51b815260206004820152601960248201527f496c6c6567616c205479706552656769737465724c696d6974000000000000006044820152606401610863565b612d5e6080840160608501615b68565b845463ffffffff918216600160601b9091049091161015612dc15760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c2046756e6374696f6e52656769737465724c696d69740000006044820152606401610863565b612dd160a0840160808501615b68565b845463ffffffff918216600160801b9091049091161015612e345760405162461bcd60e51b815260206004820152601c60248201527f496c6c6567616c20436f6e7465787452656769737465724c696d6974000000006044820152606401610863565b612e4460c0840160a0850161566c565b845461ffff918216600160a01b9091049091161015612ea55760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c205265616c6d52656769737465724c696d69740000000000006044820152606401610863565b612eb560e0840160c0850161566c565b845461ffff918216600160b01b9091049091161015612f165760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c20446f6d61696e52656769737465724c696d697400000000006044820152606401610863565b612f27610100840160e0850161566c565b845461ffff918216600160c01b9091049091161015612f885760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c20506f6c69637952656769737465724c696d697400000000006044820152606401610863565b50505050565b6000612fa8612fa360a0880160808901614d2f565b6142d7565b905060008082815260208990526040902060010154610100900460ff166003811115612fd657612fd6614db2565b146130135760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e48115e1a5cdd609a1b6044820152606401610863565b60006130238860208901356143ec565b90506002600182015462010000900460ff16600381111561304657613046614db2565b101561308d5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c20526f6c6520557064617461626c6560501b6044820152606401610863565b600581015462ffffff6301000000820481169116116130e15760405162461bcd60e51b815260206004820152601060248201526f24b63632b3b0b6102932b3b4b9ba32b960811b6044820152606401610863565b60006130fa82600301548a6144c990919063ffffffff16565b90506002600182015462010000900460ff16600381111561311d5761311d614db2565b10156131645760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c205479706520557064617461626c6560501b6044820152606401610863565b60006131798a8985600001600001548a6137d4565b9050600081600781111561318f5761318f614db2565b1461319d5761319d81613869565b506040516020016131ad9061556e565b604051602081830303815290604052805190602001208260030154036131dc576131da60048a01846145a0565b505b6000838152600582810160209081526040909220918a013590915582018054600191906003906132199084906301000000900462ffffff16615b85565b92506101000a81548162ffffff021916908362ffffff160217905550600061324a848b6145ac90919063ffffffff16565b9050600060498161326160a08d0160808e01614d2f565b6001600160a01b0316815260208101919091526040016000208054909150156132bf5760405162461bcd60e51b815260206004820152601060248201526f141048105b1c9958591e48115e1a5cdd60821b6044820152606401610863565b8054600181018255600082815260209020018790558935156133be5760018a35600090815260208d9052604090206001015460ff16600381111561330557613305614db2565b1161334c5760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b6044820152606401610863565b600061337e8c8b6040516020016133629061556e565b604051602081830303815290604052805190602001208c6137d4565b9050600081600781111561339457613394614db2565b146133b457806040516345eeb27b60e01b81526004016108639190615ba1565b50893582556133e8565b6040516020016133cd9061556e565b60408051601f19818403018152919052805160209091012082555b60018201805462ffffff19166202030117905561340b60a08b0160808c01614d2f565b6002830180546001600160a01b0319166001600160a01b039290921691909117905560038401546134409060048401906145a0565b50600161345360608c0160408d01615bb5565b60020b121561347157600a8b0154600160981b900461ffff16613481565b61348160608b0160408c01615bb5565b60028301805461ffff92909216600160b01b0261ffff60b01b1990921691909117905560006134b660808c0160608d01615bb5565b60020b12156134d457600a8b0154600160781b900461ffff166134e4565b6134e460808b0160608c01615bb5565b60028301805461ffff92909216600160a01b0261ffff60a01b1990921691909117905560a08a016003830161351982826156b5565b9050508487876001600160a01b03167f86748736c74f394188dc72d3382b3eb515228dffd025e64c52cdeddfc4505e6b8d6020013586600001600001548f60a00160405161356993929190615bd8565b60405180910390a45050505050505050505050565b6135866126ce565b6001600160a01b0316816001600160a01b0316036135d05760405162461bcd60e51b8152602060048201526007602482015266125b1b1959d85b60ca1b6044820152606401610863565b60006135e2637147855d60e01b61272b565b905060008160138111156135f8576135f8614db2565b146136185780604051637f0911d160e01b8152600401610863919061553d565b5050565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156136665761365184614612565b5060408051600081526020810190915261103b565b600080516020615e1283398151915260001b846001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136da9190615bf4565b146137165760405162461bcd60e51b815260206004820152600c60248201526b496c6c6567616c205555505360a01b6044820152606401610863565b6040516301ffc9a760e01b8152633d817cff60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015613761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137859190615551565b6137c25760405162461bcd60e51b815260206004820152600e60248201526d496c6c6567616c204950726f787960901b6044820152606401610863565b6137cd848484614641565b905061103b565b604051635fbcdb4b60e01b815260048101859052602481018490526044810183905260648101829052600090737F11D5bb7c99667ac0E8851c6B72633d35244c6C90635fbcdb4b90608401602060405180830381865af415801561383c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138609190615c0d565b95945050505050565b600181600781111561387d5761387d614db2565b0361389b5760405163e15df99b60e01b815260040160405180910390fd5b60028160078111156138af576138af614db2565b036138cd5760405163c38331b560e01b815260040160405180910390fd5b60038160078111156138e1576138e1614db2565b036138ff5760405163dab65f4760e01b815260040160405180910390fd5b600481600781111561391357613913614db2565b0361393157604051633f4b20a160e11b815260040160405180910390fd5b600581600781111561394557613945614db2565b03613963576040516308fa537360e01b815260040160405180910390fd5b600681600781111561397757613977614db2565b036139955760405163ae0903a160e01b815260040160405180910390fd5b60078160078111156139a9576139a9614db2565b036139c75760405163d59825eb60e01b815260040160405180910390fd5b60405162461bcd60e51b815260206004820152600b60248201526a2ab735b737bbb71022a92960a91b6044820152606401610863565b50565b600061103b83836146a7565b6000805b613a1c86600401613f74565b81108015613a2a5750601081105b15613c3b57613a3c600487018261479a565b91506000613a4a88846144c9565b90506002600182015462010000900460ff166003811115613a6d57613a6d614db2565b1015613ab45760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c205479706520557064617461626c6560501b6044820152606401610863565b600086815260058201602052604081205490613ad08a836143ec565b90506002600182015462010000900460ff166003811115613af357613af3614db2565b1015613b3a5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c20526f6c6520557064617461626c6560501b6044820152606401610863565b60058101546301000000900462ffffff16613b8d5760405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b0813595b58995c90dbdd5b9d606a1b6044820152606401610863565b6005808201805460001962ffffff6301000000808404821692909201160265ffffff0000001990911617905560008981529084016020526040812055613bd660048a0186613a00565b508787876001600160a01b03167fb75b8559833a48b15656ede5a296ceb3b02db111105c6525d5c458ff92a0798d8589604051613c1d929190918252602082015260400190565b60405180910390a45050508080613c33906155cd565b915050613a10565b50613c4885600401613f74565b600003613d68576040516329b8ed3160e11b81526044600482018190526024820187905281018490526064810182905260016084820152737F11D5bb7c99667ac0E8851c6B72633d35244c6C90635371da629060a40160006040518083038186803b158015613cb657600080fd5b505af4158015613cca573d6000803e3d6000fd5b5050600080885560018801805462ffffff191690556002880180546001600160c01b03191690556003880180546001600160d01b031916905560048801925090508181613d178282614bfa565b505050508383836001600160a01b03167f6d56f35d3e32855e7d2e0ed53e80d422065dd4aeb0a18e70ca897ccf89301d9a6001604051613d5b911515815260200190565b60405180910390a4610a49565b8383836001600160a01b03167f6d56f35d3e32855e7d2e0ed53e80d422065dd4aeb0a18e70ca897ccf89301d9a6000604051613da8911515815260200190565b60405180910390a4505050505050565b600080613dc58685612a93565b90506002600182015462010000900460ff166003811115613de857613de8614db2565b1015613e065760405162461bcd60e51b8152600401610863906154e8565b6000613e1b87878460000160000154876137d4565b90506000816007811115613e3157613e31614db2565b14613e3f57613e3f81613869565b5095945050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f63fdbed5f2909ec44e3becc51e9d29654ce1447747914e8a6ebc019e7f640b8b9181900360200190a350565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051602001613ef59190615c2e565b604051602081830303815290604052805190602001206001604051602001613f1d9190615c2e565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000610815825490565b604e5462010000900460ff16613fd65760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e67000000000000006044820152606401610863565b6000613fe3858783615cea565b506001613ff1838583615cea565b506001600160a01b03811630146140d7576001600160a01b0381163b6140295760405162461bcd60e51b815260040161086390615513565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015614074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140989190615551565b6140d25760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610863565b614123565b6140e76331501c3960e01b6107f0565b6141235760405162461bcd60e51b815260206004820152600d60248201526c139bdd0814dd5c1c1bdc9d1959609a1b6044820152606401610863565b600280546001600160b01b0319166001600160a01b03831617905561272433613e49565b60608160000180548060200260200160405190810160405280929190818152602001828054801561419757602002820191906000526020600020905b815481526020019060010190808311614183575b50505050509050919050565b600061103b6141b56060850185615af9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061426d92508691506141fd90506129ba8880615af9565b61420d6040890160208a01614d2f565b61421d60608a0160408b01615b3f565b6001600160401b031660408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b6147a6565b60008282604051602001614287929190615da9565b60405160208183030381529060405280519060200120905092915050565b6040516001600160601b0319606084901b1660208201526001600160e01b031982166034820152600090603801614287565b6040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b600081815260018084016020526040822090600182015460ff16600581111561433c5761433c614db2565b036143595760408051848152600186016020820152209150612b69565b6000600182015460ff16600581111561437457614374614db2565b036143b15760405162461bcd60e51b815260206004820152600d60248201526c11925108139bdd08119bdd5b99609a1b6044820152606401610863565b60405162461bcd60e51b815260206004820152601060248201526f125b1b195859db081192510814db1bdd60821b6044820152606401610863565b60008181526020839052604081206002600182015460ff16600381111561441557614415614db2565b03614430576040805184815260208101869052209150612b69565b6000600182015460ff16600381111561444b5761444b614db2565b0361448b5760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b6044820152606401610863565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b6044820152606401610863565b60008181526020839052604081206003600182015460ff1660038111156144f2576144f2614db2565b0361450d576040805184815260208101869052209150612b69565b6000600182015460ff16600381111561452857614528614db2565b036145655760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b6044820152606401610863565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b6044820152606401610863565b600061103b838361481b565b600081815260208390526040812081600182015460ff1660038111156145d4576145d4614db2565b14806145f7575060018082015460ff1660038111156145f5576145f5614db2565b145b15612b2e576040805184815260208101869052209150612b69565b600080516020615e1283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b606061464c8461486a565b6000835111806146595750815b1561468c576137cd84846040518060400160405280600b81526020016a10d85b1b0811985a5b195960aa1b8152506148ae565b60408051600080825260208201909252905b50949350505050565b600081815260018301602052604081205480156147905760006146cb600183615db9565b85549091506000906146df90600190615db9565b90508181146147445760008660000182815481106146ff576146ff6155a1565b9060005260206000200154905080876000018481548110614722576147226155a1565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061475557614755615dcc565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610815565b6000915050610815565b600061103b8383614972565b6000806147b28361499c565b90506000806147c18387614a09565b909250905060008160048111156147da576147da614db2565b1461469e5760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c205369676e617475726560781b6044820152606401610863565b600081815260018301602052604081205461486257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610815565b506000610815565b61487381614612565b6040516001600160a01b03821690309033907f8ee0f2bd29c0e6a975c3cc2e47cf2e01b5f23a9a8a02e0ed6a5a070269de3d2d90600090a450565b60606001600160a01b0384163b6149075760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20436f6e7472616374204164647265737300000000000000006044820152606401610863565b600080856001600160a01b0316856040516149229190615de2565b600060405180830381855af49150503d806000811461495d576040519150601f19603f3d011682016040523d82523d6000602084013e614962565b606091505b5091509150610e24828286614a74565b6000826000018281548110614989576149896155a1565b9060005260206000200154905092915050565b6000610815306001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156149df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a039190615bf4565b83614aad565b6000808251604103614a3f5760208301516040840151606085015160001a614a3387828585614ad4565b9450945050505061280a565b8251604003614a685760208301516040840151614a5d868383614bc1565b93509350505061280a565b5060009050600261280a565b60608315614a8357508161103b565b825115614a935782518084602001fd5b8160405162461bcd60e51b81526004016108639190615065565b60405161190160f01b60208201526022810183905260428101829052600090606201614287565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614b0b5750600090506003614bb8565b8460ff16601b14158015614b2357508460ff16601c14155b15614b345750600090506004614bb8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614b88573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614bb157600060019250925050614bb8565b9150600090505b94509492505050565b6000806001600160ff1b03831681614bde60ff86901c601b615dfe565b9050614bec87828885614ad4565b935093505050935093915050565b50805460008255906000526020600020908101906139fd91905b80821115614c285760008155600101614c14565b5090565b600060208284031215614c3e57600080fd5b81356001600160e01b03198116811461103b57600080fd5b60008083601f840112614c6857600080fd5b5081356001600160401b03811115614c7f57600080fd5b60208301915083602082850101111561280a57600080fd5b6001600160a01b03811681146139fd57600080fd5b600080600080600060608688031215614cc457600080fd5b85356001600160401b0380821115614cdb57600080fd5b614ce789838a01614c56565b90975095506020880135915080821115614d0057600080fd5b50614d0d88828901614c56565b9094509250506040860135614d2181614c97565b809150509295509295909350565b600060208284031215614d4157600080fd5b813561103b81614c97565b60008060408385031215614d5f57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015614da657835183529284019291840191600101614d8a565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b600281106139fd576139fd614db2565b60208101614de583614dc8565b91905290565b600060808284031215614dfd57600080fd5b50919050565b600080600060408486031215614e1857600080fd5b83356001600160401b0380821115614e2f57600080fd5b614e3b87838801614deb565b94506020860135915080821115614e5157600080fd5b818601915086601f830112614e6557600080fd5b813581811115614e7457600080fd5b8760206101a083028501011115614e8a57600080fd5b6020830194508093505050509250925092565b600080600060608486031215614eb257600080fd5b83359250602084013591506040840135614ecb81614c97565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715614f0f57614f0f614ed6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614f3d57614f3d614ed6565b604052919050565b80151581146139fd57600080fd5b8035610d5a81614f45565b600080600060608486031215614f7357600080fd5b8335614f7e81614c97565b92506020848101356001600160401b0380821115614f9b57600080fd5b818701915087601f830112614faf57600080fd5b813581811115614fc157614fc1614ed6565b614fd3601f8201601f19168501614f15565b91508082528884828501011115614fe957600080fd5b808484018584013760008482840101525080945050505061500c60408501614f53565b90509250925092565b60005b83811015615030578181015183820152602001615018565b50506000910152565b60008151808452615051816020860160208601615015565b601f01601f19169290920160200192915050565b60208152600061103b6020830184615039565b60008060006040848603121561508d57600080fd5b83356001600160401b03808211156150a457600080fd5b6150b087838801614deb565b945060208601359150808211156150c657600080fd5b818601915086601f8301126150da57600080fd5b8135818111156150e957600080fd5b8760208260051b8501011115614e8a57600080fd5b60008083601f84011261511057600080fd5b5081356001600160401b0381111561512757600080fd5b6020830191508360208260061b850101111561280a57600080fd5b60008060006040848603121561515757600080fd5b83356001600160401b038082111561516e57600080fd5b61517a87838801614deb565b9450602086013591508082111561519057600080fd5b5061519d868287016150fe565b9497909650939450505050565b6000806000606084860312156151bf57600080fd5b505081359360208301359350604090920135919050565b600080604083850312156151e957600080fd5b8235915060208301356151fb81614c97565b809150509250929050565b60008060006040848603121561521b57600080fd5b83356001600160401b038082111561523257600080fd5b61523e87838801614deb565b9450602086013591508082111561525457600080fd5b818601915086601f83011261526857600080fd5b81358181111561527757600080fd5b87602061012083028501011115614e8a57600080fd5b63ffffffff8082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401525060a081015161ffff80821660a08501528060c08401511660c0850152505060e08101516152fc60e084018261ffff169052565b505050565b600481106139fd576139fd614db2565b61531a81615301565b9052565b81518152602080830151610220830191615342908401826001600160a01b03169052565b506040830151615358604084018261ffff169052565b50606083015161536e606084018261ffff169052565b506080830151615384608084018261ffff169052565b5060a083015161539760a084018261528d565b5060c08301516153ab6101a0840182615311565b5060e08301516153bf6101c0840182615311565b506101008301516153d46101e0840182615311565b50610120830151612b69610200840182615311565b600281106139fd57600080fd5b60006020828403121561540857600080fd5b813561103b816153e9565b6020808252600c908201526b125b1b1959d85b0810d85b1b60a21b604082015260600190565b6020808252600c908201526b125b9d985b1a590810d85b1b60a21b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061549c60608301878961545f565b82810360208401526154af81868861545f565b91505061ffff831660408301529695505050505050565b60208082526008908201526714995a9958dd195960c21b604082015260600190565b602080825260119082015270496c6c6567616c20557064617461626c6560781b604082015260600190565b60208082526010908201526f125b1b1959d85b0810dbdb9d1c9858dd60821b604082015260600190565b6020810160148310614de557614de5614db2565b60006020828403121561556357600080fd5b815161103b81614f45565b7f545950452e4c4956454c595f50524f46494c452e4c4956454c595f4d415354458152602960f91b602082015260210190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016155df576155df6155b7565b5060010190565b600181811c908216806155fa57607f821691505b602082108103614dfd57634e487b7160e01b600052602260045260246000fd5b600481106139fd57600080fd5b60006020828403121561563957600080fd5b813561103b8161561a565b60208101614de583615301565b61ffff811681146139fd57600080fd5b8035610d5a81615651565b60006020828403121561567e57600080fd5b813561103b81615651565b63ffffffff811681146139fd57600080fd5b6000813561081581615689565b6000813561081581615651565b81356156c081615689565b63ffffffff8116905081548163ffffffff19821617835560208401356156e581615689565b67ffffffff000000008160201b16836001600160401b0319841617178455505050604082013561571481615689565b81546bffffffff00000000000000001916604082901b6bffffffff0000000000000000161782555061576f61574b6060840161569b565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b6157a261577e6080840161569b565b82805463ffffffff60801b191660809290921b63ffffffff60801b16919091179055565b6157d16157b160a084016156a8565b82805461ffff60a01b191660a09290921b61ffff60a01b16919091179055565b6158006157e060c084016156a8565b82805461ffff60b01b191660b09290921b61ffff60b01b16919091179055565b61361861580f60e084016156a8565b82805461ffff60c01b191660c09290921b61ffff60c01b16919091179055565b8035610d5a81615689565b803561584581615689565b63ffffffff908116835260208201359061585e82615689565b908116602084015260408201359061587582615689565b908116604084015260608201359061588c82615689565b16606083015261589e6080820161582f565b63ffffffff1660808301526158b560a08201615661565b61ffff1660a08301526158ca60c08201615661565b61ffff1660c08301526158df60e08201615661565b61ffff811660e0840152505050565b6101008101610815828461583a565b8051610d5a81614c97565b8051610d5a81615651565b8051610d5a81615689565b600061010080838503121561593257600080fd5b604051908101906001600160401b038211818310171561595457615954614ed6565b816040528092508351915061596882615689565b81815261597760208501615913565b602082015261598860408501615913565b604082015261599960608501615913565b60608201526159aa60808501615913565b60808201526159bb60a08501615908565b60a08201526159cc60c08501615908565b60c08201526159dd60e08501615908565b60e0820152505092915050565b8051610d5a8161561a565b60006102208284031215615a0857600080fd5b615a10614eec565b82518152615a20602084016158fd565b6020820152615a3160408401615908565b6040820152615a4260608401615908565b6060820152615a5360808401615908565b6080820152615a658460a0850161591e565b60a0820152615a776101a084016159ea565b60c0820152615a896101c084016159ea565b60e0820152615a9b6101e084016159ea565b610100820152615aae61020084016159ea565b6101208201529392505050565b600060208284031215615acd57600080fd5b81516014811061103b57600080fd5b600060208284031215615aee57600080fd5b815161103b816153e9565b6000808335601e19843603018112615b1057600080fd5b8301803591506001600160401b03821115615b2a57600080fd5b60200191503681900382131561280a57600080fd5b600060208284031215615b5157600080fd5b81356001600160401b038116811461103b57600080fd5b600060208284031215615b7a57600080fd5b813561103b81615689565b62ffffff818116838216019080821115612b6957612b696155b7565b6020810160088310614de557614de5614db2565b600060208284031215615bc757600080fd5b81358060020b811461103b57600080fd5b8381526020810183905261014081016110d6604083018461583a565b600060208284031215615c0657600080fd5b5051919050565b600060208284031215615c1f57600080fd5b81516008811061103b57600080fd5b6000808354615c3c816155e6565b60018281168015615c545760018114615c6957615c98565b60ff1984168752821515830287019450615c98565b8760005260208060002060005b85811015615c8f5781548a820152908401908201615c76565b50505082870194505b50929695505050505050565b601f8211156152fc57600081815260208120601f850160051c81016020861015615ccb5750805b601f850160051c820191505b81811015610a4957828155600101615cd7565b6001600160401b03831115615d0157615d01614ed6565b615d1583615d0f83546155e6565b83615ca4565b6000601f841160018114615d495760008515615d315750838201355b600019600387901b1c1916600186901b178355612724565b600083815260209020601f19861690835b82811015615d7a5786850135825560209485019460019092019101615d5a565b5086821015615d975760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b81810381811115610815576108156155b7565b634e487b7160e01b600052603160045260246000fd5b60008251615df4818460208701615015565b9190910192915050565b80820180821115610815576108156155b756fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca264697066735822122095c98a1ad9278af99ffa540399517327dea160b58ff914279ae3825c8c29ce3464736f6c63430008130033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
  "deployedBytecode": "0x6080604052600436106102275760003560e01c806379419a4911610122578063beeba2bc116100a5578063f698da251161006c578063f698da2514610766578063f708ceb01461077b578063f94a0adb1461079b578063fcc40178146107b0578063fd25ed27146107d057005b8063beeba2bc146106a5578063d017969c146106c5578063d9dc1f19146106e5578063f0b15def14610705578063f44c33c21461073957005b8063a0a8e460116100e9578063a0a8e46014610613578063a304e35314610628578063ae1f24e814610647578063b1b483f914610667578063b4a0bdf31461068757005b806379419a491461055f5780638d17a0dc1461057f5780638e8fc22f1461059f5780638fec1024146105bf5780639b97b534146105df57005b80634bf0414d116101aa578063658ce4a711610171578063658ce4a7146104b65780637147855d146104d6578063756af45f1461050357806375d0c0dc146105235780637678922e1461053857005b80634bf0414d146103ec57806352d1902d1461042057806358dbc45d1461043557806364d4c81914610462578063652441b71461049657005b8063301c1280116101ee578063301c12801461030757806333049f9a1461033b57806334109de21461036857806338d38c971461039c5780634888f482146103c457005b806301ffc9a714610230578063077f224a146102655780630e32cb86146102855780631b452f4b146102a55780631ec1d33c146102e757005b3661022e57005b005b34801561023c57600080fd5b5061025061024b366004614c2c565b6107f0565b60405190151581526020015b60405180910390f35b34801561027157600080fd5b5061022e610280366004614cac565b61081b565b34801561029157600080fd5b506102506102a0366004614d2f565b610a51565b3480156102b157600080fd5b506102d97f7bfb2abd6084c8ce20d7ff92c1620e7e7267603f0eac446b9176959d243306bc81565b60405190815260200161025c565b3480156102f357600080fd5b50610250610302366004614d4c565b610d5f565b34801561031357600080fd5b506102d97f541cf898e7c3085cbc6b7402ba06e7237285bc4bd5baa510e708e35537a71ffd81565b34801561034757600080fd5b5061035b610356366004614d4c565b610d9c565b60405161025c9190614d6e565b34801561037457600080fd5b506102d97f7aabe2571874f2a330ea11c8972d9cc3792d973efc6b36e3e29005861a34418881565b3480156103a857600080fd5b506103b1610e2e565b60405161ffff909116815260200161025c565b3480156103d057600080fd5b50600254600160a81b900460ff165b60405161025c9190614dd8565b3480156103f857600080fd5b506102d97f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d5581565b34801561042c57600080fd5b506102d9610e42565b34801561044157600080fd5b5061044a610e9f565b6040516001600160a01b03909116815260200161025c565b34801561046e57600080fd5b506102d97f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b3480156104a257600080fd5b506102506104b1366004614e03565b610ea9565b3480156104c257600080fd5b506102506104d1366004614e9d565b611042565b3480156104e257600080fd5b506104f66104f1366004614f5e565b6110de565b60405161025c9190615065565b34801561050f57600080fd5b506102d961051e366004614d2f565b611235565b34801561052f57600080fd5b506104f66112fa565b34801561054457600080fd5b5073__$68dc14faf17200ec68c1b553d3c187a731$__61044a565b34801561056b57600080fd5b5061025061057a366004615078565b61138c565b34801561058b57600080fd5b5061025061059a366004615142565b6114f5565b3480156105ab57600080fd5b506102506105ba3660046151aa565b611709565b3480156105cb57600080fd5b506102506105da366004615142565b611782565b3480156105eb57600080fd5b506102d97fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b881565b34801561061f57600080fd5b506104f66118ad565b34801561063457600080fd5b50600254600160a01b900460ff166103df565b34801561065357600080fd5b50610250610662366004615142565b6118bc565b34801561067357600080fd5b506102506106823660046151d6565b611aaf565b34801561069357600080fd5b506002546001600160a01b031661044a565b3480156106b157600080fd5b506102506106c0366004615206565b611b0d565b3480156106d157600080fd5b506102506106e0366004615142565b611ccb565b3480156106f157600080fd5b50610250610700366004614d2f565b611ec8565b34801561071157600080fd5b506102d97ffc434588684348dd50856b075c47bed14245c1030aa04c32955af5549981462781565b34801561074557600080fd5b50610759610754366004614d4c565b61207e565b60405161025c919061531e565b34801561077257600080fd5b506102d9612193565b34801561078757600080fd5b506102506107963660046153f6565b61219d565b3480156107a757600080fd5b5061044a612347565b3480156107bc57600080fd5b506102506107cb3660046153f6565b612351565b3480156107dc57600080fd5b506102506107eb366004615142565b6124dc565b60006001600160e01b03198216632819933f60e21b148061081557506108158261267e565b92915050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361086c5760405162461bcd60e51b815260040161086390615413565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661089e6126ce565b6001600160a01b0316146108c45760405162461bcd60e51b815260040161086390615439565b336108cd6126ef565b6001600160a01b0316146109135760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610863565b604e5462010000900460ff16158080156109355750604e54600161ffff909116105b806109505750303b1580156109505750604e5461ffff166001145b61099c5760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a6564000000006044820152606401610863565b604e805461ffff1916600117905580156109c257604e805462ff00001916620100001790555b6109cf8686868686612717565b6109d76126ce565b6001600160a01b031630336001600160a01b03167f247ab7b17ee489fa140c6666edc3822eefed2727610cd6e37192462b87244c6089898989610a1d604e5461ffff1690565b604051610a2e959493929190615488565b60405180910390a48015610a4957604e805462ff0000191690555b505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a9b5760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610acd6126ce565b6001600160a01b031614610af35760405162461bcd60e51b815260040161086390615439565b6000600254600160a01b900460ff166001811115610b1357610b13614db2565b14610b305760405162461bcd60e51b8152600401610863906154c6565b6001600254600160a81b900460ff166001811115610b5057610b50614db2565b14610b6d5760405162461bcd60e51b8152600401610863906154e8565b6001600160a01b03821615801590610b8e57506001600160a01b0382163b15155b610baa5760405162461bcd60e51b815260040161086390615513565b6002546001600160a01b031615610c09576000610bcd63071965c360e11b61272b565b90506000816013811115610be357610be3614db2565b14610c035780604051637f0911d160e01b8152600401610863919061553d565b50610c58565b33610c126126ef565b6001600160a01b031614610c585760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610863565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc79190615551565b610d015760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610863565b600280546001600160a01b0384166001600160a01b031990911681179091556040805191825251309133917f410bf468eebeeed60acaedb904afb2db7c0bb0131f7d14c3714d81b14fe8ed3c9181900360200190a35060015b919050565b60006001600084815260486020908152604080832086845290915290206001015460ff166003811115610d9457610d94614db2565b149392505050565b60008281526048602052604081206060916008820154600160a01b900460ff166003811115610dcd57610dcd614db2565b03610de8575050604080516000815260208101909152610815565b600080610df583866127b6565b9150915080610e1857505060408051600081526020810190915291506108159050565b610e2482600401612811565b9695505050505050565b6000610e3d604e5461ffff1690565b905090565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e8c5760405162461bcd60e51b815260040161086390615413565b50600080516020615e1283398151915290565b6000610e3d6126ce565b60008080808080610ec18963652441b760e01b61281c565b9398509196509450925090506000610ed98684612a93565b6003810154604051636823e89960e01b8152600481018990526024810183905261ffff8b1660448201526064810186905291925063ffffffff169073__$68dc14faf17200ec68c1b553d3c187a731$__90636823e8999060840160006040518083038186803b158015610f4b57600080fd5b505af4158015610f5f573d6000803e3d6000fd5b5050505060005b8981101561102e57610fa8604051602001610f809061556e565b6040516020818303038152906040528051906020012084600401612b7090919063ffffffff16565b15610fdd57610fd8886009018c8c84818110610fc657610fc66155a1565b90506101a0020160a001846001612b88565b610ff6565b610ff6836003018c8c84818110610fc657610fc66155a1565b61101c888c8c8481811061100c5761100c6155a1565b90506101a0020189888a89612f8e565b80611026816155cd565b915050610f66565b5060019750505050505050505b9392505050565b6040516329f6088560e21b81526044600482018190526024820185905281018390526001600160a01b038216606482015260009073__$68dc14faf17200ec68c1b553d3c187a731$__9063a7d8221490608401602060405180830381865af41580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190615551565b949350505050565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111285760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661115a6126ce565b6001600160a01b0316146111805760405162461bcd60e51b815260040161086390615439565b6000600254600160a01b900460ff1660018111156111a0576111a0614db2565b146111bd5760405162461bcd60e51b8152600401610863906154c6565b6001600254600160a81b900460ff1660018111156111dd576111dd614db2565b146111fa5760405162461bcd60e51b8152600401610863906154e8565b6001600160a01b0384163b6112215760405162461bcd60e51b815260040161086390615513565b61122a8461357e565b6110d684848461361c565b600080600254600160a01b900460ff16600181111561125657611256614db2565b146112735760405162461bcd60e51b8152600401610863906154c6565b600061128563756af45f60e01b61272b565b9050600081601381111561129b5761129b614db2565b146112bb5780604051637f0911d160e01b8152600401610863919061553d565b60405147906001600160a01b038516904780156108fc02916000818181858888f193505050501580156112f2573d6000803e3d6000fd5b509392505050565b606060008054611309906155e6565b80601f0160208091040260200160405190810160405280929190818152602001828054611335906155e6565b80156113825780601f1061135757610100808354040283529160200191611382565b820191906000526020600020905b81548152906001019060200180831161136557829003601f168201915b5050505050905090565b600080808080806113a4896379419a4960e01b61281c565b9450945094509450945060005b878110156114e55760006113e68a8a848181106113d0576113d06155a1565b9050602002013588612a9390919063ffffffff16565b905060006113fd88888460000160000154886137d4565b9050600081600781111561141357611413614db2565b146114215761142181613869565b600282015460088901546001600160a01b0391821691160361147c5760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c204f776e65722052656d6f766560601b6044820152606401610863565b6114aa8b8b85818110611491576114916155a1565b9050602002013589600401613a0090919063ffffffff16565b506114d088838d8d878181106114c2576114c26155a1565b905060200201358988613a0c565b505080806114dd906155cd565b9150506113b1565b5060019998505050505050505050565b6000808080808061150d89632345e83760e21b61281c565b9450945094509450945060005b878110156114e557600061154b87878c8c8681811061153b5761153b6155a1565b9050604002016000013587613db8565b600281015460088901549192506001600160a01b039081169116036115a35760405162461bcd60e51b815260206004820152600e60248201526d24b63632b3b0b61026b2b6b132b960911b6044820152606401610863565b60018a8a848181106115b7576115b76155a1565b90506040020160200160208101906115cf9190615627565b60038111156115e0576115e0614db2565b116116205760405162461bcd60e51b815260206004820152601060248201526f496c6c6567616c20416374697669747960801b6044820152606401610863565b898983818110611632576116326155a1565b905060400201602001602081019061164a9190615627565b60018201805461ff00191661010083600381111561166a5761166a614db2565b0217905550898983818110611681576116816155a1565b9050604002016000013585846001600160a01b03167f614068ea5e443448b2d57b5b5e76ef7da3156d6f02b307fe21ee6552055da5a38d8d878181106116c9576116c96155a1565b90506040020160200160208101906116e19190615627565b6040516116ee9190615644565b60405180910390a45080611701816155cd565b91505061151a565b6000838152604860205260408120816008820154600160a01b900460ff16600381111561173857611738614db2565b0361174757600091505061103b565b60008061175483876127b6565b9150915080156117755761176b6004830186612b70565b935050505061103b565b5060009695505050505050565b6000808080808061179a896323fb040960e21b61281c565b9450945094509450945060005b878110156114e55760006117c887878c8c8681811061153b5761153b6155a1565b90508989838181106117dc576117dc6155a1565b90506040020160200160208101906117f4919061566c565b8160020160146101000a81548161ffff021916908361ffff160217905550898983818110611824576118246155a1565b9050604002016000013585846001600160a01b03167f4f8dd5af3f9ab0d704d9fdef2a549bde295a13dfbf7f19cd1b5a5df767ca10758d8d8781811061186c5761186c6155a1565b9050604002016020016020810190611884919061566c565b60405161ffff909116815260200160405180910390a450806118a5816155cd565b9150506117a7565b606060018054611309906155e6565b600080808080806118d4896315c3e49d60e31b61281c565b9450945094509450945060005b878110156114e557600061190287878c8c8681811061153b5761153b6155a1565b905060008a8a84818110611918576119186155a1565b90506040020160200135146119f757600087818c8c8681811061193d5761193d6155a1565b90506040020160200135815260200190815260200160002090506001600381111561196a5761196a614db2565b600182015460ff16600381111561198357611983614db2565b116119ca5760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b6044820152606401610863565b8a8a848181106119dc576119dc6155a1565b90506040020160200135826000016000018190555050611a21565b604051602001611a069061556e565b60408051601f19818403018152919052805160209091012081555b898983818110611a3357611a336155a1565b9050604002016000013585846001600160a01b03167ff655eaec035c3c45561737846acc84ade9b0ef5b6108c0a210c36ccfbafb499a8d8d87818110611a7b57611a7b6155a1565b90506040020160200135604051611a9491815260200190565b60405180910390a45080611aa7816155cd565b9150506118e1565b60008281526048602090815260408083208151606086901b6001600160601b0319168185015282516014818303018152603490910183528051908401208452909152812060019081015460ff166003811115610d9457610d94614db2565b60008080808080611b2589632fbae8af60e21b61281c565b9398509196509450925090506000611b3d8684612a93565b905060005b88811015611cba576000611b7488888d8d86818110611b6357611b636155a1565b905061012002016000013588613db8565b9050611bb0604051602001611b889061556e565b6040516020818303038152906040528051906020012082600401612b7090919063ffffffff16565b15611be557611be0886009018c8c85818110611bce57611bce6155a1565b90506101200201602001600080612b88565b611bfe565b611bfe836003018c8c85818110611bce57611bce6155a1565b8a8a83818110611c1057611c106155a1565b90506101200201602001816003018181611c2a91906156b5565b9050508a8a83818110611c3f57611c3f6155a1565b905061012002016000013586856001600160a01b03167fc84302b091cce5e28ca7d019afc4d17e0ab167d8fe4acbf1b84a85af733265858e8e87818110611c8857611c886155a1565b90506101200201602001604051611c9f91906158ee565b60405180910390a45080611cb2816155cd565b915050611b42565b5060019a9950505050505050505050565b60008080808080611ce389633405e5a760e21b61281c565b9450945094509450945060005b878110156114e5576000611d1f8a8a84818110611d0f57611d0f6155a1565b8a92604090910201359050612a93565b90506000611d3688888460000160000154886137d4565b90506000816007811115611d4c57611d4c614db2565b14611d5a57611d5a81613869565b60008b8b85818110611d6e57611d6e6155a1565b9050604002016020016020810190611d869190615627565b6003811115611d9757611d97614db2565b03611ddb5760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20416c7465726162696c69747960601b6044820152606401610863565b8a8a84818110611ded57611ded6155a1565b9050604002016020016020810190611e059190615627565b60018301805462ff0000191662010000836003811115611e2757611e27614db2565b02179055508a8a84818110611e3e57611e3e6155a1565b9050604002016000013586856001600160a01b03167f82c3684f7384c190b92a838689114ba643b25ca472daf25e7481f3469697b1d48e8e88818110611e8657611e866155a1565b9050604002016020016020810190611e9e9190615627565b604051611eab9190615644565b60405180910390a450508080611ec0906155cd565b915050611cf0565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611f125760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611f446126ce565b6001600160a01b031614611f6a5760405162461bcd60e51b815260040161086390615439565b6000600254600160a01b900460ff166001811115611f8a57611f8a614db2565b14611fa75760405162461bcd60e51b8152600401610863906154c6565b6001600254600160a81b900460ff166001811115611fc757611fc7614db2565b14611fe45760405162461bcd60e51b8152600401610863906154e8565b6000611ff663d9dc1f1960e01b61272b565b9050600081601381111561200c5761200c614db2565b1461202c5780604051637f0911d160e01b8152600401610863919061553d565b6001600160a01b03831661206c5760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606401610863565b61207583613e49565b50600192915050565b61211060408051610140810182526000808252602080830182905282840182905260608084018390526080808501849052855161010081018752848152928301849052948201839052810182905292830181905260a083810182905260c0840182905260e084019190915290919082019081526020016000815260200160008152602001600081526020016000905290565b604051631b79144d60e11b815260446004820181905260248201859052810183905273__$68dc14faf17200ec68c1b553d3c187a731$__906336f2289a9060640161022060405180830381865af415801561216f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b91906159f5565b6000610e3d613ec0565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036121e75760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166122196126ce565b6001600160a01b03161461223f5760405162461bcd60e51b815260040161086390615439565b600061224e604e5461ffff1690565b61ffff161161228a5760405162461bcd60e51b81526020600482015260086024820152671393d5081253925560c21b6044820152606401610863565b600061229c630f708ceb60e41b61272b565b905060008160138111156122b2576122b2614db2565b146122d25780604051637f0911d160e01b8152600401610863919061553d565b6002805484919060ff60a01b1916600160a01b8360018111156122f7576122f7614db2565b021790555030336001600160a01b03167fc08ec585c25f1907baaab6f278c5994531a2e34c59935b3fcfe813067a3b4878856040516123369190614dd8565b60405180910390a350600192915050565b6000610e3d6126ef565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361239b5760405162461bcd60e51b815260040161086390615413565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166123cd6126ce565b6001600160a01b0316146123f35760405162461bcd60e51b815260040161086390615439565b6000600254600160a01b900460ff16600181111561241357612413614db2565b146124305760405162461bcd60e51b8152600401610863906154c6565b6000612442631f98802f60e31b61272b565b9050600081601381111561245857612458614db2565b146124785780604051637f0911d160e01b8152600401610863919061553d565b6002805484919060ff60a81b1916600160a81b83600181111561249d5761249d614db2565b021790555030336001600160a01b03167ff5912c5e436152157ed2b4a84bc313b4b1fe09a15b941f195d23c99a1b8c45ad856040516123369190614dd8565b600080808080806124f48963fd25ed2760e01b61281c565b9450945094509450945060005b878110156114e557600061252287878c8c8681811061153b5761153b6155a1565b905061253081600401613f74565b8a8a84818110612542576125426155a1565b905060400201602001602081019061255a919061566c565b61ffff161161259b5760405162461bcd60e51b815260206004820152600d60248201526c125b1b1959d85b08131a5b5a5d609a1b6044820152606401610863565b8989838181106125ad576125ad6155a1565b90506040020160200160208101906125c5919061566c565b8160020160166101000a81548161ffff021916908361ffff1602179055508989838181106125f5576125f56155a1565b9050604002016000013585846001600160a01b03167fe0a90df53b179e67d00740573c501f6b75a628c9b7ed21ceebb13dd85cdadfe48d8d8781811061263d5761263d6155a1565b9050604002016020016020810190612655919061566c565b60405161ffff909116815260200160405180910390a45080612676816155cd565b915050612501565b60006001600160e01b03198216633d817cff60e01b14806126af57506001600160e01b031982166352d1902d60e01b145b8061081557506301ffc9a760e01b6001600160e01b0319831614610815565b6000600080516020615e128339815191525b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036126e0565b6127248585858585613f7e565b5050505050565b6002546040805163172cb29d60e11b81523060048201526001600160e01b03198416602482015233604482015290516000926001600160a01b031691632e59653a916064808301926020929190829003018187875af1158015612792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190615abb565b6000818152602083905260408120819060018082015460ff1660038111156127e0576127e0614db2565b036127ff5750506040805183815260208101859052209050600161280a565b600019925060009150505b9250929050565b606061081582614147565b60008080808080306001600160a01b031663a304e3536040518163ffffffff1660e01b8152600401602060405180830381865afa158015612861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128859190615adc565b600181111561289657612896614db2565b146128b35760405162461bcd60e51b8152600401610863906154c6565b60006128bf8880615af9565b9050116129045760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2050726f66696c654e616d6560681b6044820152606401610863565b60008061291460608a018a615af9565b905011156129a8574261292d60608a0160408b01615b3f565b6001600160401b0316116129775760405162461bcd60e51b815260206004820152601160248201527045787069726564205369676e617475726560781b6044820152606401610863565b6129a1887f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d556141a3565b90506129ab565b50335b60006129bf6129ba8a80615af9565b614272565b6001600160e01b031989166000908152604a60205260408120549192506001600160a01b03909116906129f2828b6142a5565b905060006129ff856142d7565b60405163a66ce52f60e01b8152600481018690526024810184905260448101829052909150309063a66ce52f90606401600060405180830381600087803b158015612a4957600080fd5b505af1158015612a5d573d6000803e3d6000fd5b50505060008581526048602052604081209150612a7b604485614311565b919e919d50949b509099509397509295505050505050565b600081815260208390526040812060018082015460ff166003811115612abb57612abb614db2565b03612ad6576040805184815260208101869052209150612b69565b6000600182015460ff166003811115612af157612af1614db2565b03612b2e5760405162461bcd60e51b815260206004820152600d60248201526c13525108139bdd08119bdd5b99609a1b6044820152606401610863565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081352510814db1bdd60821b6044820152606401610863565b5092915050565b6000818152600183016020526040812054151561103b565b8015612bfb57612b9b6020840184615b68565b63ffffffff168263ffffffff161015612bf65760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c204d656d62657252656769737465724c696d697400000000006044820152606401610863565b612c62565b612c086020840184615b68565b845463ffffffff91821691161015612c625760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c204d656d62657252656769737465724c696d697400000000006044820152606401610863565b612c726040840160208501615b68565b845463ffffffff9182166401000000009091049091161015612cd65760405162461bcd60e51b815260206004820152601960248201527f496c6c6567616c20526f6c6552656769737465724c696d6974000000000000006044820152606401610863565b612ce66060840160408501615b68565b845463ffffffff918216680100000000000000009091049091161015612d4e5760405162461bcd60e51b815260206004820152601960248201527f496c6c6567616c205479706552656769737465724c696d6974000000000000006044820152606401610863565b612d5e6080840160608501615b68565b845463ffffffff918216600160601b9091049091161015612dc15760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c2046756e6374696f6e52656769737465724c696d69740000006044820152606401610863565b612dd160a0840160808501615b68565b845463ffffffff918216600160801b9091049091161015612e345760405162461bcd60e51b815260206004820152601c60248201527f496c6c6567616c20436f6e7465787452656769737465724c696d6974000000006044820152606401610863565b612e4460c0840160a0850161566c565b845461ffff918216600160a01b9091049091161015612ea55760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c205265616c6d52656769737465724c696d69740000000000006044820152606401610863565b612eb560e0840160c0850161566c565b845461ffff918216600160b01b9091049091161015612f165760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c20446f6d61696e52656769737465724c696d697400000000006044820152606401610863565b612f27610100840160e0850161566c565b845461ffff918216600160c01b9091049091161015612f885760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c20506f6c69637952656769737465724c696d697400000000006044820152606401610863565b50505050565b6000612fa8612fa360a0880160808901614d2f565b6142d7565b905060008082815260208990526040902060010154610100900460ff166003811115612fd657612fd6614db2565b146130135760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e48115e1a5cdd609a1b6044820152606401610863565b60006130238860208901356143ec565b90506002600182015462010000900460ff16600381111561304657613046614db2565b101561308d5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c20526f6c6520557064617461626c6560501b6044820152606401610863565b600581015462ffffff6301000000820481169116116130e15760405162461bcd60e51b815260206004820152601060248201526f24b63632b3b0b6102932b3b4b9ba32b960811b6044820152606401610863565b60006130fa82600301548a6144c990919063ffffffff16565b90506002600182015462010000900460ff16600381111561311d5761311d614db2565b10156131645760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c205479706520557064617461626c6560501b6044820152606401610863565b60006131798a8985600001600001548a6137d4565b9050600081600781111561318f5761318f614db2565b1461319d5761319d81613869565b506040516020016131ad9061556e565b604051602081830303815290604052805190602001208260030154036131dc576131da60048a01846145a0565b505b6000838152600582810160209081526040909220918a013590915582018054600191906003906132199084906301000000900462ffffff16615b85565b92506101000a81548162ffffff021916908362ffffff160217905550600061324a848b6145ac90919063ffffffff16565b9050600060498161326160a08d0160808e01614d2f565b6001600160a01b0316815260208101919091526040016000208054909150156132bf5760405162461bcd60e51b815260206004820152601060248201526f141048105b1c9958591e48115e1a5cdd60821b6044820152606401610863565b8054600181018255600082815260209020018790558935156133be5760018a35600090815260208d9052604090206001015460ff16600381111561330557613305614db2565b1161334c5760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b6044820152606401610863565b600061337e8c8b6040516020016133629061556e565b604051602081830303815290604052805190602001208c6137d4565b9050600081600781111561339457613394614db2565b146133b457806040516345eeb27b60e01b81526004016108639190615ba1565b50893582556133e8565b6040516020016133cd9061556e565b60408051601f19818403018152919052805160209091012082555b60018201805462ffffff19166202030117905561340b60a08b0160808c01614d2f565b6002830180546001600160a01b0319166001600160a01b039290921691909117905560038401546134409060048401906145a0565b50600161345360608c0160408d01615bb5565b60020b121561347157600a8b0154600160981b900461ffff16613481565b61348160608b0160408c01615bb5565b60028301805461ffff92909216600160b01b0261ffff60b01b1990921691909117905560006134b660808c0160608d01615bb5565b60020b12156134d457600a8b0154600160781b900461ffff166134e4565b6134e460808b0160608c01615bb5565b60028301805461ffff92909216600160a01b0261ffff60a01b1990921691909117905560a08a016003830161351982826156b5565b9050508487876001600160a01b03167f86748736c74f394188dc72d3382b3eb515228dffd025e64c52cdeddfc4505e6b8d6020013586600001600001548f60a00160405161356993929190615bd8565b60405180910390a45050505050505050505050565b6135866126ce565b6001600160a01b0316816001600160a01b0316036135d05760405162461bcd60e51b8152602060048201526007602482015266125b1b1959d85b60ca1b6044820152606401610863565b60006135e2637147855d60e01b61272b565b905060008160138111156135f8576135f8614db2565b146136185780604051637f0911d160e01b8152600401610863919061553d565b5050565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156136665761365184614612565b5060408051600081526020810190915261103b565b600080516020615e1283398151915260001b846001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136da9190615bf4565b146137165760405162461bcd60e51b815260206004820152600c60248201526b496c6c6567616c205555505360a01b6044820152606401610863565b6040516301ffc9a760e01b8152633d817cff60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015613761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137859190615551565b6137c25760405162461bcd60e51b815260206004820152600e60248201526d496c6c6567616c204950726f787960901b6044820152606401610863565b6137cd848484614641565b905061103b565b604051635fbcdb4b60e01b81526004810185905260248101849052604481018390526064810182905260009073__$68dc14faf17200ec68c1b553d3c187a731$__90635fbcdb4b90608401602060405180830381865af415801561383c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138609190615c0d565b95945050505050565b600181600781111561387d5761387d614db2565b0361389b5760405163e15df99b60e01b815260040160405180910390fd5b60028160078111156138af576138af614db2565b036138cd5760405163c38331b560e01b815260040160405180910390fd5b60038160078111156138e1576138e1614db2565b036138ff5760405163dab65f4760e01b815260040160405180910390fd5b600481600781111561391357613913614db2565b0361393157604051633f4b20a160e11b815260040160405180910390fd5b600581600781111561394557613945614db2565b03613963576040516308fa537360e01b815260040160405180910390fd5b600681600781111561397757613977614db2565b036139955760405163ae0903a160e01b815260040160405180910390fd5b60078160078111156139a9576139a9614db2565b036139c75760405163d59825eb60e01b815260040160405180910390fd5b60405162461bcd60e51b815260206004820152600b60248201526a2ab735b737bbb71022a92960a91b6044820152606401610863565b50565b600061103b83836146a7565b6000805b613a1c86600401613f74565b81108015613a2a5750601081105b15613c3b57613a3c600487018261479a565b91506000613a4a88846144c9565b90506002600182015462010000900460ff166003811115613a6d57613a6d614db2565b1015613ab45760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c205479706520557064617461626c6560501b6044820152606401610863565b600086815260058201602052604081205490613ad08a836143ec565b90506002600182015462010000900460ff166003811115613af357613af3614db2565b1015613b3a5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c20526f6c6520557064617461626c6560501b6044820152606401610863565b60058101546301000000900462ffffff16613b8d5760405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b0813595b58995c90dbdd5b9d606a1b6044820152606401610863565b6005808201805460001962ffffff6301000000808404821692909201160265ffffff0000001990911617905560008981529084016020526040812055613bd660048a0186613a00565b508787876001600160a01b03167fb75b8559833a48b15656ede5a296ceb3b02db111105c6525d5c458ff92a0798d8589604051613c1d929190918252602082015260400190565b60405180910390a45050508080613c33906155cd565b915050613a10565b50613c4885600401613f74565b600003613d68576040516329b8ed3160e11b8152604460048201819052602482018790528101849052606481018290526001608482015273__$68dc14faf17200ec68c1b553d3c187a731$__90635371da629060a40160006040518083038186803b158015613cb657600080fd5b505af4158015613cca573d6000803e3d6000fd5b5050600080885560018801805462ffffff191690556002880180546001600160c01b03191690556003880180546001600160d01b031916905560048801925090508181613d178282614bfa565b505050508383836001600160a01b03167f6d56f35d3e32855e7d2e0ed53e80d422065dd4aeb0a18e70ca897ccf89301d9a6001604051613d5b911515815260200190565b60405180910390a4610a49565b8383836001600160a01b03167f6d56f35d3e32855e7d2e0ed53e80d422065dd4aeb0a18e70ca897ccf89301d9a6000604051613da8911515815260200190565b60405180910390a4505050505050565b600080613dc58685612a93565b90506002600182015462010000900460ff166003811115613de857613de8614db2565b1015613e065760405162461bcd60e51b8152600401610863906154e8565b6000613e1b87878460000160000154876137d4565b90506000816007811115613e3157613e31614db2565b14613e3f57613e3f81613869565b5095945050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f63fdbed5f2909ec44e3becc51e9d29654ce1447747914e8a6ebc019e7f640b8b9181900360200190a350565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051602001613ef59190615c2e565b604051602081830303815290604052805190602001206001604051602001613f1d9190615c2e565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000610815825490565b604e5462010000900460ff16613fd65760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e67000000000000006044820152606401610863565b6000613fe3858783615cea565b506001613ff1838583615cea565b506001600160a01b03811630146140d7576001600160a01b0381163b6140295760405162461bcd60e51b815260040161086390615513565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015614074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140989190615551565b6140d25760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610863565b614123565b6140e76331501c3960e01b6107f0565b6141235760405162461bcd60e51b815260206004820152600d60248201526c139bdd0814dd5c1c1bdc9d1959609a1b6044820152606401610863565b600280546001600160b01b0319166001600160a01b03831617905561272433613e49565b60608160000180548060200260200160405190810160405280929190818152602001828054801561419757602002820191906000526020600020905b815481526020019060010190808311614183575b50505050509050919050565b600061103b6141b56060850185615af9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061426d92508691506141fd90506129ba8880615af9565b61420d6040890160208a01614d2f565b61421d60608a0160408b01615b3f565b6001600160401b031660408051602080820196909652808201949094526001600160a01b039290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b6147a6565b60008282604051602001614287929190615da9565b60405160208183030381529060405280519060200120905092915050565b6040516001600160601b0319606084901b1660208201526001600160e01b031982166034820152600090603801614287565b6040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b600081815260018084016020526040822090600182015460ff16600581111561433c5761433c614db2565b036143595760408051848152600186016020820152209150612b69565b6000600182015460ff16600581111561437457614374614db2565b036143b15760405162461bcd60e51b815260206004820152600d60248201526c11925108139bdd08119bdd5b99609a1b6044820152606401610863565b60405162461bcd60e51b815260206004820152601060248201526f125b1b195859db081192510814db1bdd60821b6044820152606401610863565b60008181526020839052604081206002600182015460ff16600381111561441557614415614db2565b03614430576040805184815260208101869052209150612b69565b6000600182015460ff16600381111561444b5761444b614db2565b0361448b5760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b6044820152606401610863565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b6044820152606401610863565b60008181526020839052604081206003600182015460ff1660038111156144f2576144f2614db2565b0361450d576040805184815260208101869052209150612b69565b6000600182015460ff16600381111561452857614528614db2565b036145655760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b6044820152606401610863565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b6044820152606401610863565b600061103b838361481b565b600081815260208390526040812081600182015460ff1660038111156145d4576145d4614db2565b14806145f7575060018082015460ff1660038111156145f5576145f5614db2565b145b15612b2e576040805184815260208101869052209150612b69565b600080516020615e1283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b606061464c8461486a565b6000835111806146595750815b1561468c576137cd84846040518060400160405280600b81526020016a10d85b1b0811985a5b195960aa1b8152506148ae565b60408051600080825260208201909252905b50949350505050565b600081815260018301602052604081205480156147905760006146cb600183615db9565b85549091506000906146df90600190615db9565b90508181146147445760008660000182815481106146ff576146ff6155a1565b9060005260206000200154905080876000018481548110614722576147226155a1565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061475557614755615dcc565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610815565b6000915050610815565b600061103b8383614972565b6000806147b28361499c565b90506000806147c18387614a09565b909250905060008160048111156147da576147da614db2565b1461469e5760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c205369676e617475726560781b6044820152606401610863565b600081815260018301602052604081205461486257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610815565b506000610815565b61487381614612565b6040516001600160a01b03821690309033907f8ee0f2bd29c0e6a975c3cc2e47cf2e01b5f23a9a8a02e0ed6a5a070269de3d2d90600090a450565b60606001600160a01b0384163b6149075760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20436f6e7472616374204164647265737300000000000000006044820152606401610863565b600080856001600160a01b0316856040516149229190615de2565b600060405180830381855af49150503d806000811461495d576040519150601f19603f3d011682016040523d82523d6000602084013e614962565b606091505b5091509150610e24828286614a74565b6000826000018281548110614989576149896155a1565b9060005260206000200154905092915050565b6000610815306001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156149df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a039190615bf4565b83614aad565b6000808251604103614a3f5760208301516040840151606085015160001a614a3387828585614ad4565b9450945050505061280a565b8251604003614a685760208301516040840151614a5d868383614bc1565b93509350505061280a565b5060009050600261280a565b60608315614a8357508161103b565b825115614a935782518084602001fd5b8160405162461bcd60e51b81526004016108639190615065565b60405161190160f01b60208201526022810183905260428101829052600090606201614287565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614b0b5750600090506003614bb8565b8460ff16601b14158015614b2357508460ff16601c14155b15614b345750600090506004614bb8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614b88573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614bb157600060019250925050614bb8565b9150600090505b94509492505050565b6000806001600160ff1b03831681614bde60ff86901c601b615dfe565b9050614bec87828885614ad4565b935093505050935093915050565b50805460008255906000526020600020908101906139fd91905b80821115614c285760008155600101614c14565b5090565b600060208284031215614c3e57600080fd5b81356001600160e01b03198116811461103b57600080fd5b60008083601f840112614c6857600080fd5b5081356001600160401b03811115614c7f57600080fd5b60208301915083602082850101111561280a57600080fd5b6001600160a01b03811681146139fd57600080fd5b600080600080600060608688031215614cc457600080fd5b85356001600160401b0380821115614cdb57600080fd5b614ce789838a01614c56565b90975095506020880135915080821115614d0057600080fd5b50614d0d88828901614c56565b9094509250506040860135614d2181614c97565b809150509295509295909350565b600060208284031215614d4157600080fd5b813561103b81614c97565b60008060408385031215614d5f57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015614da657835183529284019291840191600101614d8a565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b600281106139fd576139fd614db2565b60208101614de583614dc8565b91905290565b600060808284031215614dfd57600080fd5b50919050565b600080600060408486031215614e1857600080fd5b83356001600160401b0380821115614e2f57600080fd5b614e3b87838801614deb565b94506020860135915080821115614e5157600080fd5b818601915086601f830112614e6557600080fd5b813581811115614e7457600080fd5b8760206101a083028501011115614e8a57600080fd5b6020830194508093505050509250925092565b600080600060608486031215614eb257600080fd5b83359250602084013591506040840135614ecb81614c97565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715614f0f57614f0f614ed6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614f3d57614f3d614ed6565b604052919050565b80151581146139fd57600080fd5b8035610d5a81614f45565b600080600060608486031215614f7357600080fd5b8335614f7e81614c97565b92506020848101356001600160401b0380821115614f9b57600080fd5b818701915087601f830112614faf57600080fd5b813581811115614fc157614fc1614ed6565b614fd3601f8201601f19168501614f15565b91508082528884828501011115614fe957600080fd5b808484018584013760008482840101525080945050505061500c60408501614f53565b90509250925092565b60005b83811015615030578181015183820152602001615018565b50506000910152565b60008151808452615051816020860160208601615015565b601f01601f19169290920160200192915050565b60208152600061103b6020830184615039565b60008060006040848603121561508d57600080fd5b83356001600160401b03808211156150a457600080fd5b6150b087838801614deb565b945060208601359150808211156150c657600080fd5b818601915086601f8301126150da57600080fd5b8135818111156150e957600080fd5b8760208260051b8501011115614e8a57600080fd5b60008083601f84011261511057600080fd5b5081356001600160401b0381111561512757600080fd5b6020830191508360208260061b850101111561280a57600080fd5b60008060006040848603121561515757600080fd5b83356001600160401b038082111561516e57600080fd5b61517a87838801614deb565b9450602086013591508082111561519057600080fd5b5061519d868287016150fe565b9497909650939450505050565b6000806000606084860312156151bf57600080fd5b505081359360208301359350604090920135919050565b600080604083850312156151e957600080fd5b8235915060208301356151fb81614c97565b809150509250929050565b60008060006040848603121561521b57600080fd5b83356001600160401b038082111561523257600080fd5b61523e87838801614deb565b9450602086013591508082111561525457600080fd5b818601915086601f83011261526857600080fd5b81358181111561527757600080fd5b87602061012083028501011115614e8a57600080fd5b63ffffffff8082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401525060a081015161ffff80821660a08501528060c08401511660c0850152505060e08101516152fc60e084018261ffff169052565b505050565b600481106139fd576139fd614db2565b61531a81615301565b9052565b81518152602080830151610220830191615342908401826001600160a01b03169052565b506040830151615358604084018261ffff169052565b50606083015161536e606084018261ffff169052565b506080830151615384608084018261ffff169052565b5060a083015161539760a084018261528d565b5060c08301516153ab6101a0840182615311565b5060e08301516153bf6101c0840182615311565b506101008301516153d46101e0840182615311565b50610120830151612b69610200840182615311565b600281106139fd57600080fd5b60006020828403121561540857600080fd5b813561103b816153e9565b6020808252600c908201526b125b1b1959d85b0810d85b1b60a21b604082015260600190565b6020808252600c908201526b125b9d985b1a590810d85b1b60a21b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061549c60608301878961545f565b82810360208401526154af81868861545f565b91505061ffff831660408301529695505050505050565b60208082526008908201526714995a9958dd195960c21b604082015260600190565b602080825260119082015270496c6c6567616c20557064617461626c6560781b604082015260600190565b60208082526010908201526f125b1b1959d85b0810dbdb9d1c9858dd60821b604082015260600190565b6020810160148310614de557614de5614db2565b60006020828403121561556357600080fd5b815161103b81614f45565b7f545950452e4c4956454c595f50524f46494c452e4c4956454c595f4d415354458152602960f91b602082015260210190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016155df576155df6155b7565b5060010190565b600181811c908216806155fa57607f821691505b602082108103614dfd57634e487b7160e01b600052602260045260246000fd5b600481106139fd57600080fd5b60006020828403121561563957600080fd5b813561103b8161561a565b60208101614de583615301565b61ffff811681146139fd57600080fd5b8035610d5a81615651565b60006020828403121561567e57600080fd5b813561103b81615651565b63ffffffff811681146139fd57600080fd5b6000813561081581615689565b6000813561081581615651565b81356156c081615689565b63ffffffff8116905081548163ffffffff19821617835560208401356156e581615689565b67ffffffff000000008160201b16836001600160401b0319841617178455505050604082013561571481615689565b81546bffffffff00000000000000001916604082901b6bffffffff0000000000000000161782555061576f61574b6060840161569b565b82805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b6157a261577e6080840161569b565b82805463ffffffff60801b191660809290921b63ffffffff60801b16919091179055565b6157d16157b160a084016156a8565b82805461ffff60a01b191660a09290921b61ffff60a01b16919091179055565b6158006157e060c084016156a8565b82805461ffff60b01b191660b09290921b61ffff60b01b16919091179055565b61361861580f60e084016156a8565b82805461ffff60c01b191660c09290921b61ffff60c01b16919091179055565b8035610d5a81615689565b803561584581615689565b63ffffffff908116835260208201359061585e82615689565b908116602084015260408201359061587582615689565b908116604084015260608201359061588c82615689565b16606083015261589e6080820161582f565b63ffffffff1660808301526158b560a08201615661565b61ffff1660a08301526158ca60c08201615661565b61ffff1660c08301526158df60e08201615661565b61ffff811660e0840152505050565b6101008101610815828461583a565b8051610d5a81614c97565b8051610d5a81615651565b8051610d5a81615689565b600061010080838503121561593257600080fd5b604051908101906001600160401b038211818310171561595457615954614ed6565b816040528092508351915061596882615689565b81815261597760208501615913565b602082015261598860408501615913565b604082015261599960608501615913565b60608201526159aa60808501615913565b60808201526159bb60a08501615908565b60a08201526159cc60c08501615908565b60c08201526159dd60e08501615908565b60e0820152505092915050565b8051610d5a8161561a565b60006102208284031215615a0857600080fd5b615a10614eec565b82518152615a20602084016158fd565b6020820152615a3160408401615908565b6040820152615a4260608401615908565b6060820152615a5360808401615908565b6080820152615a658460a0850161591e565b60a0820152615a776101a084016159ea565b60c0820152615a896101c084016159ea565b60e0820152615a9b6101e084016159ea565b610100820152615aae61020084016159ea565b6101208201529392505050565b600060208284031215615acd57600080fd5b81516014811061103b57600080fd5b600060208284031215615aee57600080fd5b815161103b816153e9565b6000808335601e19843603018112615b1057600080fd5b8301803591506001600160401b03821115615b2a57600080fd5b60200191503681900382131561280a57600080fd5b600060208284031215615b5157600080fd5b81356001600160401b038116811461103b57600080fd5b600060208284031215615b7a57600080fd5b813561103b81615689565b62ffffff818116838216019080821115612b6957612b696155b7565b6020810160088310614de557614de5614db2565b600060208284031215615bc757600080fd5b81358060020b811461103b57600080fd5b8381526020810183905261014081016110d6604083018461583a565b600060208284031215615c0657600080fd5b5051919050565b600060208284031215615c1f57600080fd5b81516008811061103b57600080fd5b6000808354615c3c816155e6565b60018281168015615c545760018114615c6957615c98565b60ff1984168752821515830287019450615c98565b8760005260208060002060005b85811015615c8f5781548a820152908401908201615c76565b50505082870194505b50929695505050505050565b601f8211156152fc57600081815260208120601f850160051c81016020861015615ccb5750805b601f850160051c820191505b81811015610a4957828155600101615cd7565b6001600160401b03831115615d0157615d01614ed6565b615d1583615d0f83546155e6565b83615ca4565b6000601f841160018114615d495760008515615d315750838201355b600019600387901b1c1916600186901b178355612724565b600083815260209020601f19861690835b82811015615d7a5786850135825560209485019460019092019101615d5a565b5086821015615d975760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b81810381811115610815576108156155b7565b634e487b7160e01b600052603160045260246000fd5b60008251615df4818460208701615015565b9190910192915050565b80820180821115610815576108156155b756fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca264697066735822122095c98a1ad9278af99ffa540399517327dea160b58ff914279ae3825c8c29ce3464736f6c63430008130033",
  "libraries": {
    "LProfileCommons": "0x7F11D5bb7c99667ac0E8851c6B72633d35244c6C"
  },
  "devdoc": {
    "author": "Sina Tadayon, https://github.com/SinaTadayon",
    "events": {
      "Initialized(address,address,address,string,string,uint16)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ProxyLocalAdminUpdated(address,address,address)": {
        "details": "Emitted when the admin account has changed."
      }
    },
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "ACL Profile Member Manager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82229,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "_contractName",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 82231,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "_contractVersion",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 82233,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 82236,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "_sstat",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(ProxySafeModeStatus)82251"
      },
      {
        "astId": 82239,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "_ustat",
        "offset": 21,
        "slot": "2",
        "type": "t_enum(ProxyUpdatabilityStatus)82254"
      },
      {
        "astId": 82244,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "__reserved",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)64_storage"
      },
      {
        "astId": 10383,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "_firstInit",
        "offset": 0,
        "slot": "67",
        "type": "t_bool"
      },
      {
        "astId": 10386,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "_data",
        "offset": 0,
        "slot": "68",
        "type": "t_struct(DataCollection)10239_storage"
      },
      {
        "astId": 82432,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "78",
        "type": "t_uint16"
      },
      {
        "astId": 82435,
        "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
        "label": "_initializing",
        "offset": 2,
        "slot": "78",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)64_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[64]",
        "numberOfBytes": "2048"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(ActivityStatus)11721": {
        "encoding": "inplace",
        "label": "enum IACLCommons.ActivityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(AgentType)11716": {
        "encoding": "inplace",
        "label": "enum IACLCommons.AgentType",
        "numberOfBytes": "1"
      },
      "t_enum(AlterabilityStatus)11726": {
        "encoding": "inplace",
        "label": "enum IACLCommons.AlterabilityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PolicyType)11744": {
        "encoding": "inplace",
        "label": "enum IACLCommons.PolicyType",
        "numberOfBytes": "1"
      },
      "t_enum(ProxySafeModeStatus)82251": {
        "encoding": "inplace",
        "label": "enum IBaseProxy.ProxySafeModeStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProxyUpdatabilityStatus)82254": {
        "encoding": "inplace",
        "label": "enum IBaseProxy.ProxyUpdatabilityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ScopeType)11733": {
        "encoding": "inplace",
        "label": "enum IACLCommons.ScopeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(FacetEntity)11945_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IACLCommons.FacetEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetEntity)11945_storage"
      },
      "t_mapping(t_address,t_struct(ProfileAccount)12018_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IACLCommons.ProfileAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileAccount)12018_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.BaseAgent)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseAgent)11756_storage"
      },
      "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.BaseScope)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseScope)11770_storage"
      },
      "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.PolicyEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyEntity)11793_storage"
      },
      "t_mapping(t_bytes32,t_struct(ProfileEntity)12059_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.ProfileEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileEntity)12059_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)79783_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.AddressSet",
        "members": [
          {
            "astId": 79782,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)79482_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BaseAgent)11756_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.BaseAgent",
        "members": [
          {
            "astId": 11746,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11749,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "atype",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(AgentType)11716"
          },
          {
            "astId": 11752,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "acstat",
            "offset": 1,
            "slot": "1",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11755,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "alstat",
            "offset": 2,
            "slot": "1",
            "type": "t_enum(AlterabilityStatus)11726"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BaseScope)11770_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.BaseScope",
        "members": [
          {
            "astId": 11758,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11761,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "stype",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ScopeType)11733"
          },
          {
            "astId": 11764,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "acstat",
            "offset": 1,
            "slot": "1",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11767,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "alstat",
            "offset": 2,
            "slot": "1",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 11769,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "referredByAgent",
            "offset": 3,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)79676_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 79675,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)79482_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DataCollection)10239_storage": {
        "encoding": "inplace",
        "label": "struct ACLStorage.DataCollection",
        "members": [
          {
            "astId": 10202,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "agents",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)"
          },
          {
            "astId": 10207,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "scopes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)"
          },
          {
            "astId": 10212,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "policies",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)"
          },
          {
            "astId": 10216,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "rolePolicyMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 10221,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "profiles",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes32,t_struct(ProfileEntity)12059_storage)"
          },
          {
            "astId": 10226,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "profileAccounts",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(ProfileAccount)12018_storage)"
          },
          {
            "astId": 10230,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "selectors",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes4,t_address)"
          },
          {
            "astId": 10235,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "facets",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(FacetEntity)11945_storage)"
          },
          {
            "astId": 10238,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "facetSet",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)79783_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(FacetEntity)11945_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.FacetEntity",
        "members": [
          {
            "astId": 11944,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "subjectId",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PolicyEntity)11793_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.PolicyEntity",
        "members": [
          {
            "astId": 11772,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11774,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "scopeId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 11776,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 11778,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "roleLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 11780,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "policyCode",
            "offset": 2,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 11783,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "ptype",
            "offset": 3,
            "slot": "3",
            "type": "t_enum(PolicyType)11744"
          },
          {
            "astId": 11786,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "acstat",
            "offset": 4,
            "slot": "3",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11789,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "alstat",
            "offset": 5,
            "slot": "3",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 11792,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "roles",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bytes32Set)79676_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ProfileAccount)12018_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileAccount",
        "members": [
          {
            "astId": 12017,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "profiles",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProfileEntity)12059_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileEntity",
        "members": [
          {
            "astId": 12023,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "agents",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)"
          },
          {
            "astId": 12028,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "scopes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)"
          },
          {
            "astId": 12033,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "policies",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)"
          },
          {
            "astId": 12037,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "rolePolicyMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 12040,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "admins",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bytes32Set)79676_storage"
          },
          {
            "astId": 12042,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "adminId",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 12044,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "name",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 12046,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "owner",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 12049,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "acstat",
            "offset": 20,
            "slot": "8",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 12052,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "alstat",
            "offset": 21,
            "slot": "8",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 12055,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "registerLimits",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(ProfileRegisterLimit)11993_storage"
          },
          {
            "astId": 12058,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "limits",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(ProfileLimit)12014_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(ProfileLimit)12014_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileLimit",
        "members": [
          {
            "astId": 11995,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "profileCallLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11997,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "contextLimit",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11999,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "memberLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 12001,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "realmLimit",
            "offset": 11,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12003,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "domainLimit",
            "offset": 13,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12005,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "memberCallLimit",
            "offset": 15,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12007,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "typeRoleLimit",
            "offset": 17,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12009,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "typeLimit",
            "offset": 19,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12011,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "policyRoleLimit",
            "offset": 21,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12013,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "functionLimit",
            "offset": 23,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProfileRegisterLimit)11993_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileRegisterLimit",
        "members": [
          {
            "astId": 11978,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "memberRegisterLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11980,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "roleRegisterLimit",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11982,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "typeRegisterLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11984,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "functionRegisterLimit",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11986,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "contextRegisterLimit",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11988,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "realmRegisterLimit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11990,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "domainRegisterLimit",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11992,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "policyRegisterLimit",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)79482_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Set",
        "members": [
          {
            "astId": 79477,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 79481,
            "contract": "src/contracts/acl/profile/agent/ProfileMemberManager.sol:ProfileMemberManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}