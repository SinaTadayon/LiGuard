{
  "address": "0xC69cA7827AAe7c9F2B4c346a22b9CFe19dc3a89d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum IACL.AuthorizationStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "ACLActionForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessFunctionNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessNotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessPolicyForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessRoleActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessRoleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessTypeActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessTypeNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "initCount",
          "type": "uint16"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IACLCommons.ActivityStatus",
          "name": "acstat",
          "type": "uint8"
        }
      ],
      "name": "ProfileFunctionActivityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "adminId",
          "type": "bytes32"
        }
      ],
      "name": "ProfileFunctionAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "agentId",
          "type": "bytes32"
        }
      ],
      "name": "ProfileFunctionAgentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IACLCommons.AlterabilityStatus",
          "name": "alstat",
          "type": "uint8"
        }
      ],
      "name": "ProfileFunctionAlterabilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "policyCode",
          "type": "uint8"
        }
      ],
      "name": "ProfileFunctionPolicyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "adminId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "agentId",
          "type": "bytes32"
        }
      ],
      "name": "ProfileFunctionRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSoftDeleted",
          "type": "bool"
        }
      ],
      "name": "ProfileFunctionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "acl",
          "type": "address"
        }
      ],
      "name": "ProxyAccessControlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "ProxyLocalAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "sstat",
          "type": "uint8"
        }
      ],
      "name": "ProxySafeModeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "ustat",
          "type": "uint8"
        }
      ],
      "name": "ProxyUpdatabilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "ProxyUpgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEMBER_SIGNATURE_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PREDICT_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractVersion",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accessControlManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "profileFunctionCheckAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "profileFunctionCheckAgent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        }
      ],
      "name": "profileFunctionCheckId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "contractId",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "profileFunctionCheckSelector",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "profileId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "functionId",
          "type": "bytes32"
        }
      ],
      "name": "profileFunctionGetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "agentId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "contextId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            },
            {
              "internalType": "uint32",
              "name": "referredByAgent",
              "type": "uint32"
            },
            {
              "internalType": "enum IACLCommons.ScopeType",
              "name": "stype",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AgentType",
              "name": "adminType",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AgentType",
              "name": "agentType",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "policyCode",
              "type": "uint8"
            }
          ],
          "internalType": "struct IProfileFunctionManagement.ProfileFunctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "realmId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "subject",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "deployer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractId",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "adminId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "agentId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes4",
                  "name": "selector",
                  "type": "bytes4"
                },
                {
                  "internalType": "uint8",
                  "name": "policyCode",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IProfileFunctionManagement.ProfileFunctionRequest[]",
              "name": "functions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IProfileFunctionManagement.ProfileFunctionRegisterRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileFunctionRegister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "functions",
          "type": "bytes32[]"
        }
      ],
      "name": "profileFunctionRemove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "entityId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IACLCommons.ProfileUpdateActivityRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileFunctionUpdateActivityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "entityId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IACLCommons.ProfileUpdateAdminRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileFunctionUpdateAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "functionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "agentId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IProfileFunctionManagement.ProfileFunctionUpdateAgentRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileFunctionUpdateAgent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "entityId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IACLCommons.ProfileUpdateAlterabilityRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileFunctionUpdateAlterabilityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "profileName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.ProfileMemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "functionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "policyCode",
              "type": "uint8"
            }
          ],
          "internalType": "struct IProfileFunctionManagement.ProfileFunctionUpdatePolicyRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "profileFunctionUpdatePolicyCode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeModeStatus",
      "outputs": [
        {
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "acl",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLocalAdmin",
          "type": "address"
        }
      ],
      "name": "setLocalAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "sstat",
          "type": "uint8"
        }
      ],
      "name": "setSafeModeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "ustat",
          "type": "uint8"
        }
      ],
      "name": "setUpdatabilityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatabilityStatus",
      "outputs": [
        {
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "forceCall",
          "type": "bool"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9784f5af50fe6e6035528982b44e4a7b315c1cd5c5965a84bfb62dc42ce0f17c",
  "receipt": {
    "to": null,
    "from": "0x1654E08a4963D92846B7cC12bfE911887EA6930c",
    "contractAddress": "0xC69cA7827AAe7c9F2B4c346a22b9CFe19dc3a89d",
    "transactionIndex": 3,
    "gasUsed": "4930235",
    "logsBloom": "0x
    "blockHash": "0x61fa1cab38c13f0afcfcc1663afeebcaa78bcf65e3dc66c8933438b13dee23f8",
    "transactionHash": "0x9784f5af50fe6e6035528982b44e4a7b315c1cd5c5965a84bfb62dc42ce0f17c",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 32749791,
        "transactionHash": "0x9784f5af50fe6e6035528982b44e4a7b315c1cd5c5965a84bfb62dc42ce0f17c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001654e08a4963d92846b7cc12bfe911887ea6930c",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000af2839dd58a5950000000000000000000000000000000000000000000000004b13bfa8bf40b06000000000000000000000000000000000000000000000031da48e8d924e9367350000000000000000000000000000000000000000000000004a64976ee1e80acb00000000000000000000000000000000000000000000031da53db5cc2bec0cca",
        "logIndex": 7,
        "blockHash": "0x61fa1cab38c13f0afcfcc1663afeebcaa78bcf65e3dc66c8933438b13dee23f8"
      }
    ],
    "blockNumber": 32749791,
    "cumulativeGasUsed": "5230809",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3d37f12163392c6a812b5af749abec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum IACL.AuthorizationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ACLActionForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessFunctionNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessNotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessPolicyForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessRoleActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessRoleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessTypeActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessTypeNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"initCount\",\"type\":\"uint16\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"}],\"name\":\"ProfileFunctionActivityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"}],\"name\":\"ProfileFunctionAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"ProfileFunctionAgentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"name\":\"ProfileFunctionAlterabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"policyCode\",\"type\":\"uint8\"}],\"name\":\"ProfileFunctionPolicyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"name\":\"ProfileFunctionRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSoftDeleted\",\"type\":\"bool\"}],\"name\":\"ProfileFunctionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acl\",\"type\":\"address\"}],\"name\":\"ProxyAccessControlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ProxyLocalAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"sstat\",\"type\":\"uint8\"}],\"name\":\"ProxySafeModeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"ustat\",\"type\":\"uint8\"}],\"name\":\"ProxyUpdatabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ProxyUpgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMBER_SIGNATURE_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREDICT_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accessControlManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"profileFunctionCheckAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"profileFunctionCheckAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"name\":\"profileFunctionCheckId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractId\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"profileFunctionCheckSelector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"}],\"name\":\"profileFunctionGetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint32\",\"name\":\"referredByAgent\",\"type\":\"uint32\"},{\"internalType\":\"enum IACLCommons.ScopeType\",\"name\":\"stype\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AgentType\",\"name\":\"adminType\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AgentType\",\"name\":\"agentType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyCode\",\"type\":\"uint8\"}],\"internalType\":\"struct IProfileFunctionManagement.ProfileFunctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"realmId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"policyCode\",\"type\":\"uint8\"}],\"internalType\":\"struct IProfileFunctionManagement.ProfileFunctionRequest[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IProfileFunctionManagement.ProfileFunctionRegisterRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileFunctionRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"functions\",\"type\":\"bytes32[]\"}],\"name\":\"profileFunctionRemove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"entityId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.ProfileUpdateActivityRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileFunctionUpdateActivityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"entityId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IACLCommons.ProfileUpdateAdminRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileFunctionUpdateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IProfileFunctionManagement.ProfileFunctionUpdateAgentRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileFunctionUpdateAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"entityId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.ProfileUpdateAlterabilityRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileFunctionUpdateAlterabilityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"profileName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.ProfileMemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"functionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"policyCode\",\"type\":\"uint8\"}],\"internalType\":\"struct IProfileFunctionManagement.ProfileFunctionUpdatePolicyRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"profileFunctionUpdatePolicyCode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeModeStatus\",\"outputs\":[{\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acl\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLocalAdmin\",\"type\":\"address\"}],\"name\":\"setLocalAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"sstat\",\"type\":\"uint8\"}],\"name\":\"setSafeModeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"ustat\",\"type\":\"uint8\"}],\"name\":\"setUpdatabilityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatabilityStatus\",\"outputs\":[{\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forceCall\",\"type\":\"bool\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Sina Tadayon, https://github.com/SinaTadayon\",\"events\":{\"Initialized(address,address,address,string,string,uint16)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ProxyLocalAdminUpdated(address,address,address)\":{\"details\":\"Emitted when the admin account has changed.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Function Manager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/acl/profile/scope/ProfileFunctionManager.sol\":\"ProfileFunctionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/contracts/acl/ACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Abstract Access Control List Storage Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract ACLStorage is BaseUUPSStorage, IACLCommons {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  struct DataCollection {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    mapping(bytes32 => ProfileEntity) profiles;\\n    mapping(address => ProfileAccount) profileAccounts;\\n    mapping(bytes4 => address) selectors;\\n    mapping(address => FacetEntity) facets;\\n    LEnumerableSet.AddressSet facetSet;\\n  }\\n\\n  bytes32 public constant CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"PredictContext(address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"MemberSignature(address account,uint256 expiredAt)\\\");\\n\\n  bytes32 public constant PROFILE_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileContext(string profile,address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfilePredictContext(string profile,address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileMemberSignature(string profile,address account,uint256 expiredAt)\\\");\\n\\n  // General Types ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SCOPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_MEMBER_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_TYPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_POLICY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_PROFILE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\"));\\n\\n  // Universe Scope ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_VERSE\\\"));\\n\\n  // General Profile Type\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n\\n  bool internal _firstInit;\\n  DataCollection internal _data;\\n  // Note: for next upgrade add new variables after this line\\n}\\n\",\"keccak256\":\"0x748ba9ee4ce4e5492afd3261bf61e8360b3f45ae3588218c1bbf90699df2065b\",\"license\":\"MIT\"},\"src/contracts/acl/IACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACL {\\n  enum AuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ACLUnauthorized();\\n  error ACLPolicyForbidden();\\n  error ACLCallForbidden();\\n  error ACLRoleScopeForbidden();\\n  error ACLMemberNotFound();\\n  error ACLRoleNotFound();\\n  error ACLTypeNotFound();\\n  error ACLFunctionNotFound();\\n  error ACLContextNotFound();\\n  error ACLRealmNotFound();\\n  error ACLDomainNotFound();\\n  error ACLMemberActivityForbidden();\\n  error ACLRoleActivityForbidden();\\n  error ACLTypeActivityForbidden();\\n  error ACLFunctionActivityForbidden();\\n  error ACLContextActivityForbidden();\\n  error ACLRealmActivityForbidden();\\n  error ACLDomainActivityForbidden();\\n  error ACLUniverseActivityForbidden();\\n\\n  error ACLActionForbidden(AuthorizationStatus);\\n\\n  enum AdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error AdminAccessNotPermitted();\\n  error AdminAccessPolicyForbidden();\\n  error AdminAccessRoleNotFound();\\n  error AdminAccessTypeNotFound();\\n  error AdminAccessFunctionNotFound();\\n  error AdminAccessRoleActivityForbidden();\\n  error AdminAccessTypeActivityForbidden();\\n\\n  error SetAdminForbidden(AdminAccessStatus);\\n\\n  function hasAccess(bytes32 functionId) external returns (AuthorizationStatus);\\n\\n  function hasMemberAccess(bytes32 functionId, bytes32 memberId) external returns (AuthorizationStatus);\\n\\n  function hasCSAccess(address contractId, bytes4 selector) external returns (AuthorizationStatus);\\n\\n  function hasAccountAccess(\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (AuthorizationStatus);\\n}\\n\",\"keccak256\":\"0x3b4bd5cd73079a4bcbc82fe3699b21fcc08fdafc964f978a9c540756302dbb2e\",\"license\":\"MIT\"},\"src/contracts/acl/IACLCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLCommons {\\n  enum AgentType {\\n    NONE,\\n    MEMBER,\\n    ROLE,\\n    TYPE\\n  }\\n\\n  enum ActivityStatus {\\n    NONE,\\n    DELETED,\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum AlterabilityStatus {\\n    NONE,\\n    DISABLED,\\n    UPDATABLE,\\n    UPGRADABLE\\n  }\\n\\n  enum ScopeType {\\n    NONE,\\n    FUNCTION,\\n    CONTEXT,\\n    REALM,\\n    DOMAIN,\\n    UNIVERSE\\n  }\\n\\n  enum ActionType {\\n    ADD,\\n    UPDATE,\\n    REMOVE\\n  }\\n\\n  enum PolicyType {\\n    UNLOCK, // 0\\n    SLOCK, // soft lock, 1 - 63\\n    MLOCK, // medium lock, 64 - 127\\n    RLOCK, // restrict lock, 128 - 191\\n    HLOCK, // hard lock, 192 - 254\\n    LOCK // 255\\n  }\\n\\n  struct BaseAgent {\\n    bytes32 adminId;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct BaseScope {\\n    bytes32 adminId;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    uint32 referredByAgent;\\n  }\\n\\n  struct PolicyEntity {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint8 policyCode;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FunctionEntity {\\n    BaseScope bs;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n  }\\n\\n  struct ContextEntity {\\n    BaseScope bs;\\n    bytes32 realmId;\\n    address contractId;\\n    uint8 functionLimit;\\n    LEnumerableSet.Bytes32Set functions;\\n  }\\n\\n  struct RealmEntity {\\n    BaseScope bs;\\n    bytes32 domainId;\\n    uint32 contextLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set contexts;\\n  }\\n\\n  struct DomainEntity {\\n    BaseScope bs;\\n    bytes32 universeId;\\n    uint16 realmLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set realms;\\n  }\\n\\n  struct UniverseEntity {\\n    BaseScope bs;\\n    uint16 domainLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set domains;\\n  }\\n\\n  struct GeneralLimit {\\n    uint24 memberLimit;\\n    uint16 memberRegisterLimit;\\n    uint16 contextRegisterLimit;\\n    uint16 functionRegisterLimit;\\n    uint16 profileRegisterLimit;\\n    uint16 contextLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 callLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint8 roleRegisterLimit;\\n    uint8 typeRegisterLimit;\\n    uint8 realmRegisterLimit;\\n    uint8 domainRegisterLimit;\\n    uint8 policyRegisterLimit;\\n    uint8 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct MemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    GeneralLimit limits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct MemberSignature {\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct RoleEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n  }\\n\\n  struct TypeEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    mapping(bytes32 => bytes32) members;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FacetEntity {\\n    address subjectId;\\n  }\\n\\n  struct UpdateActivityRequest {\\n    bytes32 id;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct UpdateAlterabilityRequest {\\n    bytes32 id;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct UpdateAdminRequest {\\n    bytes32 id;\\n    bytes32 adminId;\\n  }\\n\\n  // used in Policy / Role / Type\\n  struct UpdateScopeRequest {\\n    bytes32 id;\\n    bytes32 scopeId;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////\\n  // Profiles\\n\\n  struct ProfileMemberSignature {\\n    string profileName;\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct ProfileRegisterLimit {\\n    uint32 memberRegisterLimit;\\n    uint32 roleRegisterLimit;\\n    uint32 typeRegisterLimit;\\n    uint32 functionRegisterLimit;\\n    uint32 contextRegisterLimit;\\n    uint16 realmRegisterLimit;\\n    uint16 domainRegisterLimit;\\n    uint16 policyRegisterLimit;\\n  }\\n\\n  struct ProfileLimit {\\n    uint32 profileCallLimit;\\n    uint32 contextLimit;\\n    uint24 memberLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 memberCallLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint16 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ProfileAccount {\\n    bytes32[] profiles;\\n  }\\n\\n  struct ProfileEntity {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    LEnumerableSet.Bytes32Set admins;\\n    bytes32 adminId;\\n    string name;\\n    address owner;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileMemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    uint16 callLimit;\\n    uint16 typeLimit;\\n    ProfileRegisterLimit registerLimits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct ProfileUpdateActivityRequest {\\n    bytes32 entityId;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct ProfileUpdateAlterabilityRequest {\\n    bytes32 entityId;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct ProfileUpdateAdminRequest {\\n    bytes32 entityId;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateScopeRequest {\\n    bytes32 entityId;\\n    bytes32 scopeId;\\n  }\\n}\\n\",\"keccak256\":\"0x2269cec662cb8f25c0523b281f8f97bd9b5115ea80771c7d1e4083031f4a1c87\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACL {\\n  enum ProfileAuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    PROFILE_CALL_FORBIDDEN,\\n    MEMBER_CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN,\\n    PROFILE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileACLUnauthorized();\\n  error ProfileACLPolicyForbidden();\\n  error ProfileACLCallForbidden();\\n  error ProfileACLRoleScopeForbidden();\\n  error ProfileACLMemberCallForbidden();\\n  error ProfileACLMemberNotFound();\\n  error ProfileACLRoleNotFound();\\n  error ProfileACLTypeNotFound();\\n  error ProfileACLFunctionNotFound();\\n  error ProfileACLContextNotFound();\\n  error ProfileACLRealmNotFound();\\n  error ProfileACLDomainNotFound();\\n  error ProfileACLMemberActivityForbidden();\\n  error ProfileACLRoleActivityForbidden();\\n  error ProfileACLTypeActivityForbidden();\\n  error ProfileACLFunctionActivityForbidden();\\n  error ProfileACLContextActivityForbidden();\\n  error ProfileACLRealmActivityForbidden();\\n  error ProfileACLDomainActivityForbidden();\\n  error ProfileACLUniverseActivityForbidden();\\n  error ProfileACLProfileActivityForbidden();\\n\\n  enum ProfileAdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileAdminAccessNotPermitted();\\n  error ProfileAdminAccessPolicyForbidden();\\n  error ProfileAdminAccessRoleNotFound();\\n  error ProfileAdminAccessTypeNotFound();\\n  error ProfileAdminAccessFunctionNotFound();\\n  error ProfileAdminAccessRoleActivityForbidden();\\n  error ProfileAdminAccessTypeActivityForbidden();\\n\\n  error ProfileSetAdminForbidden(ProfileAdminAccessStatus);\\n\\n  function profileHasAccess(bytes32 profileId, bytes32 functionId) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasCSAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasAccountAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (ProfileAuthorizationStatus);\\n}\\n\",\"keccak256\":\"0xb3687f11a1d2d28b78e815657864fbe1ef4aeba750e8c9760b3d3f97e467efc2\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control General Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function profileAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function profileAnyType() external pure returns (bytes32);\\n\\n  // system master type\\n  function profileSystemMasterType() external pure returns (bytes32);\\n\\n  // profile master type\\n  function profileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function profileUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function profileIsAgentExist(bytes32 profileId, bytes32 agentId) external view returns (bool);\\n\\n  function profileIsScopeExist(bytes32 profileId, bytes32 scopeId) external view returns (bool);\\n\\n  function profileScopeBaseInfo(bytes32 profileId, bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function profileAgentBaseInfo(bytes32 profileId, bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function profileIsScopesCompatible(\\n    bytes32 profileId,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5eeaa7ce1f5f26662cf0368f1c9b415214f37f1659c3a2defccedf0d1943760f\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileManagement is IACLCommons {\\n  struct ProfileRegisterRequest {\\n    string name;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    address profileOwner;\\n    address profileSystemAdmin;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateOwnerAccountRequest {\\n    bytes32 profileId;\\n    address newOwner;\\n  }\\n\\n  struct ProfileUpdateLimitsRequest {\\n    bytes32 profileId;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileInfo {\\n    string name;\\n    bytes32 adminId;\\n    address owner;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    AgentType adminType;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfileRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed profileOwner,\\n    address profileSystemAdmin,\\n    bytes32 adminId,\\n    ProfileRegisterLimit registerlimits,\\n    ProfileLimit limits\\n  );\\n\\n  event ProfileAdminUpdated(address indexed sender, bytes32 indexed profileId, bytes32 indexed adminId);\\n\\n  event ProfileActivityUpdated(address indexed sender, bytes32 indexed profileId, ActivityStatus acstat);\\n\\n  event ProfileAlterabilityUpdated(address indexed sender, bytes32 indexed profileId, AlterabilityStatus alstat);\\n\\n  event ProfileLimitsUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    ProfileLimit limit,\\n    ProfileRegisterLimit registerLimit\\n  );\\n\\n  event ProfileOwnerAccountUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed owner,\\n    address newOwner\\n  );\\n\\n  function profileRegister(MemberSignature calldata memberSign, ProfileRegisterRequest[] calldata request)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateLimits(MemberSignature calldata memberSign, ProfileUpdateLimitsRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateOwnerAccount(\\n    MemberSignature calldata memberSign,\\n    ProfileUpdateOwnerAccountRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileCheckId(bytes32 profileId) external view returns (bool);\\n\\n  function profileCheckName(string calldata name) external view returns (bool);\\n\\n  function profileCheckOwner(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileSystemAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileGetProfileAccount(address account) external view returns (bytes32[] memory);\\n\\n  function profileGetAdmins(bytes32 profileId) external view returns (bytes32[] memory);\\n\\n  function profileGetInfo(bytes32 profileId) external view returns (ProfileInfo memory);\\n}\\n\",\"keccak256\":\"0x32153a5a19ef691b56e8987b82b455e024cfc24c42393955d12d43e0c148d6fc\",\"license\":\"MIT\"},\"src/contracts/acl/profile/ProfileAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./policy/IProfilePolicyManagement.sol\\\";\\nimport \\\"./IProfileACL.sol\\\";\\nimport \\\"./IProfileACLGenerals.sol\\\";\\nimport \\\"./scope/IProfileFunctionManagement.sol\\\";\\nimport \\\"./agent/IProfileRoleManagement.sol\\\";\\nimport \\\"./agent/IProfileTypeManagement.sol\\\";\\nimport \\\"../ACLStorage.sol\\\";\\nimport \\\"../IACL.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../lib/acl/LACLUtils.sol\\\";\\nimport \\\"../../lib/acl/LProfileStorage.sol\\\";\\nimport \\\"../../lib/acl/LACLStorage.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/BaseUUPSProxy.sol\\\";\\n\\n/**\\n * @title Profile AccessControl Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ncontract ProfileAccessControl is ACLStorage, BaseUUPSProxy, IProfileACLGenerals, IProfileACL {\\n  using LACLStorage for DataCollection;\\n  using LProfileStorage for ProfileEntity;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  constructor() {}\\n\\n  function initialize(\\n    string calldata contractName,\\n    string calldata contractVersion,\\n    address accessControlManager\\n  ) public onlyProxy onlyLocalAdmin initializer {\\n    __BASE_UUPS_init(contractName, contractVersion, accessControlManager);\\n\\n    emit Initialized(\\n      _msgSender(),\\n      address(this),\\n      _implementation(),\\n      contractName,\\n      contractVersion,\\n      _getInitializedCount()\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IProfileACL).interfaceId ||\\n      interfaceId == type(IProfileACLGenerals).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function profileHasAccess(bytes32 profileId, bytes32 functionId) external returns (ProfileAuthorizationStatus) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN;\\n    (FunctionEntity storage functionEntity, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return ProfileAuthorizationStatus.FUNCTION_NOT_FOUND;\\n    return _doProfileHasAccess(profileEntity, LACLUtils.accountGenerateId(msg.sender), functionEntity);\\n  }\\n\\n  function profileHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) external returns (ProfileAuthorizationStatus) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN;\\n    (FunctionEntity storage functionEntity, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return ProfileAuthorizationStatus.FUNCTION_NOT_FOUND;\\n    return _doProfileHasAccess(profileEntity, memberId, functionEntity);\\n  }\\n\\n  function profileHasCSAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external returns (ProfileAuthorizationStatus) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN;\\n    bytes32 functionId = LACLUtils.functionGenerateId(contractId, selector);\\n    (FunctionEntity storage functionEntity, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return ProfileAuthorizationStatus.FUNCTION_NOT_FOUND;\\n    return _doProfileHasAccess(profileEntity, LACLUtils.accountGenerateId(msg.sender), functionEntity);\\n  }\\n\\n  function profileHasAccountAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (ProfileAuthorizationStatus) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN;\\n    bytes32 functionId = LACLUtils.functionGenerateId(contractId, selector);\\n    bytes32 memberId = LACLUtils.accountGenerateId(accountId);\\n    (FunctionEntity storage functionEntity, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return ProfileAuthorizationStatus.FUNCTION_NOT_FOUND;\\n    return _doProfileHasAccess(profileEntity, memberId, functionEntity);\\n  }\\n\\n  function profileAclHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) public {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN);\\n    (FunctionEntity storage functionEntity, bool result) = _data.functionTryReadSlot(functionId);\\n    if (!result) LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.FUNCTION_NOT_FOUND);\\n    _doAclHasAccess(profileEntity, memberId, functionEntity);\\n  }\\n\\n  function _doProfileHasAccess(\\n    ProfileEntity storage profileEntity,\\n    bytes32 memberId,\\n    FunctionEntity storage functionEntity\\n  ) internal returns (ProfileAuthorizationStatus) {\\n    if (profileEntity.limits.profileCallLimit > 0) {\\n      unchecked {\\n        profileEntity.limits.profileCallLimit -= 1;\\n      }\\n    } else {\\n      return ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN;\\n    }\\n\\n    AgentType atype = profileEntity.agents[functionEntity.agentId].atype;\\n    if (atype == AgentType.ROLE) {\\n      // check member activation\\n      (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n        memberId\\n      );\\n      if (!result0) return ProfileAuthorizationStatus.MEMBER_NOT_FOUND;\\n      if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n        return ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN;\\n      if (profileEntity.owner != profileMemberEntity.account) {\\n        if (profileMemberEntity.callLimit > 0) {\\n          unchecked {\\n            profileMemberEntity.callLimit -= 1;\\n          }\\n        } else {\\n          return ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN;\\n        }\\n      }\\n\\n      // check role activation\\n      (RoleEntity storage roleEntity, bool result1) = profileEntity.profileRoleTryReadSlot(functionEntity.agentId);\\n      if (!result1) return ProfileAuthorizationStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN;\\n      if (\\n        profileEntity.scopes[roleEntity.scopeId].stype == ScopeType.FUNCTION &&\\n        roleEntity.scopeId != functionEntity.agentId\\n      ) return ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN;\\n\\n      // check type activation\\n      (TypeEntity storage typeEntity, bool result2) = profileEntity.profileTypeTryReadSlot(roleEntity.typeId);\\n      if (!result2) return ProfileAuthorizationStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      // check memberId with agentId role\\n      if (typeEntity.members[memberId] != functionEntity.agentId) return ProfileAuthorizationStatus.UNAUTHORIZED;\\n\\n      // check policy activation\\n      PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[functionEntity.agentId]];\\n      if (policyEntity.acstat == ActivityStatus.ENABLED && policyEntity.policyCode >= functionEntity.policyCode)\\n        return ProfileAuthorizationStatus.POLICY_FORBIDDEN;\\n    } else if (atype == AgentType.TYPE) {\\n      if (functionEntity.agentId == _LIVELY_PROFILE_ANY_TYPE_ID) {\\n        (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n          memberId\\n        );\\n        if (!result0) return ProfileAuthorizationStatus.MEMBER_NOT_FOUND;\\n        if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n          return ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN;\\n        if (profileEntity.owner != profileMemberEntity.account) {\\n          if (profileMemberEntity.callLimit > 0) {\\n            unchecked {\\n              profileMemberEntity.callLimit -= 1;\\n            }\\n          } else {\\n            return ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN;\\n          }\\n        }\\n      } else if (functionEntity.agentId != _LIVELY_VERSE_ANONYMOUS_TYPE_ID) {\\n        // check member activation\\n        (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n          memberId\\n        );\\n        if (!result0) return ProfileAuthorizationStatus.MEMBER_NOT_FOUND;\\n        if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n          return ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN;\\n        if (profileEntity.owner != profileMemberEntity.account) {\\n          if (profileMemberEntity.callLimit > 0) {\\n            unchecked {\\n              profileMemberEntity.callLimit -= 1;\\n            }\\n          } else {\\n            return ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN;\\n          }\\n        }\\n\\n        // check type activation\\n        (TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(functionEntity.agentId);\\n        if (!result1) return ProfileAuthorizationStatus.TYPE_NOT_FOUND;\\n        if (typeEntity.ba.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n        // check role activation\\n        bytes32 roleId = typeEntity.members[memberId];\\n        (RoleEntity storage roleEntity, bool result2) = profileEntity.profileRoleTryReadSlot(roleId);\\n        if (!result2) return ProfileAuthorizationStatus.ROLE_NOT_FOUND;\\n        if (roleEntity.ba.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN;\\n        if (\\n          profileEntity.scopes[roleEntity.scopeId].stype == ScopeType.FUNCTION &&\\n          roleEntity.scopeId != functionEntity.agentId\\n        ) return ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN;\\n\\n        // check policy activation\\n        PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[roleId]];\\n        if (policyEntity.acstat == ActivityStatus.ENABLED && policyEntity.policyCode >= functionEntity.policyCode)\\n          return ProfileAuthorizationStatus.POLICY_FORBIDDEN;\\n      }\\n    } else if (atype <= AgentType.MEMBER) {\\n      return ProfileAuthorizationStatus.UNAUTHORIZED;\\n    }\\n\\n    // check function activity\\n    if (functionEntity.bs.acstat != ActivityStatus.ENABLED)\\n      return ProfileAuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN;\\n\\n    // check context activity\\n    (ContextEntity storage contextEntity, bool res1) = profileEntity.profileContextTryReadSlot(\\n      functionEntity.contextId\\n    );\\n    if (!res1) return ProfileAuthorizationStatus.CONTEXT_NOT_FOUND;\\n    if (contextEntity.bs.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN;\\n\\n    // check realm activity\\n    (RealmEntity storage realmEntity, bool res2) = profileEntity.profileRealmTryReadSlot(contextEntity.realmId);\\n    if (!res2) return ProfileAuthorizationStatus.REALM_NOT_FOUND;\\n    if (realmEntity.bs.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.REALM_ACTIVITY_FORBIDDEN;\\n\\n    // check domain activity\\n    (DomainEntity storage domainEntity, bool res3) = profileEntity.profileDomainTryReadSlot(realmEntity.domainId);\\n    if (!res3) return ProfileAuthorizationStatus.DOMAIN_NOT_FOUND;\\n    if (domainEntity.bs.acstat != ActivityStatus.ENABLED) return ProfileAuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN;\\n\\n    // check universe activity\\n    UniverseEntity storage universeEntity = profileEntity.profileUniverseReadSlot(\\n      _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID\\n    );\\n    if (universeEntity.bs.acstat != ActivityStatus.ENABLED)\\n      return ProfileAuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN;\\n\\n    return ProfileAuthorizationStatus.PERMITTED;\\n  }\\n\\n  function _doAclHasAccess(\\n    ProfileEntity storage profileEntity,\\n    bytes32 memberId,\\n    FunctionEntity storage functionEntity\\n  ) internal {\\n    if (profileEntity.limits.profileCallLimit > 0) {\\n      unchecked {\\n        profileEntity.limits.profileCallLimit -= 1;\\n      }\\n    } else {\\n      LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN);\\n    }\\n\\n    AgentType atype = profileEntity.agents[functionEntity.agentId].atype;\\n\\n    if (atype == AgentType.ROLE) {\\n      // check member activation\\n      (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n        memberId\\n      );\\n      if (!result0) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_NOT_FOUND);\\n      if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN);\\n      if (profileEntity.owner != profileMemberEntity.account) {\\n        if (profileMemberEntity.callLimit > 0) {\\n          unchecked {\\n            profileMemberEntity.callLimit -= 1;\\n          }\\n        } else {\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN);\\n        }\\n      }\\n\\n      // check role activation\\n      (RoleEntity storage roleEntity, bool result1) = profileEntity.profileRoleTryReadSlot(functionEntity.agentId);\\n      if (!result1) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_NOT_FOUND);\\n      if (roleEntity.ba.acstat != ActivityStatus.ENABLED)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN);\\n      // if(profileEntity.scopes[roleEntity.scopeId].stype == ScopeType.FUNCTION && roleEntity.scopeId != functionEntity.agentId)\\n      //   LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN);\\n\\n      // check type activation\\n      (TypeEntity storage typeEntity, bool result2) = profileEntity.profileTypeTryReadSlot(roleEntity.typeId);\\n      if (!result2) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.TYPE_NOT_FOUND);\\n      if (typeEntity.ba.acstat != ActivityStatus.ENABLED)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN);\\n\\n      // check memberId with agentId role\\n      if (typeEntity.members[memberId] != functionEntity.agentId)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.UNAUTHORIZED);\\n\\n      // check policy activation\\n      PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[functionEntity.agentId]];\\n      if (policyEntity.acstat == ActivityStatus.ENABLED && policyEntity.policyCode >= functionEntity.policyCode)\\n        LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.POLICY_FORBIDDEN);\\n    } else if (atype == AgentType.TYPE) {\\n      if (functionEntity.agentId == _LIVELY_PROFILE_ANY_TYPE_ID) {\\n        (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n          memberId\\n        );\\n        if (!result0) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_NOT_FOUND);\\n        if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN);\\n        if (profileEntity.owner != profileMemberEntity.account) {\\n          if (profileMemberEntity.callLimit > 0) {\\n            unchecked {\\n              profileMemberEntity.callLimit -= 1;\\n            }\\n          } else {\\n            LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN);\\n          }\\n        }\\n      } else if (functionEntity.agentId != _LIVELY_VERSE_ANONYMOUS_TYPE_ID) {\\n        // check member activation\\n        (ProfileMemberEntity storage profileMemberEntity, bool result0) = profileEntity.profileMemberTryReadSlot(\\n          memberId\\n        );\\n        if (!result0) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_NOT_FOUND);\\n        if (profileMemberEntity.ba.acstat != ActivityStatus.ENABLED)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN);\\n        if (profileEntity.owner != profileMemberEntity.account) {\\n          if (profileMemberEntity.callLimit > 0) {\\n            unchecked {\\n              profileMemberEntity.callLimit -= 1;\\n            }\\n          } else {\\n            LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN);\\n          }\\n        }\\n\\n        // check type activation\\n        (TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(functionEntity.agentId);\\n        if (!result1) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.TYPE_NOT_FOUND);\\n        if (typeEntity.ba.acstat != ActivityStatus.ENABLED)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN);\\n\\n        // check role activation\\n        bytes32 roleId = typeEntity.members[memberId];\\n        (RoleEntity storage roleEntity, bool result2) = profileEntity.profileRoleTryReadSlot(roleId);\\n        if (!result2) LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_NOT_FOUND);\\n        if (roleEntity.ba.acstat != ActivityStatus.ENABLED)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN);\\n        // if(profileEntity.scopes[roleEntity.scopeId].stype == ScopeType.FUNCTION && roleEntity.scopeId != functionEntity.agentId)\\n        //   LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN);\\n\\n        // check policy activation\\n        PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[roleId]];\\n        if (policyEntity.acstat == ActivityStatus.ENABLED && policyEntity.policyCode >= functionEntity.policyCode)\\n          LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.POLICY_FORBIDDEN);\\n      }\\n    } else if (atype <= AgentType.MEMBER) {\\n      LACLUtils.generateProfileAuthorizationError(ProfileAuthorizationStatus.UNAUTHORIZED);\\n    }\\n\\n    // check function activity\\n    if (functionEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN);\\n\\n    // check context activity\\n    (ContextEntity storage contextEntity, bool res1) = _data.contextTryReadSlot(functionEntity.contextId);\\n    if (!res1) LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.CONTEXT_NOT_FOUND);\\n    if (contextEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN);\\n\\n    // check realm activity\\n    (RealmEntity storage realmEntity, bool res2) = _data.realmTryReadSlot(contextEntity.realmId);\\n    if (!res2) LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.REALM_NOT_FOUND);\\n    if (realmEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.REALM_ACTIVITY_FORBIDDEN);\\n\\n    // check domain activity\\n    (DomainEntity storage domainEntity, bool res3) = _data.domainTryReadSlot(realmEntity.domainId);\\n    if (!res3) LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.DOMAIN_NOT_FOUND);\\n    if (domainEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN);\\n\\n    // check universe activity\\n    UniverseEntity storage universeEntity = _data.universeReadSlot(_LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID);\\n    if (universeEntity.bs.acstat != ActivityStatus.ENABLED)\\n      LACLUtils.generateAuthorizationError(IACL.AuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN);\\n  }\\n\\n  // Anonymouse type\\n  function profileAnonymousType() external pure returns (bytes32) {\\n    return _LIVELY_VERSE_ANONYMOUS_TYPE_ID;\\n  }\\n\\n  // Any type\\n  function profileAnyType() external pure returns (bytes32) {\\n    return _LIVELY_PROFILE_ANY_TYPE_ID;\\n  }\\n\\n  // system admin type\\n  function profileSystemMasterType() external pure returns (bytes32) {\\n    return _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID;\\n  }\\n\\n  // admin type\\n  function profileMasterType() external pure returns (bytes32) {\\n    return _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID;\\n  }\\n\\n  function profileUniverseScope() external pure returns (bytes32) {\\n    return _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n  }\\n\\n  // general\\n  function profileIsAgentExist(bytes32 profileId, bytes32 agentId) external view returns (bool) {\\n    return _data.profiles[profileId].agents[agentId].atype != AgentType.NONE;\\n  }\\n\\n  function profileIsScopeExist(bytes32 profileId, bytes32 scopeId) external view returns (bool) {\\n    return _data.profiles[profileId].scopes[scopeId].stype != ScopeType.NONE;\\n  }\\n\\n  function profileScopeBaseInfo(bytes32 profileId, bytes32 scopeId) external view returns (BaseScope memory) {\\n    return _data.profiles[profileId].scopes[scopeId];\\n  }\\n\\n  function profileAgentBaseInfo(bytes32 profileId, bytes32 agentId) external view returns (BaseAgent memory) {\\n    return _data.profiles[profileId].agents[agentId];\\n  }\\n\\n  function profileIsScopesCompatible(\\n    bytes32 profileId,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) external view returns (bool) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat == ActivityStatus.NONE) return false;\\n    return _doProfileScopesCompatible(profileEntity, destScopeId, srcScopeId);\\n  }\\n\\n  function _doProfileScopesCompatible(\\n    ProfileEntity storage profileEntity,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) internal view returns (bool) {\\n    ScopeType destScopeType = profileEntity.scopes[destScopeId].stype;\\n    ScopeType srcScopeType = profileEntity.scopes[srcScopeId].stype;\\n    if (destScopeType == ScopeType.NONE || srcScopeType == ScopeType.NONE) return false;\\n    if (destScopeType == ScopeType.UNIVERSE) return true;\\n\\n    if (destScopeType == ScopeType.CONTEXT && srcScopeType == ScopeType.FUNCTION) {\\n      ContextEntity storage ce = profileEntity.profileContextReadSlot(destScopeId);\\n      return ce.functions.contains(srcScopeId);\\n    } else if (destScopeType == ScopeType.REALM && srcScopeType == ScopeType.FUNCTION) {\\n      FunctionEntity storage fe = profileEntity.profileFunctionReadSlot(srcScopeId);\\n      RealmEntity storage re = profileEntity.profileRealmReadSlot(destScopeId);\\n      return re.contexts.contains(fe.contextId);\\n    } else if (destScopeType == ScopeType.DOMAIN && srcScopeType == ScopeType.FUNCTION) {\\n      FunctionEntity storage fe = profileEntity.profileFunctionReadSlot(srcScopeId);\\n      ContextEntity storage ce = profileEntity.profileContextReadSlot(fe.contextId);\\n      DomainEntity storage de = profileEntity.profileDomainReadSlot(destScopeId);\\n      return de.realms.contains(ce.realmId);\\n    } else if (destScopeType == ScopeType.REALM && srcScopeType == ScopeType.CONTEXT) {\\n      RealmEntity storage re = profileEntity.profileRealmReadSlot(destScopeId);\\n      return re.contexts.contains(srcScopeId);\\n    } else if (destScopeType == ScopeType.DOMAIN && srcScopeType == ScopeType.CONTEXT) {\\n      ContextEntity storage ce = profileEntity.profileContextReadSlot(srcScopeId);\\n      DomainEntity storage de = profileEntity.profileDomainReadSlot(destScopeId);\\n      return de.realms.contains(ce.realmId);\\n    } else if (destScopeType == ScopeType.DOMAIN && srcScopeType == ScopeType.REALM) {\\n      DomainEntity storage de = profileEntity.profileDomainReadSlot(destScopeId);\\n      return de.realms.contains(srcScopeId);\\n    }\\n\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0xea172c7abeaa47789e933a7f84ae407c8d06929e719851ccae2396410068938d\",\"license\":\"MIT\"},\"src/contracts/acl/profile/agent/IProfileMemberManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Member Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileMemberManagement is IACLCommons {\\n  struct ProfileMemberRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 roleId;\\n    int24 typeLimit;\\n    int24 callLimit;\\n    address account;\\n    ProfileRegisterLimit registerLimit;\\n  }\\n\\n  struct ProfileMemberUpdateLimitRequest {\\n    bytes32 memberId;\\n    uint16 limit;\\n  }\\n\\n  struct ProfileMemberUpdateRegisterLimitRequest {\\n    bytes32 memberId;\\n    ProfileRegisterLimit registerLimit;\\n  }\\n\\n  struct ProfileMemberInfo {\\n    bytes32 adminId;\\n    address account;\\n    uint16 typeLimit;\\n    uint16 typeCount;\\n    uint16 callLimit;\\n    ProfileRegisterLimit registerLimit;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfileMemberRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bytes32 roleId,\\n    bytes32 adminId,\\n    ProfileRegisterLimit registerLimit\\n  );\\n\\n  event ProfileMemberTypeLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    uint16 typeLimit\\n  );\\n\\n  event ProfileMemberRegisterLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    ProfileRegisterLimit registerLimit\\n  );\\n\\n  event ProfileMemberCallLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    uint16 callLimit\\n  );\\n\\n  event ProfileMemberAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileMemberActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileMemberAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileMemberRoleRevoked(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bytes32 roleId,\\n    bytes32 typeId\\n  );\\n\\n  event ProfileMemberRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bool isCompleted\\n  );\\n\\n  function profileMemberRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateTypeLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberUpdateLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateRegisterLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberUpdateRegisterLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateCallLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileMemberUpdateLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileMemberRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata members)\\n    external\\n    returns (bool);\\n\\n  function profileMemberCheckId(bytes32 profileId, bytes32 memberId) external view returns (bool);\\n\\n  function profileMemberCheckAccount(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileMemberCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 memberId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileMemberHasType(\\n    bytes32 profileId,\\n    bytes32 memberId,\\n    bytes32 typeId\\n  ) external view returns (bool);\\n\\n  function profileMemberGetTypes(bytes32 profileId, bytes32 memberId) external view returns (bytes32[] memory);\\n\\n  function profileMemberGetInfo(bytes32 profileId, bytes32 memberId) external view returns (ProfileMemberInfo memory);\\n}\\n\",\"keccak256\":\"0x0eede94e2540614f8f5827c0dcd472b1a1a24f60621d937392ec265c54cc8df9\",\"license\":\"MIT\"},\"src/contracts/acl/profile/agent/IProfileRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Role Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileRoleManagement is IACLCommons {\\n  struct ProfileRoleRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    int32 memberLimit;\\n  }\\n\\n  struct ProfileRoleGrantMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct ProfileRoleRevokeMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct ProfileRoleUpdateMemberLimitRequest {\\n    bytes32 roleId;\\n    uint24 memberLimit;\\n  }\\n\\n  struct ProfileRoleInfo {\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    bytes32 adminId;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event ProfileRoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 typeId,\\n    bytes32 adminId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfileRoleMemberDeleted(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bytes32 roleId,\\n    bytes32 typeId,\\n    address account\\n  );\\n\\n  event ProfileRoleMemberGranted(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 memberId,\\n    bytes32 typeId\\n  );\\n\\n  event ProfileRoleMemberRevoked(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 memberId,\\n    bytes32 typeId\\n  );\\n\\n  event ProfileRoleMemberLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    uint24 memberLimit\\n  );\\n\\n  event ProfileRoleAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileRoleScopeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfileRoleActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileRoleAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileRoleRemoved(address indexed sender, bytes32 indexed profileId, bytes32 indexed roleId);\\n\\n  function profileRoleRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleGrantMembers(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleGrantMembersRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleRevokeMembers(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleRevokeMembersRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateScope(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateScopeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateMemberLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleUpdateMemberLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata roles)\\n    external\\n    returns (bool);\\n\\n  function profileRoleCheckId(bytes32 profileId, bytes32 roleId) external view returns (bool);\\n\\n  function profileRoleCheckName(bytes32 profileId, string calldata roleName) external view returns (bool);\\n\\n  function profileRoleCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileRoleHasAccount(\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileRoleGetInfo(bytes32 profileId, bytes32 roleId) external view returns (ProfileRoleInfo memory);\\n}\\n\",\"keccak256\":\"0xc3257ac97de5fe7b1223711664d58bb79e0e7bf8c16a96eba61e1ca6c31ed465\",\"license\":\"MIT\"},\"src/contracts/acl/profile/agent/IProfileTypeManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Type Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileTypeManagement is IACLCommons {\\n  struct ProfileTypeRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    int24 roleLimit;\\n  }\\n\\n  struct ProfileTypeUpdateRoleLimitRequest {\\n    bytes32 typeId;\\n    uint16 roleLimit;\\n  }\\n\\n  struct ProfileTypeInfo {\\n    bytes32 scopeId;\\n    bytes32 adminId;\\n    uint16 roleLimit;\\n    uint16 roleCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event ProfileTypeRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    bytes32 scopeId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileTypeActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileTypeAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileTypeRoleLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    uint16 roleLimit\\n  );\\n\\n  event ProfileTypeScopeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfileTypeAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed typeId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileTypeRemoved(address indexed sender, bytes32 indexed profileId, bytes32 indexed typeId);\\n\\n  function profileTypeRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileTypeRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateScope(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateScopeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeUpdateRoleLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileTypeUpdateRoleLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileTypeRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata types)\\n    external\\n    returns (bool);\\n\\n  function profileTypeCheckId(bytes32 profileId, bytes32 typeId) external view returns (bool);\\n\\n  function profileTypeCheckName(bytes32 profileId, string calldata typeName) external view returns (bool);\\n\\n  function profileTypeCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileTypeHasAccount(\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileTypeHasRole(\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    bytes32 roleId\\n  ) external view returns (bool);\\n\\n  function profileTypeGetRoles(bytes32 profileId, bytes32 typeId) external view returns (bytes32[] memory);\\n\\n  function profileTypeGetInfo(bytes32 profileId, bytes32 typeId) external view returns (ProfileTypeInfo memory);\\n}\\n\",\"keccak256\":\"0x1f4b731b0539721268bf6a3bb3efbd137090d64fc95dfa8e1a2e0b96d8227f21\",\"license\":\"MIT\"},\"src/contracts/acl/profile/policy/IProfilePolicyManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Policy Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\n\\ninterface IProfilePolicyManagement is IACLCommons {\\n  struct ProfilePolicyRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    int24 roleLimit;\\n    uint8 policyCode;\\n    string name;\\n  }\\n\\n  struct ProfilePolicyAddRolesRequest {\\n    bytes32 policyId;\\n    bytes32[] roles;\\n  }\\n\\n  struct ProfilePolicyRemoveRolesRequest {\\n    bytes32 policyId;\\n    bytes32[] roles;\\n  }\\n\\n  struct ProfilePolicyUpdateCodeRequest {\\n    bytes32 policyId;\\n    uint8 policyCode;\\n  }\\n\\n  struct ProfilePolicyUpdateRoleLimitRequest {\\n    bytes32 policyId;\\n    uint16 roleLimit;\\n  }\\n\\n  struct ProfilePolicyInfo {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint16 roleCount;\\n    uint8 policyCode;\\n    AgentType adminType;\\n    ScopeType scopeType;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfilePolicyRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed policyId,\\n    bytes32 scopeId,\\n    bytes32 adminId,\\n    uint8 policyCode\\n  );\\n\\n  event ProfilePolicyRoleAdded(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 roleId\\n  );\\n\\n  event ProfilePolicyRoleRemoved(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 roleId\\n  );\\n\\n  event ProfilePolicyActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfilePolicyAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfilePolicyCodeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    uint8 policyCode,\\n    PolicyType ptype\\n  );\\n\\n  event ProfilePolicyRoleLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    uint16 roleLimit\\n  );\\n\\n  event ProfilePolicyAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfilePolicyScopeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfilePolicyRemoved(address indexed sender, bytes32 indexed profieId, bytes32 indexed policyId);\\n\\n  function profilePolicyRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyAddRoles(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyAddRolesRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyRemoveRoles(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyRemoveRolesRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateCodes(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyUpdateCodeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateScope(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateScopeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateRoleLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyUpdateRoleLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata policies)\\n    external\\n    returns (bool);\\n\\n  function profilePolicyCheckId(bytes32 profileId, bytes32 policyId) external view returns (bool);\\n\\n  function profilePolicyCheckName(bytes32 profileId, string calldata policyName) external view returns (bool);\\n\\n  function profilePolicyCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profilePolicyCheckRole(bytes32 profileId, bytes32 roleId) external view returns (bool);\\n\\n  function profilePolicyCheckAccess(\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profilePolicyCheckRoleAccess(\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profilePolicyHasRole(\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    bytes32 roleId\\n  ) external view returns (bool);\\n\\n  function profilePolicyGetInfoByRole(bytes32 profileId, bytes32 roleId)\\n    external\\n    view\\n    returns (ProfilePolicyInfo memory);\\n\\n  function profilePolicyGetInfo(bytes32 profileId, bytes32 policyId) external view returns (ProfilePolicyInfo memory);\\n\\n  function profilePolicyGetRoles(bytes32 profileId, bytes32 policyId) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x9d51bfe8539cc15c01407605d10c5c2656d932b56f8e208683746a17f6051a5e\",\"license\":\"MIT\"},\"src/contracts/acl/profile/scope/IProfileContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Context Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileContextManagement is IACLCommons {\\n  struct ProfileContextRegisterRequest {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address contractId;\\n    address subject;\\n    address deployer;\\n    int16 functionLimit;\\n    bytes signature;\\n  }\\n\\n  struct ProfileContextUpdateFunctionLimitRequest {\\n    bytes32 contextId;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ProfileContextInfo {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    address contractId;\\n    uint8 functionCount;\\n    uint8 functionLimit;\\n    uint32 referredByAgent;\\n    AgentType adminType;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfileContextRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    bytes32 realmId,\\n    bytes32 adminId,\\n    address contractId,\\n    address deployer,\\n    address subject\\n  );\\n\\n  event ProfileContextAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileContextActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileContextAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileContextFunctionLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    uint8 functionLimit\\n  );\\n\\n  event ProfileContextRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed contextId,\\n    bool isSoftDelete\\n  );\\n\\n  function profileContextRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileContextRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextUpdateFunctionLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileContextUpdateFunctionLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileContextRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata contexts)\\n    external\\n    returns (bool);\\n\\n  function profileContextCheckId(bytes32 profileId, bytes32 contextId) external view returns (bool);\\n\\n  function profileContextCheckAccount(bytes32 profileId, address contractId) external view returns (bool);\\n\\n  function profileContextCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 contextId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileContextHasFunction(\\n    bytes32 profileId,\\n    bytes32 contextId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profileContextHasSelector(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external view returns (bool);\\n\\n  function profileContextGetFunctions(bytes32 profileId, bytes32 contextId) external view returns (bytes32[] memory);\\n\\n  function profileContextGetInfo(bytes32 profileId, bytes32 contextId)\\n    external\\n    view\\n    returns (ProfileContextInfo memory);\\n}\\n\",\"keccak256\":\"0xb5f547b020a95d4632815ba580bdcd3ce5e35eb2cf715186e08c370e31323100\",\"license\":\"MIT\"},\"src/contracts/acl/profile/scope/IProfileDomainManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Profile Domain Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\ninterface IProfileDomainManagement is IACLCommons {\\n  struct ProfileDomainRegisterRequest {\\n    bytes32 adminId;\\n    int24 realmLimit;\\n    string name;\\n  }\\n\\n  struct ProfileDomainMoveRealmRequest {\\n    bytes32 domainId;\\n    bytes32 targetDomainId;\\n    bytes32 realmId;\\n  }\\n\\n  struct ProfileDomainUpdateRealmLimitRequest {\\n    bytes32 domainId;\\n    uint16 realmLimit;\\n  }\\n\\n  struct ProfileDomainInfo {\\n    bytes32 adminId;\\n    bytes32 universeId;\\n    uint16 realmLimit;\\n    uint16 realmCount;\\n    uint32 referredByAgent;\\n    ScopeType stype;\\n    AgentType adminType;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event ProfileDomainRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileDomainRealmMoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    bytes32 realmId,\\n    bytes32 newDomainId\\n  );\\n\\n  event ProfileDomainAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileDomainRealmLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    uint16 realmLimit\\n  );\\n\\n  event ProfileDomainActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileDomainAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileDomainRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed domainId,\\n    bool isSoftDeleted\\n  );\\n\\n  function profileDomainRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileDomainRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainMoveRealm(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileDomainMoveRealmRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainUpdateRealmLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileDomainUpdateRealmLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileDomainRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata domains)\\n    external\\n    returns (bool);\\n\\n  function profileDomainCheckId(bytes32 profileId, bytes32 domainId) external view returns (bool);\\n\\n  function profileDomainCheckName(bytes32 profileId, string calldata domainName) external view returns (bool);\\n\\n  function profileDomainCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 domainId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileDomainHasFunction(\\n    bytes32 profileId,\\n    bytes32 domainId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profileDomainHasContext(\\n    bytes32 profileId,\\n    bytes32 domainId,\\n    bytes32 contextId\\n  ) external view returns (bool);\\n\\n  function profileDomainHasRealm(\\n    bytes32 profileId,\\n    bytes32 domainId,\\n    bytes32 realmId\\n  ) external view returns (bool);\\n\\n  function profileDomainGetRealms(bytes32 profileId, bytes32 domainId) external view returns (bytes32[] memory);\\n\\n  function profileDomainGetInfo(bytes32 profileId, bytes32 domainId) external view returns (ProfileDomainInfo memory);\\n}\\n\",\"keccak256\":\"0xca2fccdacbc85bb94aed9f9f9cb7a91d89ee3d970480e760e8524ac8947e0d59\",\"license\":\"MIT\"},\"src/contracts/acl/profile/scope/IProfileFunctionManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Function Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileFunctionManagement is IACLCommons {\\n  struct ProfileFunctionRegisterRequest {\\n    bytes signature;\\n    bytes32 realmId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address subject;\\n    address deployer;\\n    address contractId;\\n    ProfileFunctionRequest[] functions;\\n  }\\n\\n  struct ProfileFunctionRequest {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n  }\\n\\n  struct ProfileFunctionUpdatePolicyRequest {\\n    bytes32 functionId;\\n    uint8 policyCode;\\n  }\\n\\n  struct ProfileFunctionUpdateAgentRequest {\\n    bytes32 functionId;\\n    bytes32 agentId;\\n  }\\n\\n  struct ProfileFunctionInfo {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint32 referredByAgent;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    AgentType adminType;\\n    AgentType agentType;\\n    uint8 policyCode;\\n  }\\n\\n  event ProfileFunctionRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    bytes32 contextId,\\n    bytes32 adminId,\\n    bytes32 agentId\\n  );\\n\\n  event ProfileFunctionAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileFunctionAgentUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    bytes32 agentId\\n  );\\n\\n  event ProfileFunctionActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileFunctionAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileFunctionPolicyUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    uint8 policyCode\\n  );\\n\\n  event ProfileFunctionRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed functionId,\\n    bool isSoftDeleted\\n  );\\n\\n  function profileFunctionRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileFunctionRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdateAgent(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileFunctionUpdateAgentRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionUpdatePolicyCode(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileFunctionUpdatePolicyRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileFunctionRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata functions)\\n    external\\n    returns (bool);\\n\\n  function profileFunctionCheckId(bytes32 profileId, bytes32 functionId) external view returns (bool);\\n\\n  function profileFunctionCheckSelector(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external view returns (bool);\\n\\n  function profileFunctionCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileFunctionCheckAgent(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileFunctionGetInfo(bytes32 profileId, bytes32 functionId)\\n    external\\n    view\\n    returns (ProfileFunctionInfo memory);\\n}\\n\",\"keccak256\":\"0xcfd8191982b7b5679b9c06cf890331cd86e89ba81bbaa5ccb8afde9ac4cb8191\",\"license\":\"MIT\"},\"src/contracts/acl/profile/scope/IProfileRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Realm Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\n\\ninterface IProfileRealmManagement is IACLCommons {\\n  struct ProfileRealmRegisterRequest {\\n    bytes32 domainId;\\n    bytes32 adminId;\\n    int64 contextLimit;\\n    string name;\\n  }\\n\\n  struct ProfileRealmMoveContextRequest {\\n    bytes32 realmId;\\n    bytes32 targetRealmId;\\n    bytes32 contextId;\\n  }\\n\\n  struct ProfileRealmUpdateContextLimitRequest {\\n    bytes32 realmId;\\n    uint32 contextLimit;\\n  }\\n\\n  struct ProfileRealmInfo {\\n    bytes32 domainId;\\n    bytes32 adminId;\\n    uint32 contextLimit;\\n    uint32 contextCount;\\n    uint32 referredByAgent;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    AgentType adminType;\\n    string name;\\n  }\\n\\n  event ProfileRealmRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    bytes32 domainId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileRealmContextMoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    bytes32 contextId,\\n    bytes32 newRealmId\\n  );\\n\\n  event ProfileRealmAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileRealmContextLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    uint32 contextLimit\\n  );\\n\\n  event ProfileRealmActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileRealmAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileRealmRemoved(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed realmId,\\n    bool isSoftDeleted\\n  );\\n\\n  function profileRealmRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRealmRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmMoveContext(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRealmMoveContextRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmUpdateContextLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRealmUpdateContextLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRealmRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata realms)\\n    external\\n    returns (bool);\\n\\n  function profileRealmCheckId(bytes32 profileId, bytes32 realmId) external view returns (bool);\\n\\n  function profileRealmCheckName(bytes32 profileId, string calldata realmName) external view returns (bool);\\n\\n  function profileRealmCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 realmId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileRealmHasFunction(\\n    bytes32 profileId,\\n    bytes32 realmId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profileRealmHasContext(\\n    bytes32 profileId,\\n    bytes32 realmId,\\n    bytes32 contextId\\n  ) external view returns (bool);\\n\\n  function profileRealmGetContexts(bytes32 profileId, bytes32 realmId) external view returns (bytes32[] memory);\\n\\n  function profileRealmGetInfo(bytes32 profileId, bytes32 realmId) external view returns (ProfileRealmInfo memory);\\n}\\n\",\"keccak256\":\"0xa7684f1c01772607b6c210d018be3ef089381910cc9f51e653233d7353ced074\",\"license\":\"MIT\"},\"src/contracts/acl/profile/scope/ProfileFunctionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IProfileFunctionManagement.sol\\\";\\nimport \\\"../IProfileACL.sol\\\";\\nimport \\\"../IProfileACLGenerals.sol\\\";\\nimport \\\"../ProfileAccessControl.sol\\\";\\nimport \\\"../../ACLStorage.sol\\\";\\nimport \\\"../../../lib/acl/LProfileStorage.sol\\\";\\nimport \\\"../../../lib/acl/LACLStorage.sol\\\";\\nimport \\\"../../../lib/cryptography/LECDSA.sol\\\";\\nimport \\\"../../../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../../../lib/acl/LACLUtils.sol\\\";\\nimport \\\"../../../lib/acl/LProfileCommons.sol\\\";\\nimport \\\"../../../lib/proxy/LClones.sol\\\";\\nimport \\\"../../../proxy/IProxy.sol\\\";\\nimport \\\"../../../proxy/BaseUUPSProxy.sol\\\";\\n\\n/**\\n * @title Function Manager Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ncontract ProfileFunctionManager is ACLStorage, BaseUUPSProxy, IProfileFunctionManagement {\\n  using LACLStorage for DataCollection;\\n  using LProfileStorage for ProfileEntity;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LClones for address;\\n\\n  constructor() {}\\n\\n  function initialize(\\n    string calldata contractName,\\n    string calldata contractVersion,\\n    address accessControlManager\\n  ) public onlyProxy onlyLocalAdmin initializer {\\n    __BASE_UUPS_init(contractName, contractVersion, accessControlManager);\\n\\n    emit Initialized(\\n      _msgSender(),\\n      address(this),\\n      _implementation(),\\n      contractName,\\n      contractVersion,\\n      _getInitializedCount()\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IProfileFunctionManagement).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  function profileFunctionRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileFunctionRegisterRequest[] calldata requests\\n  ) external returns (bool) {\\n    require(IProxy(address(this)).safeModeStatus() == IBaseProxy.ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(bytes(memberSign.profileName).length > 0, \\\"Illegal ProfileName\\\");\\n    bytes32 profileId = LACLUtils.generateId(memberSign.profileName);\\n\\n    address signer;\\n    if (memberSign.signature.length > 0) {\\n      require(memberSign.expiredAt > block.timestamp, \\\"Expired Signature\\\");\\n      signer = LACLUtils.getProfileMemeberSignerAddress(memberSign, PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH);\\n    } else {\\n      signer = msg.sender;\\n    }\\n\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      address contractId;\\n      if (requests[i].contractId == address(0)) {\\n        if (memberSign.signature.length == 0) {\\n          if (requests[i].signature.length > 0) {\\n            signer = _doGetSignerAddress(\\n              requests[i].signature,\\n              _getPredictContextMessageHash(profileId, requests[i].deployer, requests[i].subject, requests[i].realmId)\\n            );\\n          } else {\\n            signer = msg.sender;\\n          }\\n        }\\n\\n        contractId = requests[i].subject.predictDeterministicAddress(requests[i].salt, requests[i].deployer);\\n      } else {\\n        if (memberSign.signature.length == 0) {\\n          if (requests[i].signature.length > 0) {\\n            bytes32 structHash = _getContextMessageHash(\\n              profileId,\\n              requests[i].contractId,\\n              LACLUtils.generateHash(requests[i].name),\\n              LACLUtils.generateHash(requests[i].version),\\n              requests[i].realmId\\n            );\\n            signer = _doGetSignerAddress(requests[i].signature, structHash);\\n          } else {\\n            signer = msg.sender;\\n          }\\n        }\\n        contractId = requests[i].contractId;\\n      }\\n\\n      bytes32 contextId = LACLUtils.accountGenerateId(contractId);\\n      bytes32 signerId = LACLUtils.accountGenerateId(signer);\\n\\n      ProfileEntity storage profileEntity = _data.profiles[profileId];\\n      {\\n        address functionFacetId = _data.selectors[IProfileFunctionManagement.profileFunctionRegister.selector];\\n        bytes32 functionId = LACLUtils.functionGenerateId(\\n          functionFacetId,\\n          IProfileFunctionManagement.profileFunctionRegister.selector\\n        );\\n        ProfileAccessControl(payable(address(this))).profileAclHasMemberAccess(profileId, functionId, signerId);\\n      }\\n\\n      LProfileCommons.profileCheckMemberForFunctionRegister(\\n        profileEntity,\\n        uint16(requests[i].functions.length),\\n        signerId\\n      );\\n\\n      // check access system scope\\n      require(_doCheckSystemScope(profileEntity, contextId, signerId, profileId), \\\"Forbidden\\\");\\n\\n      _doProfileFunctionRegister(profileEntity, requests[i], profileId, contextId, signer);\\n    }\\n    return true;\\n  }\\n\\n  function profileFunctionUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileFunctionManagement.profileFunctionUpdateAdmin.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      FunctionEntity storage functionData = _doGetEntityAndCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        requests[i].entityId,\\n        senderId\\n      );\\n      functionData.bs.adminId = _doGetAndCheckFunctionAdmin(\\n        profileEntity,\\n        profileEntity.scopes[functionEntity.contextId].adminId,\\n        functionData.contextId,\\n        requests[i].adminId,\\n        profileId\\n      );\\n      emit ProfileFunctionAdminUpdated(sender, profileId, requests[i].entityId, requests[i].adminId);\\n    }\\n    return true;\\n  }\\n\\n  function profileFunctionUpdateAgent(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileFunctionUpdateAgentRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileFunctionManagement.profileFunctionUpdateAgent.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      FunctionEntity storage functionData = _doGetEntityAndCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        requests[i].functionId,\\n        senderId\\n      );\\n      _doCheckAgentId(profileEntity, profileId, requests[i].agentId, functionData.contextId);\\n      functionData.agentId = requests[i].agentId;\\n      emit ProfileFunctionAgentUpdated(sender, profileId, requests[i].functionId, requests[i].agentId);\\n    }\\n    return true;\\n  }\\n\\n  function profileFunctionUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileFunctionManagement.profileFunctionUpdateActivityStatus.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      FunctionEntity storage functionData = profileEntity.profileFunctionReadSlot(requests[i].entityId);\\n      require(functionData.bs.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Updatable\\\");\\n\\n      IProfileACL.ProfileAdminAccessStatus status = _doCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        functionData.bs.adminId,\\n        senderId\\n      );\\n      if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n\\n      require(requests[i].acstat > ActivityStatus.DELETED, \\\"Illegal Activity\\\");\\n      functionData.bs.acstat = requests[i].acstat;\\n      emit ProfileFunctionActivityUpdated(sender, profileId, requests[i].entityId, requests[i].acstat);\\n    }\\n    return true;\\n  }\\n\\n  function profileFunctionUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileFunctionManagement.profileFunctionUpdateAlterabilityStatus.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      FunctionEntity storage functionData = profileEntity.profileFunctionReadSlot(requests[i].entityId);\\n      require(functionData.bs.acstat > ActivityStatus.DELETED, \\\"Function Deleted\\\");\\n\\n      IProfileACL.ProfileAdminAccessStatus status = _doCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        functionData.bs.adminId,\\n        senderId\\n      );\\n      if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n\\n      require(requests[i].alstat != AlterabilityStatus.NONE, \\\"Illegal Alterability\\\");\\n      functionData.bs.alstat = requests[i].alstat;\\n      emit ProfileFunctionAlterabilityUpdated(sender, profileId, requests[i].entityId, requests[i].alstat);\\n    }\\n    return true;\\n  }\\n\\n  function profileFunctionUpdatePolicyCode(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileFunctionUpdatePolicyRequest[] calldata requests\\n  ) external returns (bool) {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileFunctionManagement.profileFunctionUpdatePolicyCode.selector);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      FunctionEntity storage functionEntityData = _doGetEntityAndCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        requests[i].functionId,\\n        senderId\\n      );\\n      functionEntityData.policyCode = requests[i].policyCode;\\n      emit ProfileFunctionPolicyUpdated(sender, profileId, requests[i].functionId, requests[i].policyCode);\\n    }\\n    return true;\\n  }\\n\\n  function profileFunctionRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata functions)\\n    external\\n    returns (bool)\\n  {\\n    (\\n      ProfileEntity storage profileEntity,\\n      FunctionEntity storage functionEntity,\\n      bytes32 profileId,\\n      bytes32 senderId,\\n      address sender\\n    ) = _accessPermission(memberSign, IProfileFunctionManagement.profileFunctionRemove.selector);\\n    for (uint256 i = 0; i < functions.length; i++) {\\n      FunctionEntity storage functionEntityReq = profileEntity.profileFunctionReadSlot(functions[i]);\\n      IProfileACL.ProfileAdminAccessStatus status = _doCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        functionEntityReq.bs.adminId,\\n        senderId\\n      );\\n      if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n\\n      if (functionEntityReq.bs.referredByAgent == 0) {\\n        ContextEntity storage contextEntity = profileEntity.profileContextReadSlot(functionEntityReq.contextId);\\n        require(contextEntity.bs.alstat == AlterabilityStatus.UPGRADABLE, \\\"Illegal Context Upgradable\\\");\\n        contextEntity.functions.remove(functions[i]);\\n\\n        delete functionEntityReq.bs;\\n        delete functionEntityReq.agentId;\\n        delete functionEntityReq.contextId;\\n        delete functionEntityReq.selector;\\n        delete functionEntityReq.policyCode;\\n        emit ProfileFunctionRemoved(sender, profileId, functions[i], false);\\n      } else {\\n        // Note: It's very important to prevent infinity lock state\\n        require(functionEntityReq.bs.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Updatable\\\");\\n        functionEntityReq.bs.acstat = ActivityStatus.DELETED;\\n        emit ProfileFunctionRemoved(sender, profileId, functions[i], true);\\n      }\\n    }\\n    return true;\\n  }\\n\\n  function profileFunctionCheckId(bytes32 profileId, bytes32 functionId) external view returns (bool) {\\n    return _data.profiles[profileId].scopes[functionId].stype == ScopeType.FUNCTION;\\n  }\\n\\n  function profileFunctionCheckSelector(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external view returns (bool) {\\n    return\\n      _data.profiles[profileId].scopes[LACLUtils.functionGenerateId(contractId, selector)].stype == ScopeType.FUNCTION;\\n  }\\n\\n  function profileFunctionCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    address account\\n  ) external view returns (bool) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat == ActivityStatus.NONE) return false;\\n    (FunctionEntity storage fe, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return false;\\n\\n    return _doFunctionCheckAccount(profileEntity, fe.bs.adminId, account);\\n  }\\n\\n  function profileFunctionCheckAgent(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    address account\\n  ) external view returns (bool) {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    if (profileEntity.acstat == ActivityStatus.NONE) return false;\\n    (FunctionEntity storage fe, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result) return false;\\n\\n    return _doFunctionCheckAccount(profileEntity, fe.agentId, account);\\n  }\\n\\n  function _doFunctionCheckAccount(\\n    ProfileEntity storage profileEntity,\\n    bytes32 agentId,\\n    address account\\n  ) internal view returns (bool) {\\n    AgentType agentType = profileEntity.agents[agentId].atype;\\n    bytes32 memberId = LACLUtils.accountGenerateId(account);\\n\\n    if (agentType == AgentType.ROLE) {\\n      (RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(agentId);\\n      if (!result) return false;\\n\\n      (TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(roleEntity.typeId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] == agentId;\\n    } else if (agentType == AgentType.TYPE) {\\n      (TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(agentId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] != bytes32(0);\\n    }\\n\\n    return false;\\n  }\\n\\n  function profileFunctionGetInfo(bytes32 profileId, bytes32 functionId)\\n    external\\n    view\\n    returns (ProfileFunctionInfo memory)\\n  {\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    (FunctionEntity storage fe, bool result) = profileEntity.profileFunctionTryReadSlot(functionId);\\n    if (!result || profileEntity.acstat == ActivityStatus.NONE) {\\n      return\\n        ProfileFunctionInfo({\\n          adminId: bytes32(0),\\n          agentId: bytes32(0),\\n          contextId: bytes32(0),\\n          selector: bytes4(0),\\n          referredByAgent: 0,\\n          stype: ScopeType.NONE,\\n          acstat: ActivityStatus.NONE,\\n          alstat: AlterabilityStatus.NONE,\\n          adminType: AgentType.NONE,\\n          agentType: AgentType.NONE,\\n          policyCode: 0\\n        });\\n    }\\n\\n    return\\n      ProfileFunctionInfo({\\n        adminId: fe.bs.adminId,\\n        agentId: fe.agentId,\\n        contextId: fe.contextId,\\n        selector: fe.selector,\\n        referredByAgent: fe.bs.referredByAgent,\\n        stype: fe.bs.stype,\\n        acstat: fe.bs.acstat,\\n        alstat: fe.bs.alstat,\\n        adminType: profileEntity.agents[fe.bs.adminId].atype,\\n        agentType: profileEntity.agents[fe.agentId].atype,\\n        policyCode: fe.policyCode\\n      });\\n  }\\n\\n  function _doGetAgentScopeInfo(ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (ScopeType, bytes32)\\n  {\\n    AgentType atype = profileEntity.agents[agentId].atype;\\n    if (atype == AgentType.ROLE) {\\n      RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(agentId);\\n      BaseScope storage baseScope = profileEntity.scopes[roleEntity.scopeId];\\n      return (baseScope.stype, roleEntity.scopeId);\\n    } else if (atype == AgentType.TYPE) {\\n      TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(agentId);\\n      BaseScope storage baseScope = profileEntity.scopes[typeEntity.scopeId];\\n      return (baseScope.stype, typeEntity.scopeId);\\n    }\\n\\n    return (ScopeType.NONE, bytes32(0));\\n  }\\n\\n  function _doCheckAdminAccess(\\n    ProfileEntity storage profileEntity,\\n    FunctionEntity storage functionEntity,\\n    bytes32 adminId,\\n    bytes32 senderId\\n  ) internal view returns (IProfileACL.ProfileAdminAccessStatus) {\\n    return LProfileCommons.profileCheckAdminAccess(profileEntity, functionEntity, adminId, senderId);\\n  }\\n\\n  function _accessPermission(ProfileMemberSignature calldata memberSign, bytes4 selector)\\n    internal\\n    returns (\\n      ProfileEntity storage,\\n      FunctionEntity storage,\\n      bytes32,\\n      bytes32,\\n      address\\n    )\\n  {\\n    require(IProxy(address(this)).safeModeStatus() == IBaseProxy.ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(bytes(memberSign.profileName).length > 0, \\\"Illegal ProfileName\\\");\\n\\n    address signer;\\n\\n    if (memberSign.signature.length > 0) {\\n      require(memberSign.expiredAt > block.timestamp, \\\"Expired Signature\\\");\\n      signer = LACLUtils.getProfileMemeberSignerAddress(memberSign, PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH);\\n    } else {\\n      signer = msg.sender;\\n    }\\n\\n    bytes32 profileId = LACLUtils.generateId(memberSign.profileName);\\n    address functionFacetId = _data.selectors[selector];\\n    bytes32 functionId = LACLUtils.functionGenerateId(functionFacetId, selector);\\n    bytes32 senderId = LACLUtils.accountGenerateId(signer);\\n\\n    ProfileAccessControl(payable(address(this))).profileAclHasMemberAccess(profileId, functionId, senderId);\\n\\n    ProfileEntity storage profileEntity = _data.profiles[profileId];\\n    FunctionEntity storage functionEntity = _data.functionReadSlot(functionId);\\n    return (profileEntity, functionEntity, profileId, senderId, signer);\\n  }\\n\\n  function _doGetEntityAndCheckAdminAccess(\\n    ProfileEntity storage profileEntity,\\n    FunctionEntity storage functionEntity,\\n    bytes32 fId,\\n    bytes32 senderId\\n  ) internal view returns (FunctionEntity storage) {\\n    FunctionEntity storage functionEntityData = profileEntity.profileFunctionReadSlot(fId);\\n    require(functionEntityData.bs.acstat > ActivityStatus.DELETED, \\\"Function Deleted\\\");\\n    require(functionEntityData.bs.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Updatable\\\");\\n    IProfileACL.ProfileAdminAccessStatus status = _doCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      functionEntityData.bs.adminId,\\n      senderId\\n    );\\n    if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n    return functionEntityData;\\n  }\\n\\n  function _doGetAndCheckFunctionAdmin(\\n    ProfileEntity storage profileEntity,\\n    bytes32 contextAdminId,\\n    bytes32 contextId,\\n    bytes32 adminId,\\n    bytes32 profileId\\n  ) internal view returns (bytes32 functionAdminId) {\\n    return\\n      LProfileCommons.profileGetAndCheckFunctionAdmin(profileEntity, contextAdminId, contextId, adminId, profileId);\\n  }\\n\\n  function _getContextMessageHash(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes32 name,\\n    bytes32 version,\\n    bytes32 realmId\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(PROFILE_CTX_MESSAGE_TYPEHASH, profileId, contractId, name, version, realmId));\\n  }\\n\\n  function _doCheckAgentId(\\n    ProfileEntity storage profileEntity,\\n    bytes32 profileId,\\n    bytes32 agentId,\\n    bytes32 contextId\\n  ) internal view {\\n    BaseAgent storage ba = profileEntity.agents[agentId];\\n    require(ba.atype > AgentType.MEMBER, \\\"Illegal AgentId\\\");\\n\\n    (ScopeType requestAgentScopeType, bytes32 requestAgentScopeId) = _doGetAgentScopeInfo(profileEntity, agentId);\\n    require(ScopeType.CONTEXT <= requestAgentScopeType, \\\"Illegal Agent ScopeType\\\");\\n    if (ScopeType.CONTEXT == requestAgentScopeType) {\\n      require(requestAgentScopeId == contextId, \\\"Illegal Agent Scope\\\");\\n    } else {\\n      require(\\n        IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, requestAgentScopeId, contextId),\\n        \\\"Illegal Agent Scope\\\"\\n      );\\n    }\\n  }\\n\\n  function _doGetSignerAddress(bytes memory signature, bytes32 structHash) internal view returns (address) {\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal Signature\\\");\\n    return msgSigner;\\n  }\\n\\n  function _getPredictContextMessageHash(\\n    bytes32 profileId,\\n    address deployer,\\n    address subject,\\n    bytes32 realmId\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH, profileId, deployer, subject, realmId));\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(IProxy(address(this)).domainSeparator(), structHash);\\n  }\\n\\n  function _doCheckSystemScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 scopeId,\\n    bytes32 memberId,\\n    bytes32 profileId\\n  ) private view returns (bool) {\\n    IACLCommons.TypeEntity storage systemType = profileEntity.profileTypeReadSlot(\\n      _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID\\n    );\\n    bytes32 memberRoleId = systemType.members[memberId];\\n    IACLCommons.RoleEntity storage memberSystemRole = profileEntity.profileRoleReadSlot(memberRoleId);\\n    if (profileEntity.scopes[memberSystemRole.scopeId].stype < IACLCommons.ScopeType.CONTEXT) return false;\\n    if (memberSystemRole.scopeId == scopeId) {\\n      return true;\\n    }\\n\\n    return IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, memberSystemRole.scopeId, scopeId);\\n  }\\n\\n  function _doProfileFunctionRegister(\\n    ProfileEntity storage profileEntity,\\n    ProfileFunctionRegisterRequest calldata request,\\n    bytes32 profileId,\\n    bytes32 contextId,\\n    address signer\\n  ) internal {\\n    for (uint256 j = 0; j < request.functions.length; j++) {\\n      bytes32 functionId = LProfileCommons.profileFunctionRegistration(\\n        profileEntity,\\n        request.functions[j],\\n        profileId,\\n        contextId\\n      );\\n      emit ProfileFunctionRegistered(\\n        signer,\\n        profileId,\\n        contextId,\\n        functionId,\\n        request.functions[j].adminId,\\n        request.functions[j].agentId\\n      );\\n    }\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LProfileCommons);\\n  }\\n}\\n\",\"keccak256\":\"0xb554817e15503bfe7a592a8268ce1530b48c91b2de8a7bf548350d4b55da989a\",\"license\":\"MIT\"},\"src/contracts/acl/scope/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Context Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IContextManagement is IACLCommons {\\n  struct ContextRegisterRequest {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address contractId;\\n    address subject;\\n    address deployer;\\n    int16 functionLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    bytes signature;\\n  }\\n\\n  struct ContextUpdateFunctionLimitRequest {\\n    bytes32 contextId;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ContextInfo {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    address contractId;\\n    uint8 functionCount;\\n    uint8 functionLimit;\\n    uint32 referredByAgent;\\n    AgentType adminType;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ContextRegistered(\\n    address indexed sender,\\n    bytes32 indexed contextId,\\n    address indexed contractId,\\n    bytes32 realmId,\\n    address deployer,\\n    address subject,\\n    bytes32 adminId\\n  );\\n\\n  event ContextAdminUpdated(address indexed sender, bytes32 indexed contextId, bytes32 indexed adminId);\\n\\n  event ContextActivityUpdated(address indexed sender, bytes32 indexed contextId, ActivityStatus acstat);\\n\\n  event ContextAlterabilityUpdated(address indexed sender, bytes32 indexed contextId, AlterabilityStatus alstat);\\n\\n  event ContextFunctionLimitUpdated(address indexed sender, bytes32 indexed contextId, uint8 functionLimit);\\n\\n  event ContextRemoved(address indexed sender, bytes32 indexed contextId, bool isSoftDelete);\\n\\n  function contextRegister(MemberSignature calldata memberSign, ContextRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateFunctionLimit(\\n    MemberSignature calldata memberSign,\\n    ContextUpdateFunctionLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextRemove(MemberSignature calldata memberSign, bytes32[] calldata contexts) external returns (bool);\\n\\n  function contextCheckId(bytes32 contextId) external view returns (bool);\\n\\n  function contextCheckAccount(address contractId) external view returns (bool);\\n\\n  function contextCheckAdmin(bytes32 contextId, address account) external view returns (bool);\\n\\n  function contextHasFunction(bytes32 contextId, bytes32 functionId) external view returns (bool);\\n\\n  function contextHasSelector(address contractId, bytes4 selector) external view returns (bool);\\n\\n  function contextGetFunctions(bytes32 contextId) external view returns (bytes32[] memory);\\n\\n  function contextGetInfo(bytes32 contextId) external view returns (ContextInfo memory);\\n}\\n\",\"keccak256\":\"0x3db7b4eaff9522c669111ec8e268f603b57da7b4c0846d3d6ffb74d9f9a07f08\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  function isContract2(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-universe-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb46e5ff7d2a40ad64a6ca16bf560fef69391201577931c8c0b8395292014035e\",\"license\":\"MIT\"},\"src/contracts/lib/LStorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary LStorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfe230bd4ca404541c3f9b857b24b92ed65ca09a1cbfc6222e8c308e131eca256\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0xf6b56daea1f2692628dff63bd57ff8ad0bc38ecbc34887db37a8305162ce1394\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLStorage {\\n  function universeReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function universeWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function functionReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fc.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function functionWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1db1476a40cb3e0912d1c07d6ed6c1e9171f6960014e49b66e3532610c80bb6d\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\n\\n/**\\n * @title Context Utils Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLUtils {\\n  function functionGenerateId(address contractId, bytes4 selector) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId, selector));\\n  }\\n\\n  function accountGenerateId(address account) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(account));\\n  }\\n\\n  function generateId(string calldata name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateId2(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateHash(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function getMemeberSignerAddress(IACLCommons.MemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateMemberSignMsgHash(msgTypeHash, memberSign.account, memberSign.expiredAt)\\n      );\\n  }\\n\\n  function getProfileMemeberSignerAddress(IACLCommons.ProfileMemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateProfileMemberSignMsgHash(\\n          msgTypeHash,\\n          generateId(memberSign.profileName),\\n          memberSign.account,\\n          memberSign.expiredAt\\n        )\\n      );\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) private view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(IProxy(address(this)).domainSeparator(), structHash);\\n  }\\n\\n  function _generateMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, account, expiredAt));\\n  }\\n\\n  function _generateProfileMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    bytes32 profileName,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, profileName, account, expiredAt));\\n  }\\n\\n  function getSignerAddress(bytes memory signature, bytes32 structHash) internal view returns (address) {\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal Signature\\\");\\n    return msgSigner;\\n  }\\n\\n  function generateAuthorizationError(IACL.AuthorizationStatus status) internal pure {\\n    if (status == IACL.AuthorizationStatus.UNAUTHORIZED) revert IACL.ACLUnauthorized();\\n    else if (status == IACL.AuthorizationStatus.POLICY_FORBIDDEN) revert IACL.ACLPolicyForbidden();\\n    else if (status == IACL.AuthorizationStatus.CALL_FORBIDDEN) revert IACL.ACLCallForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_SCOPE_FORBIDDEN) revert IACL.ACLRoleScopeForbidden();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_NOT_FOUND) revert IACL.ACLMemberNotFound();\\n    else if (status == IACL.AuthorizationStatus.ROLE_NOT_FOUND) revert IACL.ACLRoleNotFound();\\n    else if (status == IACL.AuthorizationStatus.TYPE_NOT_FOUND) revert IACL.ACLTypeNotFound();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_NOT_FOUND) revert IACL.ACLFunctionNotFound();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_NOT_FOUND) revert IACL.ACLContextNotFound();\\n    else if (status == IACL.AuthorizationStatus.REALM_NOT_FOUND) revert IACL.ACLRealmNotFound();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_NOT_FOUND) revert IACL.ACLDomainNotFound();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN) revert IACL.ACLMemberActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.ACLRoleActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.ACLTypeActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN) revert IACL.ACLFunctionActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN) revert IACL.ACLContextActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.REALM_ACTIVITY_FORBIDDEN) revert IACL.ACLRealmActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN) revert IACL.ACLDomainActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN) revert IACL.ACLUniverseActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAuthorizationError(IProfileACL.ProfileAuthorizationStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAuthorizationStatus.UNAUTHORIZED) revert IProfileACL.ProfileACLUnauthorized();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleScopeForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_NOT_FOUND)\\n      revert IProfileACL.ProfileACLMemberNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRoleNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLTypeNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileACLFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_NOT_FOUND)\\n      revert IProfileACL.ProfileACLContextNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRealmNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_NOT_FOUND)\\n      revert IProfileACL.ProfileACLDomainNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLTypeActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLFunctionActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLContextActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRealmActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLDomainActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLUniverseActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLProfileActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAdminAccessError(IProfileACL.ProfileAdminAccessStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED)\\n      revert IProfileACL.ProfileAdminAccessNotPermitted();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessRoleNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessTypeNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateAdminAccessError(IACL.AdminAccessStatus status) internal pure {\\n    if (status == IACL.AdminAccessStatus.NOT_PERMITTED) revert IACL.AdminAccessNotPermitted();\\n    else if (status == IACL.AdminAccessStatus.POLICY_FORBIDDEN) revert IACL.AdminAccessPolicyForbidden();\\n    else if (status == IACL.AdminAccessStatus.ROLE_NOT_FOUND) revert IACL.AdminAccessRoleNotFound();\\n    else if (status == IACL.AdminAccessStatus.TYPE_NOT_FOUND) revert IACL.AdminAccessTypeNotFound();\\n    else if (status == IACL.AdminAccessStatus.FUNCTION_NOT_FOUND) revert IACL.AdminAccessFunctionNotFound();\\n    else if (status == IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessRoleActivityForbidden();\\n    else if (status == IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x0a1ead86733fdae5c48faf98479dea608f2a5743722b7d458981c33ff13489c1\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LProfileCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./LACLUtils.sol\\\";\\nimport \\\"./LProfileStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/ProfileAccessControl.sol\\\";\\nimport \\\"../../acl/profile/IProfileACLGenerals.sol\\\";\\nimport \\\"../../acl/profile/IProfileManagement.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../proxy/IERC1822.sol\\\";\\nimport \\\"../../utils/IERC165.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/profile/scope/IProfileContextManagement.sol\\\";\\nimport \\\"../../acl/profile/scope/IProfileFunctionManagement.sol\\\";\\nimport \\\"../../acl/profile/scope/IProfileRealmManagement.sol\\\";\\nimport \\\"../../acl/profile/scope/IProfileDomainManagement.sol\\\";\\nimport \\\"../../acl/profile/agent/IProfileMemberManagement.sol\\\";\\n\\n/**\\n * @title Profile Commons Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LProfileCommons {\\n  using LProfileStorage for IACLCommons.ProfileEntity;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  string public constant LIB_NAME = \\\"LProfileCommons\\\";\\n  string public constant LIB_VERSION = \\\"3.0.0\\\";\\n\\n  bytes32 public constant LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 public constant LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER_ADMIN\\\"));\\n\\n  function profileCheckAdminAccess(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 adminId,\\n    bytes32 senderId\\n  ) external view returns (IProfileACL.ProfileAdminAccessStatus) {\\n    return _doProfileCheckAdminAccess(profileEntity, functionEntity, adminId, senderId);\\n  }\\n\\n  function profileAgentGetScopeInfo(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    external\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    return _doGetAgentScopeInfo(profileEntity, agentId);\\n  }\\n\\n  function profileRegisterContext(\\n    ACLStorage.DataCollection storage data,\\n    IProfileContextManagement.ProfileContextRegisterRequest calldata request,\\n    bytes32 profileId,\\n    address contractId,\\n    address signer\\n  ) external returns (bytes32) {\\n    bytes32 functionId = LACLUtils.functionGenerateId(\\n      data.selectors[IProfileContextManagement.profileContextRegister.selector],\\n      IProfileContextManagement.profileContextRegister.selector\\n    );\\n    bytes32 signerId = LACLUtils.accountGenerateId(signer);\\n    bytes32 newContextId = LACLUtils.accountGenerateId(contractId);\\n\\n    {\\n      IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n      ProfileAccessControl(payable(address(this))).profileAclHasMemberAccess(profileId, functionId, signerId);\\n      require(profileEntity.scopes[newContextId].stype == IACLCommons.ScopeType.NONE, \\\"Already Exist\\\");\\n\\n      // check profile and type limitations and update it\\n      IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(signerId);\\n      require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n      require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n      require(profileMemberEntity.registerLimits.contextRegisterLimit > 0, \\\"Illegal Member ContextRegisterLimit\\\");\\n      require(profileEntity.registerLimits.contextRegisterLimit > 0, \\\"Illegal Profile ContextRegisterLimit\\\");\\n      unchecked {\\n        profileMemberEntity.registerLimits.contextRegisterLimit -= 1;\\n        profileEntity.registerLimits.contextRegisterLimit -= 1;\\n      }\\n\\n      // check realm\\n      IACLCommons.RealmEntity storage realmEntity = profileEntity.profileRealmReadSlot(request.realmId);\\n      require(realmEntity.bs.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Realm Updatable\\\");\\n      require(realmEntity.contextLimit > realmEntity.contexts.length(), \\\"Illegal Register\\\");\\n\\n      // check system scope\\n      require(_doCheckContextSystemScope(profileEntity, request.realmId, signerId, profileId), \\\"Forbidden\\\");\\n\\n      // add context to realm\\n      realmEntity.contexts.add(newContextId);\\n\\n      // create new context\\n      IACLCommons.ContextEntity storage newContext = profileEntity.profileContextWriteSlot(newContextId);\\n      newContext.realmId = request.realmId;\\n      newContext.contractId = contractId;\\n      newContext.functionLimit = request.functionLimit >= 0\\n        ? uint8(uint16(request.functionLimit))\\n        : profileEntity.limits.functionLimit;\\n      newContext.bs.stype = IACLCommons.ScopeType.CONTEXT;\\n      newContext.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      newContext.bs.alstat = IACLCommons.AlterabilityStatus.UPGRADABLE;\\n      newContext.bs.adminId = _doGetContextAdmin(\\n        profileEntity,\\n        request,\\n        profileId,\\n        newContextId,\\n        realmEntity.bs.adminId\\n      );\\n    }\\n\\n    return newContextId;\\n  }\\n\\n  function profileCheckMemberForDomainRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    uint16 requestLength,\\n    bytes32 senderId\\n  ) external {\\n    // check profile and type limitations and update it\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(uint32(profileMemberEntity.registerLimits.domainRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Member DomainRegisterLimit\\\"\\n      );\\n      require(\\n        int32(uint32(profileEntity.registerLimits.domainRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile DomainRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.domainRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.domainRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileCheckMemberForFunctionRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    uint16 requestLength,\\n    bytes32 signerId\\n  ) external {\\n    // check profile and type limitations and update it\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(signerId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(profileMemberEntity.registerLimits.functionRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Member FunctionRegisterLimit\\\"\\n      );\\n      require(\\n        int32(profileEntity.registerLimits.functionRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile FunctionRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.functionRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.functionRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileCheckMemberForRealmRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    uint16 requestLength,\\n    bytes32 senderId\\n  ) external {\\n    // check profile and realm limitations and update it\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(uint32(profileMemberEntity.registerLimits.realmRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Member RealmRegisterLimit\\\"\\n      );\\n      require(\\n        int32(uint32(profileEntity.registerLimits.realmRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile MemberRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.realmRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.realmRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileCheckMemberForMemberRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.ProfileMemberEntity storage,\\n    uint16 requestLength,\\n    bytes32 senderId\\n  ) external {\\n    // check profile and member limitations and update it\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(profileMemberEntity.registerLimits.memberRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Member MemberRegisterLimit\\\"\\n      );\\n      require(\\n        int32(profileEntity.registerLimits.memberRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile MemberRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.memberRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.memberRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileDomainRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfileDomainManagement.ProfileDomainRegisterRequest calldata request,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 senderId\\n  ) external returns (bytes32) {\\n    bytes32 newDomainId = LACLUtils.generateId(request.name);\\n    require(profileEntity.scopes[newDomainId].stype == IACLCommons.ScopeType.NONE, \\\"Already Exist\\\");\\n\\n    // check sender scopes\\n    IACLCommons.UniverseEntity storage livelyUniverseEntity = profileEntity.profileUniverseReadSlot(\\n      LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID\\n    );\\n\\n    require(livelyUniverseEntity.bs.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Universe Updatable\\\");\\n    require(livelyUniverseEntity.domainLimit > livelyUniverseEntity.domains.length(), \\\"Illegal Register\\\");\\n\\n    // check access admin universe\\n    IProfileACL.ProfileAdminAccessStatus status = _doProfileCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      livelyUniverseEntity.bs.adminId,\\n      senderId\\n    );\\n    if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n\\n    // add domain to universe\\n    livelyUniverseEntity.domains.add(newDomainId);\\n\\n    // create new domain entity\\n    IACLCommons.DomainEntity storage newDomain = profileEntity.profileDomainWriteSlot(newDomainId);\\n    newDomain.bs.stype = IACLCommons.ScopeType.DOMAIN;\\n    newDomain.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    newDomain.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    newDomain.name = request.name;\\n    newDomain.universeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    newDomain.realmLimit = request.realmLimit >= 0\\n      ? uint16(uint24(request.realmLimit))\\n      : profileEntity.limits.realmLimit;\\n\\n    // checking requested domain admin\\n    if (request.adminId != bytes32(0)) {\\n      require(profileEntity.agents[request.adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      bytes32 requestAdminScopeId = _doDomainAgentGetScopeInfo(profileEntity, request.adminId);\\n      require(requestAdminScopeId == LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Admin Scope\\\");\\n      newDomain.bs.adminId = request.adminId;\\n    } else {\\n      newDomain.bs.adminId = livelyUniverseEntity.bs.adminId;\\n    }\\n\\n    return newDomainId;\\n  }\\n\\n  function profileRealmRegister(\\n    IProfileRealmManagement.ProfileRealmRegisterRequest calldata request,\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 senderId,\\n    IACLCommons.ScopeType memberScopeType,\\n    bytes32 memberScopeId\\n  ) external returns (bytes32) {\\n    bytes32 newRealmId = LACLUtils.generateId(request.name);\\n    require(profileEntity.scopes[newRealmId].stype == IACLCommons.ScopeType.NONE, \\\"Already Exist\\\");\\n\\n    // check sender scopes\\n    require(memberScopeType >= IACLCommons.ScopeType.DOMAIN, \\\"Illegal ScopeType\\\");\\n    if (memberScopeType == IACLCommons.ScopeType.DOMAIN) {\\n      require(memberScopeId == request.domainId, \\\"Illegal Domain Scope\\\");\\n    } else {\\n      require(memberScopeId == LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Universe Scope\\\");\\n    }\\n\\n    IACLCommons.DomainEntity storage domainEntity = profileEntity.profileDomainReadSlot(request.domainId);\\n    require(domainEntity.bs.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Domain Updatable\\\");\\n    require(domainEntity.realmLimit > domainEntity.realms.length(), \\\"Illegal Register\\\");\\n\\n    // check access admin realm\\n    IProfileACL.ProfileAdminAccessStatus status = _doProfileCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      domainEntity.bs.adminId,\\n      senderId\\n    );\\n    if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n\\n    // add to domain\\n    domainEntity.realms.add(newRealmId);\\n\\n    // create new realm entity\\n    IACLCommons.RealmEntity storage newRealm = profileEntity.profileRealmWriteSlot(newRealmId);\\n    newRealm.bs.stype = IACLCommons.ScopeType.REALM;\\n    newRealm.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    newRealm.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    newRealm.name = request.name;\\n    newRealm.domainId = request.domainId;\\n    newRealm.contextLimit = request.contextLimit >= 0\\n      ? uint32(uint64(request.contextLimit))\\n      : profileEntity.limits.contextLimit;\\n    newRealm.bs.adminId = _getProfileRealmAdmin(\\n      profileEntity,\\n      domainEntity.bs.adminId,\\n      request.domainId,\\n      request.adminId\\n    );\\n\\n    return newRealmId;\\n  }\\n\\n  function profileGetAndCheckRequestScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    IACLCommons.ScopeType senderScopeType,\\n    bytes32 profileId\\n  ) external view returns (IACLCommons.BaseScope storage) {\\n    return _doProfileGetAndCheckRequestScope(profileEntity, requestScopeId, senderScopeId, senderScopeType, profileId);\\n  }\\n\\n  function profileFunctionRegistration(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfileFunctionManagement.ProfileFunctionRequest calldata functionRequest,\\n    bytes32 profileId,\\n    bytes32 contextId\\n  ) external returns (bytes32) {\\n    IACLCommons.ContextEntity storage contextEntity = profileEntity.profileContextReadSlot(contextId);\\n    require(contextEntity.bs.alstat == IACLCommons.AlterabilityStatus.UPGRADABLE, \\\"Illegal Upgrade\\\");\\n    require(contextEntity.functionLimit > contextEntity.functions.length(), \\\"Illegal Limit\\\");\\n\\n    bytes32 newFunctionId = LACLUtils.functionGenerateId(contextEntity.contractId, functionRequest.selector);\\n\\n    require(profileEntity.scopes[newFunctionId].stype == IACLCommons.ScopeType.NONE, \\\"Already Exist\\\");\\n\\n    _doCheckAgentId(profileEntity, profileId, functionRequest.agentId, contextId);\\n    IACLCommons.FunctionEntity storage functionEntity = profileEntity.profileFunctionWriteSlot(newFunctionId);\\n    functionEntity.bs.stype = IACLCommons.ScopeType.FUNCTION;\\n    functionEntity.contextId = contextId;\\n    functionEntity.agentId = functionRequest.agentId;\\n    functionEntity.policyCode = functionRequest.policyCode;\\n    functionEntity.selector = functionRequest.selector;\\n    functionEntity.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionEntity.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    functionEntity.bs.adminId = _doGetAndCheckFunctionAdmin(\\n      profileEntity,\\n      contextEntity.bs.adminId,\\n      contextId,\\n      functionRequest.adminId,\\n      profileId\\n    );\\n\\n    // add function to context\\n    contextEntity.functions.add(newFunctionId);\\n\\n    return newFunctionId;\\n  }\\n\\n  function profileGetAndCheckFunctionAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 contextAdminId,\\n    bytes32 contextId,\\n    bytes32 adminId,\\n    bytes32 profileId\\n  ) external view returns (bytes32 functionAdminId) {\\n    return _doGetAndCheckFunctionAdmin(profileEntity, contextAdminId, contextId, adminId, profileId);\\n  }\\n\\n  function profileMemberGetInfo(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    bytes32 memberId\\n  ) external view returns (IProfileMemberManagement.ProfileMemberInfo memory) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    (IACLCommons.ProfileMemberEntity storage member, bool result) = profileEntity.profileMemberTryReadSlot(memberId);\\n    if (!result || profileEntity.acstat == IACLCommons.ActivityStatus.NONE) {\\n      return\\n        IProfileMemberManagement.ProfileMemberInfo({\\n          adminId: bytes32(0),\\n          account: address(0),\\n          typeLimit: 0,\\n          typeCount: 0,\\n          callLimit: 0,\\n          registerLimit: IACLCommons.ProfileRegisterLimit({\\n            memberRegisterLimit: 0,\\n            roleRegisterLimit: 0,\\n            typeRegisterLimit: 0,\\n            functionRegisterLimit: 0,\\n            contextRegisterLimit: 0,\\n            realmRegisterLimit: 0,\\n            domainRegisterLimit: 0,\\n            policyRegisterLimit: 0\\n          }),\\n          adminType: IACLCommons.AgentType.NONE,\\n          atype: IACLCommons.AgentType.NONE,\\n          acstat: IACLCommons.ActivityStatus.NONE,\\n          alstat: IACLCommons.AlterabilityStatus.NONE\\n        });\\n    }\\n\\n    return\\n      IProfileMemberManagement.ProfileMemberInfo({\\n        adminId: member.ba.adminId,\\n        account: member.account,\\n        typeLimit: member.typeLimit,\\n        typeCount: uint16(member.types.length()),\\n        callLimit: member.callLimit,\\n        registerLimit: IACLCommons.ProfileRegisterLimit({\\n          memberRegisterLimit: member.registerLimits.memberRegisterLimit,\\n          roleRegisterLimit: member.registerLimits.roleRegisterLimit,\\n          typeRegisterLimit: member.registerLimits.typeRegisterLimit,\\n          functionRegisterLimit: member.registerLimits.functionRegisterLimit,\\n          contextRegisterLimit: member.registerLimits.contextRegisterLimit,\\n          realmRegisterLimit: member.registerLimits.realmRegisterLimit,\\n          domainRegisterLimit: member.registerLimits.domainRegisterLimit,\\n          policyRegisterLimit: member.registerLimits.policyRegisterLimit\\n        }),\\n        adminType: profileEntity.agents[member.ba.adminId].atype,\\n        atype: member.ba.atype,\\n        acstat: member.ba.acstat,\\n        alstat: member.ba.alstat\\n      });\\n  }\\n\\n  function profileMemberCheckAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    bytes32 memberId,\\n    address account\\n  ) external view returns (bool) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    if (profileEntity.acstat == IACLCommons.ActivityStatus.NONE) return false;\\n    if (profileEntity.agents[memberId].atype != IACLCommons.AgentType.MEMBER) return false;\\n\\n    bytes32 memberAdminId = profileEntity.agents[memberId].adminId;\\n    IACLCommons.AgentType adminAgenType = profileEntity.agents[memberAdminId].atype;\\n    bytes32 accountId = LACLUtils.accountGenerateId(account);\\n\\n    if (adminAgenType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(memberAdminId);\\n      if (!result) return false;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(\\n        roleEntity.typeId\\n      );\\n      if (!result1) return false;\\n\\n      return typeEntity.members[accountId] == memberAdminId;\\n    } else if (adminAgenType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(memberAdminId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[accountId] != bytes32(0);\\n    }\\n\\n    return false;\\n  }\\n\\n  function updateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity,\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    bool isRevoke\\n  ) external {\\n    return _updateProfileAccount(data, profileMemberEntity, profileId, typeId, isRevoke);\\n  }\\n\\n  function _updateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity,\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    bool isRevoke\\n  ) private {\\n    IACLCommons.ProfileAccount storage profileAccount = data.profileAccounts[profileMemberEntity.account];\\n    require(profileAccount.profiles.length > 0, \\\"ProfileAccount Not Found\\\");\\n    bool findFlag = false;\\n    for (uint256 i = 0; i < profileAccount.profiles.length; i++) {\\n      if (profileAccount.profiles[i] == profileId) {\\n        findFlag = true;\\n        if (!isRevoke) {\\n          if (\\n            (profileMemberEntity.types.contains(LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID) ||\\n              profileMemberEntity.types.contains(LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID)) &&\\n            (typeId == LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID || typeId == LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID)\\n          ) {\\n            revert(\\\"Illegal GrantMemberType\\\");\\n          }\\n        } else {\\n          if (profileAccount.profiles.length > 1) {\\n            if (i < profileAccount.profiles.length - 1)\\n              profileAccount.profiles[i] = profileAccount.profiles[profileAccount.profiles.length - 1];\\n            profileAccount.profiles.pop();\\n          } else {\\n            profileAccount.profiles.pop();\\n            delete profileAccount.profiles;\\n          }\\n        }\\n        break;\\n      }\\n    }\\n\\n    require(findFlag, \\\"Illegal ProfileAccount\\\");\\n  }\\n\\n  function _doProfileGetAndCheckRequestScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    IACLCommons.ScopeType senderScopeType,\\n    bytes32 profileId\\n  ) private view returns (IACLCommons.BaseScope storage) {\\n    // checking requested type scope\\n    IACLCommons.BaseScope storage requestedScope = profileEntity.scopes[requestScopeId];\\n    require(requestedScope.stype != IACLCommons.ScopeType.NONE, \\\"Scope Not Found\\\");\\n    require(requestedScope.acstat > IACLCommons.ActivityStatus.DELETED, \\\"Deleted\\\");\\n\\n    require(requestedScope.stype <= senderScopeType, \\\"Illegal ScopeType\\\");\\n    if (requestedScope.stype == senderScopeType) {\\n      require(requestScopeId == senderScopeId, \\\"Illegal Scope\\\");\\n    } else {\\n      require(\\n        IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, senderScopeId, requestScopeId),\\n        \\\"Illegal Scope\\\"\\n      );\\n    }\\n\\n    return requestedScope;\\n  }\\n\\n  function _getProfileRealmAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 requestScopeAdmin,\\n    bytes32 domainId,\\n    bytes32 adminId\\n  ) private view returns (bytes32 realmAdminId) {\\n    // checking requested context admin\\n    if (adminId != bytes32(0)) {\\n      require(profileEntity.agents[adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doGetAgentScopeInfo(\\n        profileEntity,\\n        adminId\\n      );\\n      require(IACLCommons.ScopeType.DOMAIN <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (IACLCommons.ScopeType.DOMAIN == requestAdminScopeType) {\\n        require(requestAdminScopeId == domainId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(requestAdminScopeId == LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Admin Scope\\\");\\n      }\\n      realmAdminId = adminId;\\n    } else {\\n      realmAdminId = requestScopeAdmin;\\n    }\\n  }\\n\\n  function _doProfileCheckAdminAccess(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 adminId,\\n    bytes32 senderId\\n  ) private view returns (IProfileACL.ProfileAdminAccessStatus) {\\n    // owners always access to all entities to modify those\\n    if (profileEntity.admins.contains(senderId)) return IProfileACL.ProfileAdminAccessStatus.PERMITTED;\\n\\n    IACLCommons.AgentType adminAgentType = profileEntity.agents[adminId].atype;\\n    if (adminAgentType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(adminId);\\n      if (!result) return IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(\\n        roleEntity.typeId\\n      );\\n      if (!result1) return IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      if (typeEntity.members[senderId] != adminId) return IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[adminId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IProfileACL.ProfileAdminAccessStatus.PERMITTED;\\n    } else if (adminAgentType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(adminId);\\n      if (!result1) return IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      bytes32 roleId = typeEntity.members[senderId];\\n      (IACLCommons.RoleEntity storage roleEntity, bool result2) = profileEntity.profileRoleTryReadSlot(roleId);\\n      if (!result2) return IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[roleId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IProfileACL.ProfileAdminAccessStatus.PERMITTED;\\n    }\\n\\n    return IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED;\\n  }\\n\\n  function _doGetContextAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfileContextManagement.ProfileContextRegisterRequest calldata request,\\n    bytes32 profileId,\\n    bytes32 scopeId,\\n    bytes32 realmAdminId\\n  ) private view returns (bytes32 contextAdminId) {\\n    // checking requested context admin\\n    if (request.adminId != bytes32(0)) {\\n      require(profileEntity.agents[request.adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doGetAgentScopeInfo(\\n        profileEntity,\\n        request.adminId\\n      );\\n      require(IACLCommons.ScopeType.REALM <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (IACLCommons.ScopeType.REALM == requestAdminScopeType) {\\n        require(requestAdminScopeId == request.realmId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(\\n          IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, requestAdminScopeId, scopeId),\\n          \\\"Illegal Admin Scope\\\"\\n        );\\n      }\\n      contextAdminId = request.adminId;\\n    } else {\\n      contextAdminId = realmAdminId;\\n    }\\n  }\\n\\n  function _doGetAgentScopeInfo(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    private\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    IACLCommons.AgentType atype = profileEntity.agents[agentId].atype;\\n    if (atype == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = profileEntity.scopes[roleEntity.scopeId];\\n      return (baseScope.stype, roleEntity.scopeId);\\n    } else if (atype == IACLCommons.AgentType.TYPE) {\\n      IACLCommons.TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = profileEntity.scopes[typeEntity.scopeId];\\n      return (baseScope.stype, typeEntity.scopeId);\\n    }\\n\\n    return (IACLCommons.ScopeType.NONE, bytes32(0));\\n  }\\n\\n  function _doCheckContextSystemScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 scopeId,\\n    bytes32 memberId,\\n    bytes32 profileId\\n  ) private view returns (bool) {\\n    IACLCommons.TypeEntity storage systemType = profileEntity.profileTypeReadSlot(LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID);\\n    bytes32 memberRoleId = systemType.members[memberId];\\n    IACLCommons.RoleEntity storage memberSystemRole = profileEntity.profileRoleReadSlot(memberRoleId);\\n    if (profileEntity.scopes[memberSystemRole.scopeId].stype < IACLCommons.ScopeType.REALM) return false;\\n    if (memberSystemRole.scopeId == scopeId) {\\n      return true;\\n    }\\n\\n    return IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, memberSystemRole.scopeId, scopeId);\\n  }\\n\\n  function _doCheckAgentId(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 profileId,\\n    bytes32 agentId,\\n    bytes32 contextId\\n  ) private view {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    require(ba.atype > IACLCommons.AgentType.MEMBER, \\\"Illegal AgentId\\\");\\n\\n    (IACLCommons.ScopeType requestAgentScopeType, bytes32 requestAgentScopeId) = _doGetAgentScopeInfo(\\n      profileEntity,\\n      agentId\\n    );\\n    require(IACLCommons.ScopeType.CONTEXT <= requestAgentScopeType, \\\"Illegal Agent ScopeType\\\");\\n    if (IACLCommons.ScopeType.CONTEXT == requestAgentScopeType) {\\n      require(requestAgentScopeId == contextId, \\\"Illegal Agent Scope\\\");\\n    } else {\\n      require(\\n        IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, requestAgentScopeId, contextId),\\n        \\\"Illegal Agent Scope\\\"\\n      );\\n    }\\n  }\\n\\n  function _doGetAndCheckFunctionAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 contextAdminId,\\n    bytes32 contextId,\\n    bytes32 requestAdminId,\\n    bytes32 profileId\\n  ) private view returns (bytes32 functionAdminId) {\\n    // checking requested functionAdmin admin\\n    if (requestAdminId != bytes32(0)) {\\n      require(profileEntity.agents[requestAdminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n\\n      (IACLCommons.ScopeType requestAdminFuncType, bytes32 requestAdminFuncId) = _doGetAgentScopeInfo(\\n        profileEntity,\\n        requestAdminId\\n      );\\n      require(IACLCommons.ScopeType.CONTEXT <= requestAdminFuncType, \\\"Illegal Admin ScopeType\\\");\\n\\n      if (IACLCommons.ScopeType.CONTEXT == requestAdminFuncType) {\\n        require(requestAdminFuncId == contextAdminId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(\\n          IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, requestAdminFuncId, contextId),\\n          \\\"Illegal Admin Scope\\\"\\n        );\\n      }\\n      functionAdminId = requestAdminId;\\n    } else {\\n      functionAdminId = contextAdminId;\\n    }\\n  }\\n\\n  function _doDomainAgentGetScopeInfo(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    private\\n    view\\n    returns (bytes32)\\n  {\\n    IACLCommons.AgentType atype = profileEntity.agents[agentId].atype;\\n    if (atype == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(agentId);\\n      return roleEntity.scopeId;\\n    } else if (atype == IACLCommons.AgentType.TYPE) {\\n      IACLCommons.TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(agentId);\\n      return typeEntity.scopeId;\\n    }\\n\\n    return bytes32(0);\\n  }\\n}\\n\",\"keccak256\":\"0x3114eee7b89801f54fd178e51aa54112f1ed4f62fa8fc062b27abf1275e7873f\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LProfileStorage {\\n  function profileUniverseReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function profileUniverseWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileFunctionWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n}\\n\",\"keccak256\":\"0xe95300b9bb0c9fa78648108acf843bd0609e08a60b03b61a79f271f5fcb46b91\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0x75b905d070ebb72fa3358e262ab18166f6c6386c11171324f235058ce9185ca4\",\"license\":\"MIT\"},\"src/contracts/lib/proxy/LClones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n */\\nlibrary LClones {\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n   *\\n   * This function uses the create opcode, which should never revert.\\n   */\\n  function clone(address implementation) internal returns (address instance) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      instance := create(0, ptr, 0x37)\\n    }\\n    require(instance != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n   *\\n   * This function uses the create2 opcode and a `salt` to deterministically deploy\\n   * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n   * the clones cannot be deployed twice at the same address.\\n   */\\n  function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      instance := create2(0, ptr, 0x37, salt)\\n    }\\n    require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(\\n    address implementation,\\n    bytes32 salt,\\n    address deployer\\n  ) internal pure returns (address predicted) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n      mstore(add(ptr, 0x38), shl(0x60, deployer))\\n      mstore(add(ptr, 0x4c), salt)\\n      mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n      predicted := keccak256(add(ptr, 0x37), 0x55)\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n    return predictDeterministicAddress(implementation, salt, address(this));\\n  }\\n}\\n\",\"keccak256\":\"0x83799b48f23c40ae81d44cec6e2d5402b0c75a131bf1f623138be00aed17c3b8\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe49098eb2019f9d9628a399f6a06ec310fe8a10785c369cc508c56df1f203dd0\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Abstract Base Proxy Contract\\n * @dev\\n *\\n */\\nabstract contract BaseProxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overridden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xbfec492ce3aa18df2eb26ce155269056e8039eaccec4a3146dd9036b565396a6\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC1822.sol\\\";\\nimport \\\"./IProxy.sol\\\";\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"./BaseUUPSStorage.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"../lib/LAddress.sol\\\";\\nimport \\\"../lib/LStorageSlot.sol\\\";\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/scope/IContextManagement.sol\\\";\\nimport \\\"../utils/Message.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"../lib/acl/LACLUtils.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Proxy Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSProxy is\\n  BaseUUPSStorage,\\n  BaseProxy,\\n  Initializable,\\n  IProxy,\\n  IERC1822Proxiable,\\n  Message,\\n  ERC165\\n{\\n  /**\\n   * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n   * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n   * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n   * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n   * fail.\\n   */\\n  modifier onlyProxy() {\\n    require(address(this) != __self, \\\"Illegal Call\\\"); // Illegal Contract Call\\n    require(_implementation() == __self, \\\"Invalid Call\\\"); // Invalid Proxy Call\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyLocalAdmin() {\\n    require(_getLocalAdmin() == _msgSender(), \\\"Access Denied\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n   * callable on the implementing contract but not through proxies.\\n   */\\n  modifier notDelegated() {\\n    require(address(this) == __self, \\\"Illegal Call\\\"); // Illegal Contract Delegatecall\\n    _;\\n  }\\n\\n  modifier safeModeCheck() {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    _;\\n  }\\n\\n  modifier aclCheck(bytes4 selector) {\\n    IACL.AuthorizationStatus status = _hasPermission(selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _;\\n  }\\n\\n  function _hasPermission(bytes4 selector) internal returns (IACL.AuthorizationStatus) {\\n    return IACL(_accessControlManager).hasAccountAccess(address(this), selector, _msgSender());\\n  }\\n\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n   */\\n\\n  constructor() {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n    // set contract Admin (implementation contract)\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = _msgSender();\\n\\n    // set _isUpgradable and _isSafeMode of contact\\n    _ustat = ProxyUpdatabilityStatus.DISABLED;\\n    _sstat = ProxySafeModeStatus.ENABLED;\\n  }\\n\\n  function __BASE_UUPS_init(\\n    string calldata cname,\\n    string calldata cverion,\\n    address accessControl\\n  ) internal {\\n    __BASE_UUPS_init_unchained(cname, cverion, accessControl);\\n  }\\n\\n  function __BASE_UUPS_init_unchained(\\n    string calldata cname,\\n    string calldata cverion,\\n    address accessControl\\n  ) internal onlyInitializing {\\n    _contractName = cname;\\n    _contractVersion = cverion;\\n\\n    if (accessControl != address(this)) {\\n      require(LAddress.isContract(accessControl), \\\"Illegal Contract\\\");\\n      if (!IERC165(accessControl).supportsInterface(type(IACL).interfaceId)) {\\n        revert(\\\"Illegal ACL\\\");\\n      }\\n    } else {\\n      if (!supportsInterface(type(IACL).interfaceId)) {\\n        revert(\\\"Not Supported\\\");\\n      }\\n    }\\n\\n    _accessControlManager = accessControl;\\n    _ustat = ProxyUpdatabilityStatus.DISABLED;\\n    _sstat = ProxySafeModeStatus.DISABLED;\\n    _setLocalAdmin(_msgSender());\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IProxy).interfaceId ||\\n      interfaceId == type(IERC1822Proxiable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation() internal view override returns (address) {\\n    return LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit ProxyUpgraded(msg.sender, address(this), newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      return LAddress.functionDelegateCall(newImplementation, data, \\\"Call Failed\\\"); // delegatecall failed\\n    }\\n    return new bytes(0);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCallUUPS(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\n    if (LStorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n      _setImplementation(newImplementation);\\n      return new bytes(0);\\n    } else {\\n      if (IERC1822Proxiable(newImplementation).proxiableUUID() != _IMPLEMENTATION_SLOT) {\\n        revert(\\\"Illegal UUPS\\\");\\n      }\\n\\n      if (!IERC165(newImplementation).supportsInterface(type(IProxy).interfaceId)) {\\n        revert(\\\"Illegal IProxy\\\");\\n      }\\n\\n      return _upgradeToAndCall(newImplementation, data, forceCall);\\n    }\\n  }\\n\\n  /**\\n   * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n   * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n   */\\n  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n    return _IMPLEMENTATION_SLOT;\\n  }\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external virtual onlyProxy returns (bytes memory) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    require(LAddress.isContract(newImplementation), \\\"Illegal Contract\\\");\\n    _authorizeUpgrade(newImplementation);\\n    return _upgradeToAndCallUUPS(newImplementation, data, forceCall);\\n  }\\n\\n  /**\\n   * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n   * {upgradeTo} and {upgradeToAndCall}.\\n   *\\n   * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n   *\\n   * ```solidity\\n   * function _authorizeUpgrade(address) internal override onlyOwner {}\\n   * ```\\n   */\\n  function _authorizeUpgrade(address newImplementation) internal virtual {\\n    require(newImplementation != _implementation(), \\\"Illegal\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.upgradeTo.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n  }\\n\\n  function localAdmin() external view returns (address) {\\n    return _getLocalAdmin();\\n  }\\n\\n  function setLocalAdmin(address newLocalAdmin) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setLocalAdmin.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    require(newLocalAdmin != address(0), \\\"Invalid\\\");\\n    _setLocalAdmin(newLocalAdmin);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.require(!_isSafeMode, \\\"Rejected\\\");\\n   */\\n  function _getLocalAdmin() internal view returns (address) {\\n    return LStorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setLocalAdmin(address newAdmin) internal {\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    emit ProxyLocalAdminUpdated(_msgSender(), address(this), newAdmin);\\n  }\\n\\n  // In each upgrade the initialize requirement must be changed\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external onlyProxy returns (bool) {\\n    require(_getInitializedCount() > 0, \\\"NOT INIT\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setSafeModeStatus.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _sstat = sstat;\\n    emit ProxySafeModeUpdated(_msgSender(), address(this), sstat);\\n    return true;\\n  }\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setUpdatabilityStatus.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _ustat = ustat;\\n    emit ProxyUpdatabilityUpdated(_msgSender(), address(this), ustat);\\n    return true;\\n  }\\n\\n  function setAccessControlManager(address acl) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    require(acl != address(0) && LAddress.isContract(acl), \\\"Illegal Contract\\\");\\n\\n    if (_accessControlManager != address(0)) {\\n      IACL.AuthorizationStatus status = _hasPermission(this.setAccessControlManager.selector);\\n      if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    } else {\\n      require(_getLocalAdmin() == _msgSender(), \\\"Access Denied\\\");\\n    }\\n\\n    if (!IERC165(acl).supportsInterface(type(IACL).interfaceId)) {\\n      revert(\\\"Illegal ACL\\\");\\n    }\\n\\n    _accessControlManager = acl;\\n    emit ProxyAccessControlUpdated(_msgSender(), address(this), _accessControlManager);\\n    return true;\\n  }\\n\\n  function contractName() external view returns (string memory) {\\n    return _contractName;\\n  }\\n\\n  function contractVersion() external view returns (string memory) {\\n    return _contractVersion;\\n  }\\n\\n  function accessControlManager() external view returns (address) {\\n    return _accessControlManager;\\n  }\\n\\n  function subjectAddress() external view returns (address) {\\n    return _implementation();\\n  }\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus) {\\n    return _sstat;\\n  }\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus) {\\n    return _ustat;\\n  }\\n\\n  function domainSeparator() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          keccak256(abi.encodePacked(_contractName)),\\n          keccak256(abi.encodePacked(_contractVersion)),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  function initVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  function withdrawBalance(address recepient) external returns (uint256) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.withdrawBalance.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    uint256 balance = address(this).balance;\\n    payable(recepient).transfer(address(this).balance);\\n    return balance;\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable override {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable override {}\\n}\\n\",\"keccak256\":\"0x711f8267d66a827c0cf581e8f070580586aa0fddd197637fac5b85bfd371627b\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Storage Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSStorage is IBaseProxy {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  address internal immutable __self = address(this);\\n\\n  string internal _contractName;\\n  string internal _contractVersion;\\n  address internal _accessControlManager;\\n  ProxySafeModeStatus internal _sstat;\\n  ProxyUpdatabilityStatus internal _ustat;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x4ff079fd2fd1ad102d42e82a72bff6bb1ffb8f9ab29cec2dd8e970b892ea415e\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IBaseProxy {\\n  enum ProxySafeModeStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum ProxyUpdatabilityStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  event ProxyUpgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x4b2695303b3acb300ba472d17da71a16367191af571d325d43171503d7c92846\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x98571e9bc4231bb67b3c8b339c052fa968e56b0bef3e35f5d82c391335336ae8\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event ProxyLocalAdminUpdated(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event ProxyAccessControlUpdated(address indexed sender, address indexed proxy, address acl);\\n\\n  event ProxySafeModeUpdated(address indexed sender, address indexed proxy, ProxySafeModeStatus sstat);\\n\\n  event ProxyUpdatabilityUpdated(address indexed sender, address indexed proxy, ProxyUpdatabilityStatus ustat);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external returns (bool);\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function setAccessControlManager(address acl) external returns (bool);\\n\\n  function withdrawBalance(address recepient) external returns (uint256);\\n\\n  function contractName() external view returns (string memory);\\n\\n  function contractVersion() external view returns (string memory);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus);\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xaadf51e846486cf9dc7387ad1dcac9a67e6a2d9354ce71694d79de783e1dea3b\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0x5603924c0330dcabd0b81d2b6a8113be8ad3ecbbfd0e75795a79221c21990f45\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xd4388084c83f15ac54be8d4e28a9d0f7be51c87efc357a33e7080e9769d5553a\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x95ac867088cd7cca6d583788b83e56e0c521c847aa9844f6184c14f5ce3ddf90\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Abstract Message Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x9fe52fdf93ebcdcbe224c4eba70bd3d8f6b4479fcc67d681b18070975d1ba970\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102115760003560e01c8063756af45f11610117578063b4a0bdf3116100a5578063f698da251161006c578063f698da2514610703578063f708ceb014610718578063f94a0adb14610738578063fcc401781461074d578063feb091d91461076d57005b8063b4a0bdf314610651578063c2f3860c1461066f578063d9dc1f191461068f578063dc8ff352146106af578063f0b15def146106cf57005b80639b97b534116100e95780639b97b534146105a9578063a0787c3b146105dd578063a0a8e460146105fd578063a284e23714610612578063a304e3531461063257005b8063756af45f1461052d57806375d0c0dc1461054d5780637678922e1461056257806377546e6a1461058957005b80634888f4821161019f57806352d1902d1161016657806352d1902d1461045d57806358dbc45d1461047257806364d4c8191461049f5780636e6a5185146104d35780637147855d1461050057005b80634888f482146103a15780634a00fee3146103c95780634b1ff412146103e95780634bf0414d146104095780634d2049e11461043d57005b8063301c1280116101e3578063301c1280146102d157806334109de214610305578063348c237a146103395780633645214f1461035957806338d38c971461037957005b806301ffc9a71461021a578063077f224a1461024f5780630e32cb861461026f5780631b452f4b1461028f57005b3661021857005b005b34801561022657600080fd5b5061023a610235366004614b9f565b61078d565b60405190151581526020015b60405180910390f35b34801561025b57600080fd5b5061021861026a366004614c12565b6107b8565b34801561027b57600080fd5b5061023a61028a366004614c92565b6109ee565b34801561029b57600080fd5b506102c37f7bfb2abd6084c8ce20d7ff92c1620e7e7267603f0eac446b9176959d243306bc81565b604051908152602001610246565b3480156102dd57600080fd5b506102c37f541cf898e7c3085cbc6b7402ba06e7237285bc4bd5baa510e708e35537a71ffd81565b34801561031157600080fd5b506102c37f7aabe2571874f2a330ea11c8972d9cc3792d973efc6b36e3e29005861a34418881565b34801561034557600080fd5b5061023a610354366004614d09565b610cfc565b34801561036557600080fd5b5061023a610374366004614d71565b6115fa565b34801561038557600080fd5b5061038e611637565b60405161ffff9091168152602001610246565b3480156103ad57600080fd5b50600254600160a81b900460ff165b6040516102469190614db9565b3480156103d557600080fd5b5061023a6103e4366004614d09565b61164b565b3480156103f557600080fd5b5061023a610404366004614e10565b611920565b34801561041557600080fd5b506102c37f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d5581565b34801561044957600080fd5b5061023a610458366004614e6b565b611b7c565b34801561046957600080fd5b506102c3611bf5565b34801561047e57600080fd5b50610487611c52565b6040516001600160a01b039091168152602001610246565b3480156104ab57600080fd5b506102c37f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b3480156104df57600080fd5b506104f36104ee366004614d71565b611c5c565b6040516102469190614ecd565b34801561050c57600080fd5b5061052061051b366004614fc6565b611ea8565b60405161024691906150de565b34801561053957600080fd5b506102c3610548366004614c92565b612007565b34801561055957600080fd5b506105206120cc565b34801561056e57600080fd5b5073__$68dc14faf17200ec68c1b553d3c187a731$__610487565b34801561059557600080fd5b5061023a6105a4366004614e10565b61215e565b3480156105b557600080fd5b506102c37fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b881565b3480156105e957600080fd5b5061023a6105f8366004614e10565b612384565b34801561060957600080fd5b506105206124b9565b34801561061e57600080fd5b5061023a61062d3660046150f1565b6124c8565b34801561063e57600080fd5b50600254600160a01b900460ff166103bc565b34801561065d57600080fd5b506002546001600160a01b0316610487565b34801561067b57600080fd5b5061023a61068a366004614e10565b612519565b34801561069b57600080fd5b5061023a6106aa366004614c92565b612639565b3480156106bb57600080fd5b5061023a6106ca366004614e10565b6127ef565b3480156106db57600080fd5b506102c37ffc434588684348dd50856b075c47bed14245c1030aa04c32955af5549981462781565b34801561070f57600080fd5b506102c3612917565b34801561072457600080fd5b5061023a610733366004615131565b612921565b34801561074457600080fd5b50610487612acb565b34801561075957600080fd5b5061023a610768366004615131565b612ad5565b34801561077957600080fd5b5061023a610788366004614e6b565b612c60565b60006001600160e01b0319821663b5f8044160e01b14806107b257506107b282612ccf565b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108095760405162461bcd60e51b81526004016108009061514e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661083b612d1f565b6001600160a01b0316146108615760405162461bcd60e51b815260040161080090615174565b3361086a612d40565b6001600160a01b0316146108b05760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610800565b604e5462010000900460ff16158080156108d25750604e54600161ffff909116105b806108ed5750303b1580156108ed5750604e5461ffff166001145b6109395760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a6564000000006044820152606401610800565b604e805461ffff19166001179055801561095f57604e805462ff00001916620100001790555b61096c8686868686612d68565b610974612d1f565b6001600160a01b031630336001600160a01b03167f247ab7b17ee489fa140c6666edc3822eefed2727610cd6e37192462b87244c60898989896109ba604e5461ffff1690565b6040516109cb9594939291906151c3565b60405180910390a480156109e657604e805462ff0000191690555b505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a385760405162461bcd60e51b81526004016108009061514e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a6a612d1f565b6001600160a01b031614610a905760405162461bcd60e51b815260040161080090615174565b6000600254600160a01b900460ff166001811115610ab057610ab0614d93565b14610acd5760405162461bcd60e51b815260040161080090615201565b6001600254600160a81b900460ff166001811115610aed57610aed614d93565b14610b0a5760405162461bcd60e51b815260040161080090615223565b6001600160a01b03821615801590610b2b57506001600160a01b0382163b15155b610b475760405162461bcd60e51b81526004016108009061524e565b6002546001600160a01b031615610ba6576000610b6a63071965c360e11b612d7c565b90506000816013811115610b8057610b80614d93565b14610ba05780604051637f0911d160e01b81526004016108009190615278565b50610bf5565b33610baf612d40565b6001600160a01b031614610bf55760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610800565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c64919061528c565b610c9e5760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610800565b600280546001600160a01b0384166001600160a01b031990911681179091556040805191825251309133917f410bf468eebeeed60acaedb904afb2db7c0bb0131f7d14c3714d81b14fe8ed3c9181900360200190a35060015b919050565b600080306001600160a01b031663a304e3536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6191906152a9565b6001811115610d7257610d72614d93565b14610d8f5760405162461bcd60e51b815260040161080090615201565b6000610d9b85806152c6565b905011610de05760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2050726f66696c654e616d6560681b6044820152606401610800565b6000610df4610def86806152c6565b612e07565b9050600080610e0660608801886152c6565b90501115610e9a5742610e1f606088016040890161530c565b6001600160401b031611610e695760405162461bcd60e51b815260206004820152601160248201527045787069726564205369676e617475726560781b6044820152606401610800565b610e93867f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d55612e3a565b9050610e9d565b50335b60005b848110156115eb57600080878784818110610ebd57610ebd615335565b9050602002810190610ecf919061534b565b610ee19061010081019060e001614c92565b6001600160a01b03160361115557610efc60608901896152c6565b9050600003611050576000878784818110610f1957610f19615335565b9050602002810190610f2b919061534b565b610f3590806152c6565b9050111561104c57611045878784818110610f5257610f52615335565b9050602002810190610f64919061534b565b610f6e90806152c6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061104092508891508b90508a87818110610fbb57610fbb615335565b9050602002810190610fcd919061534b565b610fde9060e081019060c001614c92565b8b8b88818110610ff057610ff0615335565b9050602002810190611002919061534b565b6110139060c081019060a001614c92565b8c8c8981811061102557611025615335565b9050602002810190611037919061534b565b60200135612ec2565b612f37565b9250611050565b3392505b61114e87878481811061106557611065615335565b9050602002810190611077919061534b565b6040013588888581811061108d5761108d615335565b905060200281019061109f919061534b565b6110b09060e081019060c001614c92565b8989868181106110c2576110c2615335565b90506020028101906110d4919061534b565b6110e59060c081019060a001614c92565b6001600160a01b03169190604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b90506113da565b61116260608901896152c6565b90506000036113a157600087878481811061117f5761117f615335565b9050602002810190611191919061534b565b61119b90806152c6565b9050111561139d576000611326858989868181106111bb576111bb615335565b90506020028101906111cd919061534b565b6111df9061010081019060e001614c92565b61124e8b8b888181106111f4576111f4615335565b9050602002810190611206919061534b565b6112149060608101906152c6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612fb592505050565b6112838c8c8981811061126357611263615335565b9050602002810190611275919061534b565b6112149060808101906152c6565b8c8c8981811061129557611295615335565b90506020028101906112a7919061534b565b60200135604080517f7bfb2abd6084c8ce20d7ff92c1620e7e7267603f0eac446b9176959d243306bc60208201529081018690526001600160a01b03851660608201526080810184905260a0810183905260c0810182905260009060e00160405160208183030381529060405280519060200120905095945050505050565b905061139588888581811061133d5761133d615335565b905060200281019061134f919061534b565b61135990806152c6565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250612f37915050565b9350506113a1565b3392505b8686838181106113b3576113b3615335565b90506020028101906113c5919061534b565b6113d79061010081019060e001614c92565b90505b60006113e582612fe5565b905060006113f285612fe5565b60008781526048602090815260408220631a4611bd60e11b808452604a9092527f718cd616c7d065ac60dcc3d8dc506b02c925c83ef5c0e956bae909d6f3c0f39654939450926001600160a01b0316919061144e90839061300c565b60405163a66ce52f60e01b8152600481018b90526024810182905260448101869052909150309063a66ce52f90606401600060405180830381600087803b15801561149857600080fd5b505af11580156114ac573d6000803e3d6000fd5b50505050505073__$68dc14faf17200ec68c1b553d3c187a731$__63098aafe6828c8c898181106114df576114df615335565b90506020028101906114f1919061534b565b6115009061010081019061536c565b60405160e085901b6001600160e01b0319168152600481019390935261ffff166024830152506044810185905260640160006040518083038186803b15801561154857600080fd5b505af415801561155c573d6000803e3d6000fd5b5050505061156c8184848a613043565b6115a45760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b6044820152606401610800565b6115d4818b8b888181106115ba576115ba615335565b90506020028101906115cc919061534b565b89868a6131a9565b5050505080806115e3906153cb565b915050610ea0565b506001925050505b9392505050565b60008281526048602090815260408083208484526001908101909252822081015460ff16600581111561162f5761162f614d93565b149392505050565b6000611646604e5461ffff1690565b905090565b6000808080808061166389634a00fee360e01b613321565b9450945094509450945060005b878110156119105760006116a58a8a8481811061168f5761168f615335565b905060200201358861359390919063ffffffff16565b905060006116bc8888846000016000015488613675565b905060008160078111156116d2576116d2614d93565b146116e0576116e08161370a565b60018201546301000000900463ffffffff1660000361184a57600061171283600301548a6138a190919063ffffffff16565b90506003600182015462010000900460ff16600381111561173557611735614d93565b146117825760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c20436f6e746578742055706772616461626c650000000000006044820152606401610800565b6117b08c8c8681811061179757611797615335565b905060200201358260040161397c90919063ffffffff16565b50600080845560018401805466ffffffffffffff1916905560028401819055600384015560048301805464ffffffffff191690558b8b858181106117f6576117f6615335565b9050602002013587866001600160a01b03167f54a4f8c8b6b616d92f895d11bbc8a089d0c346879fdca3a34d382fc40427f40f600060405161183c911515815260200190565b60405180910390a4506118fb565b6002600183015462010000900460ff16600381111561186b5761186b614d93565b10156118895760405162461bcd60e51b815260040161080090615223565b60018201805461ff0019166101001790558a8a848181106118ac576118ac615335565b9050602002013586856001600160a01b03167f54a4f8c8b6b616d92f895d11bbc8a089d0c346879fdca3a34d382fc40427f40f60016040516118f2911515815260200190565b60405180910390a45b50508080611908906153cb565b915050611670565b5060019998505050505050505050565b600080808080806119388963258ffa0960e11b613321565b9450945094509450945060005b878110156119105760006119748a8a8481811061196457611964615335565b8a92604090910201359050613593565b9050600180820154610100900460ff16600381111561199557611995614d93565b116119d55760405162461bcd60e51b815260206004820152601060248201526f119d5b98dd1a5bdb8811195b195d195960821b6044820152606401610800565b60006119ea8888846000016000015488613675565b90506000816007811115611a0057611a00614d93565b14611a0e57611a0e8161370a565b60008b8b85818110611a2257611a22615335565b9050604002016020016020810190611a3a91906153f1565b6003811115611a4b57611a4b614d93565b03611a8f5760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20416c7465726162696c69747960601b6044820152606401610800565b8a8a84818110611aa157611aa1615335565b9050604002016020016020810190611ab991906153f1565b60018301805462ff0000191662010000836003811115611adb57611adb614d93565b02179055508a8a84818110611af257611af2615335565b9050604002016000013586856001600160a01b03167f557326aa24b74995a316ce21a5b702d55994e37fcafc6ebe24273b283b0087fc8e8e88818110611b3a57611b3a615335565b9050604002016020016020810190611b5291906153f1565b604051611b5f919061540e565b60405180910390a450508080611b74906153cb565b915050611945565b6000838152604860205260408120816008820154600160a01b900460ff166003811115611bab57611bab614d93565b03611bba5760009150506115f3565b600080611bc78387613988565b9150915080611bdc57600093505050506115f3565b8154611bea908490876139e8565b979650505050505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611c3f5760405162461bcd60e51b81526004016108009061514e565b5060008051602061571183398151915290565b6000611646612d1f565b611cb9604080516101608101825260008082526020820181905291810182905260608101829052608081018290529060a0820190815260200160008152602001600081526020016000815260200160008152600060209091015290565b60008381526048602052604081209080611cd38386613988565b91509150801580611d03575060006008840154600160a01b900460ff166003811115611d0157611d01614d93565b145b15611d6a57604080516101608101825260008082526020820181905291810182905260608101829052608081018290529060a0820190815260200160008152602001600081526020016000815260200160008152600060209091015293506107b292505050565b60408051610160810182528354815260028401546020820152600384015491810191909152600483015460e01b6001600160e01b031916606082015260018301546301000000810463ffffffff16608083015260a082019060ff166005811115611dd657611dd6614d93565b81526001840154602090910190610100900460ff166003811115611dfc57611dfc614d93565b8152600184015460209091019062010000900460ff166003811115611e2357611e23614d93565b815283546000908152602086815260409091206001015491019060ff166003811115611e5157611e51614d93565b815260028401546000908152602086815260409091206001015491019060ff166003811115611e8257611e82614d93565b815260049390930154640100000000900460ff1660209093019290925250949350505050565b60606001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611ef25760405162461bcd60e51b81526004016108009061514e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611f24612d1f565b6001600160a01b031614611f4a5760405162461bcd60e51b815260040161080090615174565b6000600254600160a01b900460ff166001811115611f6a57611f6a614d93565b14611f875760405162461bcd60e51b815260040161080090615201565b6001600254600160a81b900460ff166001811115611fa757611fa7614d93565b14611fc45760405162461bcd60e51b815260040161080090615223565b6001600160a01b0384163b611feb5760405162461bcd60e51b81526004016108009061524e565b611ff484613af9565b611fff848484613b97565b949350505050565b600080600254600160a01b900460ff16600181111561202857612028614d93565b146120455760405162461bcd60e51b815260040161080090615201565b600061205763756af45f60e01b612d7c565b9050600081601381111561206d5761206d614d93565b1461208d5780604051637f0911d160e01b81526004016108009190615278565b60405147906001600160a01b038516904780156108fc02916000818181858888f193505050501580156120c4573d6000803e3d6000fd5b509392505050565b6060600080546120db9061541b565b80601f01602080910402602001604051908101604052809291908181526020018280546121079061541b565b80156121545780601f1061212957610100808354040283529160200191612154565b820191906000526020600020905b81548152906001019060200180831161213757829003601f168201915b5050505050905090565b6000808080808061217689633baa373560e11b613321565b9450945094509450945060005b878110156119105760006121a28a8a8481811061196457611964615335565b90506002600182015462010000900460ff1660038111156121c5576121c5614d93565b10156121e35760405162461bcd60e51b815260040161080090615223565b60006121f88888846000016000015488613675565b9050600081600781111561220e5761220e614d93565b1461221c5761221c8161370a565b60018b8b8581811061223057612230615335565b905060400201602001602081019061224891906153f1565b600381111561225957612259614d93565b116122995760405162461bcd60e51b815260206004820152601060248201526f496c6c6567616c20416374697669747960801b6044820152606401610800565b8a8a848181106122ab576122ab615335565b90506040020160200160208101906122c391906153f1565b60018301805461ff0019166101008360038111156122e3576122e3614d93565b02179055508a8a848181106122fa576122fa615335565b9050604002016000013586856001600160a01b03167f471c5a6cf2e0a49f924550edae1620a5ab33333620552cd950f141d34052f2ad8e8e8881811061234257612342615335565b905060400201602001602081019061235a91906153f1565b604051612367919061540e565b60405180910390a45050808061237c906153cb565b915050612183565b6000808080808061239c8963a0787c3b60e01b613321565b9450945094509450945060005b878110156119105760006123da87878c8c868181106123ca576123ca615335565b9050604002016000013587613d4f565b905061240787868c8c868181106123f3576123f3615335565b905060400201602001358460030154613e3f565b89898381811061241957612419615335565b90506040020160200135816002018190555089898381811061243d5761243d615335565b9050604002016000013585846001600160a01b03167fd05ae773d4062095d26b4d57bac818d891e884c1b5781b58de3af9813aa3ecb98d8d8781811061248557612485615335565b9050604002016020013560405161249e91815260200190565b60405180910390a450806124b1816153cb565b9150506123a9565b6060600180546120db9061541b565b600060016000858152604860205260408120600101906124e8868661300c565b815260208101919091526040016000206001015460ff16600581111561251057612510614d93565b14949350505050565b60008080808080612531896330bce18360e21b613321565b9450945094509450945060005b8781101561191057600061255f87878c8c868181106123ca576123ca615335565b90506125a987886001016000896003015481526020019081526020016000206000015483600301548d8d8781811061259957612599615335565b9050604002016020013589614035565b81558989838181106125bd576125bd615335565b9050604002016000013585846001600160a01b03167f1203a1eed86a151c869396b3eff7518ea76ba4a5db8fddcc34deb76bffc32e688d8d8781811061260557612605615335565b9050604002016020013560405161261e91815260200190565b60405180910390a45080612631816153cb565b91505061253e565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036126835760405162461bcd60e51b81526004016108009061514e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166126b5612d1f565b6001600160a01b0316146126db5760405162461bcd60e51b815260040161080090615174565b6000600254600160a01b900460ff1660018111156126fb576126fb614d93565b146127185760405162461bcd60e51b815260040161080090615201565b6001600254600160a81b900460ff16600181111561273857612738614d93565b146127555760405162461bcd60e51b815260040161080090615223565b600061276763d9dc1f1960e01b612d7c565b9050600081601381111561277d5761277d614d93565b1461279d5780604051637f0911d160e01b81526004016108009190615278565b6001600160a01b0383166127dd5760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606401610800565b6127e6836140d2565b50600192915050565b6000808080808061280789636e47f9a960e11b613321565b9450945094509450945060005b8781101561191057600061283587878c8c868181106123ca576123ca615335565b905089898381811061284957612849615335565b90506040020160200160208101906128619190615460565b8160040160046101000a81548160ff021916908360ff16021790555089898381811061288f5761288f615335565b9050604002016000013585846001600160a01b03167ff514cf92c768e1aa3a78e04f18d15e4348e631680bd388458d4ba547bffceff98d8d878181106128d7576128d7615335565b90506040020160200160208101906128ef9190615460565b60405160ff909116815260200160405180910390a4508061290f816153cb565b915050612814565b6000611646614149565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361296b5760405162461bcd60e51b81526004016108009061514e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661299d612d1f565b6001600160a01b0316146129c35760405162461bcd60e51b815260040161080090615174565b60006129d2604e5461ffff1690565b61ffff1611612a0e5760405162461bcd60e51b81526020600482015260086024820152671393d5081253925560c21b6044820152606401610800565b6000612a20630f708ceb60e41b612d7c565b90506000816013811115612a3657612a36614d93565b14612a565780604051637f0911d160e01b81526004016108009190615278565b6002805484919060ff60a01b1916600160a01b836001811115612a7b57612a7b614d93565b021790555030336001600160a01b03167fc08ec585c25f1907baaab6f278c5994531a2e34c59935b3fcfe813067a3b487885604051612aba9190614db9565b60405180910390a350600192915050565b6000611646612d40565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612b1f5760405162461bcd60e51b81526004016108009061514e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612b51612d1f565b6001600160a01b031614612b775760405162461bcd60e51b815260040161080090615174565b6000600254600160a01b900460ff166001811115612b9757612b97614d93565b14612bb45760405162461bcd60e51b815260040161080090615201565b6000612bc6631f98802f60e31b612d7c565b90506000816013811115612bdc57612bdc614d93565b14612bfc5780604051637f0911d160e01b81526004016108009190615278565b6002805484919060ff60a81b1916600160a81b836001811115612c2157612c21614d93565b021790555030336001600160a01b03167ff5912c5e436152157ed2b4a84bc313b4b1fe09a15b941f195d23c99a1b8c45ad85604051612aba9190614db9565b6000838152604860205260408120816008820154600160a01b900460ff166003811115612c8f57612c8f614d93565b03612c9e5760009150506115f3565b600080612cab8387613988565b9150915080612cc057600093505050506115f3565b611bea838360020154876139e8565b60006001600160e01b03198216633d817cff60e01b1480612d0057506001600160e01b031982166352d1902d60e01b145b806107b257506301ffc9a760e01b6001600160e01b03198316146107b2565b60006000805160206157118339815191525b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612d31565b612d7585858585856141fd565b5050505050565b6002546040805163172cb29d60e11b81523060048201526001600160e01b03198416602482015233604482015290516000926001600160a01b031691632e59653a916064808301926020929190829003018187875af1158015612de3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b2919061547b565b60008282604051602001612e1c92919061549c565b60405160208183030381529060405280519060200120905092915050565b60006115f3612e4c60608501856152c6565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110409250869150612e949050610def88806152c6565b612ea46040890160208a01614c92565b612eb460608a0160408b0161530c565b6001600160401b03166143c6565b604080517f541cf898e7c3085cbc6b7402ba06e7237285bc4bd5baa510e708e35537a71ffd60208201529081018590526001600160a01b0380851660608301528316608082015260a0810182905260009060c0015b604051602081830303815290604052805190602001209050949350505050565b600080612f43836143f8565b9050600080612f528387614465565b90925090506000816004811115612f6b57612f6b614d93565b14612fac5760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c205369676e617475726560781b6044820152606401610800565b50949350505050565b600081604051602001612fc891906154ac565b604051602081830303815290604052805190602001209050919050565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401612fc8565b6040516bffffffffffffffffffffffff19606084901b1660208201526001600160e01b031982166034820152600090603801612e1c565b6000806130b260405160200161308d907f545950452e4c4956454c595f50524f46494c452e4c4956454c595f535953544581526726afa6a0a9aa22a960c11b602082015260280190565b60405160208183030381529060405280519060200120876144d090919063ffffffff16565b60008581526005820160205260408120549192506130d088836145a7565b905060028082015460009081526001808b016020526040909120015460ff16600581111561310057613100614d93565b10156131125760009350505050611fff565b868160020154036131295760019350505050611fff565b6002810154604051639c194e0560e01b8152600481018790526024810191909152604481018890523090639c194e0590606401602060405180830381865afa158015613179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319d919061528c565b98975050505050505050565b60005b6131ba61010086018661536c565b90508110156109e657600073__$68dc14faf17200ec68c1b553d3c187a731$__63f4bf396a886131ee6101008a018a61536c565b868181106131fe576131fe615335565b90506080020188886040518563ffffffff1660e01b815260040161322594939291906154be565b602060405180830381865af4158015613242573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613266919061551a565b905083856001600160a01b0385167fc25950594f3ea73f3d705d124dcf9a1078d4cdc837e010a2db2a126be3453ff9846132a46101008c018c61536c565b888181106132b4576132b4615335565b608002919091013590506132cc6101008d018d61536c565b898181106132dc576132dc615335565b90506080020160200135604051613306939291909283526020830191909152604082015260600190565b60405180910390a45080613319816153cb565b9150506131ac565b60008080808080306001600160a01b031663a304e3536040518163ffffffff1660e01b8152600401602060405180830381865afa158015613366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338a91906152a9565b600181111561339b5761339b614d93565b146133b85760405162461bcd60e51b815260040161080090615201565b60006133c488806152c6565b9050116134095760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2050726f66696c654e616d6560681b6044820152606401610800565b60008061341960608a018a6152c6565b905011156134ad574261343260608a0160408b0161530c565b6001600160401b03161161347c5760405162461bcd60e51b815260206004820152601160248201527045787069726564205369676e617475726560781b6044820152606401610800565b6134a6887f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d55612e3a565b90506134b0565b50335b60006134bf610def8a806152c6565b6001600160e01b031989166000908152604a60205260408120549192506001600160a01b03909116906134f2828b61300c565b905060006134ff85612fe5565b60405163a66ce52f60e01b8152600481018690526024810184905260448101829052909150309063a66ce52f90606401600060405180830381600087803b15801561354957600080fd5b505af115801561355d573d6000803e3d6000fd5b5050506000858152604860205260408120915061357b604485613593565b919e919d50949b509099509397509295505050505050565b600081815260018084016020526040822090600182015460ff1660058111156135be576135be614d93565b036135db576040805184815260018601602082015220915061366e565b6000600182015460ff1660058111156135f6576135f6614d93565b036136335760405162461bcd60e51b815260206004820152600d60248201526c11925108139bdd08119bdd5b99609a1b6044820152606401610800565b60405162461bcd60e51b815260206004820152601060248201526f125b1b195859db081192510814db1bdd60821b6044820152606401610800565b5092915050565b604051635fbcdb4b60e01b81526004810185905260248101849052604481018390526064810182905260009073__$68dc14faf17200ec68c1b553d3c187a731$__90635fbcdb4b90608401602060405180830381865af41580156136dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137019190615533565b95945050505050565b600181600781111561371e5761371e614d93565b0361373c5760405163e15df99b60e01b815260040160405180910390fd5b600281600781111561375057613750614d93565b0361376e5760405163c38331b560e01b815260040160405180910390fd5b600381600781111561378257613782614d93565b036137a05760405163dab65f4760e01b815260040160405180910390fd5b60048160078111156137b4576137b4614d93565b036137d257604051633f4b20a160e11b815260040160405180910390fd5b60058160078111156137e6576137e6614d93565b03613804576040516308fa537360e01b815260040160405180910390fd5b600681600781111561381857613818614d93565b036138365760405163ae0903a160e01b815260040160405180910390fd5b600781600781111561384a5761384a614d93565b036138685760405163d59825eb60e01b815260040160405180910390fd5b60405162461bcd60e51b815260206004820152600b60248201526a2ab735b737bbb71022a92960a91b6044820152606401610800565b50565b600081815260018301602052604081206002600182015460ff1660058111156138cc576138cc614d93565b036138e9576040805184815260018601602082015220915061366e565b6000600182015460ff16600581111561390457613904614d93565b036139415760405162461bcd60e51b815260206004820152600d60248201526c10d25108139bdd08119bdd5b99609a1b6044820152606401610800565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b0810d2510814db1bdd60821b6044820152606401610800565b60006115f38383614684565b60008181526001808401602052604082208291600182015460ff1660058111156139b4576139b4614d93565b036139d6575050604080518381526001858101602083015291902091506139e1565b600019925060009150505b9250929050565b60008281526020849052604081206001015460ff1681613a0784612fe5565b90506002826003811115613a1d57613a1d614d93565b03613a9557600080613a2f8888614777565b9150915080613a455760009450505050506115f3565b600080613a5f84600301548b6147c290919063ffffffff16565b9150915080613a7757600096505050505050506115f3565b50600093845260050160205250506040902054841491506115f39050565b6003826003811115613aa957613aa9614d93565b03613aed57600080613abb88886147c2565b9150915080613ad15760009450505050506115f3565b5060009182526005016020526040902054151591506115f39050565b50600095945050505050565b613b01612d1f565b6001600160a01b0316816001600160a01b031603613b4b5760405162461bcd60e51b8152602060048201526007602482015266125b1b1959d85b60ca1b6044820152606401610800565b6000613b5d637147855d60e01b612d7c565b90506000816013811115613b7357613b73614d93565b14613b935780604051637f0911d160e01b81526004016108009190615278565b5050565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613be157613bcc846147d9565b506040805160008152602081019091526115f3565b60008051602061571183398151915260001b846001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c55919061551a565b14613c915760405162461bcd60e51b815260206004820152600c60248201526b496c6c6567616c205555505360a01b6044820152606401610800565b6040516301ffc9a760e01b8152633d817cff60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015613cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d00919061528c565b613d3d5760405162461bcd60e51b815260206004820152600e60248201526d496c6c6567616c204950726f787960901b6044820152606401610800565b613d48848484614808565b90506115f3565b600080613d5c8685613593565b9050600180820154610100900460ff166003811115613d7d57613d7d614d93565b11613dbd5760405162461bcd60e51b815260206004820152601060248201526f119d5b98dd1a5bdb8811195b195d195960821b6044820152606401610800565b6002600182015462010000900460ff166003811115613dde57613dde614d93565b1015613dfc5760405162461bcd60e51b815260040161080090615223565b6000613e118787846000016000015487613675565b90506000816007811115613e2757613e27614d93565b14613e3557613e358161370a565b5095945050505050565b600082815260208590526040902060018082015460ff166003811115613e6757613e67614d93565b11613ea65760405162461bcd60e51b815260206004820152600f60248201526e125b1b1959d85b081059d95b9d1259608a1b6044820152606401610800565b600080613eb38786614869565b91509150816005811115613ec957613ec9614d93565b60021115613f195760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204167656e742053636f7065547970650000000000000000006044820152606401610800565b816005811115613f2b57613f2b614d93565b600203613f7c57838114613f775760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c204167656e742053636f706560681b6044820152606401610800565b61402c565b604051639c194e0560e01b81526004810187905260248101829052604481018590523090639c194e0590606401602060405180830381865afa158015613fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fea919061528c565b61402c5760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c204167656e742053636f706560681b6044820152606401610800565b50505050505050565b604051631db95cd360e31b8152600481018690526024810185905260448101849052606481018390526084810182905260009073__$68dc14faf17200ec68c1b553d3c187a731$__9063edcae6989060a401602060405180830381865af41580156140a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c8919061551a565b9695505050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f63fdbed5f2909ec44e3becc51e9d29654ce1447747914e8a6ebc019e7f640b8b9181900360200190a350565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f600060405160200161417e9190615554565b6040516020818303038152906040528051906020012060016040516020016141a69190615554565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b604e5462010000900460ff166142555760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e67000000000000006044820152606401610800565b6000614262858783615615565b506001614270838583615615565b506001600160a01b0381163014614356576001600160a01b0381163b6142a85760405162461bcd60e51b81526004016108009061524e565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156142f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614317919061528c565b6143515760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610800565b6143a2565b6143666331501c3960e01b61078d565b6143a25760405162461bcd60e51b815260206004820152600d60248201526c139bdd0814dd5c1c1bdc9d1959609a1b6044820152606401610800565b600280546001600160b01b0319166001600160a01b038316179055612d75336140d2565b60408051602081018690529081018490526001600160a01b03831660608201526080810182905260009060a001612f17565b60006107b2306001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561443b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061445f919061551a565b836148fe565b600080825160410361449b5760208301516040840151606085015160001a61448f87828585614925565b945094505050506139e1565b82516040036144c457602083015160408401516144b9868383614a12565b9350935050506139e1565b506000905060026139e1565b60008181526020839052604081206003600182015460ff1660038111156144f9576144f9614d93565b0361451457604080518481526020810186905220915061366e565b6000600182015460ff16600381111561452f5761452f614d93565b0361456c5760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b6044820152606401610800565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b6044820152606401610800565b60008181526020839052604081206002600182015460ff1660038111156145d0576145d0614d93565b036145eb57604080518481526020810186905220915061366e565b6000600182015460ff16600381111561460657614606614d93565b036146465760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b6044820152606401610800565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b6044820152606401610800565b6000818152600183016020526040812054801561476d5760006146a86001836156d4565b85549091506000906146bc906001906156d4565b90508181146147215760008660000182815481106146dc576146dc615335565b90600052602060002001549050808760000184815481106146ff576146ff615335565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614732576147326156e7565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107b2565b60009150506107b2565b6000818152602083905260408120819060025b600182015460ff1660038111156147a3576147a3614d93565b036139d6575050604080518381526020810185905220905060016139e1565b60008181526020839052604081208190600361478a565b60008051602061571183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b606061481384614a4b565b6000835111806148205750815b1561485357613d4884846040518060400160405280600b81526020016a10d85b1b0811985a5b195960aa1b815250614a8f565b6040805160008082526020820190925290612fac565b600081815260208390526040812060010154819060ff16600281600381111561489457614894614d93565b036148cc5760006148a586866145a7565b60020154600081815260018089016020526040909120015460ff16945092506139e1915050565b60038160038111156148e0576148e0614d93565b036148f15760006148a586866144d0565b5060009485945092505050565b60405161190160f01b60208201526022810183905260428101829052600090606201612e1c565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561495c5750600090506003614a09565b8460ff16601b1415801561497457508460ff16601c14155b156149855750600090506004614a09565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156149d9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614a0257600060019250925050614a09565b9150600090505b94509492505050565b6000806001600160ff1b03831681614a2f60ff86901c601b6156fd565b9050614a3d87828885614925565b935093505050935093915050565b614a54816147d9565b6040516001600160a01b03821690309033907f8ee0f2bd29c0e6a975c3cc2e47cf2e01b5f23a9a8a02e0ed6a5a070269de3d2d90600090a450565b60606001600160a01b0384163b614ae85760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20436f6e7472616374204164647265737300000000000000006044820152606401610800565b600080856001600160a01b031685604051614b0391906154ac565b600060405180830381855af49150503d8060008114614b3e576040519150601f19603f3d011682016040523d82523d6000602084013e614b43565b606091505b50915091506140c882828660608315614b5d5750816115f3565b825115614b6d5782518084602001fd5b8160405162461bcd60e51b815260040161080091906150de565b80356001600160e01b031981168114610cf757600080fd5b600060208284031215614bb157600080fd5b6115f382614b87565b60008083601f840112614bcc57600080fd5b5081356001600160401b03811115614be357600080fd5b6020830191508360208285010111156139e157600080fd5b80356001600160a01b0381168114610cf757600080fd5b600080600080600060608688031215614c2a57600080fd5b85356001600160401b0380821115614c4157600080fd5b614c4d89838a01614bba565b90975095506020880135915080821115614c6657600080fd5b50614c7388828901614bba565b9094509250614c86905060408701614bfb565b90509295509295909350565b600060208284031215614ca457600080fd5b6115f382614bfb565b600060808284031215614cbf57600080fd5b50919050565b60008083601f840112614cd757600080fd5b5081356001600160401b03811115614cee57600080fd5b6020830191508360208260051b85010111156139e157600080fd5b600080600060408486031215614d1e57600080fd5b83356001600160401b0380821115614d3557600080fd5b614d4187838801614cad565b94506020860135915080821115614d5757600080fd5b50614d6486828701614cc5565b9497909650939450505050565b60008060408385031215614d8457600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b6002811061389e5761389e614d93565b60208101614dc683614da9565b91905290565b60008083601f840112614dde57600080fd5b5081356001600160401b03811115614df557600080fd5b6020830191508360208260061b85010111156139e157600080fd5b600080600060408486031215614e2557600080fd5b83356001600160401b0380821115614e3c57600080fd5b614e4887838801614cad565b94506020860135915080821115614e5e57600080fd5b50614d6486828701614dcc565b600080600060608486031215614e8057600080fd5b8335925060208401359150614e9760408501614bfb565b90509250925092565b60068110614eb057614eb0614d93565b9052565b6004811061389e5761389e614d93565b614eb081614eb4565b6000610160820190508251825260208301516020830152604083015160408301526060830151614f0960608401826001600160e01b0319169052565b506080830151614f21608084018263ffffffff169052565b5060a0830151614f3460a0840182614ea0565b5060c0830151614f4760c0840182614ec4565b5060e0830151614f5a60e0840182614ec4565b5061010080840151614f6e82850182614ec4565b505061012080840151614f8382850182614ec4565b50506101409283015160ff16919092015290565b634e487b7160e01b600052604160045260246000fd5b801515811461389e57600080fd5b8035610cf781614fad565b600080600060608486031215614fdb57600080fd5b614fe484614bfb565b925060208401356001600160401b038082111561500057600080fd5b818601915086601f83011261501457600080fd5b81358181111561502657615026614f97565b604051601f8201601f19908116603f0116810190838211818310171561504e5761504e614f97565b8160405282815289602084870101111561506757600080fd5b826020860160208301376000602084830101528096505050505050614e9760408501614fbb565b60005b838110156150a9578181015183820152602001615091565b50506000910152565b600081518084526150ca81602086016020860161508e565b601f01601f19169290920160200192915050565b6020815260006115f360208301846150b2565b60008060006060848603121561510657600080fd5b8335925061511660208501614bfb565b9150614e9760408501614b87565b6002811061389e57600080fd5b60006020828403121561514357600080fd5b81356115f381615124565b6020808252600c908201526b125b1b1959d85b0810d85b1b60a21b604082015260600190565b6020808252600c908201526b125b9d985b1a590810d85b1b60a21b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006151d760608301878961519a565b82810360208401526151ea81868861519a565b91505061ffff831660408301529695505050505050565b60208082526008908201526714995a9958dd195960c21b604082015260600190565b602080825260119082015270496c6c6567616c20557064617461626c6560781b604082015260600190565b60208082526010908201526f125b1b1959d85b0810dbdb9d1c9858dd60821b604082015260600190565b6020810160148310614dc657614dc6614d93565b60006020828403121561529e57600080fd5b81516115f381614fad565b6000602082840312156152bb57600080fd5b81516115f381615124565b6000808335601e198436030181126152dd57600080fd5b8301803591506001600160401b038211156152f757600080fd5b6020019150368190038213156139e157600080fd5b60006020828403121561531e57600080fd5b81356001600160401b03811681146115f357600080fd5b634e487b7160e01b600052603260045260246000fd5b6000823561011e1983360301811261536257600080fd5b9190910192915050565b6000808335601e1984360301811261538357600080fd5b8301803591506001600160401b0382111561539d57600080fd5b6020019150600781901b36038213156139e157600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016153dd576153dd6153b5565b5060010190565b6004811061389e57600080fd5b60006020828403121561540357600080fd5b81356115f3816153e4565b60208101614dc683614eb4565b600181811c9082168061542f57607f821691505b602082108103614cbf57634e487b7160e01b600052602260045260246000fd5b803560ff81168114610cf757600080fd5b60006020828403121561547257600080fd5b6115f38261544f565b60006020828403121561548d57600080fd5b8151601481106115f357600080fd5b8183823760009101908152919050565b6000825161536281846020870161508e565b600060e082019050858252843560208301526020850135604083015263ffffffff60e01b6154ee60408701614b87565b16606083015260ff6155026060870161544f565b16608083015260a082019390935260c0015292915050565b60006020828403121561552c57600080fd5b5051919050565b60006020828403121561554557600080fd5b8151600881106115f357600080fd5b60008083546155628161541b565b6001828116801561557a576001811461558f576155be565b60ff19841687528215158302870194506155be565b8760005260208060002060005b858110156155b55781548a82015290840190820161559c565b50505082870194505b50929695505050505050565b601f82111561561057600081815260208120601f850160051c810160208610156155f15750805b601f850160051c820191505b818110156109e6578281556001016155fd565b505050565b6001600160401b0383111561562c5761562c614f97565b6156408361563a835461541b565b836155ca565b6000601f841160018114615674576000851561565c5750838201355b600019600387901b1c1916600186901b178355612d75565b600083815260209020601f19861690835b828110156156a55786850135825560209485019460019092019101615685565b50868210156156c25760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b818103818111156107b2576107b26153b5565b634e487b7160e01b600052603160045260246000fd5b808201808211156107b2576107b26153b556fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca264697066735822122019b6a878599a75332afc1e71132d4a256f05f4e4d913d4d027ac6092d9961a4964736f6c63430008130033",
  "libraries": {
    "LProfileCommons": "0x7F11D5bb7c99667ac0E8851c6B72633d35244c6C"
  },
  "devdoc": {
    "author": "Sina Tadayon, https://github.com/SinaTadayon",
    "events": {
      "Initialized(address,address,address,string,string,uint16)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ProxyLocalAdminUpdated(address,address,address)": {
        "details": "Emitted when the admin account has changed."
      }
    },
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "Function Manager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82229,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "_contractName",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 82231,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "_contractVersion",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 82233,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 82236,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "_sstat",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(ProxySafeModeStatus)82251"
      },
      {
        "astId": 82239,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "_ustat",
        "offset": 21,
        "slot": "2",
        "type": "t_enum(ProxyUpdatabilityStatus)82254"
      },
      {
        "astId": 82244,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "__reserved",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)64_storage"
      },
      {
        "astId": 10383,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "_firstInit",
        "offset": 0,
        "slot": "67",
        "type": "t_bool"
      },
      {
        "astId": 10386,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "_data",
        "offset": 0,
        "slot": "68",
        "type": "t_struct(DataCollection)10239_storage"
      },
      {
        "astId": 82432,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "78",
        "type": "t_uint16"
      },
      {
        "astId": 82435,
        "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
        "label": "_initializing",
        "offset": 2,
        "slot": "78",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)64_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[64]",
        "numberOfBytes": "2048"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(ActivityStatus)11721": {
        "encoding": "inplace",
        "label": "enum IACLCommons.ActivityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(AgentType)11716": {
        "encoding": "inplace",
        "label": "enum IACLCommons.AgentType",
        "numberOfBytes": "1"
      },
      "t_enum(AlterabilityStatus)11726": {
        "encoding": "inplace",
        "label": "enum IACLCommons.AlterabilityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PolicyType)11744": {
        "encoding": "inplace",
        "label": "enum IACLCommons.PolicyType",
        "numberOfBytes": "1"
      },
      "t_enum(ProxySafeModeStatus)82251": {
        "encoding": "inplace",
        "label": "enum IBaseProxy.ProxySafeModeStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProxyUpdatabilityStatus)82254": {
        "encoding": "inplace",
        "label": "enum IBaseProxy.ProxyUpdatabilityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ScopeType)11733": {
        "encoding": "inplace",
        "label": "enum IACLCommons.ScopeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(FacetEntity)11945_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IACLCommons.FacetEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetEntity)11945_storage"
      },
      "t_mapping(t_address,t_struct(ProfileAccount)12018_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IACLCommons.ProfileAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileAccount)12018_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.BaseAgent)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseAgent)11756_storage"
      },
      "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.BaseScope)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseScope)11770_storage"
      },
      "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.PolicyEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyEntity)11793_storage"
      },
      "t_mapping(t_bytes32,t_struct(ProfileEntity)12059_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.ProfileEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileEntity)12059_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)79783_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.AddressSet",
        "members": [
          {
            "astId": 79782,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)79482_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BaseAgent)11756_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.BaseAgent",
        "members": [
          {
            "astId": 11746,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11749,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "atype",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(AgentType)11716"
          },
          {
            "astId": 11752,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "acstat",
            "offset": 1,
            "slot": "1",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11755,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "alstat",
            "offset": 2,
            "slot": "1",
            "type": "t_enum(AlterabilityStatus)11726"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BaseScope)11770_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.BaseScope",
        "members": [
          {
            "astId": 11758,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11761,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "stype",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ScopeType)11733"
          },
          {
            "astId": 11764,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "acstat",
            "offset": 1,
            "slot": "1",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11767,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "alstat",
            "offset": 2,
            "slot": "1",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 11769,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "referredByAgent",
            "offset": 3,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)79676_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 79675,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)79482_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DataCollection)10239_storage": {
        "encoding": "inplace",
        "label": "struct ACLStorage.DataCollection",
        "members": [
          {
            "astId": 10202,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "agents",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)"
          },
          {
            "astId": 10207,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "scopes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)"
          },
          {
            "astId": 10212,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "policies",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)"
          },
          {
            "astId": 10216,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "rolePolicyMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 10221,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "profiles",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes32,t_struct(ProfileEntity)12059_storage)"
          },
          {
            "astId": 10226,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "profileAccounts",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(ProfileAccount)12018_storage)"
          },
          {
            "astId": 10230,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "selectors",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes4,t_address)"
          },
          {
            "astId": 10235,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "facets",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(FacetEntity)11945_storage)"
          },
          {
            "astId": 10238,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "facetSet",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)79783_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(FacetEntity)11945_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.FacetEntity",
        "members": [
          {
            "astId": 11944,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "subjectId",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PolicyEntity)11793_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.PolicyEntity",
        "members": [
          {
            "astId": 11772,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11774,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "scopeId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 11776,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 11778,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "roleLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 11780,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "policyCode",
            "offset": 2,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 11783,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "ptype",
            "offset": 3,
            "slot": "3",
            "type": "t_enum(PolicyType)11744"
          },
          {
            "astId": 11786,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "acstat",
            "offset": 4,
            "slot": "3",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11789,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "alstat",
            "offset": 5,
            "slot": "3",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 11792,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "roles",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bytes32Set)79676_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ProfileAccount)12018_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileAccount",
        "members": [
          {
            "astId": 12017,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "profiles",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProfileEntity)12059_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileEntity",
        "members": [
          {
            "astId": 12023,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "agents",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)"
          },
          {
            "astId": 12028,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "scopes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)"
          },
          {
            "astId": 12033,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "policies",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)"
          },
          {
            "astId": 12037,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "rolePolicyMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 12040,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "admins",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bytes32Set)79676_storage"
          },
          {
            "astId": 12042,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "adminId",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 12044,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "name",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 12046,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "owner",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 12049,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "acstat",
            "offset": 20,
            "slot": "8",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 12052,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "alstat",
            "offset": 21,
            "slot": "8",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 12055,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "registerLimits",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(ProfileRegisterLimit)11993_storage"
          },
          {
            "astId": 12058,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "limits",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(ProfileLimit)12014_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(ProfileLimit)12014_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileLimit",
        "members": [
          {
            "astId": 11995,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "profileCallLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11997,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "contextLimit",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11999,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "memberLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 12001,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "realmLimit",
            "offset": 11,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12003,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "domainLimit",
            "offset": 13,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12005,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "memberCallLimit",
            "offset": 15,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12007,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "typeRoleLimit",
            "offset": 17,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12009,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "typeLimit",
            "offset": 19,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12011,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "policyRoleLimit",
            "offset": 21,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12013,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "functionLimit",
            "offset": 23,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProfileRegisterLimit)11993_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileRegisterLimit",
        "members": [
          {
            "astId": 11978,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "memberRegisterLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11980,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "roleRegisterLimit",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11982,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "typeRegisterLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11984,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "functionRegisterLimit",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11986,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "contextRegisterLimit",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11988,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "realmRegisterLimit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11990,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "domainRegisterLimit",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11992,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "policyRegisterLimit",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)79482_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Set",
        "members": [
          {
            "astId": 79477,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 79481,
            "contract": "src/contracts/acl/profile/scope/ProfileFunctionManager.sol:ProfileFunctionManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}