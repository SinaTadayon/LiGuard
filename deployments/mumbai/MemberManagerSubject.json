{
  "address": "0x6C28E24b1B08fD7656035c08103AF23fb0853Cd6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum IACL.AuthorizationStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "ACLActionForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLCallForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLContextActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLContextNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLDomainActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLDomainNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLFunctionActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLFunctionNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLMemberActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLMemberNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLPolicyForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRealmActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRealmNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRoleActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRoleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRoleScopeForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLTypeActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLUniverseActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessFunctionNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessNotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessPolicyForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessRoleActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessRoleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessTypeActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum IACL.AdminAccessStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "SetAdminForbidden",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "initCount",
          "type": "uint16"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IACLCommons.ActivityStatus",
          "name": "acstat",
          "type": "uint8"
        }
      ],
      "name": "MemberActivityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "adminId",
          "type": "bytes32"
        }
      ],
      "name": "MemberAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IACLCommons.AlterabilityStatus",
          "name": "alstat",
          "type": "uint8"
        }
      ],
      "name": "MemberAlterabilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "memberLimit",
              "type": "uint24"
            },
            {
              "internalType": "uint16",
              "name": "memberRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "contextRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "functionRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "profileRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "contextLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "realmLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "domainLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "callLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "typeRoleLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "typeLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "roleRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "typeRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "realmRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "domainRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "policyRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "policyRoleLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "functionLimit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IACLCommons.GeneralLimit",
          "name": "limits",
          "type": "tuple"
        }
      ],
      "name": "MemberGeneralLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "roleId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "adminId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "memberLimit",
              "type": "uint24"
            },
            {
              "internalType": "uint16",
              "name": "memberRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "contextRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "functionRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "profileRegisterLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "contextLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "realmLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "domainLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "callLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "typeRoleLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "typeLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "roleRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "typeRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "realmRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "domainRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "policyRegisterLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "policyRoleLimit",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "functionLimit",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IACLCommons.GeneralLimit",
          "name": "limits",
          "type": "tuple"
        }
      ],
      "name": "MemberRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCompleted",
          "type": "bool"
        }
      ],
      "name": "MemberRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "roleId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        }
      ],
      "name": "MemberRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "acl",
          "type": "address"
        }
      ],
      "name": "ProxyAccessControlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "ProxyLocalAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "sstat",
          "type": "uint8"
        }
      ],
      "name": "ProxySafeModeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "ustat",
          "type": "uint8"
        }
      ],
      "name": "ProxyUpdatabilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "ProxyUpgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEMBER_SIGNATURE_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PREDICT_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractVersion",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accessControlManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "memberCheckAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "memberCheckAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        }
      ],
      "name": "memberCheckId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        }
      ],
      "name": "memberGetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint24",
                  "name": "memberLimit",
                  "type": "uint24"
                },
                {
                  "internalType": "uint16",
                  "name": "memberRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "contextRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "functionRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "profileRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "contextLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "realmLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "domainLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "callLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "typeRoleLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "typeLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint8",
                  "name": "roleRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "typeRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "realmRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "domainRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "policyRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "policyRoleLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "functionLimit",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IACLCommons.GeneralLimit",
              "name": "limits",
              "type": "tuple"
            },
            {
              "internalType": "uint16",
              "name": "typeCount",
              "type": "uint16"
            },
            {
              "internalType": "enum IACLCommons.AgentType",
              "name": "adminType",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AgentType",
              "name": "atype",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IMemberManagement.MemberInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        }
      ],
      "name": "memberGetTypes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "memberId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        }
      ],
      "name": "memberHasType",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "roleId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint24",
                  "name": "memberLimit",
                  "type": "uint24"
                },
                {
                  "internalType": "uint16",
                  "name": "memberRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "contextRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "functionRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "profileRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "contextLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "realmLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "domainLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "callLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "typeRoleLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "typeLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint8",
                  "name": "roleRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "typeRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "realmRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "domainRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "policyRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "policyRoleLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "functionLimit",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IACLCommons.GeneralLimit",
              "name": "limits",
              "type": "tuple"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IMemberManagement.MemberRegisterRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "memberRegister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "members",
          "type": "bytes32[]"
        }
      ],
      "name": "memberRemove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IACLCommons.UpdateActivityRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "memberUpdateActivityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IACLCommons.UpdateAdminRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "memberUpdateAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IACLCommons.UpdateAlterabilityRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "memberUpdateAlterabilityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "memberId",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint24",
                  "name": "memberLimit",
                  "type": "uint24"
                },
                {
                  "internalType": "uint16",
                  "name": "memberRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "contextRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "functionRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "profileRegisterLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "contextLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "realmLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "domainLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "callLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "typeRoleLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "typeLimit",
                  "type": "uint16"
                },
                {
                  "internalType": "uint8",
                  "name": "roleRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "typeRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "realmRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "domainRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "policyRegisterLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "policyRoleLimit",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "functionLimit",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IACLCommons.GeneralLimit",
              "name": "limits",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMemberManagement.MemberUpdateGeneralLimitRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "memberUpdateGeneralLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeModeStatus",
      "outputs": [
        {
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "acl",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLocalAdmin",
          "type": "address"
        }
      ],
      "name": "setLocalAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "sstat",
          "type": "uint8"
        }
      ],
      "name": "setSafeModeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "ustat",
          "type": "uint8"
        }
      ],
      "name": "setUpdatabilityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatabilityStatus",
      "outputs": [
        {
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "forceCall",
          "type": "bool"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0a61f05e30f5e792ed50c5d561936e6927c4a4ffb3925e010a525285b45fdf11",
  "receipt": {
    "to": null,
    "from": "0x1654E08a4963D92846B7cC12bfE911887EA6930c",
    "contractAddress": "0x6C28E24b1B08fD7656035c08103AF23fb0853Cd6",
    "transactionIndex": 1,
    "gasUsed": "5351759",
    "logsBloom": "0x
    "blockHash": "0xd59758ff3e1fb260f58bca60fe2afce6730ffec80e3132c3c2a5a28e63b0c452",
    "transactionHash": "0x0a61f05e30f5e792ed50c5d561936e6927c4a4ffb3925e010a525285b45fdf11",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32749748,
        "transactionHash": "0x0a61f05e30f5e792ed50c5d561936e6927c4a4ffb3925e010a525285b45fdf11",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001654e08a4963d92846b7cc12bfe911887ea6930c",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000be21f6e814c71000000000000000000000000000000000000000000000000054b8b1cf4be556f2000000000000000000000000000000000000000000000e289b0e50ca696fd8a000000000000000000000000000000000000000000000000053fa8fd863d08fe2000000000000000000000000000000000000000000000e289bcc72c151849fb0",
        "logIndex": 2,
        "blockHash": "0xd59758ff3e1fb260f58bca60fe2afce6730ffec80e3132c3c2a5a28e63b0c452"
      }
    ],
    "blockNumber": 32749748,
    "cumulativeGasUsed": "5594807",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3d37f12163392c6a812b5af749abec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum IACL.AuthorizationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ACLActionForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLCallForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLContextActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLContextNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLDomainActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLDomainNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLFunctionActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLFunctionNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLMemberActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLMemberNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLPolicyForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRealmActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRealmNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRoleActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRoleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRoleScopeForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLTypeActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLUniverseActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessFunctionNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessNotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessPolicyForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessRoleActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessRoleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessTypeActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessTypeNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IACL.AdminAccessStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"SetAdminForbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"initCount\",\"type\":\"uint16\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"}],\"name\":\"MemberActivityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"}],\"name\":\"MemberAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"name\":\"MemberAlterabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"memberLimit\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"memberRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"functionRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"profileRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"realmLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"callLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeRoleLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"roleRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"typeRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"realmRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"domainRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRoleLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionLimit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IACLCommons.GeneralLimit\",\"name\":\"limits\",\"type\":\"tuple\"}],\"name\":\"MemberGeneralLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"roleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"memberLimit\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"memberRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"functionRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"profileRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"realmLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"callLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeRoleLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"roleRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"typeRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"realmRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"domainRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRoleLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionLimit\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IACLCommons.GeneralLimit\",\"name\":\"limits\",\"type\":\"tuple\"}],\"name\":\"MemberRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"roleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"}],\"name\":\"MemberRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acl\",\"type\":\"address\"}],\"name\":\"ProxyAccessControlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ProxyLocalAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"sstat\",\"type\":\"uint8\"}],\"name\":\"ProxySafeModeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"ustat\",\"type\":\"uint8\"}],\"name\":\"ProxyUpdatabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ProxyUpgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMBER_SIGNATURE_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREDICT_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accessControlManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"memberCheckAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"memberCheckAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"}],\"name\":\"memberCheckId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"}],\"name\":\"memberGetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"memberLimit\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"memberRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"functionRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"profileRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"realmLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"callLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeRoleLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"roleRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"typeRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"realmRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"domainRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRoleLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionLimit\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.GeneralLimit\",\"name\":\"limits\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"typeCount\",\"type\":\"uint16\"},{\"internalType\":\"enum IACLCommons.AgentType\",\"name\":\"adminType\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AgentType\",\"name\":\"atype\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IMemberManagement.MemberInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"}],\"name\":\"memberGetTypes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"}],\"name\":\"memberHasType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"roleId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"memberLimit\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"memberRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"functionRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"profileRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"realmLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"callLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeRoleLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"roleRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"typeRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"realmRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"domainRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRoleLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionLimit\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.GeneralLimit\",\"name\":\"limits\",\"type\":\"tuple\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IMemberManagement.MemberRegisterRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"memberRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"members\",\"type\":\"bytes32[]\"}],\"name\":\"memberRemove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.UpdateActivityRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"memberUpdateActivityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IACLCommons.UpdateAdminRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"memberUpdateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.UpdateAlterabilityRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"memberUpdateAlterabilityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"memberId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"memberLimit\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"memberRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"functionRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"profileRegisterLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"contextLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"realmLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"domainLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"callLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeRoleLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"roleRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"typeRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"realmRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"domainRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRegisterLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"policyRoleLimit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionLimit\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.GeneralLimit\",\"name\":\"limits\",\"type\":\"tuple\"}],\"internalType\":\"struct IMemberManagement.MemberUpdateGeneralLimitRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"memberUpdateGeneralLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeModeStatus\",\"outputs\":[{\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acl\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLocalAdmin\",\"type\":\"address\"}],\"name\":\"setLocalAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"sstat\",\"type\":\"uint8\"}],\"name\":\"setSafeModeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"ustat\",\"type\":\"uint8\"}],\"name\":\"setUpdatabilityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatabilityStatus\",\"outputs\":[{\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forceCall\",\"type\":\"bool\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Sina Tadayon, https://github.com/SinaTadayon\",\"events\":{\"Initialized(address,address,address,string,string,uint16)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ProxyLocalAdminUpdated(address,address,address)\":{\"details\":\"Emitted when the admin account has changed.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"ACL Member Manager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/acl/agent/MemberManager.sol\":\"MemberManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/contracts/acl/ACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Abstract Access Control List Storage Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract ACLStorage is BaseUUPSStorage, IACLCommons {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  struct DataCollection {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    mapping(bytes32 => ProfileEntity) profiles;\\n    mapping(address => ProfileAccount) profileAccounts;\\n    mapping(bytes4 => address) selectors;\\n    mapping(address => FacetEntity) facets;\\n    LEnumerableSet.AddressSet facetSet;\\n  }\\n\\n  bytes32 public constant CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"PredictContext(address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"MemberSignature(address account,uint256 expiredAt)\\\");\\n\\n  bytes32 public constant PROFILE_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileContext(string profile,address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfilePredictContext(string profile,address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileMemberSignature(string profile,address account,uint256 expiredAt)\\\");\\n\\n  // General Types ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SCOPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_MEMBER_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_TYPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_POLICY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_PROFILE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\"));\\n\\n  // Universe Scope ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_VERSE\\\"));\\n\\n  // General Profile Type\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n\\n  bool internal _firstInit;\\n  DataCollection internal _data;\\n  // Note: for next upgrade add new variables after this line\\n}\\n\",\"keccak256\":\"0x748ba9ee4ce4e5492afd3261bf61e8360b3f45ae3588218c1bbf90699df2065b\",\"license\":\"MIT\"},\"src/contracts/acl/IACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACL {\\n  enum AuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ACLUnauthorized();\\n  error ACLPolicyForbidden();\\n  error ACLCallForbidden();\\n  error ACLRoleScopeForbidden();\\n  error ACLMemberNotFound();\\n  error ACLRoleNotFound();\\n  error ACLTypeNotFound();\\n  error ACLFunctionNotFound();\\n  error ACLContextNotFound();\\n  error ACLRealmNotFound();\\n  error ACLDomainNotFound();\\n  error ACLMemberActivityForbidden();\\n  error ACLRoleActivityForbidden();\\n  error ACLTypeActivityForbidden();\\n  error ACLFunctionActivityForbidden();\\n  error ACLContextActivityForbidden();\\n  error ACLRealmActivityForbidden();\\n  error ACLDomainActivityForbidden();\\n  error ACLUniverseActivityForbidden();\\n\\n  error ACLActionForbidden(AuthorizationStatus);\\n\\n  enum AdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error AdminAccessNotPermitted();\\n  error AdminAccessPolicyForbidden();\\n  error AdminAccessRoleNotFound();\\n  error AdminAccessTypeNotFound();\\n  error AdminAccessFunctionNotFound();\\n  error AdminAccessRoleActivityForbidden();\\n  error AdminAccessTypeActivityForbidden();\\n\\n  error SetAdminForbidden(AdminAccessStatus);\\n\\n  function hasAccess(bytes32 functionId) external returns (AuthorizationStatus);\\n\\n  function hasMemberAccess(bytes32 functionId, bytes32 memberId) external returns (AuthorizationStatus);\\n\\n  function hasCSAccess(address contractId, bytes4 selector) external returns (AuthorizationStatus);\\n\\n  function hasAccountAccess(\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (AuthorizationStatus);\\n}\\n\",\"keccak256\":\"0x3b4bd5cd73079a4bcbc82fe3699b21fcc08fdafc964f978a9c540756302dbb2e\",\"license\":\"MIT\"},\"src/contracts/acl/IACLCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLCommons {\\n  enum AgentType {\\n    NONE,\\n    MEMBER,\\n    ROLE,\\n    TYPE\\n  }\\n\\n  enum ActivityStatus {\\n    NONE,\\n    DELETED,\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum AlterabilityStatus {\\n    NONE,\\n    DISABLED,\\n    UPDATABLE,\\n    UPGRADABLE\\n  }\\n\\n  enum ScopeType {\\n    NONE,\\n    FUNCTION,\\n    CONTEXT,\\n    REALM,\\n    DOMAIN,\\n    UNIVERSE\\n  }\\n\\n  enum ActionType {\\n    ADD,\\n    UPDATE,\\n    REMOVE\\n  }\\n\\n  enum PolicyType {\\n    UNLOCK, // 0\\n    SLOCK, // soft lock, 1 - 63\\n    MLOCK, // medium lock, 64 - 127\\n    RLOCK, // restrict lock, 128 - 191\\n    HLOCK, // hard lock, 192 - 254\\n    LOCK // 255\\n  }\\n\\n  struct BaseAgent {\\n    bytes32 adminId;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct BaseScope {\\n    bytes32 adminId;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    uint32 referredByAgent;\\n  }\\n\\n  struct PolicyEntity {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint8 policyCode;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FunctionEntity {\\n    BaseScope bs;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n  }\\n\\n  struct ContextEntity {\\n    BaseScope bs;\\n    bytes32 realmId;\\n    address contractId;\\n    uint8 functionLimit;\\n    LEnumerableSet.Bytes32Set functions;\\n  }\\n\\n  struct RealmEntity {\\n    BaseScope bs;\\n    bytes32 domainId;\\n    uint32 contextLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set contexts;\\n  }\\n\\n  struct DomainEntity {\\n    BaseScope bs;\\n    bytes32 universeId;\\n    uint16 realmLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set realms;\\n  }\\n\\n  struct UniverseEntity {\\n    BaseScope bs;\\n    uint16 domainLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set domains;\\n  }\\n\\n  struct GeneralLimit {\\n    uint24 memberLimit;\\n    uint16 memberRegisterLimit;\\n    uint16 contextRegisterLimit;\\n    uint16 functionRegisterLimit;\\n    uint16 profileRegisterLimit;\\n    uint16 contextLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 callLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint8 roleRegisterLimit;\\n    uint8 typeRegisterLimit;\\n    uint8 realmRegisterLimit;\\n    uint8 domainRegisterLimit;\\n    uint8 policyRegisterLimit;\\n    uint8 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct MemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    GeneralLimit limits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct MemberSignature {\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct RoleEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n  }\\n\\n  struct TypeEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    mapping(bytes32 => bytes32) members;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FacetEntity {\\n    address subjectId;\\n  }\\n\\n  struct UpdateActivityRequest {\\n    bytes32 id;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct UpdateAlterabilityRequest {\\n    bytes32 id;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct UpdateAdminRequest {\\n    bytes32 id;\\n    bytes32 adminId;\\n  }\\n\\n  // used in Policy / Role / Type\\n  struct UpdateScopeRequest {\\n    bytes32 id;\\n    bytes32 scopeId;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////\\n  // Profiles\\n\\n  struct ProfileMemberSignature {\\n    string profileName;\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct ProfileRegisterLimit {\\n    uint32 memberRegisterLimit;\\n    uint32 roleRegisterLimit;\\n    uint32 typeRegisterLimit;\\n    uint32 functionRegisterLimit;\\n    uint32 contextRegisterLimit;\\n    uint16 realmRegisterLimit;\\n    uint16 domainRegisterLimit;\\n    uint16 policyRegisterLimit;\\n  }\\n\\n  struct ProfileLimit {\\n    uint32 profileCallLimit;\\n    uint32 contextLimit;\\n    uint24 memberLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 memberCallLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint16 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ProfileAccount {\\n    bytes32[] profiles;\\n  }\\n\\n  struct ProfileEntity {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    LEnumerableSet.Bytes32Set admins;\\n    bytes32 adminId;\\n    string name;\\n    address owner;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileMemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    uint16 callLimit;\\n    uint16 typeLimit;\\n    ProfileRegisterLimit registerLimits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct ProfileUpdateActivityRequest {\\n    bytes32 entityId;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct ProfileUpdateAlterabilityRequest {\\n    bytes32 entityId;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct ProfileUpdateAdminRequest {\\n    bytes32 entityId;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateScopeRequest {\\n    bytes32 entityId;\\n    bytes32 scopeId;\\n  }\\n}\\n\",\"keccak256\":\"0x2269cec662cb8f25c0523b281f8f97bd9b5115ea80771c7d1e4083031f4a1c87\",\"license\":\"MIT\"},\"src/contracts/acl/IACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function getAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function getAnyType() external pure returns (bytes32);\\n\\n  // scope master type\\n  function getScopeMasterType() external pure returns (bytes32);\\n\\n  // type master type\\n  function getTypeMasterType() external pure returns (bytes32);\\n\\n  // member master type\\n  function getMemberMasterType() external pure returns (bytes32);\\n\\n  // system master type\\n  function getSystemMasterType() external pure returns (bytes32);\\n\\n  // lively master type\\n  function getLivelyMasterType() external pure returns (bytes32);\\n\\n  // Policy Master type\\n  function getPolicyMasterType() external pure returns (bytes32);\\n\\n  // Profile Master type\\n  function getProfileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function getUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function isAgentExist(bytes32 agentId) external view returns (bool);\\n\\n  function isScopeExist(bytes32 scopeId) external view returns (bool);\\n\\n  function getScopeBaseInfo(bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function getAgentBaseInfo(bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function isScopesCompatible(bytes32 destScopeId, bytes32 srcScopeId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x303b03b04f7fc7356cc4c88bf54e218e29ce9fb479b44310d0788fa176ecfc50\",\"license\":\"MIT\"},\"src/contracts/acl/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control Manager Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLManager is IACLCommons {\\n  // Request Types\\n  struct FacetSelectorUpgradeRequest {\\n    ActionType action;\\n    bytes4[] selectors;\\n  }\\n\\n  struct FacetUpgradeRequest {\\n    address facetId;\\n    address subjectId;\\n    FacetSelectorUpgradeRequest[] functions;\\n  }\\n\\n  struct FacetRegisterRequest {\\n    address facetId;\\n    address subjectId;\\n    bytes4[] selectors;\\n  }\\n\\n  struct FacetInfo {\\n    address subjectId;\\n  }\\n\\n  event ACLFacetRegistered(address indexed sender, address indexed facetId, address indexed subjectId);\\n\\n  event ACLFacetUpgraded(address indexed sender, address indexed facetId, address indexed subjectId);\\n\\n  event ACLFacetFunctionUpgraded(address indexed sender, address indexed facetId, bytes4 selector, ActionType action);\\n\\n  event ACLInitialized(\\n    address indexed sender,\\n    address indexed admin,\\n    address indexed systemAdmin,\\n    address contextManager,\\n    address functionManager\\n  );\\n\\n  function aclRegisterFacet(FacetRegisterRequest[] calldata requests) external returns (bool);\\n\\n  function aclUpgradeFacet(FacetUpgradeRequest[] calldata requests) external returns (bool);\\n\\n  function aclGetFacets() external view returns (address[] memory);\\n\\n  function aclGetFacet(bytes4 selector) external view returns (address);\\n\\n  function aclHasSelector(bytes4 selector) external view returns (bool);\\n\\n  function aclGetFacetInfo(address facetId) external view returns (FacetInfo memory);\\n}\\n\",\"keccak256\":\"0xc124daf10a79621e8a3fa8d6c4a21e3afafc7d4d1864bef1223bb7530addd270\",\"license\":\"MIT\"},\"src/contracts/acl/agent/IMemberManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Member Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IMemberManagement is IACLCommons {\\n  struct MemberRegisterRequest {\\n    bytes32 roleId;\\n    bytes32 adminId;\\n    address account;\\n    GeneralLimit limits;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct MemberUpdateGeneralLimitRequest {\\n    bytes32 memberId;\\n    GeneralLimit limits;\\n  }\\n\\n  struct MemberInfo {\\n    bytes32 adminId;\\n    address account;\\n    GeneralLimit limits;\\n    uint16 typeCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event MemberRegistered(\\n    address indexed sender,\\n    bytes32 indexed memberId,\\n    address indexed account,\\n    bytes32 roleId,\\n    bytes32 adminId,\\n    GeneralLimit limits\\n  );\\n\\n  event MemberGeneralLimitUpdated(address indexed sender, bytes32 indexed memberId, GeneralLimit limits);\\n\\n  event MemberAdminUpdated(address indexed sender, bytes32 indexed memberId, bytes32 indexed adminId);\\n\\n  event MemberActivityUpdated(address indexed sender, bytes32 indexed memberId, ActivityStatus acstat);\\n\\n  event MemberAlterabilityUpdated(address indexed sender, bytes32 indexed memberId, AlterabilityStatus alstat);\\n\\n  event MemberRoleRevoked(address indexed sender, bytes32 indexed memberId, bytes32 indexed roleId, bytes32 typeId);\\n\\n  event MemberRemoved(address indexed sender, bytes32 indexed memberId, bool isCompleted);\\n\\n  function memberRegister(MemberSignature calldata memberSign, MemberRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function memberUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function memberUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function memberUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function memberUpdateGeneralLimit(\\n    MemberSignature calldata memberSign,\\n    MemberUpdateGeneralLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function memberRemove(MemberSignature calldata memberSign, bytes32[] calldata members) external returns (bool);\\n\\n  function memberCheckId(bytes32 memberId) external view returns (bool);\\n\\n  function memberCheckAccount(address account) external view returns (bool);\\n\\n  function memberCheckAdmin(bytes32 memberId, address account) external view returns (bool);\\n\\n  function memberHasType(bytes32 memberId, bytes32 typeId) external view returns (bool);\\n\\n  function memberGetTypes(bytes32 memberId) external view returns (bytes32[] memory);\\n\\n  function memberGetInfo(bytes32 memberId) external view returns (MemberInfo memory);\\n}\\n\",\"keccak256\":\"0xf37af1012005b6b55ccee3de27c1dd0e5851a550388257c6a77f73962d822945\",\"license\":\"MIT\"},\"src/contracts/acl/agent/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Role Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IRoleManagement is IACLCommons {\\n  struct RoleRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    int32 memberLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  struct RoleGrantMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct RoleRevokeMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct RoleUpdateMemberLimitRequest {\\n    bytes32 roleId;\\n    uint24 memberLimit;\\n  }\\n\\n  struct RoleInfo {\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    bytes32 adminId;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed roleId,\\n    bytes32 indexed typeId,\\n    bytes32 adminId,\\n    bytes32 scopeId\\n  );\\n\\n  event RoleMemberDeleted(\\n    address indexed sender,\\n    bytes32 indexed roleId,\\n    bytes32 indexed memberId,\\n    bytes32 typeId,\\n    address account\\n  );\\n\\n  event RoleMemberGranted(address indexed sender, bytes32 indexed roleId, bytes32 indexed memberId, bytes32 typeId);\\n\\n  event RoleMemberRevoked(address indexed sender, bytes32 indexed roleId, bytes32 indexed memberId, bytes32 typeId);\\n\\n  event RoleMemberLimitUpdated(address indexed sender, bytes32 indexed roleId, uint24 memberLimit);\\n\\n  event RoleAdminUpdated(address indexed sender, bytes32 indexed roleId, bytes32 indexed adminId);\\n\\n  event RoleScopeUpdated(address indexed sender, bytes32 indexed roleId, bytes32 indexed scopeId);\\n\\n  event RoleActivityUpdated(address indexed sender, bytes32 indexed roleId, ActivityStatus acstat);\\n\\n  event RoleAlterabilityUpdated(address indexed sender, bytes32 indexed roleId, AlterabilityStatus alstat);\\n\\n  event RoleRemoved(address indexed sender, bytes32 indexed roleId);\\n\\n  function roleRegister(MemberSignature calldata memberSign, RoleRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleGrantMembers(MemberSignature calldata memberSign, RoleGrantMembersRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleRevokeMembers(MemberSignature calldata memberSign, RoleRevokeMembersRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateScope(MemberSignature calldata memberSign, UpdateScopeRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function roleUpdateMemberLimit(MemberSignature calldata memberSign, RoleUpdateMemberLimitRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleRemove(MemberSignature calldata memberSign, bytes32[] calldata roles) external returns (bool);\\n\\n  function roleCheckId(bytes32 roleId) external view returns (bool);\\n\\n  function roleCheckName(string calldata roleName) external view returns (bool);\\n\\n  function roleCheckAdmin(bytes32 roleId, address account) external view returns (bool);\\n\\n  function roleHasAccount(bytes32 roleId, address account) external view returns (bool);\\n\\n  function roleGetInfo(bytes32 roleId) external view returns (RoleInfo memory);\\n}\\n\",\"keccak256\":\"0xd577f997c4da278bcf299f28134d89a2807745820b182d7f4de0bcfa68ad262c\",\"license\":\"MIT\"},\"src/contracts/acl/agent/ITypeManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Type Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface ITypeManagement is IACLCommons {\\n  struct TypeRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    int24 roleLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  struct TypeUpdateRoleLimitRequest {\\n    bytes32 typeId;\\n    uint16 roleLimit;\\n  }\\n\\n  struct TypeInfo {\\n    bytes32 scopeId;\\n    bytes32 adminId;\\n    uint16 roleLimit;\\n    uint16 roleCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event TypeRegistered(address indexed sender, bytes32 indexed typeId, bytes32 indexed scopeId, bytes32 adminId);\\n\\n  event TypeActivityUpdated(address indexed sender, bytes32 indexed typeId, ActivityStatus acstat);\\n\\n  event TypeAlterabilityUpdated(address indexed sender, bytes32 indexed typeId, AlterabilityStatus alstat);\\n\\n  event TypeRoleLimitUpdated(address indexed sender, bytes32 indexed typeId, uint16 roleLimit);\\n\\n  event TypeScopeUpdated(address indexed sender, bytes32 indexed typeId, bytes32 indexed scopeId);\\n\\n  event TypeAdminUpdated(address indexed sender, bytes32 indexed typeId, bytes32 indexed adminId);\\n\\n  event TypeRemoved(address indexed sender, bytes32 indexed typeId);\\n\\n  function typeRegister(MemberSignature calldata memberSign, TypeRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeUpdateScope(MemberSignature calldata memberSign, UpdateScopeRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function typeUpdateRoleLimit(MemberSignature calldata memberSign, TypeUpdateRoleLimitRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeRemove(MemberSignature calldata memberSign, bytes32[] calldata types) external returns (bool);\\n\\n  function typeCheckId(bytes32 typeId) external view returns (bool);\\n\\n  function typeCheckName(string calldata typeName) external view returns (bool);\\n\\n  function typeCheckAdmin(bytes32 typeId, address account) external view returns (bool);\\n\\n  function typeHasAccount(bytes32 typeId, address account) external view returns (bool);\\n\\n  function typeHasRole(bytes32 typeId, bytes32 roleId) external view returns (bool);\\n\\n  function typeGetRoles(bytes32 typeId) external view returns (bytes32[] memory);\\n\\n  function typeGetInfo(bytes32 typeId) external view returns (TypeInfo memory);\\n}\\n\",\"keccak256\":\"0x5265339aadcd95091fb3596d1c32e39c69e4da3f74c75ac0623769c3825ea3cc\",\"license\":\"MIT\"},\"src/contracts/acl/agent/MemberManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IMemberManagement.sol\\\";\\nimport \\\"./ITypeManagement.sol\\\";\\nimport \\\"../ACLStorage.sol\\\";\\nimport \\\"../IACL.sol\\\";\\nimport \\\"../IACLGenerals.sol\\\";\\nimport \\\"../scope/IFunctionManagement.sol\\\";\\nimport \\\"../../lib/acl/LACLStorage.sol\\\";\\nimport \\\"../../lib/acl/LACLAgentScope.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../../lib/acl/LACLUtils.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../proxy/BaseUUPSProxy.sol\\\";\\n\\n/**\\n * @title ACL Member Manager Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ncontract MemberManager is ACLStorage, BaseUUPSProxy, IMemberManagement {\\n  using LACLStorage for DataCollection;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  constructor() {}\\n\\n  function initialize(\\n    string calldata contractName,\\n    string calldata contractVersion,\\n    address accessControlManager\\n  ) public onlyProxy onlyLocalAdmin initializer {\\n    __BASE_UUPS_init(contractName, contractVersion, accessControlManager);\\n\\n    emit Initialized(\\n      _msgSender(),\\n      address(this),\\n      _implementation(),\\n      contractName,\\n      contractVersion,\\n      _getInitializedCount()\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IMemberManagement).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  // Note: called by eveny admin of role\\n  function memberRegister(MemberSignature calldata memberSign, MemberRegisterRequest[] calldata requests)\\n    external\\n    returns (bool)\\n  {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      IMemberManagement.memberRegister.selector\\n    );\\n\\n    // check and set\\n    MemberEntity storage memberEntity = _data.memberReadSlot(senderId);\\n    require(\\n      int32(uint32(memberEntity.limits.memberRegisterLimit)) - int16(uint16(requests.length)) >= 0,\\n      \\\"Illegal RegisterLimit\\\"\\n    );\\n\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      _doMemberRegister(requests[i], memberEntity, functionId, senderId, sender);\\n    }\\n\\n    unchecked {\\n      memberEntity.limits.memberRegisterLimit -= uint16(requests.length);\\n    }\\n    return true;\\n  }\\n\\n  function memberUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool)\\n  {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      IMemberManagement.memberUpdateActivityStatus.selector\\n    );\\n\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      MemberEntity storage memberEntity = _doGetEntityAndCheckAdminAccess(requests[i].id, senderId, functionId);\\n      require(\\n        !_doRoleHasMember(LACLAgentScope.LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID, requests[i].id),\\n        \\\"Illegal Member\\\"\\n      );\\n      require(requests[i].acstat > ActivityStatus.DELETED, \\\"Illegal Activity\\\");\\n      memberEntity.ba.acstat = requests[i].acstat;\\n      emit MemberActivityUpdated(sender, requests[i].id, requests[i].acstat);\\n    }\\n    return true;\\n  }\\n\\n  function memberUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool) {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      IMemberManagement.memberUpdateAlterabilityStatus.selector\\n    );\\n\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      MemberEntity storage memberEntity = _data.memberReadSlot(requests[i].id);\\n      IACL.AdminAccessStatus adminAccessStatus = _doCheckAdminAccess(memberEntity.ba.adminId, senderId, functionId);\\n      if (adminAccessStatus != IACL.AdminAccessStatus.PERMITTED) LACLUtils.generateAdminAccessError(adminAccessStatus);\\n      require(requests[i].alstat != AlterabilityStatus.NONE, \\\"Illegal Alterability\\\");\\n      memberEntity.ba.alstat = requests[i].alstat;\\n      emit MemberAlterabilityUpdated(sender, requests[i].id, requests[i].alstat);\\n    }\\n    return true;\\n  }\\n\\n  // Note: member default admin is\\n  function memberUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool)\\n  {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      IMemberManagement.memberUpdateAdmin.selector\\n    );\\n\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      MemberEntity storage memberEntity = _doGetEntityAndCheckAdminAccess(requests[i].id, senderId, functionId);\\n\\n      // checking requested admin of member\\n      if (requests[i].adminId != bytes32(0)) {\\n        BaseAgent storage requestedAdminAgent = _data.agents[requests[i].adminId];\\n        require(requestedAdminAgent.atype > AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n        memberEntity.ba.adminId = requests[i].adminId;\\n      } else {\\n        memberEntity.ba.adminId = _LIVELY_VERSE_MEMBER_MASTER_TYPE_ID;\\n      }\\n      emit MemberAdminUpdated(sender, requests[i].id, requests[i].adminId);\\n    }\\n    return true;\\n  }\\n\\n  function memberUpdateGeneralLimit(\\n    MemberSignature calldata memberSign,\\n    MemberUpdateGeneralLimitRequest[] calldata requests\\n  ) external returns (bool) {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      IMemberManagement.memberUpdateGeneralLimit.selector\\n    );\\n    MemberEntity storage senderMemberEntity = _data.memberReadSlot(senderId);\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      MemberEntity storage memberEntity = _doGetEntityAndCheckAdminAccess(requests[i].memberId, senderId, functionId);\\n      require(requests[i].limits.typeLimit > memberEntity.types.length(), \\\"Illegal TypeLimit\\\");\\n\\n      if (\\n        !memberEntity.types.contains(_LIVELY_VERSE_LIVELY_MASTER_TYPE_ID) &&\\n        !memberEntity.types.contains(_LIVELY_VERSE_MEMBER_MASTER_TYPE_ID)\\n      ) {\\n        _doCheckMemberRegisterLimits(senderMemberEntity, requests[i].limits);\\n      }\\n      memberEntity.limits = requests[i].limits;\\n      emit MemberGeneralLimitUpdated(sender, requests[i].memberId, requests[i].limits);\\n    }\\n    return true;\\n  }\\n\\n  function memberRemove(MemberSignature calldata memberSign, bytes32[] calldata members) external returns (bool) {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      IMemberManagement.memberRemove.selector\\n    );\\n\\n    for (uint256 i = 0; i < members.length; i++) {\\n      MemberEntity storage memberEntity = _data.memberReadSlot(members[i]);\\n      IACL.AdminAccessStatus status = _doCheckAdminAccess(memberEntity.ba.adminId, senderId, functionId);\\n      if (status != IACL.AdminAccessStatus.PERMITTED) LACLUtils.generateAdminAccessError(status);\\n\\n      for (uint256 j = 0; j < memberEntity.types.length() && j < 16; j++) {\\n        // check type\\n        bytes32 typeId = memberEntity.types.at(j);\\n        TypeEntity storage typeEntity = _data.typeReadSlot(typeId);\\n        require(typeEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Type Updatable\\\");\\n\\n        // check role\\n        bytes32 roleId = typeEntity.members[members[i]];\\n        RoleEntity storage roleEntity = _data.roleReadSlot(roleId);\\n        require(roleEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Role Updatable\\\");\\n        if (roleId == LACLAgentScope.LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID) {\\n          require(roleEntity.memberCount > 1, \\\"Illegal Member Revoke\\\");\\n        }\\n        require(roleEntity.memberCount > 0, \\\"Illegal MemberCount\\\");\\n        unchecked {\\n          roleEntity.memberCount -= 1;\\n        }\\n\\n        // delete member from type\\n        delete typeEntity.members[members[i]];\\n\\n        // delete type from member\\n        memberEntity.types.remove(typeId);\\n        emit MemberRoleRevoked(sender, members[i], roleId, typeId);\\n      }\\n\\n      if (memberEntity.types.length() == 0) {\\n        delete memberEntity.ba;\\n        delete memberEntity.account;\\n        delete memberEntity.limits;\\n        delete memberEntity.types;\\n        emit MemberRemoved(sender, members[i], true);\\n      } else {\\n        emit MemberRemoved(sender, members[i], false);\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  function memberCheckId(bytes32 memberId) external view returns (bool) {\\n    return _data.agents[memberId].atype == AgentType.MEMBER;\\n  }\\n\\n  function memberCheckAccount(address account) external view returns (bool) {\\n    return _data.agents[keccak256(abi.encodePacked(account))].atype == AgentType.MEMBER;\\n  }\\n\\n  function memberCheckAdmin(bytes32 memberId, address account) external view returns (bool) {\\n    if (_data.agents[memberId].atype != AgentType.MEMBER) return false;\\n\\n    bytes32 memberAdminId = _data.agents[memberId].adminId;\\n    AgentType adminAgenType = _data.agents[memberAdminId].atype;\\n    bytes32 accountId = LACLUtils.accountGenerateId(account);\\n\\n    if (adminAgenType == AgentType.ROLE) {\\n      (RoleEntity storage roleEntity, bool result) = _data.roleTryReadSlot(memberAdminId);\\n      if (!result) return false;\\n\\n      (TypeEntity storage typeEntity, bool result1) = _data.typeTryReadSlot(roleEntity.typeId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[accountId] == memberAdminId;\\n    } else if (adminAgenType == AgentType.TYPE) {\\n      (TypeEntity storage typeEntity, bool result1) = _data.typeTryReadSlot(memberAdminId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[accountId] != bytes32(0);\\n    }\\n\\n    return false;\\n  }\\n\\n  function memberHasType(bytes32 memberId, bytes32 typeId) external view returns (bool) {\\n    (MemberEntity storage member, bool result) = _data.memberTryReadSlot(memberId);\\n    if (result) return member.types.contains(typeId);\\n    return false;\\n  }\\n\\n  function memberGetTypes(bytes32 memberId) external view returns (bytes32[] memory) {\\n    (MemberEntity storage member, bool result) = _data.memberTryReadSlot(memberId);\\n    if (!result) return new bytes32[](0);\\n    return member.types.values();\\n  }\\n\\n  function memberGetInfo(bytes32 memberId) external view returns (MemberInfo memory) {\\n    (MemberEntity storage member, bool result) = _data.memberTryReadSlot(memberId);\\n    if (!result) {\\n      return\\n        MemberInfo({\\n          adminId: bytes32(0),\\n          account: address(0),\\n          limits: GeneralLimit({\\n            contextLimit: 0,\\n            memberRegisterLimit: 0,\\n            roleRegisterLimit: 0,\\n            typeRegisterLimit: 0,\\n            functionRegisterLimit: 0,\\n            contextRegisterLimit: 0,\\n            profileRegisterLimit: 0,\\n            memberLimit: 0,\\n            realmRegisterLimit: 0,\\n            domainRegisterLimit: 0,\\n            policyRegisterLimit: 0,\\n            functionLimit: 0,\\n            realmLimit: 0,\\n            domainLimit: 0,\\n            callLimit: 0,\\n            typeRoleLimit: 0,\\n            typeLimit: 0,\\n            policyRoleLimit: 0\\n          }),\\n          typeCount: 0,\\n          adminType: AgentType.NONE,\\n          atype: AgentType.NONE,\\n          acstat: ActivityStatus.NONE,\\n          alstat: AlterabilityStatus.NONE\\n        });\\n    }\\n\\n    return\\n      MemberInfo({\\n        adminId: member.ba.adminId,\\n        account: member.account,\\n        limits: GeneralLimit({\\n          contextLimit: member.limits.contextLimit,\\n          memberRegisterLimit: member.limits.memberRegisterLimit,\\n          roleRegisterLimit: member.limits.roleRegisterLimit,\\n          typeRegisterLimit: member.limits.typeRegisterLimit,\\n          functionRegisterLimit: member.limits.functionRegisterLimit,\\n          contextRegisterLimit: member.limits.contextRegisterLimit,\\n          profileRegisterLimit: member.limits.profileRegisterLimit,\\n          memberLimit: member.limits.memberLimit,\\n          realmRegisterLimit: member.limits.realmRegisterLimit,\\n          domainRegisterLimit: member.limits.domainRegisterLimit,\\n          policyRegisterLimit: member.limits.policyRegisterLimit,\\n          functionLimit: member.limits.functionLimit,\\n          realmLimit: member.limits.realmLimit,\\n          domainLimit: member.limits.domainLimit,\\n          callLimit: member.limits.callLimit,\\n          typeRoleLimit: member.limits.typeRoleLimit,\\n          typeLimit: member.limits.typeLimit,\\n          policyRoleLimit: member.limits.policyRoleLimit\\n        }),\\n        typeCount: uint16(member.types.length()),\\n        adminType: _data.agents[member.ba.adminId].atype,\\n        atype: member.ba.atype,\\n        acstat: member.ba.acstat,\\n        alstat: member.ba.alstat\\n      });\\n  }\\n\\n  function _doCheckAdminAccess(\\n    bytes32 adminId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) internal view returns (IACL.AdminAccessStatus) {\\n    return LACLAgentScope.checkAdminAccess(_data, adminId, memberId, functionId);\\n  }\\n\\n  function _accessPermission(MemberSignature calldata memberSign, bytes4 selector)\\n    internal\\n    returns (\\n      bytes32,\\n      bytes32,\\n      address\\n    )\\n  {\\n    require(IProxy(address(this)).safeModeStatus() == IBaseProxy.ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    address signer;\\n\\n    if (memberSign.signature.length > 0) {\\n      require(memberSign.expiredAt > block.timestamp, \\\"Expired Signature\\\");\\n      signer = LACLUtils.getMemeberSignerAddress(memberSign, MEMBER_SIGNATURE_MESSAGE_TYPEHASH);\\n    } else {\\n      signer = msg.sender;\\n    }\\n\\n    address functionFacetId = _data.selectors[selector];\\n    bytes32 functionId = LACLUtils.functionGenerateId(functionFacetId, selector);\\n    bytes32 senderId = LACLUtils.accountGenerateId(signer);\\n    IACL.AuthorizationStatus status = IACL(address(this)).hasMemberAccess(functionId, senderId);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) LACLUtils.generateAuthorizationError(status);\\n    return (functionId, senderId, signer);\\n  }\\n\\n  function _doGetEntityAndCheckAdminAccess(\\n    bytes32 memberId,\\n    bytes32 senderId,\\n    bytes32 functionId\\n  ) internal view returns (MemberEntity storage) {\\n    MemberEntity storage memberEntity = _data.memberReadSlot(memberId);\\n    require(memberEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Updatable\\\");\\n    IACL.AdminAccessStatus status = _doCheckAdminAccess(memberEntity.ba.adminId, senderId, functionId);\\n    if (status != IACL.AdminAccessStatus.PERMITTED) LACLUtils.generateAdminAccessError(status);\\n    return memberEntity;\\n  }\\n\\n  function _doMemberRegister(\\n    MemberRegisterRequest calldata request,\\n    MemberEntity storage memberEntity,\\n    bytes32 functionId,\\n    bytes32 senderId,\\n    address sender\\n  ) internal {\\n    bytes32 newMemberId = LACLUtils.accountGenerateId(request.account);\\n    require(_data.agents[newMemberId].acstat == ActivityStatus.NONE, \\\"Already Exist\\\");\\n    require(request.limits.typeLimit >= 1, \\\"Illegal TypeLimit\\\");\\n    require(\\n      request.acstat > ActivityStatus.DELETED && request.alstat > AlterabilityStatus.NONE,\\n      \\\"Illegal Activity/Alterability\\\"\\n    );\\n\\n    if (\\n      !memberEntity.types.contains(_LIVELY_VERSE_LIVELY_MASTER_TYPE_ID) &&\\n      !memberEntity.types.contains(_LIVELY_VERSE_MEMBER_MASTER_TYPE_ID)\\n    ) {\\n      _doCheckMemberRegisterLimits(memberEntity, request.limits);\\n    }\\n\\n    // check role\\n    RoleEntity storage roleEntity = _data.roleReadSlot(request.roleId);\\n    require(roleEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Role Updatable\\\");\\n    require(roleEntity.memberLimit > roleEntity.memberCount, \\\"Illegal Register\\\");\\n\\n    // check type\\n    TypeEntity storage typeEntity = _data.typeReadSlot(roleEntity.typeId);\\n    require(typeEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Type Updatable\\\");\\n\\n    // check access\\n    IACL.AdminAccessStatus adminAccessStatus = _doCheckAdminAccess(roleEntity.ba.adminId, senderId, functionId);\\n    if (adminAccessStatus != IACL.AdminAccessStatus.PERMITTED) LACLUtils.generateAdminAccessError(adminAccessStatus);\\n\\n    // add new member to type\\n    typeEntity.members[newMemberId] = request.roleId;\\n\\n    // add new member to role\\n    roleEntity.memberCount += 1;\\n\\n    // create new member\\n    MemberEntity storage newMember = _data.memberWriteSlot(newMemberId);\\n\\n    // check adminId\\n    if (request.adminId != bytes32(0)) {\\n      require(_data.agents[request.adminId].atype > AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      adminAccessStatus = _doCheckAdminAccess(_LIVELY_VERSE_MEMBER_MASTER_TYPE_ID, senderId, functionId);\\n      if (adminAccessStatus != IACL.AdminAccessStatus.PERMITTED) revert IACL.SetAdminForbidden(adminAccessStatus);\\n      newMember.ba.adminId = request.adminId;\\n    } else {\\n      newMember.ba.adminId = _LIVELY_VERSE_MEMBER_MASTER_TYPE_ID;\\n    }\\n\\n    newMember.ba.atype = AgentType.MEMBER;\\n    newMember.ba.acstat = request.acstat;\\n    newMember.ba.alstat = request.alstat;\\n    newMember.account = request.account;\\n    newMember.types.add(roleEntity.typeId);\\n    newMember.limits = request.limits;\\n\\n    emit MemberRegistered(sender, newMemberId, request.account, request.roleId, newMember.ba.adminId, request.limits);\\n  }\\n\\n  function _doCheckMemberRegisterLimits(MemberEntity storage memberEntity, GeneralLimit calldata limits) internal view {\\n    LACLAgentScope.checkMemberRegisterLimits(memberEntity, limits);\\n  }\\n\\n  function _doRoleHasMember(bytes32 roleId, bytes32 memberId) internal view returns (bool) {\\n    (RoleEntity storage roleEntity, bool result) = _data.roleTryReadSlot(roleId);\\n    if (!result) return false;\\n\\n    (TypeEntity storage typeEntity, bool result1) = _data.typeTryReadSlot(roleEntity.typeId);\\n    if (!result1) return false;\\n\\n    return typeEntity.members[memberId] == roleId;\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LACLAgentScope);\\n  }\\n}\\n\",\"keccak256\":\"0x9b34d78d01d6464cf8c59c0559c959b622ed09720023b9db378f92f89b770baa\",\"license\":\"MIT\"},\"src/contracts/acl/policy/IPolicyManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Policy Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\n\\ninterface IPolicyManagement is IACLCommons {\\n  struct PolicyRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    uint8 policyCode;\\n    int24 roleLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  struct PolicyAddRolesRequest {\\n    bytes32 policyId;\\n    bytes32[] roles;\\n  }\\n\\n  struct PolicyRemoveRolesRequest {\\n    bytes32 policyId;\\n    bytes32[] roles;\\n  }\\n\\n  struct PolicyUpdateCodeRequest {\\n    bytes32 policyId;\\n    uint8 policyCode;\\n  }\\n\\n  struct PolicyUpdateRoleLimitRequest {\\n    bytes32 policyId;\\n    uint16 roleLimit;\\n  }\\n\\n  struct PolicyInfo {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint16 roleCount;\\n    uint8 policyCode;\\n    AgentType adminType;\\n    ScopeType scopeType;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event PolicyRegistered(\\n    address indexed sender,\\n    bytes32 indexed policyId,\\n    bytes32 indexed scopeId,\\n    bytes32 adminId,\\n    uint8 policyCode\\n  );\\n\\n  event PolicyRoleAdded(address indexed sender, bytes32 indexed policyId, bytes32 indexed roleId);\\n\\n  event PolicyRoleRemoved(address indexed sender, bytes32 indexed policyId, bytes32 indexed roleId);\\n\\n  event PolicyActivityUpdated(address indexed sender, bytes32 indexed policyId, ActivityStatus acstat);\\n\\n  event PolicyAlterabilityUpdated(address indexed sender, bytes32 indexed policyId, AlterabilityStatus alstat);\\n\\n  event PolicyCodeUpdated(address indexed sender, bytes32 indexed policyId, uint8 policyCode, PolicyType ptype);\\n\\n  event PolicyRoleLimitUpdated(address indexed sender, bytes32 indexed policyId, uint16 roleLimit);\\n\\n  event PolicyAdminUpdated(address indexed sender, bytes32 indexed policyId, bytes32 indexed adminId);\\n\\n  event PolicyScopeUpdated(address indexed sender, bytes32 indexed policyId, bytes32 indexed scopeId);\\n\\n  event PolicyRemoved(address indexed sender, bytes32 indexed policyId);\\n\\n  function policyRegister(MemberSignature calldata memberSign, PolicyRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function policyAddRoles(MemberSignature calldata memberSign, PolicyAddRolesRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function policyRemoveRoles(MemberSignature calldata memberSign, PolicyRemoveRolesRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function policyUpdateCodes(MemberSignature calldata memberSign, PolicyUpdateCodeRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function policyUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function policyUpdateScope(MemberSignature calldata memberSign, UpdateScopeRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function policyUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function policyUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function policyUpdateRoleLimit(MemberSignature calldata memberSign, PolicyUpdateRoleLimitRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function policyRemove(MemberSignature calldata memberSign, bytes32[] calldata policies) external returns (bool);\\n\\n  function policyCheckId(bytes32 policyId) external view returns (bool);\\n\\n  function policyCheckName(string calldata policyName) external view returns (bool);\\n\\n  function policyCheckAdmin(bytes32 policyId, address account) external view returns (bool);\\n\\n  function policyCheckRole(bytes32 roleId) external view returns (bool);\\n\\n  function policyCheckAccess(bytes32 policyId, bytes32 functionId) external view returns (bool);\\n\\n  function policyCheckRoleAccess(bytes32 roleId, bytes32 functionId) external view returns (bool);\\n\\n  function policyHasRole(bytes32 policyId, bytes32 roleId) external view returns (bool);\\n\\n  function policyGetInfoByRole(bytes32 roleId) external view returns (PolicyInfo memory);\\n\\n  function policyGetInfo(bytes32 policyId) external view returns (PolicyInfo memory);\\n\\n  function policyGetRoles(bytes32 policyId) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x1b437e48ec11bfdbc482d65b0a1fe0ae790f58782d31725fb2fe64dddd3dfdeb\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACL {\\n  enum ProfileAuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    PROFILE_CALL_FORBIDDEN,\\n    MEMBER_CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN,\\n    PROFILE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileACLUnauthorized();\\n  error ProfileACLPolicyForbidden();\\n  error ProfileACLCallForbidden();\\n  error ProfileACLRoleScopeForbidden();\\n  error ProfileACLMemberCallForbidden();\\n  error ProfileACLMemberNotFound();\\n  error ProfileACLRoleNotFound();\\n  error ProfileACLTypeNotFound();\\n  error ProfileACLFunctionNotFound();\\n  error ProfileACLContextNotFound();\\n  error ProfileACLRealmNotFound();\\n  error ProfileACLDomainNotFound();\\n  error ProfileACLMemberActivityForbidden();\\n  error ProfileACLRoleActivityForbidden();\\n  error ProfileACLTypeActivityForbidden();\\n  error ProfileACLFunctionActivityForbidden();\\n  error ProfileACLContextActivityForbidden();\\n  error ProfileACLRealmActivityForbidden();\\n  error ProfileACLDomainActivityForbidden();\\n  error ProfileACLUniverseActivityForbidden();\\n  error ProfileACLProfileActivityForbidden();\\n\\n  enum ProfileAdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileAdminAccessNotPermitted();\\n  error ProfileAdminAccessPolicyForbidden();\\n  error ProfileAdminAccessRoleNotFound();\\n  error ProfileAdminAccessTypeNotFound();\\n  error ProfileAdminAccessFunctionNotFound();\\n  error ProfileAdminAccessRoleActivityForbidden();\\n  error ProfileAdminAccessTypeActivityForbidden();\\n\\n  error ProfileSetAdminForbidden(ProfileAdminAccessStatus);\\n\\n  function profileHasAccess(bytes32 profileId, bytes32 functionId) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasCSAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasAccountAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (ProfileAuthorizationStatus);\\n}\\n\",\"keccak256\":\"0xb3687f11a1d2d28b78e815657864fbe1ef4aeba750e8c9760b3d3f97e467efc2\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control General Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function profileAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function profileAnyType() external pure returns (bytes32);\\n\\n  // system master type\\n  function profileSystemMasterType() external pure returns (bytes32);\\n\\n  // profile master type\\n  function profileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function profileUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function profileIsAgentExist(bytes32 profileId, bytes32 agentId) external view returns (bool);\\n\\n  function profileIsScopeExist(bytes32 profileId, bytes32 scopeId) external view returns (bool);\\n\\n  function profileScopeBaseInfo(bytes32 profileId, bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function profileAgentBaseInfo(bytes32 profileId, bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function profileIsScopesCompatible(\\n    bytes32 profileId,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5eeaa7ce1f5f26662cf0368f1c9b415214f37f1659c3a2defccedf0d1943760f\",\"license\":\"MIT\"},\"src/contracts/acl/scope/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Context Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IContextManagement is IACLCommons {\\n  struct ContextRegisterRequest {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address contractId;\\n    address subject;\\n    address deployer;\\n    int16 functionLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    bytes signature;\\n  }\\n\\n  struct ContextUpdateFunctionLimitRequest {\\n    bytes32 contextId;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ContextInfo {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    address contractId;\\n    uint8 functionCount;\\n    uint8 functionLimit;\\n    uint32 referredByAgent;\\n    AgentType adminType;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ContextRegistered(\\n    address indexed sender,\\n    bytes32 indexed contextId,\\n    address indexed contractId,\\n    bytes32 realmId,\\n    address deployer,\\n    address subject,\\n    bytes32 adminId\\n  );\\n\\n  event ContextAdminUpdated(address indexed sender, bytes32 indexed contextId, bytes32 indexed adminId);\\n\\n  event ContextActivityUpdated(address indexed sender, bytes32 indexed contextId, ActivityStatus acstat);\\n\\n  event ContextAlterabilityUpdated(address indexed sender, bytes32 indexed contextId, AlterabilityStatus alstat);\\n\\n  event ContextFunctionLimitUpdated(address indexed sender, bytes32 indexed contextId, uint8 functionLimit);\\n\\n  event ContextRemoved(address indexed sender, bytes32 indexed contextId, bool isSoftDelete);\\n\\n  function contextRegister(MemberSignature calldata memberSign, ContextRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateFunctionLimit(\\n    MemberSignature calldata memberSign,\\n    ContextUpdateFunctionLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextRemove(MemberSignature calldata memberSign, bytes32[] calldata contexts) external returns (bool);\\n\\n  function contextCheckId(bytes32 contextId) external view returns (bool);\\n\\n  function contextCheckAccount(address contractId) external view returns (bool);\\n\\n  function contextCheckAdmin(bytes32 contextId, address account) external view returns (bool);\\n\\n  function contextHasFunction(bytes32 contextId, bytes32 functionId) external view returns (bool);\\n\\n  function contextHasSelector(address contractId, bytes4 selector) external view returns (bool);\\n\\n  function contextGetFunctions(bytes32 contextId) external view returns (bytes32[] memory);\\n\\n  function contextGetInfo(bytes32 contextId) external view returns (ContextInfo memory);\\n}\\n\",\"keccak256\":\"0x3db7b4eaff9522c669111ec8e268f603b57da7b4c0846d3d6ffb74d9f9a07f08\",\"license\":\"MIT\"},\"src/contracts/acl/scope/IFunctionManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Function Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IFunctionManagement is IACLCommons {\\n  struct FunctionRegisterRequest {\\n    bytes signature;\\n    bytes32 realmId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address subject;\\n    address deployer;\\n    address contractId;\\n    FunctionRequest[] functions;\\n  }\\n\\n  struct FunctionRequest {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct FunctionUpdatePolicyRequest {\\n    bytes32 functionId;\\n    uint8 policyCode;\\n  }\\n\\n  struct FunctionUpdateAgentRequest {\\n    bytes32 functionId;\\n    bytes32 agentId;\\n  }\\n\\n  struct FunctionInfo {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint32 referredByAgent;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    AgentType adminType;\\n    AgentType agentType;\\n    uint8 policyCode;\\n  }\\n\\n  event FunctionRegistered(\\n    address indexed sender,\\n    bytes32 indexed contextId,\\n    bytes32 indexed functionId,\\n    bytes32 adminId,\\n    bytes32 agentId\\n  );\\n\\n  event FunctionAdminUpdated(address indexed sender, bytes32 indexed functionId, bytes32 indexed adminId);\\n\\n  event FunctionAgentUpdated(address indexed sender, bytes32 indexed functionId, bytes32 indexed agentId);\\n\\n  event FunctionActivityUpdated(address indexed sender, bytes32 indexed functionId, ActivityStatus acstat);\\n\\n  event FunctionAlterabilityUpdated(address indexed sender, bytes32 indexed functionId, AlterabilityStatus alstat);\\n\\n  event FunctionPolicyUpdated(address indexed sender, bytes32 indexed functionId, uint8 policyCode);\\n\\n  event FunctionRemoved(address indexed sender, bytes32 indexed functionId, bool isSoftDeleted);\\n\\n  function functionRegister(MemberSignature calldata memberSign, FunctionRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateAgent(MemberSignature calldata memberSign, FunctionUpdateAgentRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function functionUpdatePolicyCode(\\n    MemberSignature calldata memberSign,\\n    FunctionUpdatePolicyRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function functionRemove(MemberSignature calldata memberSign, bytes32[] calldata functions) external returns (bool);\\n\\n  function functionCheckId(bytes32 functionId) external view returns (bool);\\n\\n  function functionCheckSelector(address contractId, bytes4 selector) external view returns (bool);\\n\\n  function functionCheckAdmin(bytes32 functionId, address account) external view returns (bool);\\n\\n  function functionCheckAgent(bytes32 functionId, address account) external view returns (bool);\\n\\n  function functionGetInfo(bytes32 functionId) external view returns (FunctionInfo memory);\\n}\\n\",\"keccak256\":\"0xf9cab043ca2218987527dc17343b3bb632a65ba9be0ab9e863c6c140d9d488b7\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  function isContract2(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-universe-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb46e5ff7d2a40ad64a6ca16bf560fef69391201577931c8c0b8395292014035e\",\"license\":\"MIT\"},\"src/contracts/lib/LStorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary LStorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfe230bd4ca404541c3f9b857b24b92ed65ca09a1cbfc6222e8c308e131eca256\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0xf6b56daea1f2692628dff63bd57ff8ad0bc38ecbc34887db37a8305162ce1394\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLAgentScope.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./LACLUtils.sol\\\";\\nimport \\\"./LACLStorage.sol\\\";\\nimport \\\"./LProfileStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/IACLGenerals.sol\\\";\\nimport \\\"../../acl/IACLManager.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../proxy/IERC1822.sol\\\";\\nimport \\\"../../utils/IERC165.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/agent/IRoleManagement.sol\\\";\\nimport \\\"../../acl/agent/IMemberManagement.sol\\\";\\nimport \\\"../../acl/scope/IFunctionManagement.sol\\\";\\nimport \\\"../../acl/policy/IPolicyManagement.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/profile/IProfileACLGenerals.sol\\\";\\n\\n/**\\n * @title ACL Commons Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLAgentScope {\\n  using LProfileStorage for IACLCommons.ProfileEntity;\\n  using LACLStorage for ACLStorage.DataCollection;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  string public constant LIB_NAME = \\\"LACLAgentScope\\\";\\n  string public constant LIB_VERSION = \\\"3.0.0\\\";\\n\\n  bytes32 public constant LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 public constant LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n\\n  bytes32 public constant LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_MASTER_ADMIN\\\"));\\n\\n  function checkAdminAccess(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 adminId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) external view returns (IACL.AdminAccessStatus) {\\n    return _doCheckAdminAccess(data, adminId, memberId, functionId);\\n  }\\n\\n  function aclRegisterRole(\\n    ACLStorage.DataCollection storage data,\\n    IRoleManagement.RoleRegisterRequest calldata request,\\n    bytes32 functionId,\\n    bytes32 senderId,\\n    uint24 memberLimit\\n  ) external returns (bytes32, bytes32) {\\n    bytes32 newRoleId = LACLUtils.generateId(request.name);\\n    require(data.agents[newRoleId].atype == IACLCommons.AgentType.NONE, \\\"Role Already Exist\\\");\\n    require(\\n      request.acstat > IACLCommons.ActivityStatus.DELETED && request.alstat > IACLCommons.AlterabilityStatus.NONE,\\n      \\\"Illegal Activity/Alterability\\\"\\n    );\\n    require(\\n      request.typeId != LIVELY_VERSE_ANONYMOUS_TYPE_ID && request.typeId != LIVELY_VERSE_ANY_TYPE_ID,\\n      \\\"Illegal Type\\\"\\n    );\\n\\n    // check type\\n    IACLCommons.TypeEntity storage typeEntity = data.typeReadSlot(request.typeId);\\n    require(typeEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Type Updatable\\\");\\n    require(typeEntity.roles.length() < typeEntity.roleLimit, \\\"Illegal Register\\\");\\n\\n    // check access\\n    IACL.AdminAccessStatus status = _doCheckAdminAccess(data, typeEntity.ba.adminId, senderId, functionId);\\n    if (status != IACL.AdminAccessStatus.PERMITTED) LACLUtils.generateAdminAccessError(status);\\n\\n    // check and get requested scope type\\n    IACLCommons.ScopeType requestScopeType = _doRoleCheckRequestScope(data, request.scopeId, typeEntity.scopeId);\\n\\n    // add role to type\\n    typeEntity.roles.add(newRoleId);\\n\\n    // create role entity\\n    IACLCommons.RoleEntity storage newRole = data.roleWriteSlot(newRoleId);\\n    newRole.ba.atype = IACLCommons.AgentType.ROLE;\\n    newRole.ba.acstat = request.acstat;\\n    newRole.ba.alstat = request.alstat;\\n    newRole.name = request.name;\\n    newRole.scopeId = request.scopeId;\\n    newRole.memberLimit = request.memberLimit >= 0 ? uint24(uint32(request.memberLimit)) : memberLimit;\\n    newRole.typeId = request.typeId;\\n    newRole.ba.adminId = _getRoleAdmin(data, requestScopeType, typeEntity.ba.adminId, request.scopeId, request.adminId);\\n\\n    return (newRoleId, newRole.ba.adminId);\\n  }\\n\\n  function getPolicyAdmin(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ScopeType requestScopeType,\\n    bytes32 requestScopeAdmin,\\n    bytes32 scopeId,\\n    bytes32 adminId\\n  ) external view returns (bytes32 policyAdminId) {\\n    // checking requested type admin\\n    if (adminId != bytes32(0)) {\\n      require(data.agents[adminId].atype == IACLCommons.AgentType.ROLE, \\\"Illegal Admin AgentType\\\");\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doGetAgentScopeInfo(data, adminId);\\n      require(requestScopeType <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (requestScopeType == requestAdminScopeType) {\\n        require(requestAdminScopeId == scopeId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(IACLGenerals(address(this)).isScopesCompatible(requestAdminScopeId, scopeId), \\\"Illegal Admin Scope\\\");\\n      }\\n      policyAdminId = adminId;\\n    } else {\\n      policyAdminId = requestScopeAdmin;\\n    }\\n  }\\n\\n  function getPolicyAndCheckAdminAccess(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 policyId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) external view returns (IACLCommons.PolicyEntity storage) {\\n    return _doGetPolicyAndCheckAdminAccess(data, policyId, memberId, functionId);\\n  }\\n\\n  function getCheckUpdateRequestScope(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    IACLCommons.ScopeType senderScopeType\\n  ) external returns (IACLCommons.BaseScope storage) {\\n    return _getCheckUpdateRequestScope(data, requestScopeId, senderScopeId, senderScopeType);\\n  }\\n\\n  function _getCheckUpdateRequestScope(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    IACLCommons.ScopeType senderScopeType\\n  ) private returns (IACLCommons.BaseScope storage) {\\n    // checking requested type scope\\n    IACLCommons.BaseScope storage requestedScope = data.scopes[requestScopeId];\\n    require(requestedScope.stype != IACLCommons.ScopeType.NONE, \\\"Scope Not Found\\\");\\n    require(requestedScope.acstat > IACLCommons.ActivityStatus.DELETED, \\\"Scope Deleted\\\");\\n\\n    // increase referred count to target scope\\n    requestedScope.referredByAgent += 1;\\n\\n    require(requestedScope.stype <= senderScopeType, \\\"Illegal ScopeType\\\");\\n    if (requestedScope.stype == senderScopeType) {\\n      require(requestScopeId == senderScopeId, \\\"Illegal Scope\\\");\\n    } else {\\n      require(IACLGenerals(address(this)).isScopesCompatible(senderScopeId, requestScopeId), \\\"Illegal Scope\\\");\\n    }\\n\\n    return requestedScope;\\n  }\\n\\n  function roleCheckRequestScope(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 requestScopeId,\\n    bytes32 typeScopeId\\n  ) external returns (IACLCommons.ScopeType) {\\n    return _doRoleCheckRequestScope(data, requestScopeId, typeScopeId);\\n  }\\n\\n  function _doGetPolicyAndCheckAdminAccess(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 policyId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) private view returns (IACLCommons.PolicyEntity storage) {\\n    IACLCommons.PolicyEntity storage policyEntity = data.policies[policyId];\\n    require(policyEntity.adminId != bytes32(0), \\\"Not Found\\\");\\n    require(policyEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Updatable\\\");\\n    IACL.AdminAccessStatus status = _doCheckAdminAccess(data, policyEntity.adminId, memberId, functionId);\\n    if (status != IACL.AdminAccessStatus.PERMITTED) LACLUtils.generateAdminAccessError(status);\\n    return policyEntity;\\n  }\\n\\n  function _doRoleCheckRequestScope(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 requestScopeId,\\n    bytes32 typeScopeId\\n  ) private returns (IACLCommons.ScopeType) {\\n    // checking requested role scope\\n    IACLCommons.BaseScope storage requestScope = data.scopes[requestScopeId];\\n    require(requestScope.stype != IACLCommons.ScopeType.NONE, \\\"Scope Not Found\\\");\\n    require(requestScope.acstat > IACLCommons.ActivityStatus.DELETED, \\\"Scope Deleted\\\");\\n\\n    // increase referred count to target scope\\n    requestScope.referredByAgent += 1;\\n\\n    // checking requested role type scope with role scope\\n    IACLCommons.ScopeType typeScopeType = data.scopes[typeScopeId].stype;\\n    require(typeScopeType >= requestScope.stype, \\\"Illegal ScopeType\\\");\\n    if (typeScopeType == requestScope.stype) {\\n      require(typeScopeId == requestScopeId, \\\"Illegal Scope\\\");\\n    } else {\\n      require(IACLGenerals(address(this)).isScopesCompatible(typeScopeId, requestScopeId), \\\"Illegal Scope\\\");\\n    }\\n\\n    return requestScope.stype;\\n  }\\n\\n  function updatePolicyScope(\\n    ACLStorage.DataCollection storage data,\\n    IPolicyManagement.UpdateScopeRequest calldata request,\\n    bytes32 functionId,\\n    bytes32 senderId\\n  ) external {\\n    IACLCommons.ScopeType senderScopeType;\\n    bytes32 senderScopeId;\\n    IACLCommons.PolicyEntity storage policyEntity = _doGetPolicyAndCheckAdminAccess(\\n      data,\\n      request.id,\\n      senderId,\\n      functionId\\n    );\\n    IACLCommons.AgentType adminAgentType = data.agents[policyEntity.adminId].atype;\\n    if (adminAgentType == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = data.roleReadSlot(policyEntity.adminId);\\n      senderScopeId = roleEntity.scopeId;\\n      senderScopeType = data.scopes[roleEntity.scopeId].stype;\\n    } else {\\n      IACLCommons.TypeEntity storage agentType = data.typeReadSlot(policyEntity.adminId);\\n      bytes32 memberRoleId = agentType.members[senderId];\\n      IACLCommons.RoleEntity storage memberAgentRole = data.roleReadSlot(memberRoleId);\\n      senderScopeType = data.scopes[memberAgentRole.scopeId].stype;\\n      senderScopeId = memberAgentRole.scopeId;\\n    }\\n\\n    IACLCommons.BaseScope storage requestScope = _getCheckUpdateRequestScope(\\n      data,\\n      request.scopeId,\\n      senderScopeId,\\n      senderScopeType\\n    );\\n    IACLCommons.BaseScope storage currentScope = data.scopes[policyEntity.scopeId];\\n    if (policyEntity.roles.length() > 0) {\\n      require(requestScope.stype > currentScope.stype, \\\"Illegal ScopeType\\\");\\n      require(IACLGenerals(address(this)).isScopesCompatible(request.scopeId, policyEntity.scopeId), \\\"Illegal Scope\\\");\\n    }\\n    require(currentScope.referredByAgent > 0, \\\"Illeagl Referred\\\");\\n    unchecked {\\n      currentScope.referredByAgent -= 1;\\n    }\\n    policyEntity.scopeId = request.scopeId;\\n  }\\n\\n  function getAgentScopeInfo(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    external\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    return _doGetAgentScopeInfo(data, agentId);\\n  }\\n\\n  function getRoleAdmin(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ScopeType requestScopeType,\\n    bytes32 requestScopeAdmin,\\n    bytes32 scopeId,\\n    bytes32 adminId\\n  ) external view returns (bytes32 roleAdminId) {\\n    return _getRoleAdmin(data, requestScopeType, requestScopeAdmin, scopeId, adminId);\\n  }\\n\\n  function checkMemberRegisterLimits(\\n    IACLCommons.MemberEntity storage memberEntity,\\n    IACLCommons.GeneralLimit calldata limits\\n  ) external view {\\n    require(memberEntity.limits.memberRegisterLimit >= limits.memberRegisterLimit, \\\"Illegal MemberRegisterLimit\\\");\\n    require(memberEntity.limits.contextRegisterLimit >= limits.contextRegisterLimit, \\\"Illegal ContextRegisterLimit\\\");\\n    require(memberEntity.limits.functionRegisterLimit >= limits.functionRegisterLimit, \\\"Illegal FunctionRegisterLimit\\\");\\n    require(memberEntity.limits.profileRegisterLimit >= limits.profileRegisterLimit, \\\"Illegal ProfileRegisterLimit\\\");\\n    require(memberEntity.limits.roleRegisterLimit >= limits.roleRegisterLimit, \\\"Illegal RoleRegisterLimit\\\");\\n    require(memberEntity.limits.typeRegisterLimit >= limits.typeRegisterLimit, \\\"Illegal TypeRegisterLimit\\\");\\n    require(memberEntity.limits.realmRegisterLimit >= limits.realmRegisterLimit, \\\"Illegal RealmRegisterLimit\\\");\\n    require(memberEntity.limits.domainRegisterLimit >= limits.domainRegisterLimit, \\\"Illegal DomainRegisterLimit\\\");\\n    require(memberEntity.limits.policyRegisterLimit >= limits.policyRegisterLimit, \\\"Illegal PolicyRegisterLimit\\\");\\n    require(memberEntity.limits.memberLimit >= limits.memberLimit, \\\"Illegal MemberLimit\\\");\\n    require(memberEntity.limits.contextLimit >= limits.contextLimit, \\\"Illegal ContextLimit\\\");\\n    require(memberEntity.limits.realmLimit >= limits.realmLimit, \\\"Illegal RealmLimit\\\");\\n    require(memberEntity.limits.domainLimit >= limits.domainLimit, \\\"Illegal DomainLimit\\\");\\n    require(memberEntity.limits.callLimit >= limits.callLimit, \\\"Illegal CallLimit\\\");\\n    require(memberEntity.limits.typeRoleLimit >= limits.typeRoleLimit, \\\"Illegal TypeRoleLimit\\\");\\n    require(memberEntity.limits.typeLimit >= limits.typeLimit, \\\"Illegal TypeLimit\\\");\\n    require(memberEntity.limits.policyRoleLimit >= limits.policyRoleLimit, \\\"Illegal PolicyRoleLimit\\\");\\n    require(memberEntity.limits.functionLimit >= limits.functionLimit, \\\"Illegal FunctionLimit\\\");\\n  }\\n\\n  function _doCheckAdminAccess(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 adminId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) private view returns (IACL.AdminAccessStatus) {\\n    (IACLCommons.FunctionEntity storage functionEntity, bool res) = data.functionTryReadSlot(functionId);\\n    if (!res) return IACL.AdminAccessStatus.FUNCTION_NOT_FOUND;\\n\\n    IACLCommons.AgentType adminAgentType = data.agents[adminId].atype;\\n    if (adminAgentType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = data.roleTryReadSlot(adminId);\\n      if (!result) return IACL.AdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(roleEntity.typeId);\\n      if (!result1) return IACL.AdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      if (typeEntity.members[memberId] != adminId) return IACL.AdminAccessStatus.NOT_PERMITTED;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = data.policies[data.rolePolicyMap[adminId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IACL.AdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IACL.AdminAccessStatus.PERMITTED;\\n    } else if (adminAgentType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(adminId);\\n      if (!result1) return IACL.AdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      bytes32 roleId = typeEntity.members[memberId];\\n      (IACLCommons.RoleEntity storage roleEntity, bool result2) = data.roleTryReadSlot(roleId);\\n      if (!result2) return IACL.AdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = data.policies[data.rolePolicyMap[roleId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IACL.AdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IACL.AdminAccessStatus.PERMITTED;\\n    }\\n\\n    return IACL.AdminAccessStatus.NOT_PERMITTED;\\n  }\\n\\n  function _getRoleAdmin(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ScopeType requestScopeType,\\n    bytes32 requestScopeAdmin,\\n    bytes32 scopeId,\\n    bytes32 adminId\\n  ) private view returns (bytes32 roleAdminId) {\\n    // checking requested type admin\\n    if (adminId != bytes32(0)) {\\n      require(data.agents[adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doGetAgentScopeInfo(data, adminId);\\n      require(requestScopeType <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (requestScopeType == requestAdminScopeType) {\\n        require(requestAdminScopeId == scopeId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(IACLGenerals(address(this)).isScopesCompatible(requestAdminScopeId, scopeId), \\\"Illegal Admin Scope\\\");\\n      }\\n      roleAdminId = adminId;\\n    } else {\\n      roleAdminId = requestScopeAdmin;\\n    }\\n  }\\n\\n  function getAndCheckFunctionAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 contextAdminId,\\n    bytes32 contextId,\\n    bytes32 adminId\\n  ) external view returns (bytes32 functionAdminId) {\\n    return _doGetAndCheckFunctionAdmin(data, contextAdminId, contextId, adminId);\\n  }\\n\\n  function _doGetAgentScopeInfo(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    private\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    IACLCommons.AgentType atype = data.agents[agentId].atype;\\n    if (atype == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = data.roleReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = data.scopes[roleEntity.scopeId];\\n      return (baseScope.stype, roleEntity.scopeId);\\n    } else if (atype == IACLCommons.AgentType.TYPE) {\\n      IACLCommons.TypeEntity storage typeEntity = data.typeReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = data.scopes[typeEntity.scopeId];\\n      return (baseScope.stype, typeEntity.scopeId);\\n    }\\n\\n    return (IACLCommons.ScopeType.NONE, bytes32(0));\\n  }\\n\\n  function _doGetAndCheckFunctionAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 contextAdminId,\\n    bytes32 contextId,\\n    bytes32 requestAdminId\\n  ) private view returns (bytes32 functionAdminId) {\\n    // checking requested functionAdmin admin\\n    if (requestAdminId != bytes32(0)) {\\n      require(data.agents[requestAdminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doGetAgentScopeInfo(\\n        data,\\n        requestAdminId\\n      );\\n      require(IACLCommons.ScopeType.CONTEXT <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (IACLCommons.ScopeType.CONTEXT == requestAdminScopeType) {\\n        require(requestAdminScopeId == contextAdminId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(IACLGenerals(address(this)).isScopesCompatible(requestAdminScopeId, contextId), \\\"Illegal Admin Scope\\\");\\n      }\\n      functionAdminId = requestAdminId;\\n    } else {\\n      functionAdminId = contextAdminId;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x19ea5fb85b47e563a7f2345c6ad4bc2ab85298c1e9ed663c210621e4b2a6fb5f\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLStorage {\\n  function universeReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function universeWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function functionReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fc.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function functionWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1db1476a40cb3e0912d1c07d6ed6c1e9171f6960014e49b66e3532610c80bb6d\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\n\\n/**\\n * @title Context Utils Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLUtils {\\n  function functionGenerateId(address contractId, bytes4 selector) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId, selector));\\n  }\\n\\n  function accountGenerateId(address account) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(account));\\n  }\\n\\n  function generateId(string calldata name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateId2(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateHash(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function getMemeberSignerAddress(IACLCommons.MemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateMemberSignMsgHash(msgTypeHash, memberSign.account, memberSign.expiredAt)\\n      );\\n  }\\n\\n  function getProfileMemeberSignerAddress(IACLCommons.ProfileMemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateProfileMemberSignMsgHash(\\n          msgTypeHash,\\n          generateId(memberSign.profileName),\\n          memberSign.account,\\n          memberSign.expiredAt\\n        )\\n      );\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) private view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(IProxy(address(this)).domainSeparator(), structHash);\\n  }\\n\\n  function _generateMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, account, expiredAt));\\n  }\\n\\n  function _generateProfileMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    bytes32 profileName,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, profileName, account, expiredAt));\\n  }\\n\\n  function getSignerAddress(bytes memory signature, bytes32 structHash) internal view returns (address) {\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal Signature\\\");\\n    return msgSigner;\\n  }\\n\\n  function generateAuthorizationError(IACL.AuthorizationStatus status) internal pure {\\n    if (status == IACL.AuthorizationStatus.UNAUTHORIZED) revert IACL.ACLUnauthorized();\\n    else if (status == IACL.AuthorizationStatus.POLICY_FORBIDDEN) revert IACL.ACLPolicyForbidden();\\n    else if (status == IACL.AuthorizationStatus.CALL_FORBIDDEN) revert IACL.ACLCallForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_SCOPE_FORBIDDEN) revert IACL.ACLRoleScopeForbidden();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_NOT_FOUND) revert IACL.ACLMemberNotFound();\\n    else if (status == IACL.AuthorizationStatus.ROLE_NOT_FOUND) revert IACL.ACLRoleNotFound();\\n    else if (status == IACL.AuthorizationStatus.TYPE_NOT_FOUND) revert IACL.ACLTypeNotFound();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_NOT_FOUND) revert IACL.ACLFunctionNotFound();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_NOT_FOUND) revert IACL.ACLContextNotFound();\\n    else if (status == IACL.AuthorizationStatus.REALM_NOT_FOUND) revert IACL.ACLRealmNotFound();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_NOT_FOUND) revert IACL.ACLDomainNotFound();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN) revert IACL.ACLMemberActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.ACLRoleActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.ACLTypeActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN) revert IACL.ACLFunctionActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN) revert IACL.ACLContextActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.REALM_ACTIVITY_FORBIDDEN) revert IACL.ACLRealmActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN) revert IACL.ACLDomainActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN) revert IACL.ACLUniverseActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAuthorizationError(IProfileACL.ProfileAuthorizationStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAuthorizationStatus.UNAUTHORIZED) revert IProfileACL.ProfileACLUnauthorized();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleScopeForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_NOT_FOUND)\\n      revert IProfileACL.ProfileACLMemberNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRoleNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLTypeNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileACLFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_NOT_FOUND)\\n      revert IProfileACL.ProfileACLContextNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRealmNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_NOT_FOUND)\\n      revert IProfileACL.ProfileACLDomainNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLTypeActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLFunctionActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLContextActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRealmActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLDomainActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLUniverseActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLProfileActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAdminAccessError(IProfileACL.ProfileAdminAccessStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED)\\n      revert IProfileACL.ProfileAdminAccessNotPermitted();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessRoleNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessTypeNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateAdminAccessError(IACL.AdminAccessStatus status) internal pure {\\n    if (status == IACL.AdminAccessStatus.NOT_PERMITTED) revert IACL.AdminAccessNotPermitted();\\n    else if (status == IACL.AdminAccessStatus.POLICY_FORBIDDEN) revert IACL.AdminAccessPolicyForbidden();\\n    else if (status == IACL.AdminAccessStatus.ROLE_NOT_FOUND) revert IACL.AdminAccessRoleNotFound();\\n    else if (status == IACL.AdminAccessStatus.TYPE_NOT_FOUND) revert IACL.AdminAccessTypeNotFound();\\n    else if (status == IACL.AdminAccessStatus.FUNCTION_NOT_FOUND) revert IACL.AdminAccessFunctionNotFound();\\n    else if (status == IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessRoleActivityForbidden();\\n    else if (status == IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x0a1ead86733fdae5c48faf98479dea608f2a5743722b7d458981c33ff13489c1\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LProfileStorage {\\n  function profileUniverseReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function profileUniverseWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileFunctionWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n}\\n\",\"keccak256\":\"0xe95300b9bb0c9fa78648108acf843bd0609e08a60b03b61a79f271f5fcb46b91\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0x75b905d070ebb72fa3358e262ab18166f6c6386c11171324f235058ce9185ca4\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe49098eb2019f9d9628a399f6a06ec310fe8a10785c369cc508c56df1f203dd0\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Abstract Base Proxy Contract\\n * @dev\\n *\\n */\\nabstract contract BaseProxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overridden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xbfec492ce3aa18df2eb26ce155269056e8039eaccec4a3146dd9036b565396a6\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC1822.sol\\\";\\nimport \\\"./IProxy.sol\\\";\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"./BaseUUPSStorage.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"../lib/LAddress.sol\\\";\\nimport \\\"../lib/LStorageSlot.sol\\\";\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/scope/IContextManagement.sol\\\";\\nimport \\\"../utils/Message.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"../lib/acl/LACLUtils.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Proxy Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSProxy is\\n  BaseUUPSStorage,\\n  BaseProxy,\\n  Initializable,\\n  IProxy,\\n  IERC1822Proxiable,\\n  Message,\\n  ERC165\\n{\\n  /**\\n   * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n   * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n   * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n   * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n   * fail.\\n   */\\n  modifier onlyProxy() {\\n    require(address(this) != __self, \\\"Illegal Call\\\"); // Illegal Contract Call\\n    require(_implementation() == __self, \\\"Invalid Call\\\"); // Invalid Proxy Call\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyLocalAdmin() {\\n    require(_getLocalAdmin() == _msgSender(), \\\"Access Denied\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n   * callable on the implementing contract but not through proxies.\\n   */\\n  modifier notDelegated() {\\n    require(address(this) == __self, \\\"Illegal Call\\\"); // Illegal Contract Delegatecall\\n    _;\\n  }\\n\\n  modifier safeModeCheck() {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    _;\\n  }\\n\\n  modifier aclCheck(bytes4 selector) {\\n    IACL.AuthorizationStatus status = _hasPermission(selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _;\\n  }\\n\\n  function _hasPermission(bytes4 selector) internal returns (IACL.AuthorizationStatus) {\\n    return IACL(_accessControlManager).hasAccountAccess(address(this), selector, _msgSender());\\n  }\\n\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n   */\\n\\n  constructor() {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n    // set contract Admin (implementation contract)\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = _msgSender();\\n\\n    // set _isUpgradable and _isSafeMode of contact\\n    _ustat = ProxyUpdatabilityStatus.DISABLED;\\n    _sstat = ProxySafeModeStatus.ENABLED;\\n  }\\n\\n  function __BASE_UUPS_init(\\n    string calldata cname,\\n    string calldata cverion,\\n    address accessControl\\n  ) internal {\\n    __BASE_UUPS_init_unchained(cname, cverion, accessControl);\\n  }\\n\\n  function __BASE_UUPS_init_unchained(\\n    string calldata cname,\\n    string calldata cverion,\\n    address accessControl\\n  ) internal onlyInitializing {\\n    _contractName = cname;\\n    _contractVersion = cverion;\\n\\n    if (accessControl != address(this)) {\\n      require(LAddress.isContract(accessControl), \\\"Illegal Contract\\\");\\n      if (!IERC165(accessControl).supportsInterface(type(IACL).interfaceId)) {\\n        revert(\\\"Illegal ACL\\\");\\n      }\\n    } else {\\n      if (!supportsInterface(type(IACL).interfaceId)) {\\n        revert(\\\"Not Supported\\\");\\n      }\\n    }\\n\\n    _accessControlManager = accessControl;\\n    _ustat = ProxyUpdatabilityStatus.DISABLED;\\n    _sstat = ProxySafeModeStatus.DISABLED;\\n    _setLocalAdmin(_msgSender());\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IProxy).interfaceId ||\\n      interfaceId == type(IERC1822Proxiable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation() internal view override returns (address) {\\n    return LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit ProxyUpgraded(msg.sender, address(this), newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      return LAddress.functionDelegateCall(newImplementation, data, \\\"Call Failed\\\"); // delegatecall failed\\n    }\\n    return new bytes(0);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCallUUPS(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\n    if (LStorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n      _setImplementation(newImplementation);\\n      return new bytes(0);\\n    } else {\\n      if (IERC1822Proxiable(newImplementation).proxiableUUID() != _IMPLEMENTATION_SLOT) {\\n        revert(\\\"Illegal UUPS\\\");\\n      }\\n\\n      if (!IERC165(newImplementation).supportsInterface(type(IProxy).interfaceId)) {\\n        revert(\\\"Illegal IProxy\\\");\\n      }\\n\\n      return _upgradeToAndCall(newImplementation, data, forceCall);\\n    }\\n  }\\n\\n  /**\\n   * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n   * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n   */\\n  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n    return _IMPLEMENTATION_SLOT;\\n  }\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external virtual onlyProxy returns (bytes memory) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    require(LAddress.isContract(newImplementation), \\\"Illegal Contract\\\");\\n    _authorizeUpgrade(newImplementation);\\n    return _upgradeToAndCallUUPS(newImplementation, data, forceCall);\\n  }\\n\\n  /**\\n   * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n   * {upgradeTo} and {upgradeToAndCall}.\\n   *\\n   * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n   *\\n   * ```solidity\\n   * function _authorizeUpgrade(address) internal override onlyOwner {}\\n   * ```\\n   */\\n  function _authorizeUpgrade(address newImplementation) internal virtual {\\n    require(newImplementation != _implementation(), \\\"Illegal\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.upgradeTo.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n  }\\n\\n  function localAdmin() external view returns (address) {\\n    return _getLocalAdmin();\\n  }\\n\\n  function setLocalAdmin(address newLocalAdmin) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setLocalAdmin.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    require(newLocalAdmin != address(0), \\\"Invalid\\\");\\n    _setLocalAdmin(newLocalAdmin);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.require(!_isSafeMode, \\\"Rejected\\\");\\n   */\\n  function _getLocalAdmin() internal view returns (address) {\\n    return LStorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setLocalAdmin(address newAdmin) internal {\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    emit ProxyLocalAdminUpdated(_msgSender(), address(this), newAdmin);\\n  }\\n\\n  // In each upgrade the initialize requirement must be changed\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external onlyProxy returns (bool) {\\n    require(_getInitializedCount() > 0, \\\"NOT INIT\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setSafeModeStatus.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _sstat = sstat;\\n    emit ProxySafeModeUpdated(_msgSender(), address(this), sstat);\\n    return true;\\n  }\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setUpdatabilityStatus.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _ustat = ustat;\\n    emit ProxyUpdatabilityUpdated(_msgSender(), address(this), ustat);\\n    return true;\\n  }\\n\\n  function setAccessControlManager(address acl) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    require(acl != address(0) && LAddress.isContract(acl), \\\"Illegal Contract\\\");\\n\\n    if (_accessControlManager != address(0)) {\\n      IACL.AuthorizationStatus status = _hasPermission(this.setAccessControlManager.selector);\\n      if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    } else {\\n      require(_getLocalAdmin() == _msgSender(), \\\"Access Denied\\\");\\n    }\\n\\n    if (!IERC165(acl).supportsInterface(type(IACL).interfaceId)) {\\n      revert(\\\"Illegal ACL\\\");\\n    }\\n\\n    _accessControlManager = acl;\\n    emit ProxyAccessControlUpdated(_msgSender(), address(this), _accessControlManager);\\n    return true;\\n  }\\n\\n  function contractName() external view returns (string memory) {\\n    return _contractName;\\n  }\\n\\n  function contractVersion() external view returns (string memory) {\\n    return _contractVersion;\\n  }\\n\\n  function accessControlManager() external view returns (address) {\\n    return _accessControlManager;\\n  }\\n\\n  function subjectAddress() external view returns (address) {\\n    return _implementation();\\n  }\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus) {\\n    return _sstat;\\n  }\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus) {\\n    return _ustat;\\n  }\\n\\n  function domainSeparator() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          keccak256(abi.encodePacked(_contractName)),\\n          keccak256(abi.encodePacked(_contractVersion)),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  function initVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  function withdrawBalance(address recepient) external returns (uint256) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.withdrawBalance.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    uint256 balance = address(this).balance;\\n    payable(recepient).transfer(address(this).balance);\\n    return balance;\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable override {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable override {}\\n}\\n\",\"keccak256\":\"0x711f8267d66a827c0cf581e8f070580586aa0fddd197637fac5b85bfd371627b\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Storage Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSStorage is IBaseProxy {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  address internal immutable __self = address(this);\\n\\n  string internal _contractName;\\n  string internal _contractVersion;\\n  address internal _accessControlManager;\\n  ProxySafeModeStatus internal _sstat;\\n  ProxyUpdatabilityStatus internal _ustat;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x4ff079fd2fd1ad102d42e82a72bff6bb1ffb8f9ab29cec2dd8e970b892ea415e\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IBaseProxy {\\n  enum ProxySafeModeStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum ProxyUpdatabilityStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  event ProxyUpgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x4b2695303b3acb300ba472d17da71a16367191af571d325d43171503d7c92846\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x98571e9bc4231bb67b3c8b339c052fa968e56b0bef3e35f5d82c391335336ae8\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event ProxyLocalAdminUpdated(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event ProxyAccessControlUpdated(address indexed sender, address indexed proxy, address acl);\\n\\n  event ProxySafeModeUpdated(address indexed sender, address indexed proxy, ProxySafeModeStatus sstat);\\n\\n  event ProxyUpdatabilityUpdated(address indexed sender, address indexed proxy, ProxyUpdatabilityStatus ustat);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external returns (bool);\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function setAccessControlManager(address acl) external returns (bool);\\n\\n  function withdrawBalance(address recepient) external returns (uint256);\\n\\n  function contractName() external view returns (string memory);\\n\\n  function contractVersion() external view returns (string memory);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus);\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xaadf51e846486cf9dc7387ad1dcac9a67e6a2d9354ce71694d79de783e1dea3b\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0x5603924c0330dcabd0b81d2b6a8113be8ad3ecbbfd0e75795a79221c21990f45\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xd4388084c83f15ac54be8d4e28a9d0f7be51c87efc357a33e7080e9769d5553a\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x95ac867088cd7cca6d583788b83e56e0c521c847aa9844f6184c14f5ce3ddf90\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Abstract Message Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x9fe52fdf93ebcdcbe224c4eba70bd3d8f6b4479fcc67d681b18070975d1ba970\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200004360017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620000fd565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc1462000074576200007462000125565b620000a160017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620000fd565b600080516020620060ae83398151915214620000c157620000c162000125565b600080516020620060ae83398151915280546001600160a01b0319163317905560028054600160a01b61ffff60a01b199091161790556200013b565b818103818111156200011f57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052600160045260246000fd5b608051615f03620001ab600039600081816107cf0152818161081801528181610a0701528181610a470152818161110301528181611169015281816111a90152818161245e0152818161249e01528181612658015281816126980152818161284c015261288c0152615f036000f3fe6080604052600436106102115760003560e01c806378e2e1fb11610117578063c051cc9a116100a5578063f698da251161006c578063f698da2514610703578063f708ceb014610718578063f94a0adb14610738578063fa3aa6711461074d578063fcc401781461077a57005b8063c051cc9a1461064f578063c5d2d8ff1461066f578063d9dc1f191461068f578063db3762cc146106af578063f0b15def146106cf57005b8063a0a8e460116100e9578063a0a8e460146105b0578063a304e353146105c5578063b4a0bdf3146105e4578063b879581414610602578063bc44c7021461062257005b806378e2e1fb1461051c5780638be959861461053c578063961788951461055c5780639b97b5341461057c57005b80633fb8ae051161019f57806364d4c8191161016657806364d4c8191461045f5780637147855d14610493578063756af45f146104c057806375d0c0dc146104e05780637678922e146104f557005b80633fb8ae05146103a15780634888f482146103c15780634bf0414d146103e957806352d1902d1461041d57806358dbc45d1461043257005b80631b452f4b116101e35780631b452f4b146102af5780632966b144146102f1578063301c12801461031157806334109de21461034557806338d38c971461037957005b806301ffc9a71461021a578063077f224a1461024f5780630e32cb861461026f5780631ac5b3721461028f57005b3661021857005b005b34801561022657600080fd5b5061023a610235366004614b80565b61079a565b60405190151581526020015b60405180910390f35b34801561025b57600080fd5b5061021861026a366004614c02565b6107c5565b34801561027b57600080fd5b5061023a61028a366004614c82565b6109fb565b34801561029b57600080fd5b5061023a6102aa366004614c9d565b610d09565b3480156102bb57600080fd5b506102e37f7bfb2abd6084c8ce20d7ff92c1620e7e7267603f0eac446b9176959d243306bc81565b604051908152602001610246565b3480156102fd57600080fd5b5061023a61030c366004614cc9565b610e65565b34801561031d57600080fd5b506102e37f541cf898e7c3085cbc6b7402ba06e7237285bc4bd5baa510e708e35537a71ffd81565b34801561035157600080fd5b506102e37f7aabe2571874f2a330ea11c8972d9cc3792d973efc6b36e3e29005861a34418881565b34801561038557600080fd5b5061038e610e96565b60405161ffff9091168152602001610246565b3480156103ad57600080fd5b5061023a6103bc366004614cfa565b610eaa565b3480156103cd57600080fd5b50600254600160a81b900460ff165b6040516102469190614dba565b3480156103f557600080fd5b506102e37f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d5581565b34801561042957600080fd5b506102e36110f6565b34801561043e57600080fd5b50610447611153565b6040516001600160a01b039091168152602001610246565b34801561046b57600080fd5b506102e37f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b34801561049f57600080fd5b506104b36104ae366004614dfc565b61115d565b6040516102469190614f1d565b3480156104cc57600080fd5b506102e36104db366004614c82565b6112bc565b3480156104ec57600080fd5b506104b3611381565b34801561050157600080fd5b507333969217bDF56df99b4735b455C42b79EC99d57b610447565b34801561052857600080fd5b5061023a610537366004614f30565b611413565b34801561054857600080fd5b5061023a610557366004614ffb565b611522565b34801561056857600080fd5b5061023a610577366004614ffb565b61176d565b34801561058857600080fd5b506102e37fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b881565b3480156105bc57600080fd5b506104b361194c565b3480156105d157600080fd5b50600254600160a01b900460ff166103dc565b3480156105f057600080fd5b506002546001600160a01b0316610447565b34801561060e57600080fd5b5061023a61061d366004614c82565b61195b565b34801561062e57600080fd5b5061064261063d366004614cc9565b6119bc565b6040516102469190615080565b34801561065b57600080fd5b5061023a61066a366004614ffb565b611d81565b34801561067b57600080fd5b5061023a61068a36600461526b565b611f74565b34801561069b57600080fd5b5061023a6106aa366004614c82565b612452565b3480156106bb57600080fd5b5061023a6106ca3660046152f1565b612608565b3480156106db57600080fd5b506102e37ffc434588684348dd50856b075c47bed14245c1030aa04c32955af5549981462781565b34801561070f57600080fd5b506102e3612642565b34801561072457600080fd5b5061023a610733366004615320565b61264c565b34801561074457600080fd5b506104476127f6565b34801561075957600080fd5b5061076d610768366004614cc9565b612800565b604051610246919061533d565b34801561078657600080fd5b5061023a610795366004615320565b612840565b60006001600160e01b031982166349b4d31560e01b14806107bf57506107bf826129cb565b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108165760405162461bcd60e51b815260040161080d90615381565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610848612a1b565b6001600160a01b03161461086e5760405162461bcd60e51b815260040161080d906153a7565b33610877612a3c565b6001600160a01b0316146108bd5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b604482015260640161080d565b604e5462010000900460ff16158080156108df5750604e54600161ffff909116105b806108fa5750303b1580156108fa5750604e5461ffff166001145b6109465760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a656400000000604482015260640161080d565b604e805461ffff19166001179055801561096c57604e805462ff00001916620100001790555b6109798686868686612a64565b610981612a1b565b6001600160a01b031630336001600160a01b03167f247ab7b17ee489fa140c6666edc3822eefed2727610cd6e37192462b87244c60898989896109c7604e5461ffff1690565b6040516109d89594939291906153f6565b60405180910390a480156109f357604e805462ff0000191690555b505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a455760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a77612a1b565b6001600160a01b031614610a9d5760405162461bcd60e51b815260040161080d906153a7565b6000600254600160a01b900460ff166001811115610abd57610abd614d94565b14610ada5760405162461bcd60e51b815260040161080d90615434565b6001600254600160a81b900460ff166001811115610afa57610afa614d94565b14610b175760405162461bcd60e51b815260040161080d90615456565b6001600160a01b03821615801590610b3857506001600160a01b0382163b15155b610b545760405162461bcd60e51b815260040161080d90615481565b6002546001600160a01b031615610bb3576000610b7763071965c360e11b612a78565b90506000816013811115610b8d57610b8d614d94565b14610bad5780604051637f0911d160e01b815260040161080d91906154ab565b50610c02565b33610bbc612a3c565b6001600160a01b031614610c025760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b604482015260640161080d565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7191906154bf565b610cab5760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b604482015260640161080d565b600280546001600160a01b0384166001600160a01b031990911681179091556040805191825251309133917f410bf468eebeeed60acaedb904afb2db7c0bb0131f7d14c3714d81b14fe8ed3c9181900360200190a35060015b919050565b6000600160008481526044602052604090206001015460ff166003811115610d3357610d33614d94565b14610d40575060006107bf565b6000838152604460205260408082205480835290822060010154909160ff90911690610d6b85612b03565b90506002826003811115610d8157610d81614d94565b03610dfe57600080610d94604486612b3d565b9150915080610dab576000955050505050506107bf565b600080610dc684600301546044612b9a90919063ffffffff16565b9150915080610ddf5760009750505050505050506107bf565b5060009384526005016020525050604090205490911491506107bf9050565b6003826003811115610e1257610e12614d94565b03610e5957600080610e25604486612b9a565b9150915080610e3c576000955050505050506107bf565b5060009182526005016020526040902054151592506107bf915050565b50600095945050505050565b6000600160008381526044602052604090206001015460ff166003811115610e8f57610e8f614d94565b1492915050565b6000610ea5604e5461ffff1690565b905090565b6000808080610ec087633fb8ae0560e01b612bb1565b919450925090506000610ed4604484612dcc565b905060005b868110156110e5576000610f0a898984818110610ef857610ef86154dc565b90506102600201600001358688612ea9565b9050610f1881600401612f2c565b898984818110610f2a57610f2a6154dc565b610f46926101806102609092020190810191506101600161550d565b61ffff1611610f8b5760405162461bcd60e51b8152602060048201526011602482015270125b1b1959d85b08151e5c19531a5b5a5d607a1b604482015260640161080d565b6040517f545950452e4c4956454c595f56455253452e4c4956454c595f4d4153544552006020820152610fe490603f015b6040516020818303038152906040528051906020012082600401612f3690919063ffffffff16565b1580156110005750610ffe604051602001610fbc9061552a565b155b1561102a5761102a838a8a8581811061101b5761101b6154dc565b90506102600201602001612f4e565b88888381811061103c5761103c6154dc565b9050610260020160200181600301818161105691906155a9565b90505088888381811061106b5761106b6154dc565b9050610260020160000135846001600160a01b03167fdefb26be73b29f71b327c0b82dd3347dbeeb918a65f4aae4a384c42f94cd9a278b8b868181106110b3576110b36154dc565b905061026002016020016040516110ca9190615a86565b60405180910390a350806110dd81615aab565b915050610ed9565b5060019450505050505b9392505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111405760405162461bcd60e51b815260040161080d90615381565b50600080516020615eae83398151915290565b6000610ea5612a1b565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111a75760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111d9612a1b565b6001600160a01b0316146111ff5760405162461bcd60e51b815260040161080d906153a7565b6000600254600160a01b900460ff16600181111561121f5761121f614d94565b1461123c5760405162461bcd60e51b815260040161080d90615434565b6001600254600160a81b900460ff16600181111561125c5761125c614d94565b146112795760405162461bcd60e51b815260040161080d90615456565b6001600160a01b0384163b6112a05760405162461bcd60e51b815260040161080d90615481565b6112a984612fb3565b6112b4848484613051565b949350505050565b600080600254600160a01b900460ff1660018111156112dd576112dd614d94565b146112fa5760405162461bcd60e51b815260040161080d90615434565b600061130c63756af45f60e01b612a78565b9050600081601381111561132257611322614d94565b146113425780604051637f0911d160e01b815260040161080d91906154ab565b60405147906001600160a01b038516904780156108fc02916000818181858888f19350505050158015611379573d6000803e3d6000fd5b509392505050565b60606000805461139090615ac4565b80601f01602080910402602001604051908101604052809291908181526020018280546113bc90615ac4565b80156114095780601f106113de57610100808354040283529160200191611409565b820191906000526020600020905b8154815290600101906020018083116113ec57829003601f168201915b5050505050905090565b6000808080611429876378e2e1fb60e01b612bb1565b91945092509050600061143d604484612dcc565b600381015490915060009061146290600189900b906301000000900461ffff16615af8565b60030b12156114ab5760405162461bcd60e51b8152602060048201526015602482015274125b1b1959d85b08149959da5cdd195c931a5b5a5d605a1b604482015260640161080d565b60005b868110156114ed576114db8888838181106114cb576114cb6154dc565b90506102e0020183878787613209565b806114e581615aab565b9150506114ae565b50600301805461ffff630100000080830482168990039091160264ffff00000019909116179055506001925050509392505050565b6000808080611538876345f4acc360e11b612bb1565b92509250925060005b8581101561175f576000611571888884818110611560576115606154dc565b905060400201600001358587612ea9565b90506115bc60405160200161158590615b1f565b604051602081830303815290604052805190602001208989858181106115ad576115ad6154dc565b9050604002016000013561386d565b156115fa5760405162461bcd60e51b815260206004820152600e60248201526d24b63632b3b0b61026b2b6b132b960911b604482015260640161080d565b600188888481811061160e5761160e6154dc565b90506040020160200160208101906116269190615b63565b600381111561163757611637614d94565b116116775760405162461bcd60e51b815260206004820152601060248201526f496c6c6567616c20416374697669747960801b604482015260640161080d565b878783818110611689576116896154dc565b90506040020160200160208101906116a19190615b63565b60018201805461ff0019166101008360038111156116c1576116c1614d94565b02179055508787838181106116d8576116d86154dc565b90506040020160000135836001600160a01b03167f06b789b822e2581aa4e79c81b84ed1ccc1a5c2741e97b3d74e0e7e980480bca28a8a8681811061171f5761171f6154dc565b90506040020160200160208101906117379190615b63565b6040516117449190615b80565b60405180910390a3508061175781615aab565b915050611541565b506001979650505050505050565b600080808061178387639617889560e01b612bb1565b92509250925060005b8581101561175f5760006117ab888884818110611560576115606154dc565b905060008888848181106117c1576117c16154dc565b90506040020160200135146118a15760006044818a8a868181106117e7576117e76154dc565b90506040020160200135815260200190815260200160002090506001600381111561181457611814614d94565b600182015460ff16600381111561182d5761182d614d94565b116118745760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b604482015260640161080d565b888884818110611886576118866154dc565b905060400201602001358260000160000181905550506118cb565b6040516020016118b09061552a565b60408051601f19818403018152919052805160209091012081555b8787838181106118dd576118dd6154dc565b905060400201602001358888848181106118f9576118f96154dc565b90506040020160000135846001600160a01b03167fd2e065bcd4d1c7b0bbb6c1d8f35c9bbb6d0e839a05ef546391707ce17f3eb01a60405160405180910390a4508061194481615aab565b91505061178c565b60606001805461139090615ac4565b600060016040516001600160601b0319606085901b16602082015260449060009060340160408051601f198184030181529181528151602092830120835290820192909252016000206001015460ff166003811115610e8f57610e8f614d94565b611a8f60408051610100808201835260008083526020808401829052845161024081018652828152908101829052808501829052606081018290526080810182905260a0810182905260c0810182905260e0810182905291820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e08201819052610200820181905261022082015290918201908152600060208201819052604090910190815260200160008152602001600081526020016000905290565b600080611a9d6044856138de565b9150915080611b7a57604080516101008082018352600080835260208084018290528451610240810186528281529081018290528085018290526060808201839052608080830184905260a0830184905260c0830184905260e0830184905293820183905261012082018390526101408201839052610160820183905261018082018390526101a082018390526101c082018390526101e0820183905261020082018390526102208201839052948401529282018390529091908201908152602001600081526020016000815260200160005b9052949350505050565b6040805161010080820183528454825260028501546001600160a01b0316602080840191909152835161024081018552600387015462ffffff8116825261ffff63010000008204811693830193909352650100000000008104831682870152670100000000000000810483166060808401919091526901000000000000000000820484166080840152600160581b8204841660a0840152600160681b8204841660c0840152600160781b8204841660e0840152600160881b8204841694830194909452600160981b81048316610120830152600160a81b810490921661014082015260ff600160b81b83048116610160830152600160c01b83048116610180830152600160c81b830481166101a0830152600160d01b830481166101c0830152600160d81b830481166101e0830152600160e01b83048116610200830152600160e81b90920490911661022082015292820192909252908101611cdf60048501612f2c565b61ffff168152835460009081526044602090815260409091206001015491019060ff166003811115611d1357611d13614d94565b8152600184015460209091019060ff166003811115611d3457611d34614d94565b81526001840154602090910190610100900460ff166003811115611d5a57611d5a614d94565b8152600184015460209091019062010000900460ff166003811115611b7057611b70614d94565b6000808080611d9787636028e64d60e11b612bb1565b92509250925060005b8581101561175f576000611dd0888884818110611dbf57611dbf6154dc565b604492604090910201359050612dcc565b8054909150600090611de39086886138f5565b90506000816007811115611df957611df9614d94565b14611e0757611e0781613981565b6000898985818110611e1b57611e1b6154dc565b9050604002016020016020810190611e339190615b63565b6003811115611e4457611e44614d94565b03611e885760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20416c7465726162696c69747960601b604482015260640161080d565b888884818110611e9a57611e9a6154dc565b9050604002016020016020810190611eb29190615b63565b60018301805462ff0000191662010000836003811115611ed457611ed4614d94565b0217905550888884818110611eeb57611eeb6154dc565b90506040020160000135846001600160a01b03167f824333a0ecff9cffe8512433ee440baab06dfb39a89a27b048c8143bbc18d9fb8b8b87818110611f3257611f326154dc565b9050604002016020016020810190611f4a9190615b63565b604051611f579190615b80565b60405180910390a350508080611f6c90615aab565b915050611da0565b6000808080611f8a8763c5d2d8ff60e01b612bb1565b92509250925060005b8581101561175f576000611fc9888884818110611fb257611fb26154dc565b905060200201356044612dcc90919063ffffffff16565b8054909150600090611fdc9086886138f5565b90506000816007811115611ff257611ff2614d94565b146120005761200081613981565b60005b61200f83600401612f2c565b8110801561201d5750601081105b156123195760006120316004850183613b18565b90506000612040604483613b24565b90506002600182015462010000900460ff16600381111561206357612063614d94565b10156120aa5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c205479706520557064617461626c6560501b604482015260640161080d565b60008160050160008e8e8a8181106120c4576120c46154dc565b90506020020135815260200190815260200160002054905060006120f2826044613bfb90919063ffffffff16565b90506002600182015462010000900460ff16600381111561211557612115614d94565b101561215c5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c20526f6c6520557064617461626c6560501b604482015260640161080d565b60405160200161216b90615b1f565b6040516020818303038152906040528051906020012082036121e05760058101546001630100000090910462ffffff16116121e05760405162461bcd60e51b8152602060048201526015602482015274496c6c6567616c204d656d626572205265766f6b6560581b604482015260640161080d565b60058101546301000000900462ffffff166122335760405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b0813595b58995c90dbdd5b9d606a1b604482015260640161080d565b6005808201805460001962ffffff6301000000808404821692909201160265ffffff00000019909116179055830160008f8f8b818110612275576122756154dc565b905060200201358152602001908152602001600020600090556122a48488600401613cd890919063ffffffff16565b50818e8e8a8181106122b8576122b86154dc565b905060200201358a6001600160a01b03167f785c010df3daed664e2629b2816294f5b470e752cd8a8ca9d16146f8a1996b68876040516122fa91815260200190565b60405180910390a450505050808061231190615aab565b915050612003565b5061232682600401612f2c565b6000036123dd57600080835560018301805462ffffff191690556002830180546001600160a01b03191690556003830180546001600160f01b0319169055600483019081816123758282614b4e565b5050505088888481811061238b5761238b6154dc565b90506020020135846001600160a01b03167ffe86beb9b4c7f7a6b9ab37078fa83c2ef4f4fe3b50582d82c897823c5791061660016040516123d0911515815260200190565b60405180910390a361243d565b8888848181106123ef576123ef6154dc565b90506020020135846001600160a01b03167ffe86beb9b4c7f7a6b9ab37078fa83c2ef4f4fe3b50582d82c897823c579106166000604051612434911515815260200190565b60405180910390a35b5050808061244a90615aab565b915050611f93565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361249c5760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166124ce612a1b565b6001600160a01b0316146124f45760405162461bcd60e51b815260040161080d906153a7565b6000600254600160a01b900460ff16600181111561251457612514614d94565b146125315760405162461bcd60e51b815260040161080d90615434565b6001600254600160a81b900460ff16600181111561255157612551614d94565b1461256e5760405162461bcd60e51b815260040161080d90615456565b600061258063d9dc1f1960e01b612a78565b9050600081601381111561259657612596614d94565b146125b65780604051637f0911d160e01b815260040161080d91906154ab565b6001600160a01b0383166125f65760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b604482015260640161080d565b6125ff83613ce4565b50600192915050565b600080806126176044866138de565b9150915080156126375761262e6004830185612f36565b925050506107bf565b506000949350505050565b6000610ea5613d5b565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036126965760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166126c8612a1b565b6001600160a01b0316146126ee5760405162461bcd60e51b815260040161080d906153a7565b60006126fd604e5461ffff1690565b61ffff16116127395760405162461bcd60e51b81526020600482015260086024820152671393d5081253925560c21b604482015260640161080d565b600061274b630f708ceb60e41b612a78565b9050600081601381111561276157612761614d94565b146127815780604051637f0911d160e01b815260040161080d91906154ab565b6002805484919060ff60a01b1916600160a01b8360018111156127a6576127a6614d94565b021790555030336001600160a01b03167fc08ec585c25f1907baaab6f278c5994531a2e34c59935b3fcfe813067a3b4878856040516127e59190614dba565b60405180910390a350600192915050565b6000610ea5612a3c565b60606000806128106044856138de565b91509150806128345760408051600080825260208201909252905b50949350505050565b6112b482600401613e0f565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361288a5760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166128bc612a1b565b6001600160a01b0316146128e25760405162461bcd60e51b815260040161080d906153a7565b6000600254600160a01b900460ff16600181111561290257612902614d94565b1461291f5760405162461bcd60e51b815260040161080d90615434565b6000612931631f98802f60e31b612a78565b9050600081601381111561294757612947614d94565b146129675780604051637f0911d160e01b815260040161080d91906154ab565b6002805484919060ff60a81b1916600160a81b83600181111561298c5761298c614d94565b021790555030336001600160a01b03167ff5912c5e436152157ed2b4a84bc313b4b1fe09a15b941f195d23c99a1b8c45ad856040516127e59190614dba565b60006001600160e01b03198216633d817cff60e01b14806129fc57506001600160e01b031982166352d1902d60e01b145b806107bf57506301ffc9a760e01b6001600160e01b03198316146107bf565b6000600080516020615eae8339815191525b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612a2d565b612a718585858585613e1a565b5050505050565b6002546040805163172cb29d60e11b81523060048201526001600160e01b03198416602482015233604482015290516000926001600160a01b031691632e59653a916064808301926020929190829003018187875af1158015612adf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190615b8d565b6040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b6000818152602083905260408120819060025b600182015460ff166003811115612b6957612b69614d94565b03612b8857604080518581526020810187905220925060019150612b92565b6000199250600091505b509250929050565b600081815260208390526040812081906003612b50565b6000808080306001600160a01b031663a304e3536040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c189190615bae565b6001811115612c2957612c29614d94565b14612c465760405162461bcd60e51b815260040161080d90615434565b600080612c566040880188615bcb565b90501115612cea5742612c6f6040880160208901615c11565b6001600160401b031611612cb95760405162461bcd60e51b815260206004820152601160248201527045787069726564205369676e617475726560781b604482015260640161080d565b612ce3867fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b8613fe3565b9050612ced565b50335b6001600160e01b031985166000908152604a60205260408120546001600160a01b031690612d1b828861409b565b90506000612d2884612b03565b604051634902a91960e11b8152600481018490526024810182905290915060009030906392055232906044016020604051808303816000875af1158015612d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d979190615b8d565b90506000816013811115612dad57612dad614d94565b14612dbb57612dbb816140e7565b509095509350909150509250925092565b600081815260208390526040812060018082015460ff166003811115612df457612df4614d94565b03612e0f576040805184815260208101869052209150612ea2565b6000600182015460ff166003811115612e2a57612e2a614d94565b03612e675760405162461bcd60e51b815260206004820152600d60248201526c13525108139bdd08119bdd5b99609a1b604482015260640161080d565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081352510814db1bdd60821b604482015260640161080d565b5092915050565b600080612eb7604486612dcc565b90506002600182015462010000900460ff166003811115612eda57612eda614d94565b1015612ef85760405162461bcd60e51b815260040161080d90615456565b8054600090612f089086866138f5565b90506000816007811115612f1e57612f1e614d94565b1461282b5761282b81613981565b60006107bf825490565b600081815260018301602052604081205415156110ef565b604051637cc3481760e11b81527333969217bDF56df99b4735b455C42b79EC99d57b9063f986902e90612f879085908590600401615c3a565b60006040518083038186803b158015612f9f57600080fd5b505af41580156109f3573d6000803e3d6000fd5b612fbb612a1b565b6001600160a01b0316816001600160a01b0316036130055760405162461bcd60e51b8152602060048201526007602482015266125b1b1959d85b60ca1b604482015260640161080d565b6000613017637147855d60e01b612a78565b9050600081601381111561302d5761302d614d94565b1461304d5780604051637f0911d160e01b815260040161080d91906154ab565b5050565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561309b576130868461449c565b506040805160008152602081019091526110ef565b600080516020615eae83398151915260001b846001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310f9190615c4f565b1461314b5760405162461bcd60e51b815260206004820152600c60248201526b496c6c6567616c205555505360a01b604482015260640161080d565b6040516301ffc9a760e01b8152633d817cff60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015613196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ba91906154bf565b6131f75760405162461bcd60e51b815260206004820152600e60248201526d496c6c6567616c204950726f787960901b604482015260640161080d565b6132028484846144cb565b90506110ef565b600061322361321e6060880160408901614c82565b612b03565b905060008082815260446020526040902060010154610100900460ff16600381111561325157613251614d94565b1461328e5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e48115e1a5cdd609a1b604482015260640161080d565b60016132a26101c088016101a0890161550d565b61ffff1610156132e85760405162461bcd60e51b8152602060048201526011602482015270125b1b1959d85b08151e5c19531a5b5a5d607a1b604482015260640161080d565b60016132fc6102c088016102a08901615b63565b600381111561330d5761330d614d94565b11801561333c575060006133296102e088016102c08901615b63565b600381111561333a5761333a614d94565b115b6133885760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c2041637469766974792f416c7465726162696c697479000000604482015260640161080d565b6040517f545950452e4c4956454c595f56455253452e4c4956454c595f4d41535445520060208201526133e190603f015b6040516020818303038152906040528051906020012086600401612f3690919063ffffffff16565b1580156133fd57506133fb6040516020016133b99061552a565b155b1561340f5761340f8587606001612f4e565b600061341d60448835613bfb565b90506002600182015462010000900460ff16600381111561344057613440614d94565b10156134875760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c20526f6c6520557064617461626c6560501b604482015260640161080d565b600581015462ffffff6301000000820481169116116134db5760405162461bcd60e51b815260206004820152601060248201526f24b63632b3b0b6102932b3b4b9ba32b960811b604482015260640161080d565b60006134f582600301546044613b2490919063ffffffff16565b90506002600182015462010000900460ff16600381111561351857613518614d94565b101561355f5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c205479706520557064617461626c6560501b604482015260640161080d565b815460009061356f9087896138f5565b9050600081600781111561358557613585614d94565b146135935761359381613981565b6000848152600583810160205260409091208a35905583018054600191906003906135cb9084906301000000900462ffffff16615c68565b92506101000a81548162ffffff021916908362ffffff16021790555060006135fd85604461452c90919063ffffffff16565b905060208a0135156136ef5760016020808c013560009081526044909152604090206001015460ff16600381111561363757613637614d94565b1161367e5760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b604482015260640161080d565b6136ad6040516020016136909061552a565b60405160208183030381529060405280519060200120888a6138f5565b915060008260078111156136c3576136c3614d94565b146136e3578160405163578978db60e01b815260040161080d9190615c84565b60208a01358155613719565b6040516020016136fe9061552a565b60408051601f19818403018152919052805160209091012081555b6001818101805460ff1916909117905561373b6102c08b016102a08c01615b63565b60018201805461ff00191661010083600381111561375b5761375b614d94565b02179055506137726102e08b016102c08c01615b63565b60018201805462ff000019166201000083600381111561379457613794614d94565b02179055506137a960608b0160408c01614c82565b6002820180546001600160a01b0319166001600160a01b039290921691909117905560038401546137de906004830190614592565b5060608a01600382016137f182826155a9565b50613804905060608b0160408c01614c82565b6001600160a01b031685876001600160a01b03167f04f920874e379439650f091dac01500fa81a584fb13d038eb312f5de34420f5b8d6000013585600001600001548f60600160405161385993929190615c98565b60405180910390a450505050505050505050565b6000808061387c604486612b3d565b9150915080613890576000925050506107bf565b6000806138ab84600301546044612b9a90919063ffffffff16565b91509150806138c15760009450505050506107bf565b506000948552600501602052505060409091205491909114919050565b600081815260208390526040812081906001612b50565b60405163ca37fa8560e01b8152604460048201819052602482018590528101839052606481018290526000907333969217bDF56df99b4735b455C42b79EC99d57b9063ca37fa8590608401602060405180830381865af415801561395d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b49190615cb4565b600181600781111561399557613995614d94565b036139b3576040516334267bfb60e11b815260040160405180910390fd5b60028160078111156139c7576139c7614d94565b036139e5576040516343f871e760e11b815260040160405180910390fd5b60038160078111156139f9576139f9614d94565b03613a1757604051639afb7c5f60e01b815260040160405180910390fd5b6004816007811115613a2b57613a2b614d94565b03613a49576040516332314d6b60e11b815260040160405180910390fd5b6005816007811115613a5d57613a5d614d94565b03613a7b57604051633123155560e01b815260040160405180910390fd5b6006816007811115613a8f57613a8f614d94565b03613aad57604051631b210af760e21b815260040160405180910390fd5b6007816007811115613ac157613ac1614d94565b03613adf576040516339f73ba360e11b815260040160405180910390fd5b60405162461bcd60e51b815260206004820152600b60248201526a2ab735b737bbb71022a92960a91b604482015260640161080d565b50565b60006110ef838361459e565b60008181526020839052604081206003600182015460ff166003811115613b4d57613b4d614d94565b03613b68576040805184815260208101869052209150612ea2565b6000600182015460ff166003811115613b8357613b83614d94565b03613bc05760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b604482015260640161080d565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b604482015260640161080d565b60008181526020839052604081206002600182015460ff166003811115613c2457613c24614d94565b03613c3f576040805184815260208101869052209150612ea2565b6000600182015460ff166003811115613c5a57613c5a614d94565b03613c9a5760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b604482015260640161080d565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b604482015260640161080d565b60006110ef83836145c8565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f63fdbed5f2909ec44e3becc51e9d29654ce1447747914e8a6ebc019e7f640b8b9181900360200190a350565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051602001613d909190615cd5565b604051602081830303815290604052805190602001206001604051602001613db89190615cd5565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60606107bf826146bb565b604e5462010000900460ff16613e725760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e6700000000000000604482015260640161080d565b6000613e7f858783615d96565b506001613e8d838583615d96565b506001600160a01b0381163014613f73576001600160a01b0381163b613ec55760405162461bcd60e51b815260040161080d90615481565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015613f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3491906154bf565b613f6e5760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b604482015260640161080d565b613fbf565b613f836331501c3960e01b61079a565b613fbf5760405162461bcd60e51b815260206004820152600d60248201526c139bdd0814dd5c1c1bdc9d1959609a1b604482015260640161080d565b600280546001600160b01b0319166001600160a01b038316179055612a7133613ce4565b60006110ef613ff56040850185615bcb565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250614096925086915061403d90506020880188614c82565b61404d6040890160208a01615c11565b6001600160401b0316604080516020808201959095526001600160a01b039390931683820152606080840192909252805180840390920182526080909201909152805191012090565b614717565b6040516001600160601b0319606084901b1660208201526001600160e01b0319821660348201526000906038015b60405160208183030381529060405280519060200120905092915050565b60018160138111156140fb576140fb614d94565b03614119576040516338bb798160e21b815260040160405180910390fd5b600281601381111561412d5761412d614d94565b0361414b57604051634f69231960e11b815260040160405180910390fd5b600381601381111561415f5761415f614d94565b0361417d57604051637e33e43360e01b815260040160405180910390fd5b600481601381111561419157614191614d94565b036141af57604051630287b9e560e51b815260040160405180910390fd5b60058160138111156141c3576141c3614d94565b036141e157604051633beb1f4d60e11b815260040160405180910390fd5b60068160138111156141f5576141f5614d94565b036142135760405163036c45ad60e51b815260040160405180910390fd5b600781601381111561422757614227614d94565b036142455760405163c0af595f60e01b815260040160405180910390fd5b600881601381111561425957614259614d94565b036142775760405163249eeb8960e01b815260040160405180910390fd5b600981601381111561428b5761428b614d94565b036142a9576040516311fb41e160e21b815260040160405180910390fd5b600a8160138111156142bd576142bd614d94565b036142db57604051637331e2bb60e01b815260040160405180910390fd5b600b8160138111156142ef576142ef614d94565b0361430d5760405163163099ab60e01b815260040160405180910390fd5b600c81601381111561432157614321614d94565b0361433f5760405163975a86e560e01b815260040160405180910390fd5b600d81601381111561435357614353614d94565b0361437157604051631140570360e21b815260040160405180910390fd5b600e81601381111561438557614385614d94565b036143a357604051630622823b60e31b815260040160405180910390fd5b600f8160138111156143b7576143b7614d94565b036143d557604051636d30058d60e11b815260040160405180910390fd5b60108160138111156143e9576143e9614d94565b03614407576040516304acbcf160e51b815260040160405180910390fd5b601181601381111561441b5761441b614d94565b0361443957604051636effd2d560e01b815260040160405180910390fd5b601281601381111561444d5761444d614d94565b0361446a57604051623f318960e21b815260040160405180910390fd5b601381601381111561447e5761447e614d94565b03613adf57604051634bc7b56f60e11b815260040160405180910390fd5b600080516020615eae83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606144d68461478c565b6000835111806144e35750815b156145165761320284846040518060400160405280600b81526020016a10d85b1b0811985a5b195960aa1b8152506147d0565b604080516000808252602082019092529061282b565b600081815260208390526040812081600182015460ff16600381111561455457614554614d94565b1480614577575060018082015460ff16600381111561457557614575614d94565b145b15612e67576040805184815260208101869052209150612ea2565b60006110ef838361489e565b60008260000182815481106145b5576145b56154dc565b9060005260206000200154905092915050565b600081815260018301602052604081205480156146b15760006145ec600183615e55565b855490915060009061460090600190615e55565b9050818114614665576000866000018281548110614620576146206154dc565b9060005260206000200154905080876000018481548110614643576146436154dc565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061467657614676615e68565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107bf565b60009150506107bf565b60608160000180548060200260200160405190810160405280929190818152602001828054801561470b57602002820191906000526020600020905b8154815260200190600101908083116146f7575b50505050509050919050565b600080614723836148ed565b9050600080614732838761495a565b9092509050600081600481111561474b5761474b614d94565b1461282b5760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c205369676e617475726560781b604482015260640161080d565b6147958161449c565b6040516001600160a01b03821690309033907f8ee0f2bd29c0e6a975c3cc2e47cf2e01b5f23a9a8a02e0ed6a5a070269de3d2d90600090a450565b60606001600160a01b0384163b6148295760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20436f6e747261637420416464726573730000000000000000604482015260640161080d565b600080856001600160a01b0316856040516148449190615e7e565b600060405180830381855af49150503d806000811461487f576040519150601f19603f3d011682016040523d82523d6000602084013e614884565b606091505b50915091506148948282866149c8565b9695505050505050565b60008181526001830160205260408120546148e5575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107bf565b5060006107bf565b60006107bf306001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa158015614930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149549190615c4f565b83614a01565b60008082516041036149905760208301516040840151606085015160001a61498487828585614a28565b945094505050506149c1565b82516040036149b957602083015160408401516149ae868383614b15565b9350935050506149c1565b506000905060025b9250929050565b606083156149d75750816110ef565b8251156149e75782518084602001fd5b8160405162461bcd60e51b815260040161080d9190614f1d565b60405161190160f01b602082015260228101839052604281018290526000906062016140c9565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614a5f5750600090506003614b0c565b8460ff16601b14158015614a7757508460ff16601c14155b15614a885750600090506004614b0c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614adc573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614b0557600060019250925050614b0c565b9150600090505b94509492505050565b6000806001600160ff1b03831681614b3260ff86901c601b615e9a565b9050614b4087828885614a28565b935093505050935093915050565b5080546000825590600052602060002090810190613b1591905b80821115614b7c5760008155600101614b68565b5090565b600060208284031215614b9257600080fd5b81356001600160e01b0319811681146110ef57600080fd5b60008083601f840112614bbc57600080fd5b5081356001600160401b03811115614bd357600080fd5b6020830191508360208285010111156149c157600080fd5b80356001600160a01b0381168114610d0457600080fd5b600080600080600060608688031215614c1a57600080fd5b85356001600160401b0380821115614c3157600080fd5b614c3d89838a01614baa565b90975095506020880135915080821115614c5657600080fd5b50614c6388828901614baa565b9094509250614c76905060408701614beb565b90509295509295909350565b600060208284031215614c9457600080fd5b6110ef82614beb565b60008060408385031215614cb057600080fd5b82359150614cc060208401614beb565b90509250929050565b600060208284031215614cdb57600080fd5b5035919050565b600060608284031215614cf457600080fd5b50919050565b600080600060408486031215614d0f57600080fd5b83356001600160401b0380821115614d2657600080fd5b614d3287838801614ce2565b94506020860135915080821115614d4857600080fd5b818601915086601f830112614d5c57600080fd5b813581811115614d6b57600080fd5b87602061026083028501011115614d8157600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052602160045260246000fd5b60028110613b1557613b15614d94565b60208101614dc783614daa565b91905290565b634e487b7160e01b600052604160045260246000fd5b8015158114613b1557600080fd5b8035610d0481614de3565b600080600060608486031215614e1157600080fd5b614e1a84614beb565b925060208401356001600160401b0380821115614e3657600080fd5b818601915086601f830112614e4a57600080fd5b813581811115614e5c57614e5c614dcd565b604051601f8201601f19908116603f01168101908382118183101715614e8457614e84614dcd565b81604052828152896020848701011115614e9d57600080fd5b826020860160208301376000602084830101528096505050505050614ec460408501614df1565b90509250925092565b60005b83811015614ee8578181015183820152602001614ed0565b50506000910152565b60008151808452614f09816020860160208601614ecd565b601f01601f19169290920160200192915050565b6020815260006110ef6020830184614ef1565b600080600060408486031215614f4557600080fd5b83356001600160401b0380821115614f5c57600080fd5b614f6887838801614ce2565b94506020860135915080821115614f7e57600080fd5b818601915086601f830112614f9257600080fd5b813581811115614fa157600080fd5b8760206102e083028501011115614d8157600080fd5b60008083601f840112614fc957600080fd5b5081356001600160401b03811115614fe057600080fd5b6020830191508360208260061b85010111156149c157600080fd5b60008060006040848603121561501057600080fd5b83356001600160401b038082111561502757600080fd5b61503387838801614ce2565b9450602086013591508082111561504957600080fd5b5061505686828701614fb7565b9497909650939450505050565b60048110613b1557613b15614d94565b61507c81615063565b9052565b815181526020808301516001600160a01b03169082015260408083015180516103208401926150b6919085019062ffffff169052565b602081015161ffff8116606085015250604081015161ffff8116608085015250606081015161ffff811660a085015250608081015161ffff811660c08501525060a081015161ffff811660e08501525060c081015161010061511d8186018361ffff169052565b60e083015191506101206151368187018461ffff169052565b9083015191506101409061514f8683018461ffff169052565b83015191506101606151668682018461ffff169052565b9083015191506101809061517f8683018461ffff169052565b83015191506101a06151958682018460ff169052565b9083015191506101c0906151ad8683018460ff169052565b83015191506101e06151c38682018460ff169052565b908301519150610200906151db8683018460ff169052565b83015191506102206151f18682018460ff169052565b9083015160ff90811661024087015292015190911661026084015250606083015161ffff16610280830152608083015161522f6102a0840182615073565b5060a08301516152436102c0840182615073565b5060c08301516152576102e0840182615073565b5060e0830151612ea2610300840182615073565b60008060006040848603121561528057600080fd5b83356001600160401b038082111561529757600080fd5b6152a387838801614ce2565b945060208601359150808211156152b957600080fd5b818601915086601f8301126152cd57600080fd5b8135818111156152dc57600080fd5b8760208260051b8501011115614d8157600080fd5b6000806040838503121561530457600080fd5b50508035926020909101359150565b60028110613b1557600080fd5b60006020828403121561533257600080fd5b81356110ef81615313565b6020808252825182820181905260009190848201906040850190845b8181101561537557835183529284019291840191600101615359565b50909695505050505050565b6020808252600c908201526b125b1b1959d85b0810d85b1b60a21b604082015260600190565b6020808252600c908201526b125b9d985b1a590810d85b1b60a21b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061540a6060830187896153cd565b828103602084015261541d8186886153cd565b91505061ffff831660408301529695505050505050565b60208082526008908201526714995a9958dd195960c21b604082015260600190565b602080825260119082015270496c6c6567616c20557064617461626c6560781b604082015260600190565b60208082526010908201526f125b1b1959d85b0810dbdb9d1c9858dd60821b604082015260600190565b6020810160148310614dc757614dc7614d94565b6000602082840312156154d157600080fd5b81516110ef81614de3565b634e487b7160e01b600052603260045260246000fd5b61ffff81168114613b1557600080fd5b8035610d04816154f2565b60006020828403121561551f57600080fd5b81356110ef816154f2565b7f545950452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f81526526a0a9aa22a960d11b602082015260260190565b62ffffff81168114613b1557600080fd5b600081356107bf81615562565b600081356107bf816154f2565b60ff81168114613b1557600080fd5b600081356107bf8161558d565b6155ca6155b583615573565b825462ffffff191662ffffff91909116178255565b6155f56155d960208401615580565b825464ffff000000191660189190911b64ffff00000016178255565b61562461560460408401615580565b825466ffff0000000000191660289190911b66ffff000000000016178255565b61565761563360608401615580565b825468ffff00000000000000191660389190911b68ffff0000000000000016178255565b61568e61566660808401615580565b82546affff000000000000000000191660489190911b6affff00000000000000000016178255565b6156bd61569d60a08401615580565b82805461ffff60581b191660589290921b61ffff60581b16919091179055565b6156ec6156cc60c08401615580565b82805461ffff60681b191660689290921b61ffff60681b16919091179055565b61571b6156fb60e08401615580565b82805461ffff60781b191660789290921b61ffff60781b16919091179055565b61574b61572b6101008401615580565b82805461ffff60881b191660889290921b61ffff60881b16919091179055565b61577b61575b6101208401615580565b82805461ffff60981b191660989290921b61ffff60981b16919091179055565b6157ab61578b6101408401615580565b82805461ffff60a81b191660a89290921b61ffff60a81b16919091179055565b6157d96157bb610160840161559c565b82805460ff60b81b191660b89290921b60ff60b81b16919091179055565b6158076157e9610180840161559c565b82805460ff60c01b191660c09290921b60ff60c01b16919091179055565b6158356158176101a0840161559c565b82805460ff60c81b191660c89290921b60ff60c81b16919091179055565b6158636158456101c0840161559c565b82805460ff60d01b191660d09290921b60ff60d01b16919091179055565b6158916158736101e0840161559c565b82805460ff60d81b191660d89290921b60ff60d81b16919091179055565b6158bf6158a1610200840161559c565b82805460ff60e01b191660e09290921b60ff60e01b16919091179055565b61304d6158cf610220840161559c565b82805460ff60e81b191660e89290921b60ff60e81b16919091179055565b8035610d0481615562565b8035610d048161558d565b61591982615910836158ed565b62ffffff169052565b61592560208201615502565b61ffff16602083015261593a60408201615502565b61ffff16604083015261594f60608201615502565b61ffff16606083015261596460808201615502565b61ffff16608083015261597960a08201615502565b61ffff1660a083015261598e60c08201615502565b61ffff1660c08301526159a360e08201615502565b61ffff1660e08301526101006159ba828201615502565b61ffff16908301526101206159d0828201615502565b61ffff16908301526101406159e6828201615502565b61ffff16908301526101606159fc8282016158f8565b60ff1690830152610180615a118282016158f8565b60ff16908301526101a0615a268282016158f8565b60ff16908301526101c0615a3b8282016158f8565b60ff16908301526101e0615a508282016158f8565b60ff1690830152610200615a658282016158f8565b60ff1690830152610220615a7a8282016158f8565b60ff1692019190915250565b61024081016107bf8284615903565b634e487b7160e01b600052601160045260246000fd5b600060018201615abd57615abd615a95565b5060010190565b600181811c90821680615ad857607f821691505b602082108103614cf457634e487b7160e01b600052602260045260246000fd5b600382810b9082900b03637fffffff198112637fffffff821317156107bf576107bf615a95565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f4d41535445525f81526420a226a4a760d91b602082015260250190565b60048110613b1557600080fd5b600060208284031215615b7557600080fd5b81356110ef81615b56565b60208101614dc783615063565b600060208284031215615b9f57600080fd5b8151601481106110ef57600080fd5b600060208284031215615bc057600080fd5b81516110ef81615313565b6000808335601e19843603018112615be257600080fd5b8301803591506001600160401b03821115615bfc57600080fd5b6020019150368190038213156149c157600080fd5b600060208284031215615c2357600080fd5b81356001600160401b03811681146110ef57600080fd5b82815261026081016110ef6020830184615903565b600060208284031215615c6157600080fd5b5051919050565b62ffffff818116838216019080821115612ea257612ea2615a95565b6020810160088310614dc757614dc7614d94565b8381526020810183905261028081016112b46040830184615903565b600060208284031215615cc657600080fd5b8151600881106110ef57600080fd5b6000808354615ce381615ac4565b60018281168015615cfb5760018114615d1057615d3f565b60ff1984168752821515830287019450615d3f565b8760005260208060002060005b85811015615d365781548a820152908401908201615d1d565b50505082870194505b50929695505050505050565b601f821115615d9157600081815260208120601f850160051c81016020861015615d725750805b601f850160051c820191505b818110156109f357828155600101615d7e565b505050565b6001600160401b03831115615dad57615dad614dcd565b615dc183615dbb8354615ac4565b83615d4b565b6000601f841160018114615df55760008515615ddd5750838201355b600019600387901b1c1916600186901b178355612a71565b600083815260209020601f19861690835b82811015615e265786850135825560209485019460019092019101615e06565b5086821015615e435760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b818103818111156107bf576107bf615a95565b634e487b7160e01b600052603160045260246000fd5b60008251615e90818460208701614ecd565b9190910192915050565b808201808211156107bf576107bf615a9556fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212203d7cd039af6a247ffe2eb43020b3c465119c9d4249d0cdbdeff1af48bd1e23ba64736f6c63430008130033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
  "deployedBytecode": "0x6080604052600436106102115760003560e01c806378e2e1fb11610117578063c051cc9a116100a5578063f698da251161006c578063f698da2514610703578063f708ceb014610718578063f94a0adb14610738578063fa3aa6711461074d578063fcc401781461077a57005b8063c051cc9a1461064f578063c5d2d8ff1461066f578063d9dc1f191461068f578063db3762cc146106af578063f0b15def146106cf57005b8063a0a8e460116100e9578063a0a8e460146105b0578063a304e353146105c5578063b4a0bdf3146105e4578063b879581414610602578063bc44c7021461062257005b806378e2e1fb1461051c5780638be959861461053c578063961788951461055c5780639b97b5341461057c57005b80633fb8ae051161019f57806364d4c8191161016657806364d4c8191461045f5780637147855d14610493578063756af45f146104c057806375d0c0dc146104e05780637678922e146104f557005b80633fb8ae05146103a15780634888f482146103c15780634bf0414d146103e957806352d1902d1461041d57806358dbc45d1461043257005b80631b452f4b116101e35780631b452f4b146102af5780632966b144146102f1578063301c12801461031157806334109de21461034557806338d38c971461037957005b806301ffc9a71461021a578063077f224a1461024f5780630e32cb861461026f5780631ac5b3721461028f57005b3661021857005b005b34801561022657600080fd5b5061023a610235366004614b80565b61079a565b60405190151581526020015b60405180910390f35b34801561025b57600080fd5b5061021861026a366004614c02565b6107c5565b34801561027b57600080fd5b5061023a61028a366004614c82565b6109fb565b34801561029b57600080fd5b5061023a6102aa366004614c9d565b610d09565b3480156102bb57600080fd5b506102e37f7bfb2abd6084c8ce20d7ff92c1620e7e7267603f0eac446b9176959d243306bc81565b604051908152602001610246565b3480156102fd57600080fd5b5061023a61030c366004614cc9565b610e65565b34801561031d57600080fd5b506102e37f541cf898e7c3085cbc6b7402ba06e7237285bc4bd5baa510e708e35537a71ffd81565b34801561035157600080fd5b506102e37f7aabe2571874f2a330ea11c8972d9cc3792d973efc6b36e3e29005861a34418881565b34801561038557600080fd5b5061038e610e96565b60405161ffff9091168152602001610246565b3480156103ad57600080fd5b5061023a6103bc366004614cfa565b610eaa565b3480156103cd57600080fd5b50600254600160a81b900460ff165b6040516102469190614dba565b3480156103f557600080fd5b506102e37f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d5581565b34801561042957600080fd5b506102e36110f6565b34801561043e57600080fd5b50610447611153565b6040516001600160a01b039091168152602001610246565b34801561046b57600080fd5b506102e37f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b34801561049f57600080fd5b506104b36104ae366004614dfc565b61115d565b6040516102469190614f1d565b3480156104cc57600080fd5b506102e36104db366004614c82565b6112bc565b3480156104ec57600080fd5b506104b3611381565b34801561050157600080fd5b5073__$9d3eda23eea7f40e978c314b97edd1087f$__610447565b34801561052857600080fd5b5061023a610537366004614f30565b611413565b34801561054857600080fd5b5061023a610557366004614ffb565b611522565b34801561056857600080fd5b5061023a610577366004614ffb565b61176d565b34801561058857600080fd5b506102e37fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b881565b3480156105bc57600080fd5b506104b361194c565b3480156105d157600080fd5b50600254600160a01b900460ff166103dc565b3480156105f057600080fd5b506002546001600160a01b0316610447565b34801561060e57600080fd5b5061023a61061d366004614c82565b61195b565b34801561062e57600080fd5b5061064261063d366004614cc9565b6119bc565b6040516102469190615080565b34801561065b57600080fd5b5061023a61066a366004614ffb565b611d81565b34801561067b57600080fd5b5061023a61068a36600461526b565b611f74565b34801561069b57600080fd5b5061023a6106aa366004614c82565b612452565b3480156106bb57600080fd5b5061023a6106ca3660046152f1565b612608565b3480156106db57600080fd5b506102e37ffc434588684348dd50856b075c47bed14245c1030aa04c32955af5549981462781565b34801561070f57600080fd5b506102e3612642565b34801561072457600080fd5b5061023a610733366004615320565b61264c565b34801561074457600080fd5b506104476127f6565b34801561075957600080fd5b5061076d610768366004614cc9565b612800565b604051610246919061533d565b34801561078657600080fd5b5061023a610795366004615320565b612840565b60006001600160e01b031982166349b4d31560e01b14806107bf57506107bf826129cb565b92915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108165760405162461bcd60e51b815260040161080d90615381565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610848612a1b565b6001600160a01b03161461086e5760405162461bcd60e51b815260040161080d906153a7565b33610877612a3c565b6001600160a01b0316146108bd5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b604482015260640161080d565b604e5462010000900460ff16158080156108df5750604e54600161ffff909116105b806108fa5750303b1580156108fa5750604e5461ffff166001145b6109465760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a656400000000604482015260640161080d565b604e805461ffff19166001179055801561096c57604e805462ff00001916620100001790555b6109798686868686612a64565b610981612a1b565b6001600160a01b031630336001600160a01b03167f247ab7b17ee489fa140c6666edc3822eefed2727610cd6e37192462b87244c60898989896109c7604e5461ffff1690565b6040516109d89594939291906153f6565b60405180910390a480156109f357604e805462ff0000191690555b505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a455760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a77612a1b565b6001600160a01b031614610a9d5760405162461bcd60e51b815260040161080d906153a7565b6000600254600160a01b900460ff166001811115610abd57610abd614d94565b14610ada5760405162461bcd60e51b815260040161080d90615434565b6001600254600160a81b900460ff166001811115610afa57610afa614d94565b14610b175760405162461bcd60e51b815260040161080d90615456565b6001600160a01b03821615801590610b3857506001600160a01b0382163b15155b610b545760405162461bcd60e51b815260040161080d90615481565b6002546001600160a01b031615610bb3576000610b7763071965c360e11b612a78565b90506000816013811115610b8d57610b8d614d94565b14610bad5780604051637f0911d160e01b815260040161080d91906154ab565b50610c02565b33610bbc612a3c565b6001600160a01b031614610c025760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b604482015260640161080d565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7191906154bf565b610cab5760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b604482015260640161080d565b600280546001600160a01b0384166001600160a01b031990911681179091556040805191825251309133917f410bf468eebeeed60acaedb904afb2db7c0bb0131f7d14c3714d81b14fe8ed3c9181900360200190a35060015b919050565b6000600160008481526044602052604090206001015460ff166003811115610d3357610d33614d94565b14610d40575060006107bf565b6000838152604460205260408082205480835290822060010154909160ff90911690610d6b85612b03565b90506002826003811115610d8157610d81614d94565b03610dfe57600080610d94604486612b3d565b9150915080610dab576000955050505050506107bf565b600080610dc684600301546044612b9a90919063ffffffff16565b9150915080610ddf5760009750505050505050506107bf565b5060009384526005016020525050604090205490911491506107bf9050565b6003826003811115610e1257610e12614d94565b03610e5957600080610e25604486612b9a565b9150915080610e3c576000955050505050506107bf565b5060009182526005016020526040902054151592506107bf915050565b50600095945050505050565b6000600160008381526044602052604090206001015460ff166003811115610e8f57610e8f614d94565b1492915050565b6000610ea5604e5461ffff1690565b905090565b6000808080610ec087633fb8ae0560e01b612bb1565b919450925090506000610ed4604484612dcc565b905060005b868110156110e5576000610f0a898984818110610ef857610ef86154dc565b90506102600201600001358688612ea9565b9050610f1881600401612f2c565b898984818110610f2a57610f2a6154dc565b610f46926101806102609092020190810191506101600161550d565b61ffff1611610f8b5760405162461bcd60e51b8152602060048201526011602482015270125b1b1959d85b08151e5c19531a5b5a5d607a1b604482015260640161080d565b6040517f545950452e4c4956454c595f56455253452e4c4956454c595f4d4153544552006020820152610fe490603f015b6040516020818303038152906040528051906020012082600401612f3690919063ffffffff16565b1580156110005750610ffe604051602001610fbc9061552a565b155b1561102a5761102a838a8a8581811061101b5761101b6154dc565b90506102600201602001612f4e565b88888381811061103c5761103c6154dc565b9050610260020160200181600301818161105691906155a9565b90505088888381811061106b5761106b6154dc565b9050610260020160000135846001600160a01b03167fdefb26be73b29f71b327c0b82dd3347dbeeb918a65f4aae4a384c42f94cd9a278b8b868181106110b3576110b36154dc565b905061026002016020016040516110ca9190615a86565b60405180910390a350806110dd81615aab565b915050610ed9565b5060019450505050505b9392505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111405760405162461bcd60e51b815260040161080d90615381565b50600080516020615eae83398151915290565b6000610ea5612a1b565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111a75760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111d9612a1b565b6001600160a01b0316146111ff5760405162461bcd60e51b815260040161080d906153a7565b6000600254600160a01b900460ff16600181111561121f5761121f614d94565b1461123c5760405162461bcd60e51b815260040161080d90615434565b6001600254600160a81b900460ff16600181111561125c5761125c614d94565b146112795760405162461bcd60e51b815260040161080d90615456565b6001600160a01b0384163b6112a05760405162461bcd60e51b815260040161080d90615481565b6112a984612fb3565b6112b4848484613051565b949350505050565b600080600254600160a01b900460ff1660018111156112dd576112dd614d94565b146112fa5760405162461bcd60e51b815260040161080d90615434565b600061130c63756af45f60e01b612a78565b9050600081601381111561132257611322614d94565b146113425780604051637f0911d160e01b815260040161080d91906154ab565b60405147906001600160a01b038516904780156108fc02916000818181858888f19350505050158015611379573d6000803e3d6000fd5b509392505050565b60606000805461139090615ac4565b80601f01602080910402602001604051908101604052809291908181526020018280546113bc90615ac4565b80156114095780601f106113de57610100808354040283529160200191611409565b820191906000526020600020905b8154815290600101906020018083116113ec57829003601f168201915b5050505050905090565b6000808080611429876378e2e1fb60e01b612bb1565b91945092509050600061143d604484612dcc565b600381015490915060009061146290600189900b906301000000900461ffff16615af8565b60030b12156114ab5760405162461bcd60e51b8152602060048201526015602482015274125b1b1959d85b08149959da5cdd195c931a5b5a5d605a1b604482015260640161080d565b60005b868110156114ed576114db8888838181106114cb576114cb6154dc565b90506102e0020183878787613209565b806114e581615aab565b9150506114ae565b50600301805461ffff630100000080830482168990039091160264ffff00000019909116179055506001925050509392505050565b6000808080611538876345f4acc360e11b612bb1565b92509250925060005b8581101561175f576000611571888884818110611560576115606154dc565b905060400201600001358587612ea9565b90506115bc60405160200161158590615b1f565b604051602081830303815290604052805190602001208989858181106115ad576115ad6154dc565b9050604002016000013561386d565b156115fa5760405162461bcd60e51b815260206004820152600e60248201526d24b63632b3b0b61026b2b6b132b960911b604482015260640161080d565b600188888481811061160e5761160e6154dc565b90506040020160200160208101906116269190615b63565b600381111561163757611637614d94565b116116775760405162461bcd60e51b815260206004820152601060248201526f496c6c6567616c20416374697669747960801b604482015260640161080d565b878783818110611689576116896154dc565b90506040020160200160208101906116a19190615b63565b60018201805461ff0019166101008360038111156116c1576116c1614d94565b02179055508787838181106116d8576116d86154dc565b90506040020160000135836001600160a01b03167f06b789b822e2581aa4e79c81b84ed1ccc1a5c2741e97b3d74e0e7e980480bca28a8a8681811061171f5761171f6154dc565b90506040020160200160208101906117379190615b63565b6040516117449190615b80565b60405180910390a3508061175781615aab565b915050611541565b506001979650505050505050565b600080808061178387639617889560e01b612bb1565b92509250925060005b8581101561175f5760006117ab888884818110611560576115606154dc565b905060008888848181106117c1576117c16154dc565b90506040020160200135146118a15760006044818a8a868181106117e7576117e76154dc565b90506040020160200135815260200190815260200160002090506001600381111561181457611814614d94565b600182015460ff16600381111561182d5761182d614d94565b116118745760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b604482015260640161080d565b888884818110611886576118866154dc565b905060400201602001358260000160000181905550506118cb565b6040516020016118b09061552a565b60408051601f19818403018152919052805160209091012081555b8787838181106118dd576118dd6154dc565b905060400201602001358888848181106118f9576118f96154dc565b90506040020160000135846001600160a01b03167fd2e065bcd4d1c7b0bbb6c1d8f35c9bbb6d0e839a05ef546391707ce17f3eb01a60405160405180910390a4508061194481615aab565b91505061178c565b60606001805461139090615ac4565b600060016040516001600160601b0319606085901b16602082015260449060009060340160408051601f198184030181529181528151602092830120835290820192909252016000206001015460ff166003811115610e8f57610e8f614d94565b611a8f60408051610100808201835260008083526020808401829052845161024081018652828152908101829052808501829052606081018290526080810182905260a0810182905260c0810182905260e0810182905291820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e08201819052610200820181905261022082015290918201908152600060208201819052604090910190815260200160008152602001600081526020016000905290565b600080611a9d6044856138de565b9150915080611b7a57604080516101008082018352600080835260208084018290528451610240810186528281529081018290528085018290526060808201839052608080830184905260a0830184905260c0830184905260e0830184905293820183905261012082018390526101408201839052610160820183905261018082018390526101a082018390526101c082018390526101e0820183905261020082018390526102208201839052948401529282018390529091908201908152602001600081526020016000815260200160005b9052949350505050565b6040805161010080820183528454825260028501546001600160a01b0316602080840191909152835161024081018552600387015462ffffff8116825261ffff63010000008204811693830193909352650100000000008104831682870152670100000000000000810483166060808401919091526901000000000000000000820484166080840152600160581b8204841660a0840152600160681b8204841660c0840152600160781b8204841660e0840152600160881b8204841694830194909452600160981b81048316610120830152600160a81b810490921661014082015260ff600160b81b83048116610160830152600160c01b83048116610180830152600160c81b830481166101a0830152600160d01b830481166101c0830152600160d81b830481166101e0830152600160e01b83048116610200830152600160e81b90920490911661022082015292820192909252908101611cdf60048501612f2c565b61ffff168152835460009081526044602090815260409091206001015491019060ff166003811115611d1357611d13614d94565b8152600184015460209091019060ff166003811115611d3457611d34614d94565b81526001840154602090910190610100900460ff166003811115611d5a57611d5a614d94565b8152600184015460209091019062010000900460ff166003811115611b7057611b70614d94565b6000808080611d9787636028e64d60e11b612bb1565b92509250925060005b8581101561175f576000611dd0888884818110611dbf57611dbf6154dc565b604492604090910201359050612dcc565b8054909150600090611de39086886138f5565b90506000816007811115611df957611df9614d94565b14611e0757611e0781613981565b6000898985818110611e1b57611e1b6154dc565b9050604002016020016020810190611e339190615b63565b6003811115611e4457611e44614d94565b03611e885760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20416c7465726162696c69747960601b604482015260640161080d565b888884818110611e9a57611e9a6154dc565b9050604002016020016020810190611eb29190615b63565b60018301805462ff0000191662010000836003811115611ed457611ed4614d94565b0217905550888884818110611eeb57611eeb6154dc565b90506040020160000135846001600160a01b03167f824333a0ecff9cffe8512433ee440baab06dfb39a89a27b048c8143bbc18d9fb8b8b87818110611f3257611f326154dc565b9050604002016020016020810190611f4a9190615b63565b604051611f579190615b80565b60405180910390a350508080611f6c90615aab565b915050611da0565b6000808080611f8a8763c5d2d8ff60e01b612bb1565b92509250925060005b8581101561175f576000611fc9888884818110611fb257611fb26154dc565b905060200201356044612dcc90919063ffffffff16565b8054909150600090611fdc9086886138f5565b90506000816007811115611ff257611ff2614d94565b146120005761200081613981565b60005b61200f83600401612f2c565b8110801561201d5750601081105b156123195760006120316004850183613b18565b90506000612040604483613b24565b90506002600182015462010000900460ff16600381111561206357612063614d94565b10156120aa5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c205479706520557064617461626c6560501b604482015260640161080d565b60008160050160008e8e8a8181106120c4576120c46154dc565b90506020020135815260200190815260200160002054905060006120f2826044613bfb90919063ffffffff16565b90506002600182015462010000900460ff16600381111561211557612115614d94565b101561215c5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c20526f6c6520557064617461626c6560501b604482015260640161080d565b60405160200161216b90615b1f565b6040516020818303038152906040528051906020012082036121e05760058101546001630100000090910462ffffff16116121e05760405162461bcd60e51b8152602060048201526015602482015274496c6c6567616c204d656d626572205265766f6b6560581b604482015260640161080d565b60058101546301000000900462ffffff166122335760405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b0813595b58995c90dbdd5b9d606a1b604482015260640161080d565b6005808201805460001962ffffff6301000000808404821692909201160265ffffff00000019909116179055830160008f8f8b818110612275576122756154dc565b905060200201358152602001908152602001600020600090556122a48488600401613cd890919063ffffffff16565b50818e8e8a8181106122b8576122b86154dc565b905060200201358a6001600160a01b03167f785c010df3daed664e2629b2816294f5b470e752cd8a8ca9d16146f8a1996b68876040516122fa91815260200190565b60405180910390a450505050808061231190615aab565b915050612003565b5061232682600401612f2c565b6000036123dd57600080835560018301805462ffffff191690556002830180546001600160a01b03191690556003830180546001600160f01b0319169055600483019081816123758282614b4e565b5050505088888481811061238b5761238b6154dc565b90506020020135846001600160a01b03167ffe86beb9b4c7f7a6b9ab37078fa83c2ef4f4fe3b50582d82c897823c5791061660016040516123d0911515815260200190565b60405180910390a361243d565b8888848181106123ef576123ef6154dc565b90506020020135846001600160a01b03167ffe86beb9b4c7f7a6b9ab37078fa83c2ef4f4fe3b50582d82c897823c579106166000604051612434911515815260200190565b60405180910390a35b5050808061244a90615aab565b915050611f93565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361249c5760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166124ce612a1b565b6001600160a01b0316146124f45760405162461bcd60e51b815260040161080d906153a7565b6000600254600160a01b900460ff16600181111561251457612514614d94565b146125315760405162461bcd60e51b815260040161080d90615434565b6001600254600160a81b900460ff16600181111561255157612551614d94565b1461256e5760405162461bcd60e51b815260040161080d90615456565b600061258063d9dc1f1960e01b612a78565b9050600081601381111561259657612596614d94565b146125b65780604051637f0911d160e01b815260040161080d91906154ab565b6001600160a01b0383166125f65760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b604482015260640161080d565b6125ff83613ce4565b50600192915050565b600080806126176044866138de565b9150915080156126375761262e6004830185612f36565b925050506107bf565b506000949350505050565b6000610ea5613d5b565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036126965760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166126c8612a1b565b6001600160a01b0316146126ee5760405162461bcd60e51b815260040161080d906153a7565b60006126fd604e5461ffff1690565b61ffff16116127395760405162461bcd60e51b81526020600482015260086024820152671393d5081253925560c21b604482015260640161080d565b600061274b630f708ceb60e41b612a78565b9050600081601381111561276157612761614d94565b146127815780604051637f0911d160e01b815260040161080d91906154ab565b6002805484919060ff60a01b1916600160a01b8360018111156127a6576127a6614d94565b021790555030336001600160a01b03167fc08ec585c25f1907baaab6f278c5994531a2e34c59935b3fcfe813067a3b4878856040516127e59190614dba565b60405180910390a350600192915050565b6000610ea5612a3c565b60606000806128106044856138de565b91509150806128345760408051600080825260208201909252905b50949350505050565b6112b482600401613e0f565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361288a5760405162461bcd60e51b815260040161080d90615381565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166128bc612a1b565b6001600160a01b0316146128e25760405162461bcd60e51b815260040161080d906153a7565b6000600254600160a01b900460ff16600181111561290257612902614d94565b1461291f5760405162461bcd60e51b815260040161080d90615434565b6000612931631f98802f60e31b612a78565b9050600081601381111561294757612947614d94565b146129675780604051637f0911d160e01b815260040161080d91906154ab565b6002805484919060ff60a81b1916600160a81b83600181111561298c5761298c614d94565b021790555030336001600160a01b03167ff5912c5e436152157ed2b4a84bc313b4b1fe09a15b941f195d23c99a1b8c45ad856040516127e59190614dba565b60006001600160e01b03198216633d817cff60e01b14806129fc57506001600160e01b031982166352d1902d60e01b145b806107bf57506301ffc9a760e01b6001600160e01b03198316146107bf565b6000600080516020615eae8339815191525b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612a2d565b612a718585858585613e1a565b5050505050565b6002546040805163172cb29d60e11b81523060048201526001600160e01b03198416602482015233604482015290516000926001600160a01b031691632e59653a916064808301926020929190829003018187875af1158015612adf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190615b8d565b6040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b6000818152602083905260408120819060025b600182015460ff166003811115612b6957612b69614d94565b03612b8857604080518581526020810187905220925060019150612b92565b6000199250600091505b509250929050565b600081815260208390526040812081906003612b50565b6000808080306001600160a01b031663a304e3536040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c189190615bae565b6001811115612c2957612c29614d94565b14612c465760405162461bcd60e51b815260040161080d90615434565b600080612c566040880188615bcb565b90501115612cea5742612c6f6040880160208901615c11565b6001600160401b031611612cb95760405162461bcd60e51b815260206004820152601160248201527045787069726564205369676e617475726560781b604482015260640161080d565b612ce3867fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b8613fe3565b9050612ced565b50335b6001600160e01b031985166000908152604a60205260408120546001600160a01b031690612d1b828861409b565b90506000612d2884612b03565b604051634902a91960e11b8152600481018490526024810182905290915060009030906392055232906044016020604051808303816000875af1158015612d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d979190615b8d565b90506000816013811115612dad57612dad614d94565b14612dbb57612dbb816140e7565b509095509350909150509250925092565b600081815260208390526040812060018082015460ff166003811115612df457612df4614d94565b03612e0f576040805184815260208101869052209150612ea2565b6000600182015460ff166003811115612e2a57612e2a614d94565b03612e675760405162461bcd60e51b815260206004820152600d60248201526c13525108139bdd08119bdd5b99609a1b604482015260640161080d565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081352510814db1bdd60821b604482015260640161080d565b5092915050565b600080612eb7604486612dcc565b90506002600182015462010000900460ff166003811115612eda57612eda614d94565b1015612ef85760405162461bcd60e51b815260040161080d90615456565b8054600090612f089086866138f5565b90506000816007811115612f1e57612f1e614d94565b1461282b5761282b81613981565b60006107bf825490565b600081815260018301602052604081205415156110ef565b604051637cc3481760e11b815273__$9d3eda23eea7f40e978c314b97edd1087f$__9063f986902e90612f879085908590600401615c3a565b60006040518083038186803b158015612f9f57600080fd5b505af41580156109f3573d6000803e3d6000fd5b612fbb612a1b565b6001600160a01b0316816001600160a01b0316036130055760405162461bcd60e51b8152602060048201526007602482015266125b1b1959d85b60ca1b604482015260640161080d565b6000613017637147855d60e01b612a78565b9050600081601381111561302d5761302d614d94565b1461304d5780604051637f0911d160e01b815260040161080d91906154ab565b5050565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561309b576130868461449c565b506040805160008152602081019091526110ef565b600080516020615eae83398151915260001b846001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310f9190615c4f565b1461314b5760405162461bcd60e51b815260206004820152600c60248201526b496c6c6567616c205555505360a01b604482015260640161080d565b6040516301ffc9a760e01b8152633d817cff60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015613196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ba91906154bf565b6131f75760405162461bcd60e51b815260206004820152600e60248201526d496c6c6567616c204950726f787960901b604482015260640161080d565b6132028484846144cb565b90506110ef565b600061322361321e6060880160408901614c82565b612b03565b905060008082815260446020526040902060010154610100900460ff16600381111561325157613251614d94565b1461328e5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e48115e1a5cdd609a1b604482015260640161080d565b60016132a26101c088016101a0890161550d565b61ffff1610156132e85760405162461bcd60e51b8152602060048201526011602482015270125b1b1959d85b08151e5c19531a5b5a5d607a1b604482015260640161080d565b60016132fc6102c088016102a08901615b63565b600381111561330d5761330d614d94565b11801561333c575060006133296102e088016102c08901615b63565b600381111561333a5761333a614d94565b115b6133885760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c2041637469766974792f416c7465726162696c697479000000604482015260640161080d565b6040517f545950452e4c4956454c595f56455253452e4c4956454c595f4d41535445520060208201526133e190603f015b6040516020818303038152906040528051906020012086600401612f3690919063ffffffff16565b1580156133fd57506133fb6040516020016133b99061552a565b155b1561340f5761340f8587606001612f4e565b600061341d60448835613bfb565b90506002600182015462010000900460ff16600381111561344057613440614d94565b10156134875760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c20526f6c6520557064617461626c6560501b604482015260640161080d565b600581015462ffffff6301000000820481169116116134db5760405162461bcd60e51b815260206004820152601060248201526f24b63632b3b0b6102932b3b4b9ba32b960811b604482015260640161080d565b60006134f582600301546044613b2490919063ffffffff16565b90506002600182015462010000900460ff16600381111561351857613518614d94565b101561355f5760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c205479706520557064617461626c6560501b604482015260640161080d565b815460009061356f9087896138f5565b9050600081600781111561358557613585614d94565b146135935761359381613981565b6000848152600583810160205260409091208a35905583018054600191906003906135cb9084906301000000900462ffffff16615c68565b92506101000a81548162ffffff021916908362ffffff16021790555060006135fd85604461452c90919063ffffffff16565b905060208a0135156136ef5760016020808c013560009081526044909152604090206001015460ff16600381111561363757613637614d94565b1161367e5760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b604482015260640161080d565b6136ad6040516020016136909061552a565b60405160208183030381529060405280519060200120888a6138f5565b915060008260078111156136c3576136c3614d94565b146136e3578160405163578978db60e01b815260040161080d9190615c84565b60208a01358155613719565b6040516020016136fe9061552a565b60408051601f19818403018152919052805160209091012081555b6001818101805460ff1916909117905561373b6102c08b016102a08c01615b63565b60018201805461ff00191661010083600381111561375b5761375b614d94565b02179055506137726102e08b016102c08c01615b63565b60018201805462ff000019166201000083600381111561379457613794614d94565b02179055506137a960608b0160408c01614c82565b6002820180546001600160a01b0319166001600160a01b039290921691909117905560038401546137de906004830190614592565b5060608a01600382016137f182826155a9565b50613804905060608b0160408c01614c82565b6001600160a01b031685876001600160a01b03167f04f920874e379439650f091dac01500fa81a584fb13d038eb312f5de34420f5b8d6000013585600001600001548f60600160405161385993929190615c98565b60405180910390a450505050505050505050565b6000808061387c604486612b3d565b9150915080613890576000925050506107bf565b6000806138ab84600301546044612b9a90919063ffffffff16565b91509150806138c15760009450505050506107bf565b506000948552600501602052505060409091205491909114919050565b600081815260208390526040812081906001612b50565b60405163ca37fa8560e01b81526044600482018190526024820185905281018390526064810182905260009073__$9d3eda23eea7f40e978c314b97edd1087f$__9063ca37fa8590608401602060405180830381865af415801561395d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b49190615cb4565b600181600781111561399557613995614d94565b036139b3576040516334267bfb60e11b815260040160405180910390fd5b60028160078111156139c7576139c7614d94565b036139e5576040516343f871e760e11b815260040160405180910390fd5b60038160078111156139f9576139f9614d94565b03613a1757604051639afb7c5f60e01b815260040160405180910390fd5b6004816007811115613a2b57613a2b614d94565b03613a49576040516332314d6b60e11b815260040160405180910390fd5b6005816007811115613a5d57613a5d614d94565b03613a7b57604051633123155560e01b815260040160405180910390fd5b6006816007811115613a8f57613a8f614d94565b03613aad57604051631b210af760e21b815260040160405180910390fd5b6007816007811115613ac157613ac1614d94565b03613adf576040516339f73ba360e11b815260040160405180910390fd5b60405162461bcd60e51b815260206004820152600b60248201526a2ab735b737bbb71022a92960a91b604482015260640161080d565b50565b60006110ef838361459e565b60008181526020839052604081206003600182015460ff166003811115613b4d57613b4d614d94565b03613b68576040805184815260208101869052209150612ea2565b6000600182015460ff166003811115613b8357613b83614d94565b03613bc05760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b604482015260640161080d565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b604482015260640161080d565b60008181526020839052604081206002600182015460ff166003811115613c2457613c24614d94565b03613c3f576040805184815260208101869052209150612ea2565b6000600182015460ff166003811115613c5a57613c5a614d94565b03613c9a5760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b604482015260640161080d565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b604482015260640161080d565b60006110ef83836145c8565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f63fdbed5f2909ec44e3becc51e9d29654ce1447747914e8a6ebc019e7f640b8b9181900360200190a350565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051602001613d909190615cd5565b604051602081830303815290604052805190602001206001604051602001613db89190615cd5565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60606107bf826146bb565b604e5462010000900460ff16613e725760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e6700000000000000604482015260640161080d565b6000613e7f858783615d96565b506001613e8d838583615d96565b506001600160a01b0381163014613f73576001600160a01b0381163b613ec55760405162461bcd60e51b815260040161080d90615481565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015613f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3491906154bf565b613f6e5760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b604482015260640161080d565b613fbf565b613f836331501c3960e01b61079a565b613fbf5760405162461bcd60e51b815260206004820152600d60248201526c139bdd0814dd5c1c1bdc9d1959609a1b604482015260640161080d565b600280546001600160b01b0319166001600160a01b038316179055612a7133613ce4565b60006110ef613ff56040850185615bcb565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250614096925086915061403d90506020880188614c82565b61404d6040890160208a01615c11565b6001600160401b0316604080516020808201959095526001600160a01b039390931683820152606080840192909252805180840390920182526080909201909152805191012090565b614717565b6040516001600160601b0319606084901b1660208201526001600160e01b0319821660348201526000906038015b60405160208183030381529060405280519060200120905092915050565b60018160138111156140fb576140fb614d94565b03614119576040516338bb798160e21b815260040160405180910390fd5b600281601381111561412d5761412d614d94565b0361414b57604051634f69231960e11b815260040160405180910390fd5b600381601381111561415f5761415f614d94565b0361417d57604051637e33e43360e01b815260040160405180910390fd5b600481601381111561419157614191614d94565b036141af57604051630287b9e560e51b815260040160405180910390fd5b60058160138111156141c3576141c3614d94565b036141e157604051633beb1f4d60e11b815260040160405180910390fd5b60068160138111156141f5576141f5614d94565b036142135760405163036c45ad60e51b815260040160405180910390fd5b600781601381111561422757614227614d94565b036142455760405163c0af595f60e01b815260040160405180910390fd5b600881601381111561425957614259614d94565b036142775760405163249eeb8960e01b815260040160405180910390fd5b600981601381111561428b5761428b614d94565b036142a9576040516311fb41e160e21b815260040160405180910390fd5b600a8160138111156142bd576142bd614d94565b036142db57604051637331e2bb60e01b815260040160405180910390fd5b600b8160138111156142ef576142ef614d94565b0361430d5760405163163099ab60e01b815260040160405180910390fd5b600c81601381111561432157614321614d94565b0361433f5760405163975a86e560e01b815260040160405180910390fd5b600d81601381111561435357614353614d94565b0361437157604051631140570360e21b815260040160405180910390fd5b600e81601381111561438557614385614d94565b036143a357604051630622823b60e31b815260040160405180910390fd5b600f8160138111156143b7576143b7614d94565b036143d557604051636d30058d60e11b815260040160405180910390fd5b60108160138111156143e9576143e9614d94565b03614407576040516304acbcf160e51b815260040160405180910390fd5b601181601381111561441b5761441b614d94565b0361443957604051636effd2d560e01b815260040160405180910390fd5b601281601381111561444d5761444d614d94565b0361446a57604051623f318960e21b815260040160405180910390fd5b601381601381111561447e5761447e614d94565b03613adf57604051634bc7b56f60e11b815260040160405180910390fd5b600080516020615eae83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606144d68461478c565b6000835111806144e35750815b156145165761320284846040518060400160405280600b81526020016a10d85b1b0811985a5b195960aa1b8152506147d0565b604080516000808252602082019092529061282b565b600081815260208390526040812081600182015460ff16600381111561455457614554614d94565b1480614577575060018082015460ff16600381111561457557614575614d94565b145b15612e67576040805184815260208101869052209150612ea2565b60006110ef838361489e565b60008260000182815481106145b5576145b56154dc565b9060005260206000200154905092915050565b600081815260018301602052604081205480156146b15760006145ec600183615e55565b855490915060009061460090600190615e55565b9050818114614665576000866000018281548110614620576146206154dc565b9060005260206000200154905080876000018481548110614643576146436154dc565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061467657614676615e68565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107bf565b60009150506107bf565b60608160000180548060200260200160405190810160405280929190818152602001828054801561470b57602002820191906000526020600020905b8154815260200190600101908083116146f7575b50505050509050919050565b600080614723836148ed565b9050600080614732838761495a565b9092509050600081600481111561474b5761474b614d94565b1461282b5760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c205369676e617475726560781b604482015260640161080d565b6147958161449c565b6040516001600160a01b03821690309033907f8ee0f2bd29c0e6a975c3cc2e47cf2e01b5f23a9a8a02e0ed6a5a070269de3d2d90600090a450565b60606001600160a01b0384163b6148295760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20436f6e747261637420416464726573730000000000000000604482015260640161080d565b600080856001600160a01b0316856040516148449190615e7e565b600060405180830381855af49150503d806000811461487f576040519150601f19603f3d011682016040523d82523d6000602084013e614884565b606091505b50915091506148948282866149c8565b9695505050505050565b60008181526001830160205260408120546148e5575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107bf565b5060006107bf565b60006107bf306001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa158015614930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149549190615c4f565b83614a01565b60008082516041036149905760208301516040840151606085015160001a61498487828585614a28565b945094505050506149c1565b82516040036149b957602083015160408401516149ae868383614b15565b9350935050506149c1565b506000905060025b9250929050565b606083156149d75750816110ef565b8251156149e75782518084602001fd5b8160405162461bcd60e51b815260040161080d9190614f1d565b60405161190160f01b602082015260228101839052604281018290526000906062016140c9565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614a5f5750600090506003614b0c565b8460ff16601b14158015614a7757508460ff16601c14155b15614a885750600090506004614b0c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614adc573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614b0557600060019250925050614b0c565b9150600090505b94509492505050565b6000806001600160ff1b03831681614b3260ff86901c601b615e9a565b9050614b4087828885614a28565b935093505050935093915050565b5080546000825590600052602060002090810190613b1591905b80821115614b7c5760008155600101614b68565b5090565b600060208284031215614b9257600080fd5b81356001600160e01b0319811681146110ef57600080fd5b60008083601f840112614bbc57600080fd5b5081356001600160401b03811115614bd357600080fd5b6020830191508360208285010111156149c157600080fd5b80356001600160a01b0381168114610d0457600080fd5b600080600080600060608688031215614c1a57600080fd5b85356001600160401b0380821115614c3157600080fd5b614c3d89838a01614baa565b90975095506020880135915080821115614c5657600080fd5b50614c6388828901614baa565b9094509250614c76905060408701614beb565b90509295509295909350565b600060208284031215614c9457600080fd5b6110ef82614beb565b60008060408385031215614cb057600080fd5b82359150614cc060208401614beb565b90509250929050565b600060208284031215614cdb57600080fd5b5035919050565b600060608284031215614cf457600080fd5b50919050565b600080600060408486031215614d0f57600080fd5b83356001600160401b0380821115614d2657600080fd5b614d3287838801614ce2565b94506020860135915080821115614d4857600080fd5b818601915086601f830112614d5c57600080fd5b813581811115614d6b57600080fd5b87602061026083028501011115614d8157600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052602160045260246000fd5b60028110613b1557613b15614d94565b60208101614dc783614daa565b91905290565b634e487b7160e01b600052604160045260246000fd5b8015158114613b1557600080fd5b8035610d0481614de3565b600080600060608486031215614e1157600080fd5b614e1a84614beb565b925060208401356001600160401b0380821115614e3657600080fd5b818601915086601f830112614e4a57600080fd5b813581811115614e5c57614e5c614dcd565b604051601f8201601f19908116603f01168101908382118183101715614e8457614e84614dcd565b81604052828152896020848701011115614e9d57600080fd5b826020860160208301376000602084830101528096505050505050614ec460408501614df1565b90509250925092565b60005b83811015614ee8578181015183820152602001614ed0565b50506000910152565b60008151808452614f09816020860160208601614ecd565b601f01601f19169290920160200192915050565b6020815260006110ef6020830184614ef1565b600080600060408486031215614f4557600080fd5b83356001600160401b0380821115614f5c57600080fd5b614f6887838801614ce2565b94506020860135915080821115614f7e57600080fd5b818601915086601f830112614f9257600080fd5b813581811115614fa157600080fd5b8760206102e083028501011115614d8157600080fd5b60008083601f840112614fc957600080fd5b5081356001600160401b03811115614fe057600080fd5b6020830191508360208260061b85010111156149c157600080fd5b60008060006040848603121561501057600080fd5b83356001600160401b038082111561502757600080fd5b61503387838801614ce2565b9450602086013591508082111561504957600080fd5b5061505686828701614fb7565b9497909650939450505050565b60048110613b1557613b15614d94565b61507c81615063565b9052565b815181526020808301516001600160a01b03169082015260408083015180516103208401926150b6919085019062ffffff169052565b602081015161ffff8116606085015250604081015161ffff8116608085015250606081015161ffff811660a085015250608081015161ffff811660c08501525060a081015161ffff811660e08501525060c081015161010061511d8186018361ffff169052565b60e083015191506101206151368187018461ffff169052565b9083015191506101409061514f8683018461ffff169052565b83015191506101606151668682018461ffff169052565b9083015191506101809061517f8683018461ffff169052565b83015191506101a06151958682018460ff169052565b9083015191506101c0906151ad8683018460ff169052565b83015191506101e06151c38682018460ff169052565b908301519150610200906151db8683018460ff169052565b83015191506102206151f18682018460ff169052565b9083015160ff90811661024087015292015190911661026084015250606083015161ffff16610280830152608083015161522f6102a0840182615073565b5060a08301516152436102c0840182615073565b5060c08301516152576102e0840182615073565b5060e0830151612ea2610300840182615073565b60008060006040848603121561528057600080fd5b83356001600160401b038082111561529757600080fd5b6152a387838801614ce2565b945060208601359150808211156152b957600080fd5b818601915086601f8301126152cd57600080fd5b8135818111156152dc57600080fd5b8760208260051b8501011115614d8157600080fd5b6000806040838503121561530457600080fd5b50508035926020909101359150565b60028110613b1557600080fd5b60006020828403121561533257600080fd5b81356110ef81615313565b6020808252825182820181905260009190848201906040850190845b8181101561537557835183529284019291840191600101615359565b50909695505050505050565b6020808252600c908201526b125b1b1959d85b0810d85b1b60a21b604082015260600190565b6020808252600c908201526b125b9d985b1a590810d85b1b60a21b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061540a6060830187896153cd565b828103602084015261541d8186886153cd565b91505061ffff831660408301529695505050505050565b60208082526008908201526714995a9958dd195960c21b604082015260600190565b602080825260119082015270496c6c6567616c20557064617461626c6560781b604082015260600190565b60208082526010908201526f125b1b1959d85b0810dbdb9d1c9858dd60821b604082015260600190565b6020810160148310614dc757614dc7614d94565b6000602082840312156154d157600080fd5b81516110ef81614de3565b634e487b7160e01b600052603260045260246000fd5b61ffff81168114613b1557600080fd5b8035610d04816154f2565b60006020828403121561551f57600080fd5b81356110ef816154f2565b7f545950452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f81526526a0a9aa22a960d11b602082015260260190565b62ffffff81168114613b1557600080fd5b600081356107bf81615562565b600081356107bf816154f2565b60ff81168114613b1557600080fd5b600081356107bf8161558d565b6155ca6155b583615573565b825462ffffff191662ffffff91909116178255565b6155f56155d960208401615580565b825464ffff000000191660189190911b64ffff00000016178255565b61562461560460408401615580565b825466ffff0000000000191660289190911b66ffff000000000016178255565b61565761563360608401615580565b825468ffff00000000000000191660389190911b68ffff0000000000000016178255565b61568e61566660808401615580565b82546affff000000000000000000191660489190911b6affff00000000000000000016178255565b6156bd61569d60a08401615580565b82805461ffff60581b191660589290921b61ffff60581b16919091179055565b6156ec6156cc60c08401615580565b82805461ffff60681b191660689290921b61ffff60681b16919091179055565b61571b6156fb60e08401615580565b82805461ffff60781b191660789290921b61ffff60781b16919091179055565b61574b61572b6101008401615580565b82805461ffff60881b191660889290921b61ffff60881b16919091179055565b61577b61575b6101208401615580565b82805461ffff60981b191660989290921b61ffff60981b16919091179055565b6157ab61578b6101408401615580565b82805461ffff60a81b191660a89290921b61ffff60a81b16919091179055565b6157d96157bb610160840161559c565b82805460ff60b81b191660b89290921b60ff60b81b16919091179055565b6158076157e9610180840161559c565b82805460ff60c01b191660c09290921b60ff60c01b16919091179055565b6158356158176101a0840161559c565b82805460ff60c81b191660c89290921b60ff60c81b16919091179055565b6158636158456101c0840161559c565b82805460ff60d01b191660d09290921b60ff60d01b16919091179055565b6158916158736101e0840161559c565b82805460ff60d81b191660d89290921b60ff60d81b16919091179055565b6158bf6158a1610200840161559c565b82805460ff60e01b191660e09290921b60ff60e01b16919091179055565b61304d6158cf610220840161559c565b82805460ff60e81b191660e89290921b60ff60e81b16919091179055565b8035610d0481615562565b8035610d048161558d565b61591982615910836158ed565b62ffffff169052565b61592560208201615502565b61ffff16602083015261593a60408201615502565b61ffff16604083015261594f60608201615502565b61ffff16606083015261596460808201615502565b61ffff16608083015261597960a08201615502565b61ffff1660a083015261598e60c08201615502565b61ffff1660c08301526159a360e08201615502565b61ffff1660e08301526101006159ba828201615502565b61ffff16908301526101206159d0828201615502565b61ffff16908301526101406159e6828201615502565b61ffff16908301526101606159fc8282016158f8565b60ff1690830152610180615a118282016158f8565b60ff16908301526101a0615a268282016158f8565b60ff16908301526101c0615a3b8282016158f8565b60ff16908301526101e0615a508282016158f8565b60ff1690830152610200615a658282016158f8565b60ff1690830152610220615a7a8282016158f8565b60ff1692019190915250565b61024081016107bf8284615903565b634e487b7160e01b600052601160045260246000fd5b600060018201615abd57615abd615a95565b5060010190565b600181811c90821680615ad857607f821691505b602082108103614cf457634e487b7160e01b600052602260045260246000fd5b600382810b9082900b03637fffffff198112637fffffff821317156107bf576107bf615a95565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f4d41535445525f81526420a226a4a760d91b602082015260250190565b60048110613b1557600080fd5b600060208284031215615b7557600080fd5b81356110ef81615b56565b60208101614dc783615063565b600060208284031215615b9f57600080fd5b8151601481106110ef57600080fd5b600060208284031215615bc057600080fd5b81516110ef81615313565b6000808335601e19843603018112615be257600080fd5b8301803591506001600160401b03821115615bfc57600080fd5b6020019150368190038213156149c157600080fd5b600060208284031215615c2357600080fd5b81356001600160401b03811681146110ef57600080fd5b82815261026081016110ef6020830184615903565b600060208284031215615c6157600080fd5b5051919050565b62ffffff818116838216019080821115612ea257612ea2615a95565b6020810160088310614dc757614dc7614d94565b8381526020810183905261028081016112b46040830184615903565b600060208284031215615cc657600080fd5b8151600881106110ef57600080fd5b6000808354615ce381615ac4565b60018281168015615cfb5760018114615d1057615d3f565b60ff1984168752821515830287019450615d3f565b8760005260208060002060005b85811015615d365781548a820152908401908201615d1d565b50505082870194505b50929695505050505050565b601f821115615d9157600081815260208120601f850160051c81016020861015615d725750805b601f850160051c820191505b818110156109f357828155600101615d7e565b505050565b6001600160401b03831115615dad57615dad614dcd565b615dc183615dbb8354615ac4565b83615d4b565b6000601f841160018114615df55760008515615ddd5750838201355b600019600387901b1c1916600186901b178355612a71565b600083815260209020601f19861690835b82811015615e265786850135825560209485019460019092019101615e06565b5086821015615e435760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b818103818111156107bf576107bf615a95565b634e487b7160e01b600052603160045260246000fd5b60008251615e90818460208701614ecd565b9190910192915050565b808201808211156107bf576107bf615a9556fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212203d7cd039af6a247ffe2eb43020b3c465119c9d4249d0cdbdeff1af48bd1e23ba64736f6c63430008130033",
  "libraries": {
    "LACLAgentScope": "0x33969217bDF56df99b4735b455C42b79EC99d57b"
  },
  "devdoc": {
    "author": "Sina Tadayon, https://github.com/SinaTadayon",
    "events": {
      "Initialized(address,address,address,string,string,uint16)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ProxyLocalAdminUpdated(address,address,address)": {
        "details": "Emitted when the admin account has changed."
      }
    },
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "ACL Member Manager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82229,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "_contractName",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 82231,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "_contractVersion",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 82233,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 82236,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "_sstat",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(ProxySafeModeStatus)82251"
      },
      {
        "astId": 82239,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "_ustat",
        "offset": 21,
        "slot": "2",
        "type": "t_enum(ProxyUpdatabilityStatus)82254"
      },
      {
        "astId": 82244,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "__reserved",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)64_storage"
      },
      {
        "astId": 10383,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "_firstInit",
        "offset": 0,
        "slot": "67",
        "type": "t_bool"
      },
      {
        "astId": 10386,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "_data",
        "offset": 0,
        "slot": "68",
        "type": "t_struct(DataCollection)10239_storage"
      },
      {
        "astId": 82432,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "78",
        "type": "t_uint16"
      },
      {
        "astId": 82435,
        "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
        "label": "_initializing",
        "offset": 2,
        "slot": "78",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)64_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[64]",
        "numberOfBytes": "2048"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(ActivityStatus)11721": {
        "encoding": "inplace",
        "label": "enum IACLCommons.ActivityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(AgentType)11716": {
        "encoding": "inplace",
        "label": "enum IACLCommons.AgentType",
        "numberOfBytes": "1"
      },
      "t_enum(AlterabilityStatus)11726": {
        "encoding": "inplace",
        "label": "enum IACLCommons.AlterabilityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PolicyType)11744": {
        "encoding": "inplace",
        "label": "enum IACLCommons.PolicyType",
        "numberOfBytes": "1"
      },
      "t_enum(ProxySafeModeStatus)82251": {
        "encoding": "inplace",
        "label": "enum IBaseProxy.ProxySafeModeStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProxyUpdatabilityStatus)82254": {
        "encoding": "inplace",
        "label": "enum IBaseProxy.ProxyUpdatabilityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ScopeType)11733": {
        "encoding": "inplace",
        "label": "enum IACLCommons.ScopeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(FacetEntity)11945_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IACLCommons.FacetEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetEntity)11945_storage"
      },
      "t_mapping(t_address,t_struct(ProfileAccount)12018_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IACLCommons.ProfileAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileAccount)12018_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.BaseAgent)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseAgent)11756_storage"
      },
      "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.BaseScope)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseScope)11770_storage"
      },
      "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.PolicyEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyEntity)11793_storage"
      },
      "t_mapping(t_bytes32,t_struct(ProfileEntity)12059_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.ProfileEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileEntity)12059_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)79783_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.AddressSet",
        "members": [
          {
            "astId": 79782,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)79482_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BaseAgent)11756_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.BaseAgent",
        "members": [
          {
            "astId": 11746,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11749,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "atype",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(AgentType)11716"
          },
          {
            "astId": 11752,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "acstat",
            "offset": 1,
            "slot": "1",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11755,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "alstat",
            "offset": 2,
            "slot": "1",
            "type": "t_enum(AlterabilityStatus)11726"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BaseScope)11770_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.BaseScope",
        "members": [
          {
            "astId": 11758,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11761,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "stype",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ScopeType)11733"
          },
          {
            "astId": 11764,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "acstat",
            "offset": 1,
            "slot": "1",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11767,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "alstat",
            "offset": 2,
            "slot": "1",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 11769,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "referredByAgent",
            "offset": 3,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)79676_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 79675,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)79482_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DataCollection)10239_storage": {
        "encoding": "inplace",
        "label": "struct ACLStorage.DataCollection",
        "members": [
          {
            "astId": 10202,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "agents",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)"
          },
          {
            "astId": 10207,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "scopes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)"
          },
          {
            "astId": 10212,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "policies",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)"
          },
          {
            "astId": 10216,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "rolePolicyMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 10221,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "profiles",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes32,t_struct(ProfileEntity)12059_storage)"
          },
          {
            "astId": 10226,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "profileAccounts",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(ProfileAccount)12018_storage)"
          },
          {
            "astId": 10230,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "selectors",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes4,t_address)"
          },
          {
            "astId": 10235,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "facets",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(FacetEntity)11945_storage)"
          },
          {
            "astId": 10238,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "facetSet",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)79783_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(FacetEntity)11945_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.FacetEntity",
        "members": [
          {
            "astId": 11944,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "subjectId",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PolicyEntity)11793_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.PolicyEntity",
        "members": [
          {
            "astId": 11772,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11774,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "scopeId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 11776,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 11778,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "roleLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 11780,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "policyCode",
            "offset": 2,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 11783,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "ptype",
            "offset": 3,
            "slot": "3",
            "type": "t_enum(PolicyType)11744"
          },
          {
            "astId": 11786,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "acstat",
            "offset": 4,
            "slot": "3",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11789,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "alstat",
            "offset": 5,
            "slot": "3",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 11792,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "roles",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bytes32Set)79676_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ProfileAccount)12018_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileAccount",
        "members": [
          {
            "astId": 12017,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "profiles",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProfileEntity)12059_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileEntity",
        "members": [
          {
            "astId": 12023,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "agents",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)"
          },
          {
            "astId": 12028,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "scopes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)"
          },
          {
            "astId": 12033,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "policies",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)"
          },
          {
            "astId": 12037,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "rolePolicyMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 12040,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "admins",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bytes32Set)79676_storage"
          },
          {
            "astId": 12042,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "adminId",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 12044,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "name",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 12046,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "owner",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 12049,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "acstat",
            "offset": 20,
            "slot": "8",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 12052,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "alstat",
            "offset": 21,
            "slot": "8",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 12055,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "registerLimits",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(ProfileRegisterLimit)11993_storage"
          },
          {
            "astId": 12058,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "limits",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(ProfileLimit)12014_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(ProfileLimit)12014_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileLimit",
        "members": [
          {
            "astId": 11995,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "profileCallLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11997,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "contextLimit",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11999,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "memberLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 12001,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "realmLimit",
            "offset": 11,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12003,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "domainLimit",
            "offset": 13,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12005,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "memberCallLimit",
            "offset": 15,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12007,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "typeRoleLimit",
            "offset": 17,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12009,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "typeLimit",
            "offset": 19,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12011,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "policyRoleLimit",
            "offset": 21,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12013,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "functionLimit",
            "offset": 23,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProfileRegisterLimit)11993_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileRegisterLimit",
        "members": [
          {
            "astId": 11978,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "memberRegisterLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11980,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "roleRegisterLimit",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11982,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "typeRegisterLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11984,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "functionRegisterLimit",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11986,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "contextRegisterLimit",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11988,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "realmRegisterLimit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11990,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "domainRegisterLimit",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11992,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "policyRegisterLimit",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)79482_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Set",
        "members": [
          {
            "astId": 79477,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 79481,
            "contract": "src/contracts/acl/agent/MemberManager.sol:MemberManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}