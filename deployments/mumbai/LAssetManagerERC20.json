{
  "address": "0xDA3A221f9ec8Eb6B478BC67236c7FBe71629661C",
  "abi": [
    {
      "inputs": [],
      "name": "LIB_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIB_VERSION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ASSET_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ASSET_GROUP",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ASSET_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_SYSTEM_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainVersion",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "createRequestContext",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "version",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "realm",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "contractId",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "status",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestContext",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4[]",
              "name": "funcSelectors",
              "type": "bytes4[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestRegisterContext[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "predictAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4dbc9ba60c5596a075fd31d40f1d9dd46ad4dc2698c42a102faeb220037a032",
  "receipt": {
    "to": null,
    "from": "0x1654E08a4963D92846B7cC12bfE911887EA6930c",
    "contractAddress": "0xDA3A221f9ec8Eb6B478BC67236c7FBe71629661C",
    "transactionIndex": 29,
    "gasUsed": "2277966",
    "logsBloom": "0x
    "blockHash": "0x7f81c36a703d5b25ea199c54429924baace1a2b7fd68cae5617b816940a4e7f3",
    "transactionHash": "0xf4dbc9ba60c5596a075fd31d40f1d9dd46ad4dc2698c42a102faeb220037a032",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 28823984,
        "transactionHash": "0xf4dbc9ba60c5596a075fd31d40f1d9dd46ad4dc2698c42a102faeb220037a032",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001654e08a4963d92846b7cc12bfe911887ea6930c",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c23b26f5c52000000000000000000000000000000000000000000000000003fb8efe2f0f3877e000000000000000000000000000000000000000000000000241ad947d87e571b0000000000000000000000000000000000000000000000003faccc308197357e0000000000000000000000000000000000000000000000002426fcfa47daa91b",
        "logIndex": 140,
        "blockHash": "0x7f81c36a703d5b25ea199c54429924baace1a2b7fd68cae5617b816940a4e7f3"
      }
    ],
    "blockNumber": 28823984,
    "cumulativeGasUsed": "8257389",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "45271bbf9385da8a7b2f4f7bb0ef2c6a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LIB_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIB_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ASSET_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ASSET_GROUP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ASSET_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_SYSTEM_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"createRequestContext\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractId\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestContext\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSelectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestRegisterContext[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"predictAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/lib/token/LAssetManagerERC20.sol\":\"LAssetManagerERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAccessControl {\\n  /**\\n   * @dev Function called by apps to check ACL\\n   * @return boolean indicating whether the ACL allows\\n   */\\n  function hasAccess(\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool);\\n\\n  function isLivelySystemAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyAssetManagerRole(address account) external view returns (bool);\\n\\n  function isLivelyAssetAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyCommunityDaoRole(address account) external view returns (bool);\\n\\n  function isLivelyCommunityDaoExecutorRole(address account) external view returns (bool);\\n\\n  function isLivelyGeneralGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyDaoGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyAssetGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyGeneralRealm(bytes32 context) external view returns (bool);\\n\\n  function isLivelyAssetRealm(bytes32 context) external view returns (bool);\\n\\n  function isContextSafeMode(bytes32 context) external view returns (bool);\\n\\n  function isContextUpgradable(bytes32 context) external view returns (bool);\\n\\n  function isContextExists(bytes32 context) external view returns (bool);\\n\\n  function isContextFunctionExists(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextFunctionEnabled(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextEnabled(bytes32 context) external view returns (bool);\\n\\n  function isGroupExists(bytes32 group) external view returns (bool);\\n\\n  function isGroupEnabled(bytes32 group) external view returns (bool);\\n\\n  function isRoleExists(bytes32 role) external view returns (bool);\\n\\n  function isRoleEnabled(bytes32 role) external view returns (bool);\\n\\n  function isRealmExists(bytes32 realm) external view returns (bool);\\n\\n  function isRealmEnabled(bytes32 realm) external view returns (bool); \\n\\n  function isRealmUpgradable(bytes32 realm) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x625c97e65b5c357c09f26f92a6c8f7e8043aeb191323a71fa6aed0670d8d1dca\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool status;\\n  }\\n\\n   struct RequestPredictContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    bytes32 salt;\\n    address subject;\\n    address deployer;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, bytes32 realm);\\n\\n  event PredictContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, address deployer, address subject, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed contractId, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function registerPredictContext(\\n    bytes memory signature,\\n    RequestPredictContext calldata rpc,\\n    RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0x4811f66509db07ea5b29faf433bf0209e8fd13a822ec371a0da2178289fce71b\",\"license\":\"MIT\"},\"src/contracts/acl/IGroupManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGroupManagement {\\n  event GroupRegistered(bytes32 indexed group, address indexed sender, string name, bool status);\\n\\n  event GroupStatusChanged(bytes32 indexed group, address indexed sender, bool status);\\n\\n  function registerGroup(string calldata name, bool status) external returns (bytes32);\\n\\n  function setGroupStatus(bytes32 group, bool status) external returns (bool);\\n\\n  function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool);\\n\\n  function getGroupInfo(bytes32 group) external view returns (string memory, bool);\\n\\n  function getGroupRoles(bytes32 group) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xef419de7dcf0029fe7a05850895dc4ce569d743e695d7eb2d9d345d185b267f8\",\"license\":\"MIT\"},\"src/contracts/acl/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRoleManagement {\\n\\n  struct RegiterRoleRequest {\\n    bytes32 group;\\n    string name;    \\n    bool status;\\n  }\\n\\n  struct UpdateRoleRequest {\\n    bytes32 role;\\n    address account;\\n  }\\n\\n  event RoleAccountGranted(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleAccountRevoked(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed role,\\n    string indexed name,\\n    bytes32 group,\\n    bool isEnabled\\n  );\\n\\n  event RoleStatusChanged(address indexed sender, bytes32 indexed role, bytes32 indexed group, bool status);\\n\\n  event RoleGroupChanged(address indexed sender, bytes32 indexed role, bytes32 indexed newGroup, bytes32 oldGroup);\\n\\n  function registerRole(\\n    string calldata name,\\n    bytes32 group,\\n    bool status\\n  ) external returns (bytes32);\\n\\n  function batchRegisterRole(RegiterRoleRequest[] calldata requests) external returns(bytes32[] memory);\\n\\n  function grantRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchGrantRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function revokeRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchRevokeRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function setRoleStatus(bytes32 role, bool status) external returns (bool);\\n\\n  function setRoleGroup(bytes32 role, bytes32 group) external returns (bool);\\n\\n  function getRoleInfo(bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    );\\n\\n  function getRoleAccounts(bytes32 role) external view returns (address[] memory);\\n\\n  function hasRoleAccount(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x18e7657fdde30362e8c0186ac84acfdbc161c4f8f06e1e3cb009021d8fe5ab58\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x995554efb87ebf8f119a614386797064b9c6cbed2111e67ba821449067486288\",\"license\":\"MIT\"},\"src/contracts/lib/LContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the context\\n */\\nlibrary LContextUtils {\\n  function generateCtx(address contractId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId));\\n  }\\n}\\n\",\"keccak256\":\"0x379d3f1670e48d86daed450ef0f5b75e59c592aa92b0d9ca2034d1888730969d\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n      return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0x24ae105c45515c06b38bbb435d508d4569a2d03f4b060dc43680bde225c8ee14\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0xc8056320321b6983c6685741b1ba607513a7c6817f4e4a7319b6b45ac9194565\",\"license\":\"MIT\"},\"src/contracts/lib/proxy/LClones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n */\\nlibrary LClones {\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n   *\\n   * This function uses the create opcode, which should never revert.\\n   */\\n  function clone(address implementation) internal returns (address instance) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      instance := create(0, ptr, 0x37)\\n    }\\n    require(instance != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n   *\\n   * This function uses the create2 opcode and a `salt` to deterministically deploy\\n   * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n   * the clones cannot be deployed twice at the same address.\\n   */\\n  function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      instance := create2(0, ptr, 0x37, salt)\\n    }\\n    require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(\\n    address implementation,\\n    bytes32 salt,\\n    address deployer\\n  ) internal pure returns (address predicted) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n      mstore(add(ptr, 0x38), shl(0x60, deployer))\\n      mstore(add(ptr, 0x4c), salt)\\n      mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n      predicted := keccak256(add(ptr, 0x37), 0x55)\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n    return predictDeterministicAddress(implementation, salt, address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xa7bf692e117b23688be8687bf9e4c3c31ffcaa8cf94d9946b33a1e8b4d953052\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xeb49909b77ba631382c48e9fead2e49f8b4c72f3325f7685d4bddfce32d7528b\",\"license\":\"MIT\"},\"src/contracts/lib/token/LAssetManagerERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../token/asset/IAssetManagerERC20.sol\\\";\\nimport \\\"../../token/asset/AssetManagerStorageERC20.sol\\\";\\nimport \\\"../../token/asset/ERC20/AssetERC20.sol\\\";\\nimport \\\"../../token/lively/IERC20.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/IGroupManagement.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../../acl/IAccessControl.sol\\\";\\nimport \\\"../../utils/IERC165.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"../proxy/LClones.sol\\\";\\n\\nlibrary LAssetManagerERC20 {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LClones for address;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LAssetManagerERC20\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant LIVELY_ASSET_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_GROUP\\\"));\\n  bytes32 public constant LIVELY_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_SYSTEM_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_SYSTEM_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_ASSET_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_ASSET_MANAGER_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_MANAGER_ROLE\\\"));\\n\\n  function createRequestContext(\\n    bytes32 domainName,\\n    bytes32 domainVersion,\\n    bytes32 realm\\n  )\\n    external\\n    view\\n    returns (IContextManagement.RequestContext memory, IContextManagement.RequestRegisterContext[] memory)\\n  {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](3);\\n\\n    rrc[0].role = LIVELY_ADMIN_ROLE;\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](2);\\n    rrc[0].funcSelectors[0] = IProxy.setUpgradeStatus.selector;\\n    rrc[0].funcSelectors[1] = IProxy.setSafeMode.selector;\\n\\n    rrc[1].role = LIVELY_SYSTEM_ADMIN_ROLE;\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](2);\\n    rrc[1].funcSelectors[0] = IProxy.setLocalAdmin.selector;\\n    rrc[1].funcSelectors[1] = IProxy.upgradeTo.selector;\\n\\n    rrc[2].role = LIVELY_ASSET_ADMIN_ROLE;\\n    rrc[2].isEnabled = true;\\n    rrc[2].funcSelectors = new bytes4[](17);\\n    rrc[2].funcSelectors[0] = IAssetManagerERC20.tokenLock.selector;\\n    rrc[2].funcSelectors[1] = IAssetManagerERC20.tokenBatchLock.selector;\\n    rrc[2].funcSelectors[2] = IAssetManagerERC20.tokenTransfer.selector;\\n    rrc[2].funcSelectors[3] = IAssetManagerERC20.tokenBatchTransfer.selector;\\n    rrc[2].funcSelectors[4] = IAssetManagerERC20.tokenTransferFrom.selector;\\n    rrc[2].funcSelectors[5] = IAssetManagerERC20.tokenBatchTransferFrom.selector;\\n    rrc[2].funcSelectors[6] = IAssetManagerERC20.tokenApprove.selector;\\n    rrc[2].funcSelectors[7] = IAssetManagerERC20.tokenIncreaseAllowance.selector;\\n    rrc[2].funcSelectors[8] = IAssetManagerERC20.tokenDecreaseAllowance.selector;\\n    rrc[2].funcSelectors[9] =  IAssetManagerERC20.createAsset.selector;\\n    rrc[2].funcSelectors[10] = IAssetManagerERC20.updateAssetSubject.selector;\\n    rrc[2].funcSelectors[11] = IAssetManagerERC20.registerToken.selector;\\n    rrc[2].funcSelectors[12] = IAssetManagerERC20.registerAsset.selector;\\n    rrc[2].funcSelectors[13] = IAssetManagerERC20.removeAsset.selector;\\n    rrc[2].funcSelectors[14] = IAssetManagerERC20.setSafeModeToken.selector;\\n    rrc[2].funcSelectors[15] = bytes4(keccak256(\\\"livelyTokensDistribution(address)\\\"));\\n    rrc[2].funcSelectors[16] = bytes4(keccak256(\\\"withdrawBalance(address)\\\"));\\n      \\n    IContextManagement.RequestContext memory rc = IContextManagement.RequestContext({\\n      name: domainName,\\n      version: domainVersion,\\n      realm: realm,\\n      contractId: address(this),\\n      status: true\\n    });\\n\\n    return (rc, rrc);\\n  }\\n\\n  function createAsset(AssetManagerStorageERC20.DataCollection storage data, IAssetManagerERC20.CreateAssetRequest calldata request, address accessControlManager, address assetSubject, bytes calldata assetCreationSignature) external returns (address, address) {\\n    require(bytes(request.assetName).length > 0 , \\\"Invalid Asset Name\\\");\\n    require(bytes(request.assetVersion).length > 0 , \\\"Invalid Asset Version\\\");\\n    require(request.tokenId != address(0) , \\\"Invalid TokenId Address\\\");\\n    require(assetSubject != address(0), \\\"Invalid Asset Subject ERC20\\\");\\n    require(data.tokensSet.contains(request.tokenId), \\\"TokenId Not Found\\\");\\n\\n    bytes32 assetGroup = LIVELY_ASSET_GROUP;\\n    require(IGroupManagement(accessControlManager).hasGroupRole(assetGroup, request.role), \\\"Asset Role Not Found\\\");\\n  \\n    AssetManagerStorageERC20.TokenData storage tokenData = data.tokens[request.tokenId];\\n    require(!tokenData.assets.contains(assetSubject.predictDeterministicAddress(request.salt)), \\\"AssetId Already Exists\\\");\\n\\n    AssetERC20.InitRequest memory initRequest = AssetERC20.InitRequest ({\\n      domainName: request.assetName,\\n      domainVersion: request.assetVersion,  \\n      domainRealm: IProxy(address(this)).contractRealm(),\\n      erc20Token: request.tokenId,\\n      accessControl: accessControlManager,\\n      assetManager: address(this),\\n      assetRole: request.role,\\n      salt: request.salt,\\n      subject: assetSubject,\\n      signature: assetCreationSignature\\n    });\\n\\n    address newAsset = assetSubject.cloneDeterministic(request.salt);\\n    AssetERC20(payable(newAsset)).initialize(initRequest);\\n    tokenData.assets.add(newAsset);\\n    return (newAsset, assetSubject);\\n  }\\n\\n  function registerToken(AssetManagerStorageERC20.DataCollection storage data, address tokenId) external returns (string memory, string memory) {   \\n    require(!data.tokensSet.contains(tokenId), \\\"TokenId Already Registered\\\");\\n\\n    try IERC165(tokenId).supportsInterface(type(IERC20).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid ERC20\\\");\\n    } catch {\\n      revert(\\\"Illegal ERC20\\\");\\n    }\\n\\n    try IERC165(tokenId).supportsInterface(type(IERC20Extra).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid ERC20Extra\\\");\\n    } catch {\\n      revert(\\\"Illegal ERC20Extra\\\");\\n    }\\n\\n    try IERC165(tokenId).supportsInterface(type(IERC20Lock).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid ERC20Lock\\\");\\n    } catch {\\n      revert(\\\"Illegal ERC20Lock\\\");\\n    }\\n\\n    string memory tokenName = IERC20(tokenId).name();\\n    string memory tokenSymbol = IERC20(tokenId).symbol();\\n\\n    data.tokensSet.add(tokenId);\\n    AssetManagerStorageERC20.TokenData storage tokenData = data.tokens[tokenId];\\n    tokenData.status = IAssetEntity.Status.ACTIVE;\\n    return (tokenName, tokenSymbol);\\n  }\\n\\n  function registerAsset(AssetManagerStorageERC20.DataCollection storage data, address assetId) external returns (bool, address) {\\n    require(assetId != address(0), \\\"Invalid AssetId Address\\\");\\n    \\n    try IERC165(assetId).supportsInterface(type(IAssetERC20).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid IAssetERC20\\\");\\n    } catch {\\n      revert(\\\"Illegal IAssetERC20\\\");\\n    }\\n\\n    try IERC165(assetId).supportsInterface(type(IAssetEntity).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid IAssetEntity\\\");\\n    } catch {\\n      revert(\\\"Illegal IAssetEntity\\\");\\n    }\\n\\n\\n    address tokenId = IAssetEntity(assetId).assetToken();\\n    require(data.tokensSet.contains(tokenId), \\\"TokenId Not Found\\\");\\n    \\n    AssetManagerStorageERC20.TokenData storage tokenData = data.tokens[tokenId];\\n    require(!tokenData.assets.contains(assetId), \\\"AssetId Already Registered\\\");\\n    \\n    tokenData.assets.add(assetId);\\n    if(IAssetEntity(assetId).assetSafeMode()) {\\n      IAssetEntity(assetId).assetSafeModeSet(false);\\n    }\\n    return (true, tokenId);\\n  }\\n\\n  function removeAsset(AssetManagerStorageERC20.DataCollection storage data, address assetId) external returns (address) {\\n    require(assetId != address(0), \\\"Invalid AssetId Address\\\");\\n    \\n    address tokenId = IAssetEntity(assetId).assetToken();\\n    require(data.tokensSet.contains(tokenId), \\\"TokenId Not Found\\\");\\n    \\n    AssetManagerStorageERC20.TokenData storage tokenData = data.tokens[tokenId];\\n    require(tokenData.assets.contains(assetId), \\\"AssetId Not Found\\\");\\n    \\n    tokenData.assets.remove(assetId);\\n    if(!IAssetEntity(assetId).assetSafeMode()) {\\n      IAssetEntity(assetId).assetSafeModeSet(true);\\n    }    \\n    return tokenId;\\n  }\\n\\n  function setSafeModeToken(AssetManagerStorageERC20.DataCollection storage data, address tokenId, bool isEnabled) external returns (bool) {    \\n    require(data.tokensSet.contains(tokenId), \\\"TokenId Not Found\\\");\\n    AssetManagerStorageERC20.TokenData storage tokenData = data.tokens[tokenId];\\n    for(uint i = 0; i < tokenData.assets.length(); i++) {\\n      IAssetEntity(tokenData.assets.at(i)).assetSafeModeSet(isEnabled);\\n    }\\n\\n    tokenData.status = IAssetEntity.Status.SAFE_MODE;  \\n    return true;\\n  }\\n\\n  function predictAddress(address implementation, bytes32 salt, address deployer) external pure returns (address) {\\n    return implementation.predictDeterministicAddress(salt, deployer);\\n  }\\n}\",\"keccak256\":\"0xc6693975bf52e68008914e1f3c65406e18afedc0504970db6890342d19b74962\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n */\\n\\nabstract contract BaseUUPSStorage {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 internal constant _TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  \\n  address internal immutable __self = address(this);\\n\\n  bytes32 internal _domainName;\\n  bytes32 internal _domainVersion;\\n  bytes32 internal _domainRealm;\\n  address internal _accessControlManager;\\n  bool internal _isSafeMode;\\n  bool internal _isUpgradable;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x086334b0668244b8ff2ef60dd770da77ecfd05f705e7c2251c60553c4651bfad\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBaseProxy {\\n  event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x719d13ceb21e3fda10fc0ba5fb1b167b8736919d6c6a99f6268667acb8b4d062\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event LocalAdminChanged(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event SafeModeChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  event UpgradeStatusChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeMode(bool status) external returns (bool);\\n\\n  function setUpgradeStatus(bool status) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function contractName() external view returns (bytes32);\\n\\n  function contractVersion() external view returns (bytes32);\\n\\n  function contractRealm() external view returns (bytes32);\\n\\n  function contractContext() external view returns (bytes32);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function isSafeMode() external view returns (bool);\\n\\n  function isUpgradable() external view returns (bool);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n\\n}\\n\",\"keccak256\":\"0x93bf3ccb33a8616fba3379b096e79e88ae3249882af81d1dc808eec6688800a7\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0xced45d5b03d0fcf6c7bef560d630a997ac0dd182cdbc55549fa3efceb932ea74\",\"license\":\"MIT\"},\"src/contracts/token/asset/AssetManagerStorageERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IAssetEntity.sol\\\";\\nimport \\\"../../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\n\\nabstract contract AssetManagerStorageERC20 is BaseUUPSStorage {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  struct TokenData {    \\n    LEnumerableSet.AddressSet assets;\\n    IAssetEntity.Status status;\\n  }\\n\\n  struct DataCollection {\\n    mapping(address => TokenData) tokens;\\n    LEnumerableSet.AddressSet tokensSet;\\n  }\\n\\n  address internal _assetSubjectERC20;\\n  bytes internal _assetCreationSignature;\\n  DataCollection internal _data;\\n\\n  // Note: for next upgrade add new variables after this line\\n}\",\"keccak256\":\"0x14f1c1b9afc728ae8447b3d85c69617845472bf75e07e2c33769bb3b24a80c80\",\"license\":\"MIT\"},\"src/contracts/token/asset/ERC20/AssetERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IAssetERC20.sol\\\";\\nimport \\\"../IAssetEntity.sol\\\";\\nimport \\\"../IAssetManagerERC20.sol\\\";\\nimport \\\"../../lively/IERC20.sol\\\";\\nimport \\\"../../../proxy/Initializable.sol\\\";\\nimport \\\"../../../utils/Message.sol\\\";\\nimport \\\"../../../utils/ERC165.sol\\\";\\nimport \\\"../../../lib/cryptography/LECDSA.sol\\\";\\nimport \\\"../../../lib/LContextUtils.sol\\\";\\nimport \\\"../../../lib/LAddress.sol\\\";\\nimport \\\"../../../acl/IAccessControl.sol\\\";\\nimport \\\"../../../acl/IContextManagement.sol\\\";\\n\\ncontract AssetERC20 is Initializable, Message, ERC165, IAssetERC20, IAssetEntity {\\n  using LAddress for address;\\n\\n  struct InitRequest {\\n    bytes32 domainRealm;\\n    bytes32 assetRole;\\n    bytes32 salt;\\n    address subject;\\n    address erc20Token;\\n    address accessControl;\\n    address assetManager;\\n    string domainName;\\n    string domainVersion;\\n    bytes signature;\\n  }\\n\\n  bytes32 private constant _LIVELY_ASSET_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_GROUP\\\"));\\n  bytes32 private constant _LIVELY_ASSET_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_ADMIN_ROLE\\\"));\\n  bytes32 private constant _LIVELY_ASSET_MANAGER_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_MANAGER_ROLE\\\"));\\n\\n  address private _accessControlManager;\\n  address private _erc20Token;\\n  bytes32 private _domainName;\\n  bytes32 private _domainVersion;\\n  bytes32 private _domainRealm;\\n  bytes32 private _assetRole;\\n  bool private _isSafeMode;\\n  \\n  constructor() { _isSafeMode = true; }\\n\\n  function initialize(InitRequest calldata request) public initializer {\\n\\n    try IERC165(request.erc20Token).supportsInterface(type(IERC20).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid ERC20Token Address\\\");\\n    } catch {\\n      revert(\\\"Illegal ERC20Token Address\\\");\\n    }\\n\\n    try IERC165(request.erc20Token).supportsInterface(type(IERC20Extra).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid ERC20TokenExtra Address\\\");\\n    } catch {\\n      revert(\\\"Illegal ERC20TokenExtra Address\\\");\\n    }\\n\\n    try IERC165(request.erc20Token).supportsInterface(type(IERC20Lock).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid ERC20TokenLock Address\\\");\\n    } catch {\\n      revert(\\\"Illegal ERC20TokenLock\\\");\\n    }\\n\\n    try IERC165(request.accessControl).supportsInterface(type(IAccessControl).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid AccessControlManager\\\");\\n    } catch {\\n      revert(\\\"Illegal AccessControlManager\\\");\\n    }     \\n\\n    try IERC165(request.assetManager).supportsInterface(type(IAssetManagerERC20).interfaceId) returns (bool isSupported) {\\n      require(isSupported, \\\"Invalid IAssetManagerERC20\\\");\\n    } catch {\\n      revert(\\\"Illegal IAssetManagerERC20\\\");\\n    }     \\n\\n    _accessControlManager = request.accessControl;\\n    require(IAccessControl(_accessControlManager).isRoleEnabled(request.assetRole), \\\"Role Not Found OR Disabled \\\");\\n\\n    _domainRealm = request.domainRealm;    \\n    _domainName = keccak256(abi.encodePacked(request.domainName));\\n    _domainVersion = keccak256(abi.encodePacked(request.domainVersion));    \\n    _erc20Token = request.erc20Token;\\n    _assetRole = request.assetRole;\\n    _isSafeMode = false;\\n  \\n    (IContextManagement.RequestPredictContext memory rpc, IContextManagement.RequestRegisterContext[] memory rrc) = \\n      _createRequestContext(_domainName, _domainVersion, _domainRealm, _assetRole, request.salt, request.subject, request.assetManager);\\n\\n    IContextManagement(_accessControlManager).registerPredictContext(request.signature, rpc, rrc);\\n\\n    emit AssetInitialized(\\n      _msgSender(),\\n      address(this),\\n      _erc20Token,\\n      request.assetManager,\\n      request.subject,\\n      request.domainName,\\n      request.domainVersion,\\n      _domainRealm,\\n      _assetRole      \\n    );\\n  }\\n\\n  function _createRequestContext(\\n    bytes32 domainName,\\n    bytes32 domainVersion,\\n    bytes32 realm,\\n    bytes32 role,\\n    bytes32 salt,\\n    address subject,\\n    address deployer\\n  )\\n    internal\\n    pure\\n    returns (IContextManagement.RequestPredictContext memory, IContextManagement.RequestRegisterContext[] memory)\\n  {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](2);\\n\\n    rrc[0].role = _LIVELY_ASSET_ADMIN_ROLE;\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](1);\\n    rrc[0].funcSelectors[0] = this.assetSafeModeSet.selector;\\n\\n    rrc[1].role = role;\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](10);\\n    rrc[1].funcSelectors[0] = IAssetERC20.tokenLock.selector;\\n    rrc[1].funcSelectors[1] = IAssetERC20.tokenBatchLock.selector;\\n    rrc[1].funcSelectors[2] = IAssetERC20.tokenTransfer.selector;\\n    rrc[1].funcSelectors[3] = IAssetERC20.tokenBatchTransfer.selector;\\n    rrc[1].funcSelectors[4] = IAssetERC20.tokenTransferFrom.selector;\\n    rrc[1].funcSelectors[5] = IAssetERC20.tokenBatchTransferFrom.selector;\\n    rrc[1].funcSelectors[6] = IAssetERC20.tokenApprove.selector;\\n    rrc[1].funcSelectors[7] = IAssetERC20.tokenIncreaseAllowance.selector;\\n    rrc[1].funcSelectors[8] = IAssetERC20.tokenDecreaseAllowance.selector;\\n    rrc[1].funcSelectors[9] = this.withdrawBalance.selector;\\n\\n    IContextManagement.RequestPredictContext memory rpc = IContextManagement.RequestPredictContext({\\n      name: domainName,\\n      version: domainVersion,\\n      realm: realm,\\n      salt: salt,\\n      subject: subject, \\n      deployer: deployer,\\n      status: true\\n    });\\n\\n    return (rpc, rrc);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IAssetEntity).interfaceId ||\\n      interfaceId == type(IAssetERC20).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function tokenLock(IERC20Lock.LockTokenRequest calldata lockRequest) external returns (bytes32) {\\n    _policyInterceptor(this.tokenLock.selector);\\n    require(lockRequest.source == address(this), \\\"Illegal Source Addres\\\");\\n\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenLock.selector);\\n    return IERC20Lock(_erc20Token).lockToken(lockRequest);\\n  }\\n\\n  function tokenBatchLock(IERC20Lock.LockTokenRequest[] calldata lockRequests) external returns (bytes32[] memory) {\\n    _policyInterceptor(this.tokenBatchLock.selector);\\n    for(uint i = 0; i < lockRequests.length; i++) {\\n      require(lockRequests[i].source == address(this), \\\"Illegal Source Addres\\\");\\n    }\\n\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenBatchLock.selector);  \\n    return IERC20Lock(_erc20Token).batchLockToken(lockRequests);\\n  }\\n\\n  function tokenTransfer(address to, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.tokenTransfer.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenTransfer.selector);\\n    return IERC20(_erc20Token).transfer(to, amount);\\n  }\\n\\n  function tokenBatchTransfer(IERC20Extra.BatchTransferRequest[] calldata request) external returns (bool) {\\n    _policyInterceptor(this.tokenBatchTransfer.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenBatchTransfer.selector);\\n    return IERC20Extra(_erc20Token).batchTransfer(request);\\n  }\\n\\n  function tokenTransferFrom(address from, address to, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.tokenTransferFrom.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenTransferFrom.selector);\\n    return IERC20(_erc20Token).transferFrom(from, to, amount);\\n  }\\n\\n  function tokenBatchTransferFrom(IERC20Extra.BatchTransferFromRequest[] calldata request) external returns (bool) {\\n    _policyInterceptor(this.tokenBatchTransferFrom.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenBatchTransferFrom.selector);\\n    return IERC20Extra(_erc20Token).batchTransferFrom(request);\\n  }\\n\\n  function tokenApprove(address spender, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.tokenApprove.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenApprove.selector);\\n    return IERC20(_erc20Token).approve(spender, amount);\\n  }\\n\\n  function tokenIncreaseAllowance(address spender, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.tokenIncreaseAllowance.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenIncreaseAllowance.selector);\\n    return IERC20Extra(_erc20Token).increaseAllowance(spender, amount);\\n  }\\n\\n  function tokenDecreaseAllowance(address spender, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.tokenDecreaseAllowance.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenDecreaseAllowance.selector);\\n    return IERC20Extra(_erc20Token).decreaseAllowance(spender, amount);\\n  }\\n\\n  function assetSafeModeSet(bool status) override public returns (bool) {\\n    require(IAccessControl(_accessControlManager).hasAccess(LContextUtils.generateCtx(address(this)),_msgSender(),this.assetSafeModeSet.selector), \\\"AssetERC20 Access Denied\\\");\\n    require(_getInitializedCount() > 0, \\\"AssetERC20 Not Initialized\\\");\\n    _isSafeMode = status;    \\n    emit AssetSafeModeChanged(_msgSender(), address(this), _domainRealm, status);\\n    return status;  \\n  }\\n\\n  function withdrawBalance(address recepient) public {\\n    _policyInterceptor(this.withdrawBalance.selector);\\n    payable(recepient).transfer(address(this).balance);\\n  }\\n\\n  function assetSafeMode() external view returns (bool) {\\n    return _isSafeMode;\\n  }\\n\\n  function assetType() external pure returns (AssetType) {\\n    return AssetType.ERC20;\\n  }\\n\\n  function assetToken() external view returns (address) {\\n    return _erc20Token;\\n  }\\n\\n  function assetName() external view returns (bytes32) {\\n    return _domainName;\\n  }\\n\\n  function assetVersion() external view returns (bytes32) {\\n    return _domainVersion;\\n  }\\n\\n  function assetRealm() external view returns (bytes32) {\\n    return _domainRealm;\\n  }\\n\\n  function assetRole() external view returns (bytes32) {\\n    return _assetRole;\\n  }\\n\\n   function assetAcl() external view returns (address) {\\n    return _accessControlManager;\\n   }\\n\\n  function assetInitVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable {}\\n\\n  function tokenBalance() external view returns (uint256) {\\n    return IERC20(_erc20Token).balanceOf(address(this));\\n  }\\n\\n  function assetBalance() external view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  function _policyInterceptor(bytes4 funcSelector) private view {\\n    require(!_isSafeMode, \\\"SafeMode: AssetERC20 Call Rejected\\\");\\n    require(IAccessControl(_accessControlManager).hasAccess(LContextUtils.generateCtx(address(this)),_msgSender(),funcSelector), \\\"AssetERC20 Access Denied\\\");\\n  }\\n\\n}\",\"keccak256\":\"0xbd8deb6d49e81a3b9865e7dc7758433201711e3aead062cf2158566b9744d031\",\"license\":\"MIT\"},\"src/contracts/token/asset/ERC20/IAssetERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../lively/IERC20Extra.sol\\\";\\nimport \\\"../../lively/IERC20Lock.sol\\\";\\n\\ninterface IAssetERC20 {\\n\\n  event AssetERC20Called(address indexed sender, address indexed assetId, bytes4 indexed functionSelector);\\n\\n  function tokenLock(IERC20Lock.LockTokenRequest calldata lockRequest) external returns (bytes32);\\n\\n  function tokenBatchLock(IERC20Lock.LockTokenRequest[] calldata lockRequests) external returns (bytes32[] memory);\\n\\n  function tokenTransfer(address to, uint256 amount) external returns (bool);\\n\\n  function tokenBatchTransfer(IERC20Extra.BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function tokenTransferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n  function tokenBatchTransferFrom(IERC20Extra.BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function tokenApprove(address spender, uint256 amount) external returns (bool);\\n\\n  function tokenIncreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function tokenDecreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function tokenBalance() external view returns (uint256); \\n\\n  function assetBalance() external view returns (uint256); \\n}\",\"keccak256\":\"0xe7321bb2c672276566569647e6128a3053883a6c8f4f86905ebb15b1bfeb9b16\",\"license\":\"MIT\"},\"src/contracts/token/asset/IAssetEntity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAssetEntity {\\n\\n  enum Status {\\n    NONE,\\n    ACTIVE,\\n    SAFE_MODE\\n  }\\n\\n  enum AssetType {\\n    NONE,\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n  }\\n\\n  event AssetInitialized(\\n    address indexed sender,\\n    address indexed assetId,\\n    address indexed tokenId,\\n    address assetManager,\\n    address assetSubject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    bytes32 role\\n  );\\n  \\n  event AssetSafeModeChanged(address indexed sender, address indexed assetId, bytes32 indexed realm, bool status);\\n\\n  function assetSafeModeSet(bool status) external returns (bool);\\n\\n  function assetSafeMode() external view returns (bool);\\n\\n  function assetType() external view returns (AssetType);\\n\\n  function assetToken() external view returns (address);\\n\\n  function assetName() external view returns (bytes32);\\n\\n  function assetVersion() external view returns (bytes32);\\n\\n  function assetRealm() external view returns (bytes32);\\n\\n  function assetRole() external view returns (bytes32);\\n\\n  function assetAcl() external view returns (address);\\n\\n  function assetInitVersion() external view returns (uint16);\\n}\",\"keccak256\":\"0x5bdbbd9e7eabcce9c556b4afb4ac4c99eacf279d965373ad399ecf7fc18fd808\",\"license\":\"MIT\"},\"src/contracts/token/asset/IAssetManagerERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../lively/IERC20Extra.sol\\\";\\nimport \\\"../lively/IERC20Lock.sol\\\";\\nimport \\\"./IAssetEntity.sol\\\";\\n\\ninterface IAssetManagerERC20 {\\n\\n  struct CreateAssetRequest {\\n    bytes32 role; \\n    bytes32 salt;\\n    address tokenId; \\n    string assetName; \\n    string assetVersion;     \\n  }\\n\\n  event AssetSubjectUpdated(address indexed sender, address indexed assetSubject);\\n\\n  event TokenRegistered(address indexed sender, address indexed tokenId, string tokenName, string tokenSymbol);\\n  \\n  event AssetCreated(address indexed sender, address indexed assetId, address indexed tokenId, address assetSubject);\\n\\n  event AssetRegistered(address indexed sender, address indexed assetId, address indexed tokenId);\\n\\n  event AssetRemoved(address indexed sender, address indexed assetId, address indexed tokenId);\\n  \\n  event TokenSafeModeChanged(address indexed sender, address indexed tokenId, bool isEnabled);\\n\\n  function createAsset(CreateAssetRequest calldata request) external returns (address);\\n\\n  function updateAssetSubject(address assetSubject, bytes calldata assetCreationSignature) external returns (bool);\\n\\n  function registerToken(address tokenId) external returns (bool);\\n\\n  function registerAsset(address assetId) external returns (bool);\\n\\n  function removeAsset(address assetId) external returns (bool);\\n\\n  function setSafeModeToken(address tokenId, bool isEnabled) external returns (bool);\\n\\n  function tokenLock(address assetId, IERC20Lock.LockTokenRequest calldata lockRequest) external returns (bytes32);\\n\\n  function tokenBatchLock(address assetId, IERC20Lock.LockTokenRequest[] calldata lockRequests) external returns (bytes32[] memory);\\n\\n  function tokenTransfer(address assetId, address to, uint256 amount) external returns (bool);\\n\\n  function tokenBatchTransfer(address assetId, IERC20Extra.BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function tokenTransferFrom(address assetId, address from, address to, uint256 amount) external returns (bool);\\n\\n  function tokenBatchTransferFrom(address assetId, IERC20Extra.BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function tokenApprove(address assetId, address spender, uint256 amount) external returns (bool);\\n\\n  function tokenIncreaseAllowance(address assetId, address spender, uint256 amount) external returns (uint256);\\n\\n  function tokenDecreaseAllowance(address assetId, address spender, uint256 amount) external returns (uint256);\\n\\n  function getAllTokens() external view returns(address[] memory);\\n\\n  function getTokenInfo(address tokenId) external view returns (IAssetEntity.Status, address[] memory);\\n\\n  function isAssetExists(address assetId) external view returns (bool);\\n\\n  function isTokenExists(address tokenId) external view returns (bool);\\n\\n  function getAssetSubject() external view returns (address);\\n\\n  function predictAddress(address implementation, bytes32 salt, address deployer) external view returns (address);\\n}\",\"keccak256\":\"0x2db21dafc5684ef6137735295311169ba4aeb3c1dc6029a3d95eb6aefc8b41b7\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4eb0307590f721f5944b1237ca63905ee5d0a495b0ba26f18a61a25568259ca0\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Extra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERC20Extra {\\n  struct BatchTransferRequest {\\n    address to;\\n    uint256 amount;\\n  }\\n\\n  struct BatchTransferFromRequest {\\n    address from;\\n    address to;\\n    uint256 amount;\\n  }\\n\\n  struct BatchUpdateTaxWhitelistRequest {\\n    address account;\\n    bool isDeleted;\\n  }\\n\\n  event ApprovalIncreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event ApprovalDecreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event TransferFrom(address indexed sender, address indexed from, address indexed to, uint256 amount);\\n\\n  event BatchTransfer(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTransferFrom(address indexed sender, uint256 totalAmount);\\n\\n  event TaxRateUpdated(address indexed sender, uint256 rate);\\n\\n  event TaxWhitelistUpdated(address indexed sender, address indexed account, bool isDeleted);\\n\\n  event Burn(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  event Mint(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  function increaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function decreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function burn(address account, uint256 amount) external returns (uint256);\\n\\n  function mint(address account, uint256 amount) external returns (uint256);\\n\\n  function batchTransfer(BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function batchTransferFrom(BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function updateTaxRate(uint256 taxRate) external returns (bool);\\n\\n  function updateTaxWhitelist(address account, bool isDeleted) external returns (bool);\\n\\n  function batchUpdateTaxWhitelist(BatchUpdateTaxWhitelistRequest[] calldata request) external;\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    bytes calldata signature\\n  ) external returns (bool);\\n\\n  function taxRate() external view returns (uint256);\\n\\n  function taxTreasury() external view returns (address);\\n\\n  function taxWhitelist() external view returns (address[] memory);\\n\\n  function nonce(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbb59e24c40eb21a277d7af836ce202f1a61c5ffc0223f15dbc73a89565b72f2c\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERC20Lock {\\n\\n  struct LockTokenRequest {\\n    address source;\\n    address dest;\\n    uint256 timestamp;\\n    uint256 amount;\\n  }\\n\\n  struct UnLockTokenRequest {\\n    bytes32 lockId;\\n    address account;\\n    string reason;\\n  }\\n\\n  event TokenLocked(bytes32 indexed id, address indexed sender, address indexed src, address account, uint256 timestamp, uint256 amount);\\n\\n  event TokenClaimed(bytes32 indexed id, address indexed sender, address indexed src, uint256 amount);\\n\\n  event TokenUnlocked(bytes32 indexed id, address indexed sender, address indexed account, address dest, uint256 amount, string reason);\\n\\n  event BatchTokenClaimed(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTokenUnlocked(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTokenLocked(address indexed sender, uint256 totalAmount);\\n\\n  function lockToken(LockTokenRequest calldata lockRequest) external returns (bytes32);\\n\\n  function batchLockToken(LockTokenRequest[] calldata lockRequest) external returns (bytes32[] memory);\\n\\n  function unlockToken(UnLockTokenRequest calldata unlockRequest) external returns (uint256);\\n\\n  function batchUnlockToken(UnLockTokenRequest[] calldata unlockRequest) external returns (uint256);\\n\\n  function claimToken(bytes32 lockId) external returns (uint256);\\n\\n  function batchClaimToken(bytes32[] calldata lockIds) external returns (uint256);\\n\\n  function lockInfo(bytes32 lockId, address account) external view returns (uint256, uint128, uint128, address, uint8);\\n\\n  function totalBalanceOf(address account) external view returns (uint256);\\n\\n  function lockBalanceOf(address account) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0x2764455aaa3a143ac77bb473819c6bfdecd278f40a6bee8492a91d59a3e0f051\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xe50c06dcb5dd747db00a5fe5c5e9561408d8b334609990bf331902d87ee7fd07\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1a29e5e4f28e3c4116c0e31faa26fab4960723dd167b122ed9fc12b04753d1a8\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xd7f32a98cfe501a9cf4367741613707a55b5201aac314bd36c63af9733b3df72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61283c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c8063a619675711610096578063bec9475111610070578063bec947511461023a578063c79fd49b14610242578063d8b3199914610272578063ef34f2911461027a57600080fd5b8063a6196757146101cc578063b5ea87b9146101d4578063bbb9b43d1461020257600080fd5b80634c95d60d116100d25780634c95d60d1461015c5780635632ffd8146101645780638946f5e81461016c57806397ca328d146101ab57600080fd5b806308d9f7e3146100f95780632466209b1461013e57806336206f0414610154575b600080fd5b81801561010557600080fd5b506101196101143660046121da565b61028d565b604080516001600160a01b039384168152929091166020830152015b60405180910390f35b6101466107f4565b604051908152602001610135565b610146610822565b61014661084d565b610146610873565b81801561017857600080fd5b5061018c6101873660046122ab565b61089f565b6040805192151583526001600160a01b03909116602083015201610135565b6101be6101b93660046122db565b610cc4565b604051610135929190612307565b6101466116f2565b8180156101e057600080fd5b506101f46101ef3660046122ab565b611723565b604051610135929190612449565b81801561020e57600080fd5b5061022261021d3660046122ab565b611b57565b6040516001600160a01b039091168152602001610135565b610146611d82565b81801561024e57600080fd5b5061026261025d366004612485565b611da8565b6040519015158152602001610135565b610146611ea3565b6102226102883660046124c7565b611ec8565b6000808061029e60608901896124fe565b9050116102e75760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204173736574204e616d6560701b60448201526064015b60405180910390fd5b60006102f660808901896124fe565b90501161033d5760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b21020b9b9b2ba102b32b939b4b7b760591b60448201526064016102de565b600061034f6060890160408a01612545565b6001600160a01b0316036103a55760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420546f6b656e4964204164647265737300000000000000000060448201526064016102de565b6001600160a01b0385166103fb5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964204173736574205375626a656374204552433230000000000060448201526064016102de565b61041861040e6060890160408a01612545565b60018a0190611ee6565b6104345760405162461bcd60e51b81526004016102de90612562565b6040517104c4956454c595f41535345545f47524f55560741b602082015260009060320160408051808303601f19018152908290528051602090910120637a89164960e11b8252600482018190528935602483015291506001600160a01b0388169063f5122c9290604401602060405180830381865afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e0919061258d565b6105235760405162461bcd60e51b8152602060048201526014602482015273105cdcd95d08149bdb1948139bdd08119bdd5b9960621b60448201526064016102de565b6000898161053760608c0160408d01612545565b6001600160a01b03166001600160a01b03168152602001908152602001600020905061058361057c8a60200135896001600160a01b0316611f0b90919063ffffffff16565b8290611ee6565b156105c95760405162461bcd60e51b81526020600482015260166024820152754173736574496420416c72656164792045786973747360501b60448201526064016102de565b6000604051806101400160405280306001600160a01b031663d3e024b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063991906125aa565b81526020018b6000013581526020018b602001358152602001896001600160a01b031681526020018b60400160208101906106749190612545565b6001600160a01b0390811682528b1660208201523060408201526060908101906106a0908d018d6124fe565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016106e760808d018d6124fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a908190840183828082843760009201829052509390945250929350915061077590506001600160a01b038a1660208d0135611f18565b604051622e737160e91b81529091506001600160a01b03821690635ce6e200906107a39085906004016125c3565b600060405180830381600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b506107e29250859150839050611fb8565b509b979a509698505050505050505050565b604051640312e302e360dc1b60208201526025015b6040516020818303038152906040528051906020012081565b604051764c4956454c595f41535345545f41444d494e5f524f4c4560481b6020820152603701610809565b6040517104c4956454c595f41535345545f47524f55560741b6020820152603201610809565b604051774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b6020820152603801610809565b6000806001600160a01b0383166108f25760405162461bcd60e51b8152602060048201526017602482015276496e76616c69642041737365744964204164647265737360481b60448201526064016102de565b6040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906109259063391f033d60e11b906004016126a3565b602060405180830381865afa92505050801561095e575060408051601f3d908101601f1916820190925261095b9181019061258d565b60015b6109a05760405162461bcd60e51b81526020600482015260136024820152720496c6c6567616c20494173736574455243323606c1b60448201526064016102de565b806109e35760405162461bcd60e51b81526020600482015260136024820152720496e76616c696420494173736574455243323606c1b60448201526064016102de565b506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a790610a1790639673b47d60e01b906004016126a3565b602060405180830381865afa925050508015610a50575060408051601f3d908101601f19168201909252610a4d9181019061258d565b60015b610a935760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20494173736574456e7469747960601b60448201526064016102de565b80610ad75760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420494173736574456e7469747960601b60448201526064016102de565b506000836001600160a01b0316631083f7616040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3c91906126b8565b9050610b4b6001860182611ee6565b610b675760405162461bcd60e51b81526004016102de90612562565b6001600160a01b0381166000908152602086905260409020610b898186611ee6565b15610bd65760405162461bcd60e51b815260206004820152601a60248201527f4173736574496420416c7265616479205265676973746572656400000000000060448201526064016102de565b610be08186611fb8565b50846001600160a01b0316634cfb99496040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c43919061258d565b15610cb557604051636de16c2960e11b8152600060048201526001600160a01b0386169063dbc2d852906024016020604051808303816000875af1158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb3919061258d565b505b506001925090505b9250929050565b6040805160a081018252600080825260208201819052818301819052606080830182905260808084018390528451600380825291810190955292939092816020015b60408051606080820183526000808352602083019190915291810191909152815260200190600190039081610d0657905050604051704c4956454c595f41444d494e5f524f4c4560781b60208201529091506031016040516020818303038152906040528051906020012081600081518110610d8457610d846126eb565b60200260200101516000018181525050600181600081518110610da957610da96126eb565b60209081029190910101519015156040918201528051600280825260608201909252908160200160208202803683370190505081600081518110610def57610def6126eb565b6020026020010151602001819052506348e6be1c60e01b81600081518110610e1957610e196126eb565b602002602001015160200151600081518110610e3757610e376126eb565b6001600160e01b031990921660209283029190910190910152805163225bf2f960e11b908290600090610e6c57610e6c6126eb565b602002602001015160200151600181518110610e8a57610e8a6126eb565b6001600160e01b0319909216602092830291909101820152604051610ece9101774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b815260180190565b6040516020818303038152906040528051906020012081600181518110610ef757610ef76126eb565b60200260200101516000018181525050600181600181518110610f1c57610f1c6126eb565b60209081029190910101519015156040918201528051600280825260608201909252908160200160208202803683370190505081600181518110610f6257610f626126eb565b60200260200101516020018190525063d9dc1f1960e01b81600181518110610f8c57610f8c6126eb565b602002602001015160200151600081518110610faa57610faa6126eb565b6001600160e01b0319909216602092830291909101909101528051637147855d60e01b9082906001908110610fe157610fe16126eb565b602002602001015160200151600181518110610fff57610fff6126eb565b6001600160e01b03199092166020928302919091018201526040516110429101764c4956454c595f41535345545f41444d494e5f524f4c4560481b815260170190565b604051602081830303815290604052805190602001208160028151811061106b5761106b6126eb565b60200260200101516000018181525050600181600281518110611090576110906126eb565b602090810291909101810151911515604092830152815160118082526102408201909352919082016102208036833701905050816002815181106110d6576110d66126eb565b602002602001015160200181905250630bb0ccaa60e01b81600281518110611100576111006126eb565b60200260200101516020015160008151811061111e5761111e6126eb565b6001600160e01b0319909216602092830291909101909101528051633d04ca0f60e11b9082906002908110611155576111556126eb565b602002602001015160200151600181518110611173576111736126eb565b6001600160e01b03199092166020928302919091019091015280516315eaef6b60e01b90829060029081106111aa576111aa6126eb565b6020026020010151602001516002815181106111c8576111c86126eb565b6001600160e01b031990921660209283029190910190910152805163622110e160e01b90829060029081106111ff576111ff6126eb565b60200260200101516020015160038151811061121d5761121d6126eb565b6001600160e01b031990921660209283029190910190910152805163f3913e6960e01b9082906002908110611254576112546126eb565b602002602001015160200151600481518110611272576112726126eb565b6001600160e01b0319909216602092830291909101909101528051632b2df8fd60e11b90829060029081106112a9576112a96126eb565b6020026020010151602001516005815181106112c7576112c76126eb565b6001600160e01b031990921660209283029190910190910152805163fb3f4d2960e01b90829060029081106112fe576112fe6126eb565b60200260200101516020015160068151811061131c5761131c6126eb565b6001600160e01b0319909216602092830291909101909101528051631bdc562760e01b9082906002908110611353576113536126eb565b602002602001015160200151600781518110611371576113716126eb565b6001600160e01b031990921660209283029190910190910152805163061234a960e31b90829060029081106113a8576113a86126eb565b6020026020010151602001516008815181106113c6576113c66126eb565b6001600160e01b031990921660209283029190910190910152805163b484c88960e01b90829060029081106113fd576113fd6126eb565b60200260200101516020015160098151811061141b5761141b6126eb565b6001600160e01b0319909216602092830291909101909101528051631b87323d60e01b9082906002908110611452576114526126eb565b602002602001015160200151600a81518110611470576114706126eb565b6001600160e01b03199092166020928302919091019091015280516213049560e71b90829060029081106114a6576114a66126eb565b602002602001015160200151600b815181106114c4576114c46126eb565b6001600160e01b031990921660209283029190910190910152805163d312998f60e01b90829060029081106114fb576114fb6126eb565b602002602001015160200151600c81518110611519576115196126eb565b6001600160e01b0319909216602092830291909101909101528051634a5e42b160e01b9082906002908110611550576115506126eb565b602002602001015160200151600d8151811061156e5761156e6126eb565b6001600160e01b0319909216602092830291909101909101528051631b9e297d60e11b90829060029081106115a5576115a56126eb565b602002602001015160200151600e815181106115c3576115c36126eb565b60200260200101906001600160e01b03191690816001600160e01b031916815250507fff4d8e4a6676b66ec3d51278d23acf6cc5ac8608a2959108363c954c9f195a0381600281518110611619576116196126eb565b602002602001015160200151600f81518110611637576116376126eb565b60200260200101906001600160e01b03191690816001600160e01b031916815250507f756af45f4ce05d832bee0c171992c529ad6d3ca8e13303d78feace2f8fd7faf28160028151811061168d5761168d6126eb565b6020026020010151602001516010815181106116ab576116ab6126eb565b6001600160e01b0319929092166020928302919091018201526040805160a08101825297885290870195909552938501929092525050306060830152600160808301529091565b6040517f4c4956454c595f41535345545f4d414e414745525f524f4c45000000000000006020820152603901610809565b6060806117336001850184611ee6565b156117805760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e496420416c7265616479205265676973746572656400000000000060448201526064016102de565b6040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906117b390634a17459160e11b906004016126a3565b602060405180830381865afa9250505080156117ec575060408051601f3d908101601f191682019092526117e99181019061258d565b60015b6118285760405162461bcd60e51b815260206004820152600d60248201526c0496c6c6567616c20455243323609c1b60448201526064016102de565b806118655760405162461bcd60e51b815260206004820152600d60248201526c0496e76616c696420455243323609c1b60448201526064016102de565b506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906118999063e3a31a9d60e01b906004016126a3565b602060405180830381865afa9250505080156118d2575060408051601f3d908101601f191682019092526118cf9181019061258d565b60015b6119135760405162461bcd60e51b8152602060048201526012602482015271496c6c6567616c204552433230457874726160701b60448201526064016102de565b806119555760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204552433230457874726160701b60448201526064016102de565b506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a79061198890627b720760e91b906004016126a3565b602060405180830381865afa9250505080156119c1575060408051601f3d908101601f191682019092526119be9181019061258d565b60015b611a015760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c2045524332304c6f636b60781b60448201526064016102de565b80611a425760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642045524332304c6f636b60781b60448201526064016102de565b506000836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a83573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aab9190810190612701565b90506000846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611aed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b159190810190612701565b9050611b246001870186611fb8565b506001600160a01b039490941660009081526020959095526040909420600201805460ff19166001179055509192909150565b60006001600160a01b038216611ba95760405162461bcd60e51b8152602060048201526017602482015276496e76616c69642041737365744964204164647265737360481b60448201526064016102de565b6000826001600160a01b0316631083f7616040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d91906126b8565b9050611c1c6001850182611ee6565b611c385760405162461bcd60e51b81526004016102de90612562565b6001600160a01b0381166000908152602085905260409020611c5a8185611ee6565b611c9a5760405162461bcd60e51b8152602060048201526011602482015270105cdcd95d125908139bdd08119bdd5b99607a1b60448201526064016102de565b611ca48185611fcd565b50836001600160a01b0316634cfb99496040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d07919061258d565b611d7857604051636de16c2960e11b8152600160048201526001600160a01b0385169063dbc2d852906024016020604051808303816000875af1158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d76919061258d565b505b5090505b92915050565b6040517104c41737365744d616e6167657245524332360741b6020820152603201610809565b6000611db76001850184611ee6565b611dd35760405162461bcd60e51b81526004016102de90612562565b6001600160a01b0383166000908152602085905260408120905b611df682611fe2565b811015611e8857611e078282611fec565b604051636de16c2960e11b815285151560048201526001600160a01b03919091169063dbc2d852906024016020604051808303816000875af1158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e75919061258d565b5080611e80816127c4565b915050611ded565b506002908101805460ff191690911790555060019392505050565b604051704c4956454c595f41444d494e5f524f4c4560781b6020820152603101610809565b6000611ede6001600160a01b0385168484611ff8565b949350505050565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000611f04838330611ff8565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b038116611d7c5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016102de565b6000611f04836001600160a01b038416612056565b6000611f04836001600160a01b0384166120a5565b6000611d7c825490565b6000611f048383612198565b604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b600081815260018301602052604081205461209d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611d7c565b506000611d7c565b6000818152600183016020526040812054801561218e5760006120c96001836127dd565b85549091506000906120dd906001906127dd565b90508181146121425760008660000182815481106120fd576120fd6126eb565b9060005260206000200154905080876000018481548110612120576121206126eb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612153576121536127f0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611d7c565b6000915050611d7c565b60008260000182815481106121af576121af6126eb565b9060005260206000200154905092915050565b6001600160a01b03811681146121d757600080fd5b50565b60008060008060008060a087890312156121f357600080fd5b86359550602087013567ffffffffffffffff8082111561221257600080fd5b9088019060a0828b03121561222657600080fd5b909550604088013590612238826121c2565b90945060608801359061224a826121c2565b9093506080880135908082111561226057600080fd5b818901915089601f83011261227457600080fd5b81358181111561228357600080fd5b8a602082850101111561229557600080fd5b6020830194508093505050509295509295509295565b600080604083850312156122be57600080fd5b8235915060208301356122d0816121c2565b809150509250929050565b6000806000606084860312156122f057600080fd5b505081359360208301359350604090920135919050565b600060c08201845183526020808601518185015260408087015181860152606060018060a01b0381890151168187015260808089015115158188015260c060a088015284885180875260e08901915060e08160051b8a01019650858a016000805b838110156123e7578b8a0360df19018552825180518b52898101518a8c018990528051898d01819052908b01908490898e01905b808310156123c65783516001600160e01b0319168252928d019260019290920191908d019061239c565b50928b015115159c8b019c909c525099509388019391880191600101612368565b50979c9b505050505050505050505050565b60005b838110156124145781810151838201526020016123fc565b50506000910152565b600081518084526124358160208601602086016123f9565b601f01601f19169290920160200192915050565b60408152600061245c604083018561241d565b828103602084015261246e818561241d565b95945050505050565b80151581146121d757600080fd5b60008060006060848603121561249a57600080fd5b8335925060208401356124ac816121c2565b915060408401356124bc81612477565b809150509250925092565b6000806000606084860312156124dc57600080fd5b83356124e7816121c2565b92506020840135915060408401356124bc816121c2565b6000808335601e1984360301811261251557600080fd5b83018035915067ffffffffffffffff82111561253057600080fd5b602001915036819003821315610cbd57600080fd5b60006020828403121561255757600080fd5b8135611f04816121c2565b602080825260119082015270151bdad95b925908139bdd08119bdd5b99607a1b604082015260600190565b60006020828403121561259f57600080fd5b8151611f0481612477565b6000602082840312156125bc57600080fd5b5051919050565b60208152815160208201526020820151604082015260408201516060820152600060608301516125fe60808401826001600160a01b03169052565b5060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e0830151610140610100818186015261265c61016086018461241d565b9250808601519050601f1961012081878603018188015261267d858461241d565b908801518782039092018488015293509050612699838261241d565b9695505050505050565b6001600160e01b031991909116815260200190565b6000602082840312156126ca57600080fd5b8151611f04816121c2565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561271357600080fd5b815167ffffffffffffffff8082111561272b57600080fd5b818401915084601f83011261273f57600080fd5b815181811115612751576127516126d5565b604051601f8201601f19908116603f01168101908382118183101715612779576127796126d5565b8160405282815287602084870101111561279257600080fd5b6127a38360208301602088016123f9565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016127d6576127d66127ae565b5060010190565b81810381811115611d7c57611d7c6127ae565b634e487b7160e01b600052603160045260246000fdfea264697066735822122080a9bafcc183c4a14e0a918f9d7518dfc4c9bf6f19bb71722664dfc5d6cb580f64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c8063a619675711610096578063bec9475111610070578063bec947511461023a578063c79fd49b14610242578063d8b3199914610272578063ef34f2911461027a57600080fd5b8063a6196757146101cc578063b5ea87b9146101d4578063bbb9b43d1461020257600080fd5b80634c95d60d116100d25780634c95d60d1461015c5780635632ffd8146101645780638946f5e81461016c57806397ca328d146101ab57600080fd5b806308d9f7e3146100f95780632466209b1461013e57806336206f0414610154575b600080fd5b81801561010557600080fd5b506101196101143660046121da565b61028d565b604080516001600160a01b039384168152929091166020830152015b60405180910390f35b6101466107f4565b604051908152602001610135565b610146610822565b61014661084d565b610146610873565b81801561017857600080fd5b5061018c6101873660046122ab565b61089f565b6040805192151583526001600160a01b03909116602083015201610135565b6101be6101b93660046122db565b610cc4565b604051610135929190612307565b6101466116f2565b8180156101e057600080fd5b506101f46101ef3660046122ab565b611723565b604051610135929190612449565b81801561020e57600080fd5b5061022261021d3660046122ab565b611b57565b6040516001600160a01b039091168152602001610135565b610146611d82565b81801561024e57600080fd5b5061026261025d366004612485565b611da8565b6040519015158152602001610135565b610146611ea3565b6102226102883660046124c7565b611ec8565b6000808061029e60608901896124fe565b9050116102e75760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204173736574204e616d6560701b60448201526064015b60405180910390fd5b60006102f660808901896124fe565b90501161033d5760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b21020b9b9b2ba102b32b939b4b7b760591b60448201526064016102de565b600061034f6060890160408a01612545565b6001600160a01b0316036103a55760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420546f6b656e4964204164647265737300000000000000000060448201526064016102de565b6001600160a01b0385166103fb5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964204173736574205375626a656374204552433230000000000060448201526064016102de565b61041861040e6060890160408a01612545565b60018a0190611ee6565b6104345760405162461bcd60e51b81526004016102de90612562565b6040517104c4956454c595f41535345545f47524f55560741b602082015260009060320160408051808303601f19018152908290528051602090910120637a89164960e11b8252600482018190528935602483015291506001600160a01b0388169063f5122c9290604401602060405180830381865afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e0919061258d565b6105235760405162461bcd60e51b8152602060048201526014602482015273105cdcd95d08149bdb1948139bdd08119bdd5b9960621b60448201526064016102de565b6000898161053760608c0160408d01612545565b6001600160a01b03166001600160a01b03168152602001908152602001600020905061058361057c8a60200135896001600160a01b0316611f0b90919063ffffffff16565b8290611ee6565b156105c95760405162461bcd60e51b81526020600482015260166024820152754173736574496420416c72656164792045786973747360501b60448201526064016102de565b6000604051806101400160405280306001600160a01b031663d3e024b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063991906125aa565b81526020018b6000013581526020018b602001358152602001896001600160a01b031681526020018b60400160208101906106749190612545565b6001600160a01b0390811682528b1660208201523060408201526060908101906106a0908d018d6124fe565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016106e760808d018d6124fe565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a908190840183828082843760009201829052509390945250929350915061077590506001600160a01b038a1660208d0135611f18565b604051622e737160e91b81529091506001600160a01b03821690635ce6e200906107a39085906004016125c3565b600060405180830381600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b506107e29250859150839050611fb8565b509b979a509698505050505050505050565b604051640312e302e360dc1b60208201526025015b6040516020818303038152906040528051906020012081565b604051764c4956454c595f41535345545f41444d494e5f524f4c4560481b6020820152603701610809565b6040517104c4956454c595f41535345545f47524f55560741b6020820152603201610809565b604051774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b6020820152603801610809565b6000806001600160a01b0383166108f25760405162461bcd60e51b8152602060048201526017602482015276496e76616c69642041737365744964204164647265737360481b60448201526064016102de565b6040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906109259063391f033d60e11b906004016126a3565b602060405180830381865afa92505050801561095e575060408051601f3d908101601f1916820190925261095b9181019061258d565b60015b6109a05760405162461bcd60e51b81526020600482015260136024820152720496c6c6567616c20494173736574455243323606c1b60448201526064016102de565b806109e35760405162461bcd60e51b81526020600482015260136024820152720496e76616c696420494173736574455243323606c1b60448201526064016102de565b506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a790610a1790639673b47d60e01b906004016126a3565b602060405180830381865afa925050508015610a50575060408051601f3d908101601f19168201909252610a4d9181019061258d565b60015b610a935760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20494173736574456e7469747960601b60448201526064016102de565b80610ad75760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420494173736574456e7469747960601b60448201526064016102de565b506000836001600160a01b0316631083f7616040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3c91906126b8565b9050610b4b6001860182611ee6565b610b675760405162461bcd60e51b81526004016102de90612562565b6001600160a01b0381166000908152602086905260409020610b898186611ee6565b15610bd65760405162461bcd60e51b815260206004820152601a60248201527f4173736574496420416c7265616479205265676973746572656400000000000060448201526064016102de565b610be08186611fb8565b50846001600160a01b0316634cfb99496040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c43919061258d565b15610cb557604051636de16c2960e11b8152600060048201526001600160a01b0386169063dbc2d852906024016020604051808303816000875af1158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb3919061258d565b505b506001925090505b9250929050565b6040805160a081018252600080825260208201819052818301819052606080830182905260808084018390528451600380825291810190955292939092816020015b60408051606080820183526000808352602083019190915291810191909152815260200190600190039081610d0657905050604051704c4956454c595f41444d494e5f524f4c4560781b60208201529091506031016040516020818303038152906040528051906020012081600081518110610d8457610d846126eb565b60200260200101516000018181525050600181600081518110610da957610da96126eb565b60209081029190910101519015156040918201528051600280825260608201909252908160200160208202803683370190505081600081518110610def57610def6126eb565b6020026020010151602001819052506348e6be1c60e01b81600081518110610e1957610e196126eb565b602002602001015160200151600081518110610e3757610e376126eb565b6001600160e01b031990921660209283029190910190910152805163225bf2f960e11b908290600090610e6c57610e6c6126eb565b602002602001015160200151600181518110610e8a57610e8a6126eb565b6001600160e01b0319909216602092830291909101820152604051610ece9101774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b815260180190565b6040516020818303038152906040528051906020012081600181518110610ef757610ef76126eb565b60200260200101516000018181525050600181600181518110610f1c57610f1c6126eb565b60209081029190910101519015156040918201528051600280825260608201909252908160200160208202803683370190505081600181518110610f6257610f626126eb565b60200260200101516020018190525063d9dc1f1960e01b81600181518110610f8c57610f8c6126eb565b602002602001015160200151600081518110610faa57610faa6126eb565b6001600160e01b0319909216602092830291909101909101528051637147855d60e01b9082906001908110610fe157610fe16126eb565b602002602001015160200151600181518110610fff57610fff6126eb565b6001600160e01b03199092166020928302919091018201526040516110429101764c4956454c595f41535345545f41444d494e5f524f4c4560481b815260170190565b604051602081830303815290604052805190602001208160028151811061106b5761106b6126eb565b60200260200101516000018181525050600181600281518110611090576110906126eb565b602090810291909101810151911515604092830152815160118082526102408201909352919082016102208036833701905050816002815181106110d6576110d66126eb565b602002602001015160200181905250630bb0ccaa60e01b81600281518110611100576111006126eb565b60200260200101516020015160008151811061111e5761111e6126eb565b6001600160e01b0319909216602092830291909101909101528051633d04ca0f60e11b9082906002908110611155576111556126eb565b602002602001015160200151600181518110611173576111736126eb565b6001600160e01b03199092166020928302919091019091015280516315eaef6b60e01b90829060029081106111aa576111aa6126eb565b6020026020010151602001516002815181106111c8576111c86126eb565b6001600160e01b031990921660209283029190910190910152805163622110e160e01b90829060029081106111ff576111ff6126eb565b60200260200101516020015160038151811061121d5761121d6126eb565b6001600160e01b031990921660209283029190910190910152805163f3913e6960e01b9082906002908110611254576112546126eb565b602002602001015160200151600481518110611272576112726126eb565b6001600160e01b0319909216602092830291909101909101528051632b2df8fd60e11b90829060029081106112a9576112a96126eb565b6020026020010151602001516005815181106112c7576112c76126eb565b6001600160e01b031990921660209283029190910190910152805163fb3f4d2960e01b90829060029081106112fe576112fe6126eb565b60200260200101516020015160068151811061131c5761131c6126eb565b6001600160e01b0319909216602092830291909101909101528051631bdc562760e01b9082906002908110611353576113536126eb565b602002602001015160200151600781518110611371576113716126eb565b6001600160e01b031990921660209283029190910190910152805163061234a960e31b90829060029081106113a8576113a86126eb565b6020026020010151602001516008815181106113c6576113c66126eb565b6001600160e01b031990921660209283029190910190910152805163b484c88960e01b90829060029081106113fd576113fd6126eb565b60200260200101516020015160098151811061141b5761141b6126eb565b6001600160e01b0319909216602092830291909101909101528051631b87323d60e01b9082906002908110611452576114526126eb565b602002602001015160200151600a81518110611470576114706126eb565b6001600160e01b03199092166020928302919091019091015280516213049560e71b90829060029081106114a6576114a66126eb565b602002602001015160200151600b815181106114c4576114c46126eb565b6001600160e01b031990921660209283029190910190910152805163d312998f60e01b90829060029081106114fb576114fb6126eb565b602002602001015160200151600c81518110611519576115196126eb565b6001600160e01b0319909216602092830291909101909101528051634a5e42b160e01b9082906002908110611550576115506126eb565b602002602001015160200151600d8151811061156e5761156e6126eb565b6001600160e01b0319909216602092830291909101909101528051631b9e297d60e11b90829060029081106115a5576115a56126eb565b602002602001015160200151600e815181106115c3576115c36126eb565b60200260200101906001600160e01b03191690816001600160e01b031916815250507fff4d8e4a6676b66ec3d51278d23acf6cc5ac8608a2959108363c954c9f195a0381600281518110611619576116196126eb565b602002602001015160200151600f81518110611637576116376126eb565b60200260200101906001600160e01b03191690816001600160e01b031916815250507f756af45f4ce05d832bee0c171992c529ad6d3ca8e13303d78feace2f8fd7faf28160028151811061168d5761168d6126eb565b6020026020010151602001516010815181106116ab576116ab6126eb565b6001600160e01b0319929092166020928302919091018201526040805160a08101825297885290870195909552938501929092525050306060830152600160808301529091565b6040517f4c4956454c595f41535345545f4d414e414745525f524f4c45000000000000006020820152603901610809565b6060806117336001850184611ee6565b156117805760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e496420416c7265616479205265676973746572656400000000000060448201526064016102de565b6040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906117b390634a17459160e11b906004016126a3565b602060405180830381865afa9250505080156117ec575060408051601f3d908101601f191682019092526117e99181019061258d565b60015b6118285760405162461bcd60e51b815260206004820152600d60248201526c0496c6c6567616c20455243323609c1b60448201526064016102de565b806118655760405162461bcd60e51b815260206004820152600d60248201526c0496e76616c696420455243323609c1b60448201526064016102de565b506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a7906118999063e3a31a9d60e01b906004016126a3565b602060405180830381865afa9250505080156118d2575060408051601f3d908101601f191682019092526118cf9181019061258d565b60015b6119135760405162461bcd60e51b8152602060048201526012602482015271496c6c6567616c204552433230457874726160701b60448201526064016102de565b806119555760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204552433230457874726160701b60448201526064016102de565b506040516301ffc9a760e01b81526001600160a01b038416906301ffc9a79061198890627b720760e91b906004016126a3565b602060405180830381865afa9250505080156119c1575060408051601f3d908101601f191682019092526119be9181019061258d565b60015b611a015760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c2045524332304c6f636b60781b60448201526064016102de565b80611a425760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642045524332304c6f636b60781b60448201526064016102de565b506000836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a83573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aab9190810190612701565b90506000846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611aed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b159190810190612701565b9050611b246001870186611fb8565b506001600160a01b039490941660009081526020959095526040909420600201805460ff19166001179055509192909150565b60006001600160a01b038216611ba95760405162461bcd60e51b8152602060048201526017602482015276496e76616c69642041737365744964204164647265737360481b60448201526064016102de565b6000826001600160a01b0316631083f7616040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d91906126b8565b9050611c1c6001850182611ee6565b611c385760405162461bcd60e51b81526004016102de90612562565b6001600160a01b0381166000908152602085905260409020611c5a8185611ee6565b611c9a5760405162461bcd60e51b8152602060048201526011602482015270105cdcd95d125908139bdd08119bdd5b99607a1b60448201526064016102de565b611ca48185611fcd565b50836001600160a01b0316634cfb99496040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d07919061258d565b611d7857604051636de16c2960e11b8152600160048201526001600160a01b0385169063dbc2d852906024016020604051808303816000875af1158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d76919061258d565b505b5090505b92915050565b6040517104c41737365744d616e6167657245524332360741b6020820152603201610809565b6000611db76001850184611ee6565b611dd35760405162461bcd60e51b81526004016102de90612562565b6001600160a01b0383166000908152602085905260408120905b611df682611fe2565b811015611e8857611e078282611fec565b604051636de16c2960e11b815285151560048201526001600160a01b03919091169063dbc2d852906024016020604051808303816000875af1158015611e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e75919061258d565b5080611e80816127c4565b915050611ded565b506002908101805460ff191690911790555060019392505050565b604051704c4956454c595f41444d494e5f524f4c4560781b6020820152603101610809565b6000611ede6001600160a01b0385168484611ff8565b949350505050565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000611f04838330611ff8565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b038116611d7c5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016102de565b6000611f04836001600160a01b038416612056565b6000611f04836001600160a01b0384166120a5565b6000611d7c825490565b6000611f048383612198565b604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b600081815260018301602052604081205461209d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611d7c565b506000611d7c565b6000818152600183016020526040812054801561218e5760006120c96001836127dd565b85549091506000906120dd906001906127dd565b90508181146121425760008660000182815481106120fd576120fd6126eb565b9060005260206000200154905080876000018481548110612120576121206126eb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612153576121536127f0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611d7c565b6000915050611d7c565b60008260000182815481106121af576121af6126eb565b9060005260206000200154905092915050565b6001600160a01b03811681146121d757600080fd5b50565b60008060008060008060a087890312156121f357600080fd5b86359550602087013567ffffffffffffffff8082111561221257600080fd5b9088019060a0828b03121561222657600080fd5b909550604088013590612238826121c2565b90945060608801359061224a826121c2565b9093506080880135908082111561226057600080fd5b818901915089601f83011261227457600080fd5b81358181111561228357600080fd5b8a602082850101111561229557600080fd5b6020830194508093505050509295509295509295565b600080604083850312156122be57600080fd5b8235915060208301356122d0816121c2565b809150509250929050565b6000806000606084860312156122f057600080fd5b505081359360208301359350604090920135919050565b600060c08201845183526020808601518185015260408087015181860152606060018060a01b0381890151168187015260808089015115158188015260c060a088015284885180875260e08901915060e08160051b8a01019650858a016000805b838110156123e7578b8a0360df19018552825180518b52898101518a8c018990528051898d01819052908b01908490898e01905b808310156123c65783516001600160e01b0319168252928d019260019290920191908d019061239c565b50928b015115159c8b019c909c525099509388019391880191600101612368565b50979c9b505050505050505050505050565b60005b838110156124145781810151838201526020016123fc565b50506000910152565b600081518084526124358160208601602086016123f9565b601f01601f19169290920160200192915050565b60408152600061245c604083018561241d565b828103602084015261246e818561241d565b95945050505050565b80151581146121d757600080fd5b60008060006060848603121561249a57600080fd5b8335925060208401356124ac816121c2565b915060408401356124bc81612477565b809150509250925092565b6000806000606084860312156124dc57600080fd5b83356124e7816121c2565b92506020840135915060408401356124bc816121c2565b6000808335601e1984360301811261251557600080fd5b83018035915067ffffffffffffffff82111561253057600080fd5b602001915036819003821315610cbd57600080fd5b60006020828403121561255757600080fd5b8135611f04816121c2565b602080825260119082015270151bdad95b925908139bdd08119bdd5b99607a1b604082015260600190565b60006020828403121561259f57600080fd5b8151611f0481612477565b6000602082840312156125bc57600080fd5b5051919050565b60208152815160208201526020820151604082015260408201516060820152600060608301516125fe60808401826001600160a01b03169052565b5060808301516001600160a01b03811660a08401525060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e0830151610140610100818186015261265c61016086018461241d565b9250808601519050601f1961012081878603018188015261267d858461241d565b908801518782039092018488015293509050612699838261241d565b9695505050505050565b6001600160e01b031991909116815260200190565b6000602082840312156126ca57600080fd5b8151611f04816121c2565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561271357600080fd5b815167ffffffffffffffff8082111561272b57600080fd5b818401915084601f83011261273f57600080fd5b815181811115612751576127516126d5565b604051601f8201601f19908116603f01168101908382118183101715612779576127796126d5565b8160405282815287602084870101111561279257600080fd5b6127a38360208301602088016123f9565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016127d6576127d66127ae565b5060010190565b81810381811115611d7c57611d7c6127ae565b634e487b7160e01b600052603160045260246000fdfea264697066735822122080a9bafcc183c4a14e0a918f9d7518dfc4c9bf6f19bb71722664dfc5d6cb580f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
