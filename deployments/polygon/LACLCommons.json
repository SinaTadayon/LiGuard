{
  "address": "0x61a74e6467B0eDd133Bf2fa08193Fc8B663D1750",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum IACL.AdminAccessStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "SetAdminForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LIB_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIB_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_ANY_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_ANONYMOUS_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_ANY_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_LIVELY_GUARD_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_LIVELY_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_MEMBER_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_POLICY_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_PROFILE_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_PROFILE_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_SCOPE_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_TYPE_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd263a0905e1da4865f87ce752f34301af228918d6510fc70d304997f1b1ba8ff",
  "receipt": {
    "to": null,
    "from": "0xCB93d383638cc7B174FE2139Dec8570521Bb8118",
    "contractAddress": "0x61a74e6467B0eDd133Bf2fa08193Fc8B663D1750",
    "transactionIndex": 57,
    "gasUsed": "4930329",
    "logsBloom": "0x
    "blockHash": "0x7864f61eafcd364af155476204db8096d50bcfc6849ca5cae345ecae44f1b20b",
    "transactionHash": "0xd263a0905e1da4865f87ce752f34301af228918d6510fc70d304997f1b1ba8ff",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 40018228,
        "transactionHash": "0xd263a0905e1da4865f87ce752f34301af228918d6510fc70d304997f1b1ba8ff",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cb93d383638cc7b174fe2139dec8570521bb8118",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x000000000000000000000000000000000000000000000000020fc4c5658649b60000000000000000000000000000000000000000000000032edcc0ba7b86e02900000000000000000000000000000000000000000000014437d69442b78517ae0000000000000000000000000000000000000000000000032cccfbf51600967300000000000000000000000000000000000000000000014439e659081d0b6164",
        "logIndex": 213,
        "blockHash": "0x7864f61eafcd364af155476204db8096d50bcfc6849ca5cae345ecae44f1b20b"
      }
    ],
    "blockNumber": 40018228,
    "cumulativeGasUsed": "13541655",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3d37f12163392c6a812b5af749abec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum IACL.AdminAccessStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"SetAdminForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LIB_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIB_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_ANY_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_ANONYMOUS_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_ANY_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_LIVELY_GUARD_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_LIVELY_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_MEMBER_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_POLICY_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_PROFILE_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_PROFILE_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_SCOPE_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_TYPE_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sina Tadayon, https://github.com/SinaTadayon\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ACL Commons Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/lib/acl/LACLCommons.sol\":\"LACLCommons\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/ACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Abstract Access Control List Storage Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract ACLStorage is BaseUUPSStorage, IACLCommons {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  struct DataCollection {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    mapping(bytes32 => ProfileEntity) profiles;\\n    mapping(address => ProfileAccount) profileAccounts;\\n    mapping(bytes4 => address) selectors;\\n    mapping(address => FacetEntity) facets;\\n    LEnumerableSet.AddressSet facetSet;\\n  }\\n\\n  bytes32 public constant CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"PredictContext(address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"MemberSignature(address account,uint256 expiredAt)\\\");\\n\\n  bytes32 public constant PROFILE_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileContext(string profile,address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfilePredictContext(string profile,address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileMemberSignature(string profile,address account,uint256 expiredAt)\\\");\\n\\n  // General Types ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SCOPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_MEMBER_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_TYPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_POLICY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_PROFILE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\"));\\n\\n  // Universe Scope ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_VERSE\\\"));\\n\\n  // General Profile Type\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n\\n  bool internal _firstInit;\\n  DataCollection internal _data;\\n  // Note: for next upgrade add new variables after this line\\n}\\n\",\"keccak256\":\"0x748ba9ee4ce4e5492afd3261bf61e8360b3f45ae3588218c1bbf90699df2065b\",\"license\":\"MIT\"},\"src/contracts/acl/IACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACL {\\n  enum AuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ACLUnauthorized();\\n  error ACLPolicyForbidden();\\n  error ACLCallForbidden();\\n  error ACLRoleScopeForbidden();\\n  error ACLMemberNotFound();\\n  error ACLRoleNotFound();\\n  error ACLTypeNotFound();\\n  error ACLFunctionNotFound();\\n  error ACLContextNotFound();\\n  error ACLRealmNotFound();\\n  error ACLDomainNotFound();\\n  error ACLMemberActivityForbidden();\\n  error ACLRoleActivityForbidden();\\n  error ACLTypeActivityForbidden();\\n  error ACLFunctionActivityForbidden();\\n  error ACLContextActivityForbidden();\\n  error ACLRealmActivityForbidden();\\n  error ACLDomainActivityForbidden();\\n  error ACLUniverseActivityForbidden();\\n\\n  error ACLActionForbidden(AuthorizationStatus);\\n\\n  enum AdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error AdminAccessNotPermitted();\\n  error AdminAccessPolicyForbidden();\\n  error AdminAccessRoleNotFound();\\n  error AdminAccessTypeNotFound();\\n  error AdminAccessFunctionNotFound();\\n  error AdminAccessRoleActivityForbidden();\\n  error AdminAccessTypeActivityForbidden();\\n\\n  error SetAdminForbidden(AdminAccessStatus);\\n\\n  function hasAccess(bytes32 functionId) external returns (AuthorizationStatus);\\n\\n  function hasMemberAccess(bytes32 functionId, bytes32 memberId) external returns (AuthorizationStatus);\\n\\n  function hasCSAccess(address contractId, bytes4 selector) external returns (AuthorizationStatus);\\n\\n  function hasAccountAccess(\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (AuthorizationStatus);\\n}\\n\",\"keccak256\":\"0x3b4bd5cd73079a4bcbc82fe3699b21fcc08fdafc964f978a9c540756302dbb2e\",\"license\":\"MIT\"},\"src/contracts/acl/IACLCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLCommons {\\n  enum AgentType {\\n    NONE,\\n    MEMBER,\\n    ROLE,\\n    TYPE\\n  }\\n\\n  enum ActivityStatus {\\n    NONE,\\n    DELETED,\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum AlterabilityStatus {\\n    NONE,\\n    DISABLED,\\n    UPDATABLE,\\n    UPGRADABLE\\n  }\\n\\n  enum ScopeType {\\n    NONE,\\n    FUNCTION,\\n    CONTEXT,\\n    REALM,\\n    DOMAIN,\\n    UNIVERSE\\n  }\\n\\n  enum ActionType {\\n    ADD,\\n    UPDATE,\\n    REMOVE\\n  }\\n\\n  enum PolicyType {\\n    UNLOCK, // 0\\n    SLOCK, // soft lock, 1 - 63\\n    MLOCK, // medium lock, 64 - 127\\n    RLOCK, // restrict lock, 128 - 191\\n    HLOCK, // hard lock, 192 - 254\\n    LOCK // 255\\n  }\\n\\n  struct BaseAgent {\\n    bytes32 adminId;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct BaseScope {\\n    bytes32 adminId;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    uint32 referredByAgent;\\n  }\\n\\n  struct PolicyEntity {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint8 policyCode;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FunctionEntity {\\n    BaseScope bs;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n  }\\n\\n  struct ContextEntity {\\n    BaseScope bs;\\n    bytes32 realmId;\\n    address contractId;\\n    uint8 functionLimit;\\n    LEnumerableSet.Bytes32Set functions;\\n  }\\n\\n  struct RealmEntity {\\n    BaseScope bs;\\n    bytes32 domainId;\\n    uint32 contextLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set contexts;\\n  }\\n\\n  struct DomainEntity {\\n    BaseScope bs;\\n    bytes32 universeId;\\n    uint16 realmLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set realms;\\n  }\\n\\n  struct UniverseEntity {\\n    BaseScope bs;\\n    uint16 domainLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set domains;\\n  }\\n\\n  struct GeneralLimit {\\n    uint24 memberLimit;\\n    uint16 memberRegisterLimit;\\n    uint16 contextRegisterLimit;\\n    uint16 functionRegisterLimit;\\n    uint16 profileRegisterLimit;\\n    uint16 contextLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 callLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint8 roleRegisterLimit;\\n    uint8 typeRegisterLimit;\\n    uint8 realmRegisterLimit;\\n    uint8 domainRegisterLimit;\\n    uint8 policyRegisterLimit;\\n    uint8 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct MemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    GeneralLimit limits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct MemberSignature {\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct RoleEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n  }\\n\\n  struct TypeEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    mapping(bytes32 => bytes32) members;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FacetEntity {\\n    address subjectId;\\n  }\\n\\n  struct UpdateActivityRequest {\\n    bytes32 id;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct UpdateAlterabilityRequest {\\n    bytes32 id;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct UpdateAdminRequest {\\n    bytes32 id;\\n    bytes32 adminId;\\n  }\\n\\n  // used in Policy / Role / Type\\n  struct UpdateScopeRequest {\\n    bytes32 id;\\n    bytes32 scopeId;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////\\n  // Profiles\\n\\n  struct ProfileMemberSignature {\\n    string profileName;\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct ProfileRegisterLimit {\\n    uint32 memberRegisterLimit;\\n    uint32 roleRegisterLimit;\\n    uint32 typeRegisterLimit;\\n    uint32 functionRegisterLimit;\\n    uint32 contextRegisterLimit;\\n    uint16 realmRegisterLimit;\\n    uint16 domainRegisterLimit;\\n    uint16 policyRegisterLimit;\\n  }\\n\\n  struct ProfileLimit {\\n    uint32 profileCallLimit;\\n    uint32 contextLimit;\\n    uint24 memberLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 memberCallLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint16 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ProfileAccount {\\n    bytes32[] profiles;\\n  }\\n\\n  struct ProfileEntity {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    LEnumerableSet.Bytes32Set admins;\\n    bytes32 adminId;\\n    string name;\\n    address owner;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileMemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    uint16 callLimit;\\n    uint16 typeLimit;\\n    ProfileRegisterLimit registerLimits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct ProfileUpdateActivityRequest {\\n    bytes32 entityId;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct ProfileUpdateAlterabilityRequest {\\n    bytes32 entityId;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct ProfileUpdateAdminRequest {\\n    bytes32 entityId;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateScopeRequest {\\n    bytes32 entityId;\\n    bytes32 scopeId;\\n  }\\n}\\n\",\"keccak256\":\"0x2269cec662cb8f25c0523b281f8f97bd9b5115ea80771c7d1e4083031f4a1c87\",\"license\":\"MIT\"},\"src/contracts/acl/IACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function getAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function getAnyType() external pure returns (bytes32);\\n\\n  // scope master type\\n  function getScopeMasterType() external pure returns (bytes32);\\n\\n  // type master type\\n  function getTypeMasterType() external pure returns (bytes32);\\n\\n  // member master type\\n  function getMemberMasterType() external pure returns (bytes32);\\n\\n  // system master type\\n  function getSystemMasterType() external pure returns (bytes32);\\n\\n  // lively master type\\n  function getLivelyMasterType() external pure returns (bytes32);\\n\\n  // Policy Master type\\n  function getPolicyMasterType() external pure returns (bytes32);\\n\\n  // Profile Master type\\n  function getProfileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function getUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function isAgentExist(bytes32 agentId) external view returns (bool);\\n\\n  function isScopeExist(bytes32 scopeId) external view returns (bool);\\n\\n  function getScopeBaseInfo(bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function getAgentBaseInfo(bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function isScopesCompatible(bytes32 destScopeId, bytes32 srcScopeId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x303b03b04f7fc7356cc4c88bf54e218e29ce9fb479b44310d0788fa176ecfc50\",\"license\":\"MIT\"},\"src/contracts/acl/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control Manager Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLManager is IACLCommons {\\n  // Request Types\\n  struct FacetSelectorUpgradeRequest {\\n    ActionType action;\\n    bytes4[] selectors;\\n  }\\n\\n  struct FacetUpgradeRequest {\\n    address facetId;\\n    address subjectId;\\n    FacetSelectorUpgradeRequest[] functions;\\n  }\\n\\n  struct FacetRegisterRequest {\\n    address facetId;\\n    address subjectId;\\n    bytes4[] selectors;\\n  }\\n\\n  struct FacetInfo {\\n    address subjectId;\\n  }\\n\\n  event ACLFacetRegistered(address indexed sender, address indexed facetId, address indexed subjectId);\\n\\n  event ACLFacetUpgraded(address indexed sender, address indexed facetId, address indexed subjectId);\\n\\n  event ACLFacetFunctionUpgraded(address indexed sender, address indexed facetId, bytes4 selector, ActionType action);\\n\\n  event ACLInitialized(\\n    address indexed sender,\\n    address indexed admin,\\n    address indexed systemAdmin,\\n    address contextManager,\\n    address functionManager\\n  );\\n\\n  function aclRegisterFacet(FacetRegisterRequest[] calldata requests) external returns (bool);\\n\\n  function aclUpgradeFacet(FacetUpgradeRequest[] calldata requests) external returns (bool);\\n\\n  function aclGetFacets() external view returns (address[] memory);\\n\\n  function aclGetFacet(bytes4 selector) external view returns (address);\\n\\n  function aclHasSelector(bytes4 selector) external view returns (bool);\\n\\n  function aclGetFacetInfo(address facetId) external view returns (FacetInfo memory);\\n}\\n\",\"keccak256\":\"0xc124daf10a79621e8a3fa8d6c4a21e3afafc7d4d1864bef1223bb7530addd270\",\"license\":\"MIT\"},\"src/contracts/acl/agent/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Role Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IRoleManagement is IACLCommons {\\n  struct RoleRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    int32 memberLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  struct RoleGrantMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct RoleRevokeMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct RoleUpdateMemberLimitRequest {\\n    bytes32 roleId;\\n    uint24 memberLimit;\\n  }\\n\\n  struct RoleInfo {\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    bytes32 adminId;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed roleId,\\n    bytes32 indexed typeId,\\n    bytes32 adminId,\\n    bytes32 scopeId\\n  );\\n\\n  event RoleMemberDeleted(\\n    address indexed sender,\\n    bytes32 indexed roleId,\\n    bytes32 indexed memberId,\\n    bytes32 typeId,\\n    address account\\n  );\\n\\n  event RoleMemberGranted(address indexed sender, bytes32 indexed roleId, bytes32 indexed memberId, bytes32 typeId);\\n\\n  event RoleMemberRevoked(address indexed sender, bytes32 indexed roleId, bytes32 indexed memberId, bytes32 typeId);\\n\\n  event RoleMemberLimitUpdated(address indexed sender, bytes32 indexed roleId, uint24 memberLimit);\\n\\n  event RoleAdminUpdated(address indexed sender, bytes32 indexed roleId, bytes32 indexed adminId);\\n\\n  event RoleScopeUpdated(address indexed sender, bytes32 indexed roleId, bytes32 indexed scopeId);\\n\\n  event RoleActivityUpdated(address indexed sender, bytes32 indexed roleId, ActivityStatus acstat);\\n\\n  event RoleAlterabilityUpdated(address indexed sender, bytes32 indexed roleId, AlterabilityStatus alstat);\\n\\n  event RoleRemoved(address indexed sender, bytes32 indexed roleId);\\n\\n  function roleRegister(MemberSignature calldata memberSign, RoleRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleGrantMembers(MemberSignature calldata memberSign, RoleGrantMembersRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleRevokeMembers(MemberSignature calldata memberSign, RoleRevokeMembersRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateScope(MemberSignature calldata memberSign, UpdateScopeRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function roleUpdateMemberLimit(MemberSignature calldata memberSign, RoleUpdateMemberLimitRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleRemove(MemberSignature calldata memberSign, bytes32[] calldata roles) external returns (bool);\\n\\n  function roleCheckId(bytes32 roleId) external view returns (bool);\\n\\n  function roleCheckName(string calldata roleName) external view returns (bool);\\n\\n  function roleCheckAdmin(bytes32 roleId, address account) external view returns (bool);\\n\\n  function roleHasAccount(bytes32 roleId, address account) external view returns (bool);\\n\\n  function roleGetInfo(bytes32 roleId) external view returns (RoleInfo memory);\\n}\\n\",\"keccak256\":\"0xd577f997c4da278bcf299f28134d89a2807745820b182d7f4de0bcfa68ad262c\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACL {\\n  enum ProfileAuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    PROFILE_CALL_FORBIDDEN,\\n    MEMBER_CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN,\\n    PROFILE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileACLUnauthorized();\\n  error ProfileACLPolicyForbidden();\\n  error ProfileACLCallForbidden();\\n  error ProfileACLRoleScopeForbidden();\\n  error ProfileACLMemberCallForbidden();\\n  error ProfileACLMemberNotFound();\\n  error ProfileACLRoleNotFound();\\n  error ProfileACLTypeNotFound();\\n  error ProfileACLFunctionNotFound();\\n  error ProfileACLContextNotFound();\\n  error ProfileACLRealmNotFound();\\n  error ProfileACLDomainNotFound();\\n  error ProfileACLMemberActivityForbidden();\\n  error ProfileACLRoleActivityForbidden();\\n  error ProfileACLTypeActivityForbidden();\\n  error ProfileACLFunctionActivityForbidden();\\n  error ProfileACLContextActivityForbidden();\\n  error ProfileACLRealmActivityForbidden();\\n  error ProfileACLDomainActivityForbidden();\\n  error ProfileACLUniverseActivityForbidden();\\n  error ProfileACLProfileActivityForbidden();\\n\\n  enum ProfileAdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileAdminAccessNotPermitted();\\n  error ProfileAdminAccessPolicyForbidden();\\n  error ProfileAdminAccessRoleNotFound();\\n  error ProfileAdminAccessTypeNotFound();\\n  error ProfileAdminAccessFunctionNotFound();\\n  error ProfileAdminAccessRoleActivityForbidden();\\n  error ProfileAdminAccessTypeActivityForbidden();\\n\\n  error ProfileSetAdminForbidden(ProfileAdminAccessStatus);\\n\\n  function profileHasAccess(bytes32 profileId, bytes32 functionId) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasCSAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasAccountAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (ProfileAuthorizationStatus);\\n}\\n\",\"keccak256\":\"0xb3687f11a1d2d28b78e815657864fbe1ef4aeba750e8c9760b3d3f97e467efc2\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control General Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function profileAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function profileAnyType() external pure returns (bytes32);\\n\\n  // system master type\\n  function profileSystemMasterType() external pure returns (bytes32);\\n\\n  // profile master type\\n  function profileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function profileUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function profileIsAgentExist(bytes32 profileId, bytes32 agentId) external view returns (bool);\\n\\n  function profileIsScopeExist(bytes32 profileId, bytes32 scopeId) external view returns (bool);\\n\\n  function profileScopeBaseInfo(bytes32 profileId, bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function profileAgentBaseInfo(bytes32 profileId, bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function profileIsScopesCompatible(\\n    bytes32 profileId,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5eeaa7ce1f5f26662cf0368f1c9b415214f37f1659c3a2defccedf0d1943760f\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileManagement is IACLCommons {\\n  struct ProfileRegisterRequest {\\n    string name;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    address profileOwner;\\n    address profileSystemAdmin;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateOwnerAccountRequest {\\n    bytes32 profileId;\\n    address newOwner;\\n  }\\n\\n  struct ProfileUpdateLimitsRequest {\\n    bytes32 profileId;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileInfo {\\n    string name;\\n    bytes32 adminId;\\n    address owner;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    AgentType adminType;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfileRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed profileOwner,\\n    address profileSystemAdmin,\\n    bytes32 adminId,\\n    ProfileRegisterLimit registerlimits,\\n    ProfileLimit limits\\n  );\\n\\n  event ProfileAdminUpdated(address indexed sender, bytes32 indexed profileId, bytes32 indexed adminId);\\n\\n  event ProfileActivityUpdated(address indexed sender, bytes32 indexed profileId, ActivityStatus acstat);\\n\\n  event ProfileAlterabilityUpdated(address indexed sender, bytes32 indexed profileId, AlterabilityStatus alstat);\\n\\n  event ProfileLimitsUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    ProfileLimit limit,\\n    ProfileRegisterLimit registerLimit\\n  );\\n\\n  event ProfileOwnerAccountUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed owner,\\n    address newOwner\\n  );\\n\\n  function profileRegister(MemberSignature calldata memberSign, ProfileRegisterRequest[] calldata request)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateLimits(MemberSignature calldata memberSign, ProfileUpdateLimitsRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateOwnerAccount(\\n    MemberSignature calldata memberSign,\\n    ProfileUpdateOwnerAccountRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileCheckId(bytes32 profileId) external view returns (bool);\\n\\n  function profileCheckName(string calldata name) external view returns (bool);\\n\\n  function profileCheckOwner(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileSystemAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileGetProfileAccount(address account) external view returns (bytes32[] memory);\\n\\n  function profileGetAdmins(bytes32 profileId) external view returns (bytes32[] memory);\\n\\n  function profileGetInfo(bytes32 profileId) external view returns (ProfileInfo memory);\\n}\\n\",\"keccak256\":\"0x32153a5a19ef691b56e8987b82b455e024cfc24c42393955d12d43e0c148d6fc\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0xf6b56daea1f2692628dff63bd57ff8ad0bc38ecbc34887db37a8305162ce1394\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./LACLUtils.sol\\\";\\nimport \\\"./LACLStorage.sol\\\";\\nimport \\\"./LProfileStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/IACLGenerals.sol\\\";\\nimport \\\"../../acl/IACLManager.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../proxy/IERC1822.sol\\\";\\nimport \\\"../../utils/IERC165.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/agent/IRoleManagement.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/profile/IProfileACLGenerals.sol\\\";\\nimport \\\"../../acl/profile/IProfileManagement.sol\\\";\\n\\n/**\\n * @title ACL Commons Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLCommons {\\n  using LProfileStorage for IACLCommons.ProfileEntity;\\n  using LACLStorage for ACLStorage.DataCollection;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  string public constant LIB_NAME = \\\"LACLCommons\\\";\\n  string public constant LIB_VERSION = \\\"3.0.0\\\";\\n\\n  bytes32 public constant LIVELY_VERSE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 public constant LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n  bytes32 public constant LIVELY_VERSE_SCOPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_MEMBER_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_TYPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_POLICY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_PROFILE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\"));\\n\\n  // Universe Scope ID\\n  bytes32 private constant LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID = keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_VERSE\\\"));\\n\\n  // General Roles ID\\n  bytes32 public constant LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_SCOPE_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_TYPE_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_MEMBER_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_POLICY_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_PROFILE_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_PROFILE_MASTER_ADMIN\\\"));\\n\\n  // Profile Commons\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n\\n  // ACL Type\\n  bytes32 public constant LIVELY_VERSE_LIVELY_GUARD_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_GUARD.MASTER\\\"));\\n\\n  function registerProxyFacet(ACLStorage.DataCollection storage data, address implementation) external {\\n    data.facetSet.add(address(this));\\n    IACLCommons.FacetEntity storage facetEntity = data.facets[address(this)];\\n    facetEntity.subjectId = implementation;\\n    data.selectors[IProxy.upgradeTo.selector] = address(this);\\n    data.selectors[IProxy.setSafeModeStatus.selector] = address(this);\\n    data.selectors[IProxy.setUpdatabilityStatus.selector] = address(this);\\n    data.selectors[IProxy.setLocalAdmin.selector] = address(this);\\n    data.selectors[IProxy.setAccessControlManager.selector] = address(this);\\n    data.selectors[IProxy.contractName.selector] = address(this);\\n    data.selectors[IProxy.contractVersion.selector] = address(this);\\n    data.selectors[IProxy.accessControlManager.selector] = address(this);\\n    data.selectors[IProxy.subjectAddress.selector] = address(this);\\n    data.selectors[IProxy.safeModeStatus.selector] = address(this);\\n    data.selectors[IProxy.updatabilityStatus.selector] = address(this);\\n    data.selectors[IProxy.localAdmin.selector] = address(this);\\n    data.selectors[IProxy.domainSeparator.selector] = address(this);\\n    data.selectors[IProxy.initVersion.selector] = address(this);\\n    data.selectors[IProxy.withdrawBalance.selector] = address(this);\\n    data.selectors[IERC165.supportsInterface.selector] = address(this);\\n    data.selectors[IACLManager.aclRegisterFacet.selector] = address(this);\\n    data.selectors[IACLManager.aclUpgradeFacet.selector] = address(this);\\n    data.selectors[IACLManager.aclGetFacets.selector] = address(this);\\n    data.selectors[IACLManager.aclGetFacet.selector] = address(this);\\n    data.selectors[IACLManager.aclHasSelector.selector] = address(this);\\n    data.selectors[IACLManager.aclGetFacetInfo.selector] = address(this);\\n    data.selectors[IERC1822Proxiable.proxiableUUID.selector] = address(this);\\n    data.selectors[bytes4(keccak256(\\\"initialize(string,string)\\\"))] = address(this);\\n    data.selectors[bytes4(keccak256(\\\"initACL(address,address,address,address)\\\"))] = address(this);\\n    data.selectors[bytes4(keccak256(\\\"getFirstInit()\\\"))] = address(this);\\n    data.selectors[bytes4(keccak256(\\\"getLibrary()\\\"))] = address(this);\\n  }\\n\\n  function aclRegisterFacet(ACLStorage.DataCollection storage data, IACLManager.FacetRegisterRequest calldata request)\\n    external\\n    returns (bool)\\n  {\\n    require(!data.facetSet.contains(request.facetId), \\\"Facet Already Exist\\\");\\n    for (uint256 j = 0; j < request.selectors.length; j++) {\\n      require(data.selectors[request.selectors[j]] == address(0), \\\"Illegal Selector\\\");\\n      data.selectors[request.selectors[j]] = request.facetId;\\n    }\\n    data.facetSet.add(request.facetId);\\n    IACLCommons.FacetEntity storage facetEntity = data.facets[request.facetId];\\n    facetEntity.subjectId = request.subjectId;\\n\\n    return true;\\n  }\\n\\n  function initACLAgents(\\n    ACLStorage.DataCollection storage data,\\n    address livelyAdmin,\\n    address systemAdmin\\n  ) public {\\n    _initACLAgents(data, livelyAdmin, systemAdmin);\\n  }\\n\\n  function checkAdminAccess(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 adminId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) external view returns (IACL.AdminAccessStatus) {\\n    return _doCheckAdminAccess(data, adminId, memberId, functionId);\\n  }\\n\\n  function getCheckUpdateRequestScope(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    IACLCommons.ScopeType senderScopeType\\n  ) external returns (IACLCommons.BaseScope storage) {\\n    // checking requested type scope\\n    IACLCommons.BaseScope storage requestedScope = data.scopes[requestScopeId];\\n    require(requestedScope.stype != IACLCommons.ScopeType.NONE, \\\"Scope Not Found\\\");\\n    require(requestedScope.acstat > IACLCommons.ActivityStatus.DELETED, \\\"Scope Deleted\\\");\\n\\n    // increase referred count to target scope\\n    requestedScope.referredByAgent += 1;\\n\\n    require(requestedScope.stype <= senderScopeType, \\\"Illegal ScopeType\\\");\\n    if (requestedScope.stype == senderScopeType) {\\n      require(requestScopeId == senderScopeId, \\\"Illegal Scope\\\");\\n    } else {\\n      require(IACLGenerals(address(this)).isScopesCompatible(senderScopeId, requestScopeId), \\\"Illegal Scope\\\");\\n    }\\n\\n    return requestedScope;\\n  }\\n\\n  function profileCheckAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    address account\\n  ) external view returns (bool) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    if (profileEntity.acstat == IACLCommons.ActivityStatus.NONE) return false;\\n\\n    bytes32 profileAdminId = profileEntity.adminId;\\n    IACLCommons.AgentType agentType = data.agents[profileAdminId].atype;\\n    bytes32 memberId = LACLUtils.accountGenerateId(account);\\n\\n    if (agentType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = data.roleTryReadSlot(profileAdminId);\\n      if (!result) return false;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(roleEntity.typeId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] == profileAdminId;\\n    } else if (agentType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(profileAdminId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] != bytes32(0);\\n    }\\n\\n    return false;\\n  }\\n\\n  function profileUpdateOwnerAccount(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfileManagement.ProfileUpdateOwnerAccountRequest calldata request\\n  ) external returns (bool) {\\n    // disable profile owner\\n    bytes32 ownerId = LACLUtils.accountGenerateId(profileEntity.owner);\\n    bytes32 newOwnerId = LACLUtils.accountGenerateId(request.newOwner);\\n\\n    // check new ownerId\\n    require(profileEntity.agents[newOwnerId].acstat == IACLCommons.ActivityStatus.NONE, \\\"Already Exists\\\");\\n\\n    // remove old owner\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(ownerId);\\n    profileMemberEntity.ba.acstat = IACLCommons.ActivityStatus.DISABLED;\\n    profileMemberEntity.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n    profileEntity.admins.remove(ownerId);\\n\\n    // remove from profileAccount\\n    IACLCommons.ProfileAccount storage profileAccount = data.profileAccounts[profileEntity.owner];\\n    for (uint256 j = 0; j < profileAccount.profiles.length; j++) {\\n      if (profileAccount.profiles[j] == request.profileId) {\\n        if (profileAccount.profiles.length > 1) {\\n          if (j < profileAccount.profiles.length - 1)\\n            profileAccount.profiles[j] = profileAccount.profiles[profileAccount.profiles.length - 1];\\n          profileAccount.profiles.pop();\\n        } else {\\n          profileAccount.profiles.pop();\\n          delete profileAccount.profiles;\\n        }\\n        break;\\n      }\\n    }\\n\\n    // add profile's new owner\\n    _doCreateUpdateProfileAccount(data, request.profileId, request.newOwner);\\n\\n    // Create Owner Member\\n    IACLCommons.ProfileMemberEntity storage ownerMember = profileEntity.profileMemberWriteSlot(newOwnerId);\\n    ownerMember.account = request.newOwner;\\n    ownerMember.typeLimit = profileEntity.limits.typeLimit;\\n    ownerMember.callLimit = uint16(profileEntity.limits.profileCallLimit);\\n    ownerMember.registerLimits = profileEntity.registerLimits;\\n    ownerMember.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    ownerMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n    ownerMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    ownerMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    ownerMember.types.add(LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID);\\n\\n    profileEntity.owner = request.newOwner;\\n    profileEntity.admins.add(newOwnerId);\\n\\n    // update profile lively master type\\n    IACLCommons.TypeEntity storage livelyMasterType = profileEntity.profileTypeReadSlot(\\n      LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID\\n    );\\n    delete livelyMasterType.members[ownerId];\\n    livelyMasterType.members[newOwnerId] = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    return true;\\n  }\\n\\n  function createUpdateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    address memberAddress\\n  ) external {\\n    _doCreateUpdateProfileAccount(data, profileId, memberAddress);\\n  }\\n\\n  function profileRegister(\\n    ACLStorage.DataCollection storage data,\\n    IProfileManagement.ProfileRegisterRequest calldata request,\\n    bytes32 signerId,\\n    bytes32 profileId,\\n    bytes32 functionId\\n  ) external returns (bytes32) {\\n    // fetch scope type and scope id of sender\\n    (IACLCommons.ScopeType signerScopeType, bytes32 signerScopeId) = _doGetScopeFromType(\\n      data,\\n      LIVELY_VERSE_PROFILE_MASTER_TYPE_ID,\\n      signerId\\n    );\\n    require(\\n      signerScopeType == IACLCommons.ScopeType.UNIVERSE && signerScopeId == LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID,\\n      \\\"Illegal Scope\\\"\\n    );\\n    require(request.limits.typeLimit >= 1, \\\"Illegal TypeLimit\\\");\\n\\n    _doCreateUpdateProfileAccount(data, profileId, request.profileOwner);\\n    _doCreateUpdateProfileAccount(data, profileId, request.profileSystemAdmin);\\n\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    profileEntity.name = request.name;\\n    profileEntity.owner = request.profileOwner;\\n    profileEntity.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    profileEntity.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    profileEntity.registerLimits = request.registerLimits;\\n    profileEntity.limits = request.limits;\\n    profileEntity.admins.add(LACLUtils.accountGenerateId(request.profileOwner));\\n\\n    // check adminId\\n    if (request.adminId != bytes32(0)) {\\n      require(data.agents[request.adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      (, bytes32 requestAdminScopeId) = _doAgentGetScopeInfo(data, request.adminId);\\n      require(requestAdminScopeId == LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Admin Scope\\\");\\n      IACL.AdminAccessStatus adminAccessStatus = _doCheckAdminAccess(\\n        data,\\n        LIVELY_VERSE_PROFILE_MASTER_TYPE_ID,\\n        signerId,\\n        functionId\\n      );\\n      if (adminAccessStatus != IACL.AdminAccessStatus.PERMITTED) revert IACL.SetAdminForbidden(adminAccessStatus);\\n      profileEntity.adminId = request.adminId;\\n    } else {\\n      profileEntity.adminId = LIVELY_VERSE_PROFILE_MASTER_TYPE_ID;\\n    }\\n\\n    _doInitProfile(profileEntity, request.profileOwner, request.profileSystemAdmin);\\n    return profileEntity.adminId;\\n  }\\n\\n  function realmGetAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 requestScopeAdmin,\\n    bytes32 domainId,\\n    bytes32 adminId\\n  ) external view returns (bytes32 realmAdminId) {\\n    // checking requested context admin\\n    if (adminId != bytes32(0)) {\\n      require(data.agents[adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doAgentGetScopeInfo(data, adminId);\\n      require(IACLCommons.ScopeType.DOMAIN <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (IACLCommons.ScopeType.DOMAIN == requestAdminScopeType) {\\n        require(requestAdminScopeId == domainId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(requestAdminScopeId == LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Admin Scope\\\");\\n      }\\n      realmAdminId = adminId;\\n    } else {\\n      realmAdminId = requestScopeAdmin;\\n    }\\n  }\\n\\n  function _doAgentGetScopeInfo(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    private\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    IACLCommons.AgentType atype = data.agents[agentId].atype;\\n    if (atype == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = data.roleReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = data.scopes[roleEntity.scopeId];\\n      return (baseScope.stype, roleEntity.scopeId);\\n    } else if (atype == IACLCommons.AgentType.TYPE) {\\n      IACLCommons.TypeEntity storage typeEntity = data.typeReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = data.scopes[typeEntity.scopeId];\\n      return (baseScope.stype, typeEntity.scopeId);\\n    }\\n\\n    return (IACLCommons.ScopeType.NONE, bytes32(0));\\n  }\\n\\n  function _doCheckAdminAccess(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 adminId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) private view returns (IACL.AdminAccessStatus) {\\n    (IACLCommons.FunctionEntity storage functionEntity, bool res) = data.functionTryReadSlot(functionId);\\n    if (!res) return IACL.AdminAccessStatus.FUNCTION_NOT_FOUND;\\n\\n    IACLCommons.AgentType adminAgentType = data.agents[adminId].atype;\\n    if (adminAgentType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = data.roleTryReadSlot(adminId);\\n      if (!result) return IACL.AdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(roleEntity.typeId);\\n      if (!result1) return IACL.AdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      if (typeEntity.members[memberId] != adminId) return IACL.AdminAccessStatus.NOT_PERMITTED;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = data.policies[data.rolePolicyMap[adminId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IACL.AdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IACL.AdminAccessStatus.PERMITTED;\\n    } else if (adminAgentType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(adminId);\\n      if (!result1) return IACL.AdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      bytes32 roleId = typeEntity.members[memberId];\\n      (IACLCommons.RoleEntity storage roleEntity, bool result2) = data.roleTryReadSlot(roleId);\\n      if (!result2) return IACL.AdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = data.policies[data.rolePolicyMap[roleId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IACL.AdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IACL.AdminAccessStatus.PERMITTED;\\n    }\\n\\n    return IACL.AdminAccessStatus.NOT_PERMITTED;\\n  }\\n\\n  function _doCreateUpdateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    address memberAddress\\n  ) private {\\n    IACLCommons.ProfileAccount storage profileAccount = data.profileAccounts[memberAddress];\\n    if (profileAccount.profiles.length == 0) {\\n      IACLCommons.ProfileAccount storage newProfileAccount = data.profileAccounts[memberAddress];\\n      newProfileAccount.profiles.push(profileId);\\n    } else {\\n      require(profileAccount.profiles.length < 16, \\\"Illegal ProfileAccountLimit\\\");\\n      profileAccount.profiles.push(profileId);\\n    }\\n  }\\n\\n  function _doGetScopeFromType(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 typeId,\\n    bytes32 senderId\\n  ) private view returns (IACLCommons.ScopeType, bytes32) {\\n    IACLCommons.TypeEntity storage agentType = data.typeReadSlot(typeId);\\n    bytes32 memberRoleId = agentType.members[senderId];\\n    IACLCommons.RoleEntity storage memberAgentRole = data.roleReadSlot(memberRoleId);\\n    return (data.scopes[memberAgentRole.scopeId].stype, memberAgentRole.scopeId);\\n  }\\n\\n  function _doInitProfile(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    address profileOwner,\\n    address profileSystemAdmin\\n  ) private {\\n    // init Universe Scope\\n    IACLCommons.UniverseEntity storage livelyUniverseEntity = profileEntity.profileUniverseWriteSlot(\\n      LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID\\n    );\\n    livelyUniverseEntity.name = \\\"UNIVERSE.LIVELY_PROFILE\\\";\\n    livelyUniverseEntity.domainLimit = profileEntity.limits.domainLimit;\\n    livelyUniverseEntity.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyUniverseEntity.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyUniverseEntity.bs.stype = IACLCommons.ScopeType.UNIVERSE;\\n    livelyUniverseEntity.bs.adminId = LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID;\\n\\n    // Create Any Type\\n    IACLCommons.TypeEntity storage anyType = profileEntity.profileTypeWriteSlot(LIVELY_PROFILE_ANY_TYPE_ID);\\n    anyType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\";\\n    anyType.roleLimit = 0;\\n    anyType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    anyType.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    anyType.ba.atype = IACLCommons.AgentType.TYPE;\\n    anyType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    anyType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n\\n    // Create Lively Master Type\\n    IACLCommons.TypeEntity storage livelyMasterType = profileEntity.profileTypeWriteSlot(\\n      LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID\\n    );\\n    livelyMasterType.name = \\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\";\\n    livelyMasterType.roleLimit = profileEntity.limits.typeRoleLimit > 1 ? profileEntity.limits.typeRoleLimit : 1;\\n    livelyMasterType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    livelyMasterType.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    livelyMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n    livelyMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterType.roles.add(LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID);\\n\\n    // Create Lively Master Admin Role\\n    IACLCommons.RoleEntity storage livelyMasterAdminRole = profileEntity.profileRoleWriteSlot(\\n      LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID\\n    );\\n    livelyMasterAdminRole.name = \\\"ROLE.LIVELY_PROFILE.LIVELY_MASTER_ADMIN\\\";\\n    livelyMasterAdminRole.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    livelyMasterAdminRole.typeId = LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID;\\n    livelyMasterAdminRole.memberLimit = profileEntity.limits.memberLimit > 1 ? profileEntity.limits.memberLimit : 1;\\n    livelyMasterAdminRole.memberCount = 1;\\n    livelyMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n    livelyMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterAdminRole.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    // Create Owner Member\\n    bytes32 ownerMemberId = LACLUtils.accountGenerateId(profileOwner);\\n    IACLCommons.ProfileMemberEntity storage ownerMember = profileEntity.profileMemberWriteSlot(ownerMemberId);\\n    ownerMember.account = profileOwner;\\n    ownerMember.typeLimit = profileEntity.limits.typeLimit;\\n    ownerMember.callLimit = uint16(profileEntity.limits.profileCallLimit);\\n    ownerMember.registerLimits = profileEntity.registerLimits;\\n    ownerMember.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    ownerMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n    ownerMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    ownerMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n\\n    // bind Lively Master Admin Member to Admin role of Lively,\\n    ownerMember.types.add(LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID);\\n\\n    // bind Lively Master Admin Member to Admin role\\n    // livelyMasterType.members[livelyMasterAdminMemberId] = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    livelyMasterType.members[ownerMemberId] = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    _doInitProfileSystemMaster(profileEntity, profileSystemAdmin);\\n\\n    // update livelyUniverseEntity.bs.referredByAgent\\n    livelyUniverseEntity.bs.referredByAgent = 5;\\n  }\\n\\n  function _doInitProfileSystemMaster(IACLCommons.ProfileEntity storage profileEntity, address profileSystemAdmin)\\n    private\\n  {\\n    // Create System Master Type\\n    IACLCommons.TypeEntity storage systemMasterType = profileEntity.profileTypeWriteSlot(\\n      LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID\\n    );\\n    systemMasterType.name = \\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\";\\n    systemMasterType.roleLimit = profileEntity.limits.typeRoleLimit > 1 ? profileEntity.limits.typeRoleLimit : 1;\\n    systemMasterType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    systemMasterType.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    systemMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n    systemMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    systemMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    systemMasterType.roles.add(LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID);\\n\\n    // Create System Master Admin Role\\n    IACLCommons.RoleEntity storage systemMasterAdminRole = profileEntity.profileRoleWriteSlot(\\n      LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID\\n    );\\n    systemMasterAdminRole.name = \\\"ROLE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER_ADMIN\\\";\\n    systemMasterAdminRole.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    systemMasterAdminRole.typeId = LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID;\\n    systemMasterAdminRole.memberLimit = profileEntity.limits.memberLimit > 1 ? profileEntity.limits.memberLimit : 1;\\n    systemMasterAdminRole.memberCount = 1;\\n    systemMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n    systemMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    systemMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    systemMasterAdminRole.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    // Create System Master Admin Member\\n    bytes32 systemMasterAdminMemberId = LACLUtils.accountGenerateId(profileSystemAdmin);\\n    IACLCommons.ProfileMemberEntity storage systemMasterAdminMember = profileEntity.profileMemberWriteSlot(\\n      systemMasterAdminMemberId\\n    );\\n    systemMasterAdminMember.typeLimit = profileEntity.limits.typeLimit;\\n    systemMasterAdminMember.callLimit = uint16(profileEntity.limits.profileCallLimit);\\n    systemMasterAdminMember.registerLimits = IACLCommons.ProfileRegisterLimit({\\n      memberRegisterLimit: 0,\\n      roleRegisterLimit: 0,\\n      typeRegisterLimit: 0,\\n      functionRegisterLimit: profileEntity.registerLimits.functionRegisterLimit,\\n      contextRegisterLimit: profileEntity.registerLimits.contextRegisterLimit,\\n      realmRegisterLimit: 0,\\n      domainRegisterLimit: 0,\\n      policyRegisterLimit: 0\\n    });\\n    systemMasterAdminMember.account = profileSystemAdmin;\\n    systemMasterAdminMember.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    systemMasterAdminMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n    systemMasterAdminMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    systemMasterAdminMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    systemMasterAdminMember.types.add(LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID);\\n\\n    // bind Lively Master Admin Member to Admin role\\n    systemMasterType.members[systemMasterAdminMemberId] = LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID;\\n  }\\n\\n  function _initACLAgents(\\n    ACLStorage.DataCollection storage data,\\n    address livelyAdmin,\\n    address systemAdmin\\n  ) private {\\n    // init Universe Scope\\n    IACLCommons.UniverseEntity storage livelyUniverseEntity = data.universeWriteSlot(\\n      LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID\\n    );\\n    livelyUniverseEntity.name = \\\"UNIVERSE.LIVELY_VERSE\\\";\\n    livelyUniverseEntity.domainLimit = type(uint16).max;\\n    livelyUniverseEntity.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyUniverseEntity.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyUniverseEntity.bs.stype = IACLCommons.ScopeType.UNIVERSE;\\n    livelyUniverseEntity.bs.adminId = LIVELY_VERSE_LIVELY_MASTER_TYPE_ID;\\n\\n    // Create Lively Master Type\\n    IACLCommons.TypeEntity storage livelyMasterType = data.typeWriteSlot(LIVELY_VERSE_LIVELY_MASTER_TYPE_ID);\\n    livelyMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\";\\n    livelyMasterType.roleLimit = type(uint16).max;\\n    livelyMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n    livelyMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    livelyMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n    livelyMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterType.roles.add(LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID);\\n\\n    // Create Lively Master Admin Role\\n    IACLCommons.RoleEntity storage livelyMasterAdminRole = data.roleWriteSlot(LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID);\\n    livelyMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_MASTER_ADMIN\\\";\\n    livelyMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n    livelyMasterAdminRole.typeId = LIVELY_VERSE_LIVELY_MASTER_TYPE_ID;\\n    livelyMasterAdminRole.memberLimit = type(uint24).max;\\n    livelyMasterAdminRole.memberCount = 1;\\n    livelyMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n    livelyMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    // Create Lively Master Admin Member\\n    bytes32 livelyMasterAdminMemberId = LACLUtils.accountGenerateId(livelyAdmin);\\n    IACLCommons.MemberEntity storage livelyMasterAdminMember = data.memberWriteSlot(livelyMasterAdminMemberId);\\n    livelyMasterAdminMember.account = livelyAdmin;\\n    livelyMasterAdminMember.limits = IACLCommons.GeneralLimit({\\n      memberLimit: type(uint24).max,\\n      memberRegisterLimit: type(uint16).max,\\n      contextRegisterLimit: type(uint16).max,\\n      functionRegisterLimit: type(uint16).max,\\n      profileRegisterLimit: type(uint16).max,\\n      contextLimit: type(uint16).max,\\n      realmLimit: type(uint16).max,\\n      domainLimit: type(uint16).max,\\n      callLimit: type(uint16).max,\\n      typeRoleLimit: type(uint16).max,\\n      typeLimit: type(uint16).max,\\n      roleRegisterLimit: type(uint8).max,\\n      typeRegisterLimit: type(uint8).max,\\n      realmRegisterLimit: type(uint8).max,\\n      domainRegisterLimit: type(uint8).max,\\n      policyRegisterLimit: type(uint8).max,\\n      policyRoleLimit: type(uint8).max,\\n      functionLimit: type(uint8).max\\n    });\\n\\n    livelyMasterAdminMember.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    livelyMasterAdminMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n    livelyMasterAdminMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterAdminMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n\\n    // bind Lively Master Admin Member to Admin role of Lively, Scope, Type, Member, Profile and Policy types\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_LIVELY_MASTER_TYPE_ID);\\n\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_SCOPE_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_TYPE_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_MEMBER_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_POLICY_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_PROFILE_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_LIVELY_GUARD_MASTER_TYPE_ID);\\n\\n    // bind Lively Master Admin Member to Admin role\\n    livelyMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    {\\n      // Create Profile Any Type\\n      IACLCommons.TypeEntity storage profileAnyType = data.typeWriteSlot(LIVELY_PROFILE_ANY_TYPE_ID);\\n      profileAnyType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\";\\n      profileAnyType.roleLimit = 0;\\n      profileAnyType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileAnyType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      profileAnyType.ba.atype = IACLCommons.AgentType.TYPE;\\n      profileAnyType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileAnyType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n\\n      // Create Profile Lively Master Type\\n      IACLCommons.TypeEntity storage profileLivelyMasterType = data.typeWriteSlot(LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID);\\n      profileLivelyMasterType.name = \\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\";\\n      profileLivelyMasterType.roleLimit = 0;\\n      profileLivelyMasterType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileLivelyMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      profileLivelyMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      profileLivelyMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileLivelyMasterType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n\\n      // Create Profile System Master Type\\n      IACLCommons.TypeEntity storage profileSystemMasterType = data.typeWriteSlot(LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID);\\n      profileSystemMasterType.name = \\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\";\\n      profileSystemMasterType.roleLimit = 0;\\n      profileSystemMasterType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileSystemMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      profileSystemMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      profileSystemMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileSystemMasterType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n    }\\n\\n    {\\n      // Create System Master Type\\n      IACLCommons.TypeEntity storage systemMasterType = data.typeWriteSlot(LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID);\\n      systemMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\";\\n      systemMasterType.roleLimit = type(uint16).max;\\n      systemMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      systemMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      systemMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      systemMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      systemMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      systemMasterType.roles.add(LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID);\\n\\n      // Create System Master Admin Role\\n      IACLCommons.RoleEntity storage systemMasterAdminRole = data.roleWriteSlot(\\n        LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID\\n      );\\n      systemMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER_ADMIN\\\";\\n      systemMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      systemMasterAdminRole.typeId = LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID;\\n      systemMasterAdminRole.memberLimit = type(uint24).max;\\n      systemMasterAdminRole.memberCount = 1;\\n      systemMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      systemMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      systemMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      systemMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create System Master Admin Member\\n      bytes32 systemMasterAdminMemberId = LACLUtils.accountGenerateId(systemAdmin);\\n      IACLCommons.MemberEntity storage systemMasterAdminMember = data.memberWriteSlot(systemMasterAdminMemberId);\\n\\n      systemMasterAdminMember.limits = IACLCommons.GeneralLimit({\\n        memberLimit: 1024,\\n        memberRegisterLimit: 0,\\n        contextRegisterLimit: 128,\\n        functionRegisterLimit: type(uint16).max,\\n        profileRegisterLimit: 0,\\n        contextLimit: type(uint16).max,\\n        realmLimit: 0,\\n        domainLimit: 0,\\n        callLimit: type(uint16).max,\\n        typeRoleLimit: type(uint8).max,\\n        typeLimit: type(uint8).max,\\n        roleRegisterLimit: 0,\\n        typeRegisterLimit: 0,\\n        realmRegisterLimit: 0,\\n        domainRegisterLimit: 0,\\n        policyRegisterLimit: 0,\\n        policyRoleLimit: type(uint8).max,\\n        functionLimit: type(uint8).max\\n      });\\n\\n      systemMasterAdminMember.account = systemAdmin;\\n      systemMasterAdminMember.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      systemMasterAdminMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n      systemMasterAdminMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      systemMasterAdminMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      systemMasterAdminMember.types.add(LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID);\\n\\n      // bind Lively Master Admin Member to Admin role\\n      systemMasterType.members[systemMasterAdminMemberId] = LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID;\\n    }\\n\\n    {\\n      // Create Scope Master Type\\n      IACLCommons.TypeEntity storage scopeMasterType = data.typeWriteSlot(LIVELY_VERSE_SCOPE_MASTER_TYPE_ID);\\n      scopeMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\";\\n      scopeMasterType.roleLimit = type(uint16).max;\\n      scopeMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      scopeMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      scopeMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      scopeMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      scopeMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      scopeMasterType.roles.add(LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID);\\n      scopeMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Scope Master Admin Role\\n      IACLCommons.RoleEntity storage scopeMasterAdminRole = data.roleWriteSlot(LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID);\\n      scopeMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_SCOPE_MASTER_ADMIN\\\";\\n      scopeMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      scopeMasterAdminRole.typeId = LIVELY_VERSE_SCOPE_MASTER_TYPE_ID;\\n      scopeMasterAdminRole.memberLimit = type(uint24).max;\\n      scopeMasterAdminRole.memberCount = 1;\\n      scopeMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      scopeMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      scopeMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      scopeMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Type Master Type\\n      IACLCommons.TypeEntity storage typeMasterType = data.typeWriteSlot(LIVELY_VERSE_TYPE_MASTER_TYPE_ID);\\n      typeMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\";\\n      typeMasterType.roleLimit = type(uint16).max;\\n      typeMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      typeMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      typeMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      typeMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      typeMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      typeMasterType.roles.add(LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID);\\n      typeMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Type Master Admin Role\\n      IACLCommons.RoleEntity storage typeMasterAdminRole = data.roleWriteSlot(LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID);\\n      typeMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_TYPE_MASTER_ADMIN\\\";\\n      typeMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      typeMasterAdminRole.typeId = LIVELY_VERSE_TYPE_MASTER_TYPE_ID;\\n      typeMasterAdminRole.memberLimit = type(uint24).max;\\n      typeMasterAdminRole.memberCount = 1;\\n      typeMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      typeMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      typeMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      typeMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    }\\n\\n    {\\n      // Create Member Master Type\\n      IACLCommons.TypeEntity storage memberMasterType = data.typeWriteSlot(LIVELY_VERSE_MEMBER_MASTER_TYPE_ID);\\n      memberMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\";\\n      memberMasterType.roleLimit = type(uint16).max;\\n      memberMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      memberMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      memberMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      memberMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      memberMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      memberMasterType.roles.add(LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID);\\n      memberMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Member Master Admin Role\\n      IACLCommons.RoleEntity storage memberMasterAdminRole = data.roleWriteSlot(\\n        LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID\\n      );\\n      memberMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_MEMBER_MASTER_ADMIN\\\";\\n      memberMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      memberMasterAdminRole.typeId = LIVELY_VERSE_MEMBER_MASTER_TYPE_ID;\\n      memberMasterAdminRole.memberLimit = type(uint24).max;\\n      memberMasterAdminRole.memberCount = 1;\\n      memberMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      memberMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      memberMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      memberMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    }\\n\\n    {\\n      // Create Policy Master Type\\n      IACLCommons.TypeEntity storage policyMasterType = data.typeWriteSlot(LIVELY_VERSE_POLICY_MASTER_TYPE_ID);\\n      policyMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\";\\n      policyMasterType.roleLimit = type(uint16).max;\\n      policyMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      policyMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      policyMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      policyMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      policyMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      policyMasterType.roles.add(LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID);\\n      policyMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Policy Master Admin Role\\n      IACLCommons.RoleEntity storage policyMasterAdminRole = data.roleWriteSlot(\\n        LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID\\n      );\\n      policyMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_POLICY_MASTER_ADMIN\\\";\\n      policyMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      policyMasterAdminRole.typeId = LIVELY_VERSE_POLICY_MASTER_TYPE_ID;\\n      policyMasterAdminRole.memberLimit = type(uint24).max;\\n      policyMasterAdminRole.memberCount = 1;\\n      policyMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      policyMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      policyMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      policyMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Profile Master Type\\n      IACLCommons.TypeEntity storage profileMasterType = data.typeWriteSlot(LIVELY_VERSE_PROFILE_MASTER_TYPE_ID);\\n      profileMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\";\\n      profileMasterType.roleLimit = type(uint16).max;\\n      profileMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      profileMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      profileMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      profileMasterType.roles.add(LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID);\\n      profileMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_PROFILE_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Profile Master Admin Role\\n      IACLCommons.RoleEntity storage profileMasterAdminRole = data.roleWriteSlot(\\n        LIVELY_VERSE_PROFILE_MASTER_ADMIN_ROLE_ID\\n      );\\n      profileMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_PROFILE_MASTER_ADMIN\\\";\\n      profileMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileMasterAdminRole.typeId = LIVELY_VERSE_PROFILE_MASTER_TYPE_ID;\\n      profileMasterAdminRole.memberLimit = type(uint24).max;\\n      profileMasterAdminRole.memberCount = 1;\\n      profileMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      profileMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      profileMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    }\\n    {\\n      // Create Anonymouse  Type\\n      IACLCommons.TypeEntity storage anonymousType = data.typeWriteSlot(LIVELY_VERSE_ANONYMOUS_TYPE_ID);\\n      anonymousType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\";\\n      anonymousType.roleLimit = 0;\\n      anonymousType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      anonymousType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      anonymousType.ba.atype = IACLCommons.AgentType.TYPE;\\n      anonymousType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      anonymousType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n\\n      // Create Any Type\\n      IACLCommons.TypeEntity storage anyType = data.typeWriteSlot(LIVELY_VERSE_ANY_TYPE_ID);\\n      anyType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\";\\n      anyType.roleLimit = 0;\\n      anyType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      anyType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      anyType.ba.atype = IACLCommons.AgentType.TYPE;\\n      anyType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      anyType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n    }\\n\\n    // update livelyUniverseEntity.bs.referredByAgent\\n    livelyUniverseEntity.bs.referredByAgent = 16;\\n    livelyUniverseEntity.domains.add(LACLUtils.generateId2(\\\"DOMAIN.LIVELY_VERSE.LIVELY_GUARD\\\"));\\n  }\\n}\\n\",\"keccak256\":\"0xd9ab2921baad6de06818f490d430429edceb41fa449152c49ab595d476a9cccd\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLStorage {\\n  function universeReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function universeWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function functionReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fc.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function functionWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1db1476a40cb3e0912d1c07d6ed6c1e9171f6960014e49b66e3532610c80bb6d\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\n\\n/**\\n * @title Context Utils Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLUtils {\\n  function functionGenerateId(address contractId, bytes4 selector) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId, selector));\\n  }\\n\\n  function accountGenerateId(address account) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(account));\\n  }\\n\\n  function generateId(string calldata name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateId2(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateHash(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function getMemeberSignerAddress(IACLCommons.MemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateMemberSignMsgHash(msgTypeHash, memberSign.account, memberSign.expiredAt)\\n      );\\n  }\\n\\n  function getProfileMemeberSignerAddress(IACLCommons.ProfileMemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateProfileMemberSignMsgHash(\\n          msgTypeHash,\\n          generateId(memberSign.profileName),\\n          memberSign.account,\\n          memberSign.expiredAt\\n        )\\n      );\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) private view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(IProxy(address(this)).domainSeparator(), structHash);\\n  }\\n\\n  function _generateMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, account, expiredAt));\\n  }\\n\\n  function _generateProfileMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    bytes32 profileName,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, profileName, account, expiredAt));\\n  }\\n\\n  function getSignerAddress(bytes memory signature, bytes32 structHash) internal view returns (address) {\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal Signature\\\");\\n    return msgSigner;\\n  }\\n\\n  function generateAuthorizationError(IACL.AuthorizationStatus status) internal pure {\\n    if (status == IACL.AuthorizationStatus.UNAUTHORIZED) revert IACL.ACLUnauthorized();\\n    else if (status == IACL.AuthorizationStatus.POLICY_FORBIDDEN) revert IACL.ACLPolicyForbidden();\\n    else if (status == IACL.AuthorizationStatus.CALL_FORBIDDEN) revert IACL.ACLCallForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_SCOPE_FORBIDDEN) revert IACL.ACLRoleScopeForbidden();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_NOT_FOUND) revert IACL.ACLMemberNotFound();\\n    else if (status == IACL.AuthorizationStatus.ROLE_NOT_FOUND) revert IACL.ACLRoleNotFound();\\n    else if (status == IACL.AuthorizationStatus.TYPE_NOT_FOUND) revert IACL.ACLTypeNotFound();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_NOT_FOUND) revert IACL.ACLFunctionNotFound();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_NOT_FOUND) revert IACL.ACLContextNotFound();\\n    else if (status == IACL.AuthorizationStatus.REALM_NOT_FOUND) revert IACL.ACLRealmNotFound();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_NOT_FOUND) revert IACL.ACLDomainNotFound();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN) revert IACL.ACLMemberActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.ACLRoleActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.ACLTypeActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN) revert IACL.ACLFunctionActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN) revert IACL.ACLContextActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.REALM_ACTIVITY_FORBIDDEN) revert IACL.ACLRealmActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN) revert IACL.ACLDomainActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN) revert IACL.ACLUniverseActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAuthorizationError(IProfileACL.ProfileAuthorizationStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAuthorizationStatus.UNAUTHORIZED) revert IProfileACL.ProfileACLUnauthorized();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleScopeForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_NOT_FOUND)\\n      revert IProfileACL.ProfileACLMemberNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRoleNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLTypeNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileACLFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_NOT_FOUND)\\n      revert IProfileACL.ProfileACLContextNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRealmNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_NOT_FOUND)\\n      revert IProfileACL.ProfileACLDomainNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLTypeActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLFunctionActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLContextActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRealmActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLDomainActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLUniverseActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLProfileActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAdminAccessError(IProfileACL.ProfileAdminAccessStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED)\\n      revert IProfileACL.ProfileAdminAccessNotPermitted();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessRoleNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessTypeNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateAdminAccessError(IACL.AdminAccessStatus status) internal pure {\\n    if (status == IACL.AdminAccessStatus.NOT_PERMITTED) revert IACL.AdminAccessNotPermitted();\\n    else if (status == IACL.AdminAccessStatus.POLICY_FORBIDDEN) revert IACL.AdminAccessPolicyForbidden();\\n    else if (status == IACL.AdminAccessStatus.ROLE_NOT_FOUND) revert IACL.AdminAccessRoleNotFound();\\n    else if (status == IACL.AdminAccessStatus.TYPE_NOT_FOUND) revert IACL.AdminAccessTypeNotFound();\\n    else if (status == IACL.AdminAccessStatus.FUNCTION_NOT_FOUND) revert IACL.AdminAccessFunctionNotFound();\\n    else if (status == IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessRoleActivityForbidden();\\n    else if (status == IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x0a1ead86733fdae5c48faf98479dea608f2a5743722b7d458981c33ff13489c1\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LProfileStorage {\\n  function profileUniverseReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function profileUniverseWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileFunctionWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n}\\n\",\"keccak256\":\"0xe95300b9bb0c9fa78648108acf843bd0609e08a60b03b61a79f271f5fcb46b91\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0x75b905d070ebb72fa3358e262ab18166f6c6386c11171324f235058ce9185ca4\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe49098eb2019f9d9628a399f6a06ec310fe8a10785c369cc508c56df1f203dd0\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Storage Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSStorage is IBaseProxy {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  address internal immutable __self = address(this);\\n\\n  string internal _contractName;\\n  string internal _contractVersion;\\n  address internal _accessControlManager;\\n  ProxySafeModeStatus internal _sstat;\\n  ProxyUpdatabilityStatus internal _ustat;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x4ff079fd2fd1ad102d42e82a72bff6bb1ffb8f9ab29cec2dd8e970b892ea415e\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IBaseProxy {\\n  enum ProxySafeModeStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum ProxyUpdatabilityStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  event ProxyUpgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x4b2695303b3acb300ba472d17da71a16367191af571d325d43171503d7c92846\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x98571e9bc4231bb67b3c8b339c052fa968e56b0bef3e35f5d82c391335336ae8\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event ProxyLocalAdminUpdated(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event ProxyAccessControlUpdated(address indexed sender, address indexed proxy, address acl);\\n\\n  event ProxySafeModeUpdated(address indexed sender, address indexed proxy, ProxySafeModeStatus sstat);\\n\\n  event ProxyUpdatabilityUpdated(address indexed sender, address indexed proxy, ProxyUpdatabilityStatus ustat);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external returns (bool);\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function setAccessControlManager(address acl) external returns (bool);\\n\\n  function withdrawBalance(address recepient) external returns (uint256);\\n\\n  function contractName() external view returns (string memory);\\n\\n  function contractVersion() external view returns (string memory);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus);\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xaadf51e846486cf9dc7387ad1dcac9a67e6a2d9354ce71694d79de783e1dea3b\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x95ac867088cd7cca6d583788b83e56e0c521c847aa9844f6184c14f5ce3ddf90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6158326200003b600b82828239805160001a60731461002e57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061021b5760003560e01c806359c893fc1161012f578063a191cb30116100b7578063bec9475111610086578063bec947511461041c578063ca37fa8514610446578063e521078a14610466578063e5eba2b11461046e578063f81ceb8d1461047657600080fd5b8063a191cb30146103fc578063b3e761a514610404578063bbfee8b61461040c578063be27eb761461041457600080fd5b80637dd5be1c116100fe5780637dd5be1c146103bc5780638439d9ba146103c45780638dd25732146103e45780638fed2ba0146103ec5780639b3362c9146103f457600080fd5b806359c893fc14610354578063721cf60b1461037457806377d8dd70146103945780637cb0d2b6146103b457600080fd5b806323908f64116101b2578063339b5c1411610181578063339b5c141461032c5780633ab3ab88146103345780634a6439e61461033c57806358c910c114610344578063593dc0201461034c57600080fd5b806323908f64146102b357806323cff741146102bb5780632466209b146102db5780632927595c1461030c57600080fd5b806317e13eb6116101ee57806317e13eb61461026d578063180e79d81461029057806318e632581461029857806320f3487f146102ab57600080fd5b8063061a95c6146102205780630c230c9e1461023b5780630f75b8381461025d578063126bf02b14610265575b600080fd5b61022861047e565b6040519081526020015b60405180910390f35b81801561024757600080fd5b5061025b61025636600461462d565b6104a6565b005b6102286104b6565b6102286104c5565b61028061027b366004614669565b6104d4565b6040519015158152602001610232565b610228610638565b6102286102a6366004614695565b610647565b6102286107cb565b6102286107da565b8180156102c757600080fd5b506102806102d63660046146c7565b6107e9565b6102ff604051806040016040528060058152602001640332e302e360dc1b81525081565b604051610232919061472c565b81801561031857600080fd5b5061022861032736600461475f565b610d03565b6102286110a0565b6102286110af565b6102286110be565b6102286110dd565b6102286110ec565b81801561036057600080fd5b5061028061036f3660046147c6565b61111d565b81801561038057600080fd5b5061025b61038f366004614669565b61134b565b8180156103a057600080fd5b506102286103af366004614814565b611356565b6102286115a8565b6102286115b7565b8180156103d057600080fd5b5061025b6103df366004614859565b6115c6565b610228611847565b610228611856565b610228611875565b610228611884565b610228611893565b6102286118a2565b6102286118b1565b6102ff6040518060400160405280600b81526020016a4c41434c436f6d6d6f6e7360a81b81525081565b610459610454366004614695565b6118c0565b60405161023291906148bd565b6102286118ce565b6102286118dd565b6102286118ec565b60405160200161048d906148cb565b6040516020818303038152906040528051906020012081565b6104b18383836118fb565b505050565b60405160200161048d90614903565b60405160200161048d90614940565b60008281526004840160205260408120816008820154600160a01b900460ff16600381111561050557610505614885565b03610514576000915050610631565b600681015460008181526020879052604081206001015460ff169061053886612f2b565b9050600282600381111561054e5761054e614885565b036105cc576000806105608a86612f6b565b91509150806105785760009650505050505050610631565b60008061059284600301548d612fc890919063ffffffff16565b91509150806105ac57600098505050505050505050610631565b506000938452600501602052505060409020549091149250610631915050565b60038260038111156105e0576105e0614885565b03610628576000806105f28a86612fc8565b915091508061060a5760009650505050505050610631565b50600091825260050160205260409020541515935061063192505050565b60009450505050505b9392505050565b60405160200161048d90614977565b600081156107c057600160008381526020879052604090206001015460ff16600381111561067757610677614885565b116106c35760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b60448201526064015b60405180910390fd5b6000806106d08785612fdf565b915091508160058111156106e6576106e6614885565b600411156107365760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c2041646d696e2053636f70655479706500000000000000000060448201526064016106ba565b81600581111561074857610748614885565b6004036107735784811461076e5760405162461bcd60e51b81526004016106ba906149af565b6107b6565b604051602001610782906149dc565b6040516020818303038152906040528051906020012081146107b65760405162461bcd60e51b81526004016106ba906149af565b83925050506107c3565b50825b949350505050565b60405160200161048d906149fd565b60405160200161048d90614a3c565b60088201546000908190610805906001600160a01b0316612f2b565b9050600061082161081c6040860160208701614a73565b612f2b565b905060008082815260208790526040902060010154610100900460ff16600381111561084f5761084f614885565b1461088d5760405162461bcd60e51b815260206004820152600e60248201526d416c72656164792045786973747360901b60448201526064016106ba565b60006108998684613077565b60018101805462ffff0019166201020017905590506108bb6004870184613154565b5060088601546001600160a01b031660009081526005880160205260408120905b81548110156109f25781548735908390839081106108fc576108fc614a8e565b9060005260206000200154036109e0578154600110156109a457815461092490600190614aba565b811015610978578154829061093b90600190614aba565b8154811061094b5761094b614a8e565b906000526020600020015482600001828154811061096b5761096b614a8e565b6000918252602090912001555b815482908061098957610989614acd565b600190038181906000526020600020016000905590556109f2565b81548290806109b5576109b5614acd565b600190038181906000526020600020016000905590558160000160006109db91906145d7565b6109f2565b806109ea81614ae3565b9150506108dc565b50610a0e888735610a0960408a0160208b01614a73565b613160565b6000610a1a8885613222565b9050610a2c6040880160208901614a73565b6002820180546001600160a01b03929092166001600160a01b0319831681178255600a8b018054600160b01b61ffff600160981b90920482168102600163ffff000160a01b03199096169093179490941780845590548416600160a01b90810261ffff60a01b199283161790935560098c01805460038701805463ffffffff19811663ffffffff938416908117835584546401000000009081900485160267ffffffffffffffff1990921617178082558354600160401b9081900484160263ffffffff60401b198216811783558454600160601b9081900485160263ffffffff60601b1990911667ffffffffffffffff60401b1990921691909117178082558354600160801b9081900490931690920263ffffffff60801b19831681178255835487900488169096029590931665ffffffffffff60801b1990911617939093178082558354839004851690920261ffff60b01b198316811782559254600160c01b9081900490941690930261ffff60c01b1990921663ffffffff60b01b1990911617179055604051610bc090602001614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020301179055610c2491610bfc9101614b35565b604051602081830303815290604052805190602001208260040161328890919063ffffffff16565b50610c356040880160208901614a73565b6008890180546001600160a01b0319166001600160a01b0392909216919091179055610c646004890185613288565b506000610c9e604051602001610c7990614b35565b604051602081830303815290604052805190602001208a61329490919063ffffffff16565b905080600501600087815260200190815260200160002060009055604051602001610cc890614afc565b60408051601f198184030181529181528151602092830120600097885260059093019091529094209390935550600193505050509392505050565b6000806000610d3788604051602001610d1b90614b68565b604051602081830303815290604052805190602001208861336b565b90925090506005826005811115610d5057610d50614885565b148015610d805750604051602001610d67906149dc565b6040516020818303038152906040528051906020012081145b610d9c5760405162461bcd60e51b81526004016106ba90614ba1565b6001610db061022089016102008a01614bd8565b61ffff161015610df65760405162461bcd60e51b8152602060048201526011602482015270125b1b1959d85b08151e5c19531a5b5a5d607a1b60448201526064016106ba565b610e0d8886610a096102808b016102608c01614a73565b610e248886610a096102a08b016102808c01614a73565b60008581526004890160205260409020610e3e8880614bf5565b6007830191610e4e919083614cda565b50610e6161028089016102608a01614a73565b6008820180546001600160a01b03929092166001600160a81b031990921691909117600360a01b1760ff60a81b1916600160a91b1790556020880160098201610eaa8282614dbe565b50506101208801600a8201610ebf8282614f54565b50610ee49050610eda61081c6102808b016102608c01614a73565b6004830190613288565b506102a0880135156110365760016102a0890135600090815260208b9052604090206001015460ff166003811115610f1e57610f1e614885565b11610f655760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b60448201526064016106ba565b6000610f768a8a6102a00135612fdf565b915050604051602001610f88906149dc565b604051602081830303815290604052805190602001208114610fbc5760405162461bcd60e51b81526004016106ba906149af565b6000610fee8b604051602001610fd190614b68565b604051602081830303815290604052805190602001208b8a6133be565b9050600081600781111561100457611004614885565b14611024578060405163578978db60e01b81526004016106ba91906148bd565b50506102a08801356006820155611063565b60405160200161104590614b68565b60408051601f19818403018152919052805160209091012060068201555b611090816110796102808b016102608c01614a73565b61108b6102a08c016102808d01614a73565b613747565b6006015498975050505050505050565b60405160200161048d90614afc565b60405160200161048d906150f4565b6040516000805160206157188339815191526020820152603c0161048d565b60405160200161048d90615117565b6040517f545950452e4c4956454c595f50524f46494c452e4c4956454c595f414e5900006020820152603e0161048d565b600061113961112f6020840184614a73565b6008850190613d94565b1561117c5760405162461bcd60e51b8152602060048201526013602482015272119858d95d08105b1c9958591e48115e1a5cdd606a1b60448201526064016106ba565b60005b61118c604084018461514b565b90508110156112c157600060068501816111a9604087018761514b565b858181106111b9576111b9614a8e565b90506020020160208101906111ce9190615195565b6001600160e01b03191681526020810191909152604001600020546001600160a01b0316146112325760405162461bcd60e51b815260206004820152601060248201526f24b63632b3b0b61029b2b632b1ba37b960811b60448201526064016106ba565b61123f6020840184614a73565b600685016000611252604087018761514b565b8581811061126257611262614a8e565b90506020020160208101906112779190615195565b6001600160e01b0319168152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055806112b981614ae3565b91505061117f565b506112dc6112d26020840184614a73565b6008850190613db6565b50600060078401816112f16020860186614a73565b6001600160a01b03166001600160a01b0316815260200190815260200160002090508260200160208101906113269190614a73565b81546001600160a01b0319166001600160a01b03919091161790555060015b92915050565b6104b1838383613160565b6000838152600185016020526040812081600182015460ff16600581111561138057611380614885565b036113bf5760405162461bcd60e51b815260206004820152600f60248201526e14d8dbdc1948139bdd08119bdd5b99608a1b60448201526064016106ba565b600180820154610100900460ff1660038111156113de576113de614885565b1161141b5760405162461bcd60e51b815260206004820152600d60248201526c14d8dbdc194811195b195d1959609a1b60448201526064016106ba565b6001818101805460039061143d9084906301000000900463ffffffff166151bf565b92506101000a81548163ffffffff021916908363ffffffff16021790555082600581111561146d5761146d614885565b600182015460ff16600581111561148657611486614885565b11156114c85760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c2053636f70655479706560781b60448201526064016106ba565b8260058111156114da576114da614885565b600182015460ff1660058111156114f3576114f3614885565b0361151c578385146115175760405162461bcd60e51b81526004016106ba90614ba1565b61159f565b604051631de3230560e11b815260048101859052602481018690523090633bc6460a90604401602060405180830381865afa15801561155f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158391906151dc565b61159f5760405162461bcd60e51b81526004016106ba90614ba1565b95945050505050565b60405160200161048d906151fe565b60405160200161048d9061523c565b6115d36008830130613db6565b50306000818152600784016020908152604080832080546001600160a01b03969096166001600160a01b0319968716179055637147855d60e01b8352600690950190528381208054841683179055630f708ceb60e41b81528381208054841683179055631f98802f60e31b8152838120805484168317905563d9dc1f1960e01b8152838120805484168317905563071965c360e11b81528381208054841683179055631d74303760e21b81528381208054841683179055630505472360e51b8152838120805484168317905563b4a0bdf360e01b815283812080548416831790556358dbc45d60e01b8152838120805484168317905563a304e35360e01b815283812080548416831790556324447a4160e11b8152838120805484168317905563f94a0adb60e01b8152838120805484168317905563f698da2560e01b815283812080548416831790556338d38c9760e01b8152838120805484168317905563756af45f60e01b815283812080548416831790556301ffc9a760e01b815283812080548416831790556328e0496d60e21b81528381208054841683179055631b32687d60e01b815283812080548416831790556278b53b60e31b8152838120805484168317905563065c365b60e51b81528381208054841683179055631c74ee1160e01b81528381208054841683179055633fa2ff1760e01b815283812080548416831790556352d1902d60e01b8152838120805484168317905563266c45bb60e11b81528381208054841683179055630a97193160e31b81528381208054841683179055632c4b4fff60e01b81528381208054841683179055633b3c491760e11b81529290922080549091169091179055565b60405160200161048d90615272565b6040516000805160206155b68339815191526020820152603f0161048d565b60405160200161048d906152ae565b60405160200161048d906152ee565b60405160200161048d9061532c565b60405160200161048d9061536a565b60405160200161048d906153a4565b600061159f858585856133be565b60405160200161048d906153dc565b60405160200161048d90614b35565b60405160200161048d90614b68565b600061193460405160200161190f906149dc565b6040516020818303038152906040528051906020012085613dcb90919063ffffffff16565b905060405180604001604052806015815260200174554e4956455253452e4c4956454c595f564552534560581b8152508160030190816119749190615413565b5060028101805461ffff61ffff199091161790556001810180546202030562ffffff199091161790556040516000805160206155b68339815191526020820152603f0160408051808303601f1901815290829052805160209182012083556000805160206155b683398151915290820152600090611a1590603f015b6040516020818303038152906040528051906020012086613e7190919063ffffffff16565b90506040518060400160405280601f81526020016000805160206155b6833981519152815250816003019081611a4b9190615413565b5060048101805461ffff191661ffff179055604051611a6c906020016149dc565b60408051601f198184030181529082905280516020918201206002840155611a949101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020303179055611af891611ad09101614a3c565b604051602081830303815290604052805190602001208260060161328890919063ffffffff16565b506000611b32604051602001611b0d90614a3c565b6040516020818303038152906040528051906020012087613ed890919063ffffffff16565b90506040518060600160405280602581526020016156c7602591396004820190611b5c9082615413565b50604051602001611b6c906149dc565b60408051601f19818403018152828252805160209182012060028501556000805160206155b6833981519152818401528151601f818503018152603f84019092528151910120600383015560058201805465ffffffffffff19166301ffffff17905560018201805462ffffff191662020302179055611bed90605f01614a3c565b60408051601f19818403018152919052805160209091012081556000611c1286612f2b565b90506000611c208883613222565b6002810180546001600160a01b0319166001600160a01b038a16179055604080516102408101825262ffffff815261ffff6020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e083018290526101008301829052610120830182905261014083019190915260ff610160830181905261018083018190526101a083018190526101c083018190526101e083018190526102008301819052610220909201919091526003830180546001600160f01b0319166001600160f01b031790559051919250611d019101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203011790556000805160206155b683398151915290820152611d4e90603f01610bfc565b50611d61604051602001610bfc906153dc565b50611d74604051602001610bfc9061523c565b50611d87604051602001610bfc906148cb565b50611d9a604051602001610bfc906153a4565b50611dad604051602001610bfc90614b68565b50611dc0604051602001610bfc90614940565b50604051602001611dd090614a3c565b60408051808303601f1901815282825280516020918201206000868152600589018352928320557f545950452e4c4956454c595f50524f46494c452e4c4956454c595f414e5900009083015290611e4a90603e015b604051602081830303815290604052805190602001208a613e7190919063ffffffff16565b90506040518060400160405280601c8152602001600080516020615718833981519152815250816003019081611e809190615413565b5060048101805461ffff19169055604051611e9d906020016150f4565b60408051601f198184030181529082905280516020918201206002840155611ec59101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662010303179055600091611f2991611f049101614b35565b604051602081830303815290604052805190602001208b613e7190919063ffffffff16565b9050604051806060016040528060218152602001615738602191396003820190611f539082615413565b5060048101805461ffff19169055604051611f70906020016150f4565b60408051601f198184030181529082905280516020918201206002840155611f989101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662010303179055600091611ffc91611fd7910161536a565b604051602081830303815290604052805190602001208c613e7190919063ffffffff16565b90506040518060600160405280602881526020016156286028913960038201906120269082615413565b5060048101805461ffff19169055604051612043906020016150f4565b60408051601f19818403018152908290528051602091820120600284015561206b9101614a3c565b60408051601f1981840301815290829052805160209182012083556001909201805462ffffff191662010303179055600093506120ad9250611e259101614977565b90506040518060600160405280602681526020016156506026913960038201906120d79082615413565b5060048101805461ffff191661ffff1790556040516120f8906020016149dc565b60408051601f1981840301815290829052805160209182012060028401556121209101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166202030317905561215c91611ad091016151fe565b506000612196604051602001612171906151fe565b604051602081830303815290604052805190602001208b613ed890919063ffffffff16565b90506040518060600160405280602c8152602001615517602c913960048201906121c09082615413565b506040516020016121d0906149dc565b60408051601f1981840301815290829052805160209182012060028401556121f89101614977565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff19166202030217905561224a9101614a3c565b60408051601f1981840301815291905280516020909101208155600061226f89612f2b565b9050600061227d8c83613222565b6040805161024081018252610400815260006020808301829052608083850181905261ffff6060850181905290840183905260a0840181905260c0840183905260e0840183905261010084015260ff61012084018190526101408401819052610160840183905261018084018390526101a084018390526101c084018390526101e08401929092526102008301829052610220909201526003830180546001600160f01b0319167dffff000000000000ff00ffffff00000000ffff0000ffff008000000004001790556002830180546001600160a01b0319166001600160a01b038f1617905590519192506123729101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203011790556123ae91610bfc9101614977565b506040516020016123be906151fe565b60408051601f1981840301815282825280516020918201206000958652600590970181529084209590955591936123fc9350611e25920190506153dc565b90506040518060600160405280602581526020016157b16025913960038201906124269082615413565b5060048101805461ffff191661ffff179055604051612447906020016149dc565b60408051601f19818403018152908290528051602091820120600284015561246f9101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203031790556124ab91611ad09101614903565b506040516020016124bb90614903565b60408051601f19818403018152828252805160209182012060008781526005860183529283205590916124f2916121719101614903565b90506040518060600160405280602b815260200161569c602b9139600482019061251c9082615413565b5060405160200161252c906149dc565b60408051601f19818403018152908290528051602091820120600284015561255491016153dc565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff1916620203021790556125a69101614a3c565b60408051601f1981840301815290829052805160209182012083556000916125d291611fd7910161523c565b90506040518060600160405280602481526020016155926024913960038201906125fc9082615413565b5060048101805461ffff191661ffff17905560405161261d906020016149dc565b60408051601f1981840301815290829052805160209182012060028401556126459101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166202030317905561268191611ad09101615272565b5060405160200161269190615272565b60408051601f19818403018152828252805160209182012060008981526005860183529283205590916126ed916126c89101615272565b604051602081830303815290604052805190602001208d613ed890919063ffffffff16565b90506040518060600160405280602a8152602001615787602a913960048201906127179082615413565b50604051602001612727906149dc565b60408051601f19818403018152908290528051602091820120600284015561274f910161523c565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff1916620203021790556127a19101614a3c565b60408051601f19818403018152908290528051602091820120909255600094506127d19350611e259250016148cb565b90506040518060600160405280602681526020016156766026913960038201906127fb9082615413565b5060048101805461ffff191661ffff17905560405161281c906020016149dc565b60408051601f1981840301815290829052805160209182012060028401556128449101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166202030317905561288091611ad0910161532c565b506040516020016128909061532c565b60408051601f19818403018152828252805160209182012060008781526005860183529283205590916128c791612171910161532c565b90506040518060600160405280602c81526020016156ec602c913960048201906128f19082615413565b50604051602001612901906149dc565b60408051601f19818403018152908290528051602091820120600284015561292991016148cb565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff19166202030217905561297b9101614a3c565b60408051601f19818403018152908290528051602091820120909255600092506129a991611e2591016153a4565b90506040518060600160405280602681526020016156026026913960038201906129d39082615413565b5060048101805461ffff191661ffff1790556040516129f4906020016149dc565b60408051601f198184030181529082905280516020918201206002840155612a1c9101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020303179055612a5891611ad091016152ee565b50604051602001612a68906152ee565b60408051601f1981840301815282825280516020918201206000878152600586018352928320559091612a9f9161217191016152ee565b90506040518060600160405280602c81526020016155d6602c91396004820190612ac99082615413565b50604051602001612ad9906149dc565b60408051601f198184030181529082905280516020918201206002840155612b0191016153a4565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff191662020302179055612b539101614a3c565b60408051601f198184030181529082905280516020918201208355600091612b7f91611fd79101614b68565b90506040518060600160405280602781526020016154f0602791396003820190612ba99082615413565b5060048101805461ffff191661ffff179055604051612bca906020016149dc565b60408051601f198184030181529082905280516020918201206002840155612bf29101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020303179055612c2e91611ad091016152ee565b50604051602001612c3e906149fd565b60408051601f1981840301815282825280516020918201206000898152600586018352928320559091612c75916126c891016149fd565b90506040518060600160405280602d8152602001615543602d91396004820190612c9f9082615413565b50604051602001612caf906149dc565b60408051601f198184030181529082905280516020918201206002840155612cd79101614b68565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff191662020302179055612d299101614a3c565b60408051601f1981840301815290829052805160209182012090925560009450612d599350611e25925001615117565b9050604051806060016040528060228152602001615570602291396003820190612d839082615413565b5060048101805461ffff19169055604051612da0906020016149dc565b60408051601f198184030181529082905280516020918201206002840155612dc89101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166201030317905560008051602061571883398151915290820152600090612e1890603c01611f04565b90506040518060400160405280601c8152602001600080516020615718833981519152815250816003019081612e4e9190615413565b5060048101805461ffff19169055604051612e6b906020016149dc565b60408051601f198184030181529082905280516020918201206002840155612e939101614a3c565b60408051601f19818403018152828252805160209182012084556001938401805462ffffff191662010303179055928901805466ffffffff0000001916631000000017905581810190528181527f444f4d41494e2e4c4956454c595f56455253452e4c4956454c595f475541524491810191909152612f209150612f1690613f7d565b6004870190613288565b505050505050505050565b6040516bffffffffffffffffffffffff19606083901b1660208201526000906034015b604051602081830303815290604052805190602001209050919050565b6000818152602083905260408120819060025b600182015460ff166003811115612f9757612f97614885565b03612fb657604080518581526020810187905220925060019150612fc0565b6000199250600091505b509250929050565b600081815260208390526040812081906003612f7e565b600081815260208390526040812060010154819060ff16600281600381111561300a5761300a614885565b0361304257600061301b8686613f90565b60020154600081815260018089016020526040909120015460ff1694509250613070915050565b600381600381111561305657613056614885565b0361306757600061301b8686613294565b50600091508190505b9250929050565b600081815260208390526040812060018082015460ff16600381111561309f5761309f614885565b036130ba57604080518481526020810186905220915061314d565b6000600182015460ff1660038111156130d5576130d5614885565b036131125760405162461bcd60e51b815260206004820152600d60248201526c13525108139bdd08119bdd5b99609a1b60448201526064016106ba565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081352510814db1bdd60821b60448201526064016106ba565b5092915050565b6000610631838361402f565b6001600160a01b0381166000908152600584016020526040812080549091036131b5576001600160a01b038216600090815260058501602090815260408220805460018101825590835291200183905561321c565b80546010116132065760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c2050726f66696c654163636f756e744c696d6974000000000060448201526064016106ba565b8054600181018255600082815260209020018390555b50505050565b600081815260208390526040812081600182015460ff16600381111561324a5761324a614885565b148061326d575060018082015460ff16600381111561326b5761326b614885565b145b1561311257604080518481526020810186905220915061314d565b60006106318383614122565b60008181526020839052604081206003600182015460ff1660038111156132bd576132bd614885565b036132d857604080518481526020810186905220915061314d565b6000600182015460ff1660038111156132f3576132f3614885565b036133305760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b60448201526064016106ba565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b60448201526064016106ba565b600080806133798686613294565b60008581526005820160205260408120549192506133978883613f90565b6002015460008181526001998a01602052604090209098015460ff16989650505050505050565b600080806133cc8785614171565b91509150806133e0576005925050506107c3565b60008681526020889052604090206001015460ff16600281600381111561340957613409614885565b036135a75760008061341b8a8a612f6b565b9150915080613432576003955050505050506107c3565b60036001830154610100900460ff16600381111561345257613452614885565b14613465576006955050505050506107c3565b60008061347f84600301548d612fc890919063ffffffff16565b91509150806134985760049750505050505050506107c3565b60036001830154610100900460ff1660038111156134b8576134b8614885565b146134cd5760079750505050505050506107c3565b60008a81526005830160205260409020548b146134f45760019750505050505050506107c3565b60008c60020160008e60030160008f8152602001908152602001600020548152602001908152602001600020905060038081111561353457613534614885565b600382810154640100000000900460ff169081111561355557613555614885565b14801561358057506004880154600382015464010000000090910460ff908116620100009092041610155b15613596576002985050505050505050506107c3565b6000985050505050505050506107c3565b60038160038111156135bb576135bb614885565b03613739576000806135cd8a8a612fc8565b91509150806135e4576004955050505050506107c3565b60036001830154610100900460ff16600381111561360457613604614885565b14613617576007955050505050506107c3565b600088815260058301602052604081205490806136348d84612f6b565b915091508061364e576003985050505050505050506107c3565b60036001830154610100900460ff16600381111561366e5761366e614885565b14613684576006985050505050505050506107c3565b60008d60020160008f600301600087815260200190815260200160002054815260200190815260200160002090506003808111156136c4576136c4614885565b600382810154640100000000900460ff16908111156136e5576136e5614885565b14801561371057506004890154600382015464010000000090910460ff908116620100009092041610155b1561372757600299505050505050505050506107c3565b600099505050505050505050506107c3565b506001979650505050505050565b600061375b60405160200161190f906150f4565b905060405180604001604052806017815260200176554e4956455253452e4c4956454c595f50524f46494c4560481b81525081600301908161379d9190615413565b50600a840154600282018054600160681b90920461ffff1661ffff1990921691909117905560018101805462ffffff1916620203051790556040516137e490602001614b35565b60408051808303601f1901815290829052805160209182012083557f545950452e4c4956454c595f50524f46494c452e4c4956454c595f414e5900009082015260009061383390603e016119f0565b90506040518060400160405280601c81526020016000805160206157188339815191528152508160030190816138699190615413565b5060048101805461ffff19169055604051613886906020016150f4565b60408051601f1981840301815290829052805160209182012060028401556138ae9101614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662010303179055600091613912916138ed9101614b35565b6040516020818303038152906040528051906020012087613e7190919063ffffffff16565b905060405180606001604052806021815260200161573860219139600382019061393c9082615413565b50600a8601546001600160881b90910461ffff161161395c57600161396d565b600a860154600160881b900461ffff165b60048201805461ffff191661ffff92909216919091179055604051613994906020016150f4565b60408051601f1981840301815290829052805160209182012060028401556139bc9101614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203031790556139f891611ad09101614afc565b506000613a32604051602001613a0d90614afc565b6040516020818303038152906040528051906020012088613ed890919063ffffffff16565b90506040518060600160405280602781526020016157d6602791396004820190613a5c9082615413565b50604051602001613a6c906150f4565b60408051601f198184030181529082905280516020918201206002840155613a949101614b35565b60408051808303601f1901815291905280516020909101206003820155600a8701546001600160401b90910462ffffff1611613ad1576001613ae3565b600a870154600160401b900462ffffff165b60058201805465ffffffffffff191662ffffff9290921691909117630100000017905560018101805462ffffff191662020302179055604051613b2890602001614afc565b60408051601f19818403018152919052805160209091012081556000613b4d87612f2b565b90506000613b5b8983613222565b6002810180546001600160a01b038b166001600160a01b0319821681178355600a8d018054600160b01b61ffff600160981b90920482168102600163ffff000160a01b03199095169093179390931780855590548316600160a01b90810261ffff60a01b199283161790945560098e01805460038701805463ffffffff19811663ffffffff938416908117835584546401000000009081900485160267ffffffffffffffff1990921617178082558354600160401b9081900484160263ffffffff60401b198216811783558454600160601b9081900485160263ffffffff60601b1990911667ffffffffffffffff60401b1990921691909117178082558354600160801b9081900490931690920263ffffffff60801b19831681178255835488900487169097029690931665ffffffffffff60801b1990911617949094178082558454839004841690920261ffff60b01b198316811782559354600160c01b9081900490931690920261ffff60c01b1990931663ffffffff60b01b1990911617919091179055604051909150613cf390602001614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020301179055613d2f91610bfc9101614b35565b50604051602001613d3f90614afc565b60408051601f198184030181529181528151602092830120600085815260058801909352912055613d7089886141bf565b50505050600191909101805466ffffffff0000001916630500000017905550505050565b6001600160a01b03811660009081526001830160205260408120541515610631565b6000610631836001600160a01b038416614122565b6000818152600183016020526040812081600182015460ff166005811115613df557613df5614885565b1480613e1957506005600182015460ff166005811115613e1757613e17614885565b145b15613e36576040805184815260018601602082015220915061314d565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b0811d2510814db1bdd60821b60448201526064016106ba565b600081815260208390526040812081600182015460ff166003811115613e9957613e99614885565b1480613ebd57506003600182015460ff166003811115613ebb57613ebb614885565b145b1561333057604080518481526020810186905220915061314d565b600081815260208390526040812081600182015460ff166003811115613f0057613f00614885565b1480613f2457506002600182015460ff166003811115613f2257613f22614885565b145b15613f3f57604080518481526020810186905220915061314d565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b60448201526064016106ba565b600081604051602001612f4e91906154d3565b60008181526020839052604081206002600182015460ff166003811115613fb957613fb9614885565b03613fd457604080518481526020810186905220915061314d565b6000600182015460ff166003811115613fef57613fef614885565b03613f3f5760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b60448201526064016106ba565b60008181526001830160205260408120548015614118576000614053600183614aba565b855490915060009061406790600190614aba565b90508181146140cc57600086600001828154811061408757614087614a8e565b90600052602060002001549050808760000184815481106140aa576140aa614a8e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140dd576140dd614acd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611345565b6000915050611345565b600081815260018301602052604081205461416957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611345565b506000611345565b60008181526001808401602052604082208291600182015460ff16600581111561419d5761419d614885565b03612fb657604080518581526001878101602083015291902093509150612fc0565b60006141f86040516020016141d39061536a565b6040516020818303038152906040528051906020012084613e7190919063ffffffff16565b90506040518060600160405280602881526020016156286028913960038201906142229082615413565b50600a8301546001600160881b90910461ffff1611614242576001614253565b600a830154600160881b900461ffff165b60048201805461ffff191661ffff9290921691909117905560405161427a906020016150f4565b60408051601f1981840301815290829052805160209182012060028401556142a29101614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203031790556142de91611ad091016152ae565b5060006143186040516020016142f3906152ae565b6040516020818303038152906040528051906020012085613ed890919063ffffffff16565b90506040518060600160405280602e8152602001615759602e913960048201906143429082615413565b50604051602001614352906150f4565b60408051601f19818403018152908290528051602091820120600284015561437a910161536a565b60408051808303601f1901815291905280516020909101206003820155600a8401546001600160401b90910462ffffff16116143b75760016143c9565b600a840154600160401b900462ffffff165b60058201805465ffffffffffff191662ffffff9290921691909117630100000017905560018101805462ffffff19166202030217905560405161440e90602001614afc565b60408051601f1981840301815291905280516020909101208155600061443384612f2b565b905060006144418683613222565b600a87018054600283018054600160b01b61ffff600160981b90940484160261ffff60b01b198216811783559354909216600160a01b0261ffff60a01b1990931663ffffffff60a01b19909216919091179190911780825560408051610100810182526000808252602080830182905282840182905260098d0154600160601b80820463ffffffff90811660608701819052600160801b938490049091166080870181905260a0870186905260c0870186905260e09096019490945260038901805465ffffffffffff60a01b199690930263ffffffff60801b1995909202949094166001600160a01b03199283161717939093169091556001600160a01b038b16919093161790925590519192506145599101614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166202030117905561459591610bfc910161536a565b506040516020016145a5906152ae565b60408051601f198184030181529181528151602092830120600094855260059096019091529091209290925550505050565b50805460008255906000526020600020908101906145f591906145f8565b50565b5b8082111561460d57600081556001016145f9565b5090565b80356001600160a01b038116811461462857600080fd5b919050565b60008060006060848603121561464257600080fd5b8335925061465260208501614611565b915061466060408501614611565b90509250925092565b60008060006060848603121561467e57600080fd5b833592506020840135915061466060408501614611565b600080600080608085870312156146ab57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600083850360808112156146dd57600080fd5b84359350602085013592506040603f19820112156146fa57600080fd5b506040840190509250925092565b60005b8381101561472357818101518382015260200161470b565b50506000910152565b602081526000825180602084015261474b816040850160208701614708565b601f01601f19169190910160400192915050565b600080600080600060a0868803121561477757600080fd5b85359450602086013567ffffffffffffffff81111561479557600080fd5b86016102c081890312156147a857600080fd5b94979496505050506040830135926060810135926080909101359150565b600080604083850312156147d957600080fd5b82359150602083013567ffffffffffffffff8111156147f757600080fd5b83016060818603121561480957600080fd5b809150509250929050565b6000806000806080858703121561482a57600080fd5b84359350602085013592506040850135915060608501356006811061484e57600080fd5b939692955090935050565b6000806040838503121561486c57600080fd5b8235915061487c60208401614611565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b600881106148b957634e487b7160e01b600052602160045260246000fd5b9052565b60208101611345828461489b565b7f545950452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f81526526a0a9aa22a960d11b602082015260260190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f53434f50455f4d81526a20a9aa22a92fa0a226a4a760a91b6020820152602b0190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f47554152442e4d81526420a9aa22a960d91b602082015260250190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f53595354454d5f81526526a0a9aa22a960d11b602082015260260190565b602080825260139082015272496c6c6567616c2041646d696e2053636f706560681b604082015260600190565b74554e4956455253452e4c4956454c595f564552534560581b815260150190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f50524f46494c4581526c2fa6a0a9aa22a92fa0a226a4a760991b6020820152602d0190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f4d41535445525f81526420a226a4a760d91b602082015260250190565b600060208284031215614a8557600080fd5b61063182614611565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561134557611345614aa4565b634e487b7160e01b600052603160045260246000fd5b600060018201614af557614af5614aa4565b5060010190565b7f524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f4d41535445815266292fa0a226a4a760c91b602082015260270190565b7f545950452e4c4956454c595f50524f46494c452e4c4956454c595f4d415354458152602960f91b602082015260210190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f50524f46494c458152662fa6a0a9aa22a960c91b602082015260270190565b6020808252600d908201526c496c6c6567616c2053636f706560981b604082015260600190565b61ffff811681146145f557600080fd5b600060208284031215614bea57600080fd5b813561063181614bc8565b6000808335601e19843603018112614c0c57600080fd5b83018035915067ffffffffffffffff821115614c2757600080fd5b60200191503681900382131561307057600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c90821680614c6657607f821691505b602082108103614c8657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156104b157600081815260208120601f850160051c81016020861015614cb35750805b601f850160051c820191505b81811015614cd257828155600101614cbf565b505050505050565b67ffffffffffffffff831115614cf257614cf2614c3c565b614d0683614d008354614c52565b83614c8c565b6000601f841160018114614d3a5760008515614d225750838201355b600019600387901b1c1916600186901b178355614d94565b600083815260209020601f19861690835b82811015614d6b5786850135825560209485019460019092019101614d4b565b5086821015614d885760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000813563ffffffff8116811461134557600080fd5b6000813561134581614bc8565b614de1614dca83614d9b565b825463ffffffff191663ffffffff91909116178255565b614e12614df060208401614d9b565b825467ffffffff00000000191660209190911b67ffffffff0000000016178255565b614e1e60408301614d9b565b815463ffffffff60401b19811660409290921b6bffffffff000000000000000016918217835563ffffffff60601b614e5860608601614d9b565b60601b1680836fffffffffffffffff00000000000000001984161717845563ffffffff60801b614e8a60808701614d9b565b60801b168373ffffffffffffffffffffffff0000000000000000198416178217178455505050614edf614ebf60a08401614db1565b82805461ffff60a01b191660a09290921b61ffff60a01b16919091179055565b614f0e614eee60c08401614db1565b82805461ffff60b01b191660b09290921b61ffff60b01b16919091179055565b614f3d614f1d60e08401614db1565b82805461ffff60c01b191660c09290921b61ffff60c01b16919091179055565b5050565b6000813560ff8116811461134557600080fd5b614f60614dca83614d9b565b614f6f614df060208401614d9b565b604082013562ffffff81168114614f8557600080fd5b81546affffff0000000000000000191660409190911b6affffff000000000000000016178155614fda614fba60608401614db1565b82805461ffff60581b191660589290921b61ffff60581b16919091179055565b615009614fe960808401614db1565b82805461ffff60681b191660689290921b61ffff60681b16919091179055565b61503861501860a08401614db1565b82805461ffff60781b191660789290921b61ffff60781b16919091179055565b61506761504760c08401614db1565b82805461ffff60881b191660889290921b61ffff60881b16919091179055565b61509661507660e08401614db1565b82805461ffff60981b191660989290921b61ffff60981b16919091179055565b6150c66150a66101008401614db1565b82805461ffff60a81b191660a89290921b61ffff60a81b16919091179055565b614f3d6150d66101208401614f41565b82805460ff60b81b191660b89290921b60ff60b81b16919091179055565b76554e4956455253452e4c4956454c595f50524f46494c4560481b815260170190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f414e4f4e594d4f815261555360f01b602082015260220190565b6000808335601e1984360301811261516257600080fd5b83018035915067ffffffffffffffff82111561517d57600080fd5b6020019150600581901b360382131561307057600080fd5b6000602082840312156151a757600080fd5b81356001600160e01b03198116811461063157600080fd5b63ffffffff81811683821601908082111561314d5761314d614aa4565b6000602082840312156151ee57600080fd5b8151801515811461063157600080fd5b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f53595354454d5f81526b26a0a9aa22a92fa0a226a4a760a11b6020820152602c0190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f545950455f4d4181526329aa22a960e11b602082015260240190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f545950455f4d4181526929aa22a92fa0a226a4a760b11b6020820152602a0190565b7f524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f535953544581526d26afa6a0a9aa22a92fa0a226a4a760911b6020820152602e0190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f504f4c4943595f81526b26a0a9aa22a92fa0a226a4a760a11b6020820152602c0190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f81526b26a0a9aa22a92fa0a226a4a760a11b6020820152602c0190565b7f545950452e4c4956454c595f50524f46494c452e4c4956454c595f535953544581526726afa6a0a9aa22a960c11b602082015260280190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f504f4c4943595f81526526a0a9aa22a960d11b602082015260260190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f53434f50455f4d81526420a9aa22a960d91b602082015260250190565b815167ffffffffffffffff81111561542d5761542d614c3c565b6154418161543b8454614c52565b84614c8c565b602080601f831160018114615476576000841561545e5750858301515b600019600386901b1c1916600185901b178555614cd2565b600085815260208120601f198616915b828110156154a557888601518255948401946001909101908401615486565b50858210156154c35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516154e5818460208701614708565b919091019291505056fe545950452e4c4956454c595f56455253452e4c4956454c595f50524f46494c455f4d4153544552524f4c452e4c4956454c595f56455253452e4c4956454c595f53595354454d5f4d41535445525f41444d494e524f4c452e4c4956454c595f56455253452e4c4956454c595f50524f46494c455f4d41535445525f41444d494e545950452e4c4956454c595f56455253452e4c4956454c595f414e4f4e594d4f5553545950452e4c4956454c595f56455253452e4c4956454c595f545950455f4d4153544552545950452e4c4956454c595f56455253452e4c4956454c595f4d415354455200524f4c452e4c4956454c595f56455253452e4c4956454c595f504f4c4943595f4d41535445525f41444d494e545950452e4c4956454c595f56455253452e4c4956454c595f504f4c4943595f4d4153544552545950452e4c4956454c595f50524f46494c452e4c4956454c595f53595354454d5f4d4153544552545950452e4c4956454c595f56455253452e4c4956454c595f53595354454d5f4d4153544552545950452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f4d4153544552524f4c452e4c4956454c595f56455253452e4c4956454c595f53434f50455f4d41535445525f41444d494e524f4c452e4c4956454c595f56455253452e4c4956454c595f4d41535445525f41444d494e524f4c452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f4d41535445525f41444d494e545950452e4c4956454c595f56455253452e4c4956454c595f414e5900000000545950452e4c4956454c595f50524f46494c452e4c4956454c595f4d4153544552524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f53595354454d5f4d41535445525f41444d494e524f4c452e4c4956454c595f56455253452e4c4956454c595f545950455f4d41535445525f41444d494e545950452e4c4956454c595f56455253452e4c4956454c595f53434f50455f4d4153544552524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f4d41535445525f41444d494ea2646970667358221220684e58b126465adddf027ce74f4e37c506aaa093fa27a3accce5dfd514c1fb4864736f6c63430008130033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061021b5760003560e01c806359c893fc1161012f578063a191cb30116100b7578063bec9475111610086578063bec947511461041c578063ca37fa8514610446578063e521078a14610466578063e5eba2b11461046e578063f81ceb8d1461047657600080fd5b8063a191cb30146103fc578063b3e761a514610404578063bbfee8b61461040c578063be27eb761461041457600080fd5b80637dd5be1c116100fe5780637dd5be1c146103bc5780638439d9ba146103c45780638dd25732146103e45780638fed2ba0146103ec5780639b3362c9146103f457600080fd5b806359c893fc14610354578063721cf60b1461037457806377d8dd70146103945780637cb0d2b6146103b457600080fd5b806323908f64116101b2578063339b5c1411610181578063339b5c141461032c5780633ab3ab88146103345780634a6439e61461033c57806358c910c114610344578063593dc0201461034c57600080fd5b806323908f64146102b357806323cff741146102bb5780632466209b146102db5780632927595c1461030c57600080fd5b806317e13eb6116101ee57806317e13eb61461026d578063180e79d81461029057806318e632581461029857806320f3487f146102ab57600080fd5b8063061a95c6146102205780630c230c9e1461023b5780630f75b8381461025d578063126bf02b14610265575b600080fd5b61022861047e565b6040519081526020015b60405180910390f35b81801561024757600080fd5b5061025b61025636600461462d565b6104a6565b005b6102286104b6565b6102286104c5565b61028061027b366004614669565b6104d4565b6040519015158152602001610232565b610228610638565b6102286102a6366004614695565b610647565b6102286107cb565b6102286107da565b8180156102c757600080fd5b506102806102d63660046146c7565b6107e9565b6102ff604051806040016040528060058152602001640332e302e360dc1b81525081565b604051610232919061472c565b81801561031857600080fd5b5061022861032736600461475f565b610d03565b6102286110a0565b6102286110af565b6102286110be565b6102286110dd565b6102286110ec565b81801561036057600080fd5b5061028061036f3660046147c6565b61111d565b81801561038057600080fd5b5061025b61038f366004614669565b61134b565b8180156103a057600080fd5b506102286103af366004614814565b611356565b6102286115a8565b6102286115b7565b8180156103d057600080fd5b5061025b6103df366004614859565b6115c6565b610228611847565b610228611856565b610228611875565b610228611884565b610228611893565b6102286118a2565b6102286118b1565b6102ff6040518060400160405280600b81526020016a4c41434c436f6d6d6f6e7360a81b81525081565b610459610454366004614695565b6118c0565b60405161023291906148bd565b6102286118ce565b6102286118dd565b6102286118ec565b60405160200161048d906148cb565b6040516020818303038152906040528051906020012081565b6104b18383836118fb565b505050565b60405160200161048d90614903565b60405160200161048d90614940565b60008281526004840160205260408120816008820154600160a01b900460ff16600381111561050557610505614885565b03610514576000915050610631565b600681015460008181526020879052604081206001015460ff169061053886612f2b565b9050600282600381111561054e5761054e614885565b036105cc576000806105608a86612f6b565b91509150806105785760009650505050505050610631565b60008061059284600301548d612fc890919063ffffffff16565b91509150806105ac57600098505050505050505050610631565b506000938452600501602052505060409020549091149250610631915050565b60038260038111156105e0576105e0614885565b03610628576000806105f28a86612fc8565b915091508061060a5760009650505050505050610631565b50600091825260050160205260409020541515935061063192505050565b60009450505050505b9392505050565b60405160200161048d90614977565b600081156107c057600160008381526020879052604090206001015460ff16600381111561067757610677614885565b116106c35760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b60448201526064015b60405180910390fd5b6000806106d08785612fdf565b915091508160058111156106e6576106e6614885565b600411156107365760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c2041646d696e2053636f70655479706500000000000000000060448201526064016106ba565b81600581111561074857610748614885565b6004036107735784811461076e5760405162461bcd60e51b81526004016106ba906149af565b6107b6565b604051602001610782906149dc565b6040516020818303038152906040528051906020012081146107b65760405162461bcd60e51b81526004016106ba906149af565b83925050506107c3565b50825b949350505050565b60405160200161048d906149fd565b60405160200161048d90614a3c565b60088201546000908190610805906001600160a01b0316612f2b565b9050600061082161081c6040860160208701614a73565b612f2b565b905060008082815260208790526040902060010154610100900460ff16600381111561084f5761084f614885565b1461088d5760405162461bcd60e51b815260206004820152600e60248201526d416c72656164792045786973747360901b60448201526064016106ba565b60006108998684613077565b60018101805462ffff0019166201020017905590506108bb6004870184613154565b5060088601546001600160a01b031660009081526005880160205260408120905b81548110156109f25781548735908390839081106108fc576108fc614a8e565b9060005260206000200154036109e0578154600110156109a457815461092490600190614aba565b811015610978578154829061093b90600190614aba565b8154811061094b5761094b614a8e565b906000526020600020015482600001828154811061096b5761096b614a8e565b6000918252602090912001555b815482908061098957610989614acd565b600190038181906000526020600020016000905590556109f2565b81548290806109b5576109b5614acd565b600190038181906000526020600020016000905590558160000160006109db91906145d7565b6109f2565b806109ea81614ae3565b9150506108dc565b50610a0e888735610a0960408a0160208b01614a73565b613160565b6000610a1a8885613222565b9050610a2c6040880160208901614a73565b6002820180546001600160a01b03929092166001600160a01b0319831681178255600a8b018054600160b01b61ffff600160981b90920482168102600163ffff000160a01b03199096169093179490941780845590548416600160a01b90810261ffff60a01b199283161790935560098c01805460038701805463ffffffff19811663ffffffff938416908117835584546401000000009081900485160267ffffffffffffffff1990921617178082558354600160401b9081900484160263ffffffff60401b198216811783558454600160601b9081900485160263ffffffff60601b1990911667ffffffffffffffff60401b1990921691909117178082558354600160801b9081900490931690920263ffffffff60801b19831681178255835487900488169096029590931665ffffffffffff60801b1990911617939093178082558354839004851690920261ffff60b01b198316811782559254600160c01b9081900490941690930261ffff60c01b1990921663ffffffff60b01b1990911617179055604051610bc090602001614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020301179055610c2491610bfc9101614b35565b604051602081830303815290604052805190602001208260040161328890919063ffffffff16565b50610c356040880160208901614a73565b6008890180546001600160a01b0319166001600160a01b0392909216919091179055610c646004890185613288565b506000610c9e604051602001610c7990614b35565b604051602081830303815290604052805190602001208a61329490919063ffffffff16565b905080600501600087815260200190815260200160002060009055604051602001610cc890614afc565b60408051601f198184030181529181528151602092830120600097885260059093019091529094209390935550600193505050509392505050565b6000806000610d3788604051602001610d1b90614b68565b604051602081830303815290604052805190602001208861336b565b90925090506005826005811115610d5057610d50614885565b148015610d805750604051602001610d67906149dc565b6040516020818303038152906040528051906020012081145b610d9c5760405162461bcd60e51b81526004016106ba90614ba1565b6001610db061022089016102008a01614bd8565b61ffff161015610df65760405162461bcd60e51b8152602060048201526011602482015270125b1b1959d85b08151e5c19531a5b5a5d607a1b60448201526064016106ba565b610e0d8886610a096102808b016102608c01614a73565b610e248886610a096102a08b016102808c01614a73565b60008581526004890160205260409020610e3e8880614bf5565b6007830191610e4e919083614cda565b50610e6161028089016102608a01614a73565b6008820180546001600160a01b03929092166001600160a81b031990921691909117600360a01b1760ff60a81b1916600160a91b1790556020880160098201610eaa8282614dbe565b50506101208801600a8201610ebf8282614f54565b50610ee49050610eda61081c6102808b016102608c01614a73565b6004830190613288565b506102a0880135156110365760016102a0890135600090815260208b9052604090206001015460ff166003811115610f1e57610f1e614885565b11610f655760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b60448201526064016106ba565b6000610f768a8a6102a00135612fdf565b915050604051602001610f88906149dc565b604051602081830303815290604052805190602001208114610fbc5760405162461bcd60e51b81526004016106ba906149af565b6000610fee8b604051602001610fd190614b68565b604051602081830303815290604052805190602001208b8a6133be565b9050600081600781111561100457611004614885565b14611024578060405163578978db60e01b81526004016106ba91906148bd565b50506102a08801356006820155611063565b60405160200161104590614b68565b60408051601f19818403018152919052805160209091012060068201555b611090816110796102808b016102608c01614a73565b61108b6102a08c016102808d01614a73565b613747565b6006015498975050505050505050565b60405160200161048d90614afc565b60405160200161048d906150f4565b6040516000805160206157188339815191526020820152603c0161048d565b60405160200161048d90615117565b6040517f545950452e4c4956454c595f50524f46494c452e4c4956454c595f414e5900006020820152603e0161048d565b600061113961112f6020840184614a73565b6008850190613d94565b1561117c5760405162461bcd60e51b8152602060048201526013602482015272119858d95d08105b1c9958591e48115e1a5cdd606a1b60448201526064016106ba565b60005b61118c604084018461514b565b90508110156112c157600060068501816111a9604087018761514b565b858181106111b9576111b9614a8e565b90506020020160208101906111ce9190615195565b6001600160e01b03191681526020810191909152604001600020546001600160a01b0316146112325760405162461bcd60e51b815260206004820152601060248201526f24b63632b3b0b61029b2b632b1ba37b960811b60448201526064016106ba565b61123f6020840184614a73565b600685016000611252604087018761514b565b8581811061126257611262614a8e565b90506020020160208101906112779190615195565b6001600160e01b0319168152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055806112b981614ae3565b91505061117f565b506112dc6112d26020840184614a73565b6008850190613db6565b50600060078401816112f16020860186614a73565b6001600160a01b03166001600160a01b0316815260200190815260200160002090508260200160208101906113269190614a73565b81546001600160a01b0319166001600160a01b03919091161790555060015b92915050565b6104b1838383613160565b6000838152600185016020526040812081600182015460ff16600581111561138057611380614885565b036113bf5760405162461bcd60e51b815260206004820152600f60248201526e14d8dbdc1948139bdd08119bdd5b99608a1b60448201526064016106ba565b600180820154610100900460ff1660038111156113de576113de614885565b1161141b5760405162461bcd60e51b815260206004820152600d60248201526c14d8dbdc194811195b195d1959609a1b60448201526064016106ba565b6001818101805460039061143d9084906301000000900463ffffffff166151bf565b92506101000a81548163ffffffff021916908363ffffffff16021790555082600581111561146d5761146d614885565b600182015460ff16600581111561148657611486614885565b11156114c85760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c2053636f70655479706560781b60448201526064016106ba565b8260058111156114da576114da614885565b600182015460ff1660058111156114f3576114f3614885565b0361151c578385146115175760405162461bcd60e51b81526004016106ba90614ba1565b61159f565b604051631de3230560e11b815260048101859052602481018690523090633bc6460a90604401602060405180830381865afa15801561155f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158391906151dc565b61159f5760405162461bcd60e51b81526004016106ba90614ba1565b95945050505050565b60405160200161048d906151fe565b60405160200161048d9061523c565b6115d36008830130613db6565b50306000818152600784016020908152604080832080546001600160a01b03969096166001600160a01b0319968716179055637147855d60e01b8352600690950190528381208054841683179055630f708ceb60e41b81528381208054841683179055631f98802f60e31b8152838120805484168317905563d9dc1f1960e01b8152838120805484168317905563071965c360e11b81528381208054841683179055631d74303760e21b81528381208054841683179055630505472360e51b8152838120805484168317905563b4a0bdf360e01b815283812080548416831790556358dbc45d60e01b8152838120805484168317905563a304e35360e01b815283812080548416831790556324447a4160e11b8152838120805484168317905563f94a0adb60e01b8152838120805484168317905563f698da2560e01b815283812080548416831790556338d38c9760e01b8152838120805484168317905563756af45f60e01b815283812080548416831790556301ffc9a760e01b815283812080548416831790556328e0496d60e21b81528381208054841683179055631b32687d60e01b815283812080548416831790556278b53b60e31b8152838120805484168317905563065c365b60e51b81528381208054841683179055631c74ee1160e01b81528381208054841683179055633fa2ff1760e01b815283812080548416831790556352d1902d60e01b8152838120805484168317905563266c45bb60e11b81528381208054841683179055630a97193160e31b81528381208054841683179055632c4b4fff60e01b81528381208054841683179055633b3c491760e11b81529290922080549091169091179055565b60405160200161048d90615272565b6040516000805160206155b68339815191526020820152603f0161048d565b60405160200161048d906152ae565b60405160200161048d906152ee565b60405160200161048d9061532c565b60405160200161048d9061536a565b60405160200161048d906153a4565b600061159f858585856133be565b60405160200161048d906153dc565b60405160200161048d90614b35565b60405160200161048d90614b68565b600061193460405160200161190f906149dc565b6040516020818303038152906040528051906020012085613dcb90919063ffffffff16565b905060405180604001604052806015815260200174554e4956455253452e4c4956454c595f564552534560581b8152508160030190816119749190615413565b5060028101805461ffff61ffff199091161790556001810180546202030562ffffff199091161790556040516000805160206155b68339815191526020820152603f0160408051808303601f1901815290829052805160209182012083556000805160206155b683398151915290820152600090611a1590603f015b6040516020818303038152906040528051906020012086613e7190919063ffffffff16565b90506040518060400160405280601f81526020016000805160206155b6833981519152815250816003019081611a4b9190615413565b5060048101805461ffff191661ffff179055604051611a6c906020016149dc565b60408051601f198184030181529082905280516020918201206002840155611a949101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020303179055611af891611ad09101614a3c565b604051602081830303815290604052805190602001208260060161328890919063ffffffff16565b506000611b32604051602001611b0d90614a3c565b6040516020818303038152906040528051906020012087613ed890919063ffffffff16565b90506040518060600160405280602581526020016156c7602591396004820190611b5c9082615413565b50604051602001611b6c906149dc565b60408051601f19818403018152828252805160209182012060028501556000805160206155b6833981519152818401528151601f818503018152603f84019092528151910120600383015560058201805465ffffffffffff19166301ffffff17905560018201805462ffffff191662020302179055611bed90605f01614a3c565b60408051601f19818403018152919052805160209091012081556000611c1286612f2b565b90506000611c208883613222565b6002810180546001600160a01b0319166001600160a01b038a16179055604080516102408101825262ffffff815261ffff6020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905260e083018290526101008301829052610120830182905261014083019190915260ff610160830181905261018083018190526101a083018190526101c083018190526101e083018190526102008301819052610220909201919091526003830180546001600160f01b0319166001600160f01b031790559051919250611d019101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203011790556000805160206155b683398151915290820152611d4e90603f01610bfc565b50611d61604051602001610bfc906153dc565b50611d74604051602001610bfc9061523c565b50611d87604051602001610bfc906148cb565b50611d9a604051602001610bfc906153a4565b50611dad604051602001610bfc90614b68565b50611dc0604051602001610bfc90614940565b50604051602001611dd090614a3c565b60408051808303601f1901815282825280516020918201206000868152600589018352928320557f545950452e4c4956454c595f50524f46494c452e4c4956454c595f414e5900009083015290611e4a90603e015b604051602081830303815290604052805190602001208a613e7190919063ffffffff16565b90506040518060400160405280601c8152602001600080516020615718833981519152815250816003019081611e809190615413565b5060048101805461ffff19169055604051611e9d906020016150f4565b60408051601f198184030181529082905280516020918201206002840155611ec59101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662010303179055600091611f2991611f049101614b35565b604051602081830303815290604052805190602001208b613e7190919063ffffffff16565b9050604051806060016040528060218152602001615738602191396003820190611f539082615413565b5060048101805461ffff19169055604051611f70906020016150f4565b60408051601f198184030181529082905280516020918201206002840155611f989101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662010303179055600091611ffc91611fd7910161536a565b604051602081830303815290604052805190602001208c613e7190919063ffffffff16565b90506040518060600160405280602881526020016156286028913960038201906120269082615413565b5060048101805461ffff19169055604051612043906020016150f4565b60408051601f19818403018152908290528051602091820120600284015561206b9101614a3c565b60408051601f1981840301815290829052805160209182012083556001909201805462ffffff191662010303179055600093506120ad9250611e259101614977565b90506040518060600160405280602681526020016156506026913960038201906120d79082615413565b5060048101805461ffff191661ffff1790556040516120f8906020016149dc565b60408051601f1981840301815290829052805160209182012060028401556121209101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166202030317905561215c91611ad091016151fe565b506000612196604051602001612171906151fe565b604051602081830303815290604052805190602001208b613ed890919063ffffffff16565b90506040518060600160405280602c8152602001615517602c913960048201906121c09082615413565b506040516020016121d0906149dc565b60408051601f1981840301815290829052805160209182012060028401556121f89101614977565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff19166202030217905561224a9101614a3c565b60408051601f1981840301815291905280516020909101208155600061226f89612f2b565b9050600061227d8c83613222565b6040805161024081018252610400815260006020808301829052608083850181905261ffff6060850181905290840183905260a0840181905260c0840183905260e0840183905261010084015260ff61012084018190526101408401819052610160840183905261018084018390526101a084018390526101c084018390526101e08401929092526102008301829052610220909201526003830180546001600160f01b0319167dffff000000000000ff00ffffff00000000ffff0000ffff008000000004001790556002830180546001600160a01b0319166001600160a01b038f1617905590519192506123729101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203011790556123ae91610bfc9101614977565b506040516020016123be906151fe565b60408051601f1981840301815282825280516020918201206000958652600590970181529084209590955591936123fc9350611e25920190506153dc565b90506040518060600160405280602581526020016157b16025913960038201906124269082615413565b5060048101805461ffff191661ffff179055604051612447906020016149dc565b60408051601f19818403018152908290528051602091820120600284015561246f9101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203031790556124ab91611ad09101614903565b506040516020016124bb90614903565b60408051601f19818403018152828252805160209182012060008781526005860183529283205590916124f2916121719101614903565b90506040518060600160405280602b815260200161569c602b9139600482019061251c9082615413565b5060405160200161252c906149dc565b60408051601f19818403018152908290528051602091820120600284015561255491016153dc565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff1916620203021790556125a69101614a3c565b60408051601f1981840301815290829052805160209182012083556000916125d291611fd7910161523c565b90506040518060600160405280602481526020016155926024913960038201906125fc9082615413565b5060048101805461ffff191661ffff17905560405161261d906020016149dc565b60408051601f1981840301815290829052805160209182012060028401556126459101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166202030317905561268191611ad09101615272565b5060405160200161269190615272565b60408051601f19818403018152828252805160209182012060008981526005860183529283205590916126ed916126c89101615272565b604051602081830303815290604052805190602001208d613ed890919063ffffffff16565b90506040518060600160405280602a8152602001615787602a913960048201906127179082615413565b50604051602001612727906149dc565b60408051601f19818403018152908290528051602091820120600284015561274f910161523c565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff1916620203021790556127a19101614a3c565b60408051601f19818403018152908290528051602091820120909255600094506127d19350611e259250016148cb565b90506040518060600160405280602681526020016156766026913960038201906127fb9082615413565b5060048101805461ffff191661ffff17905560405161281c906020016149dc565b60408051601f1981840301815290829052805160209182012060028401556128449101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166202030317905561288091611ad0910161532c565b506040516020016128909061532c565b60408051601f19818403018152828252805160209182012060008781526005860183529283205590916128c791612171910161532c565b90506040518060600160405280602c81526020016156ec602c913960048201906128f19082615413565b50604051602001612901906149dc565b60408051601f19818403018152908290528051602091820120600284015561292991016148cb565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff19166202030217905561297b9101614a3c565b60408051601f19818403018152908290528051602091820120909255600092506129a991611e2591016153a4565b90506040518060600160405280602681526020016156026026913960038201906129d39082615413565b5060048101805461ffff191661ffff1790556040516129f4906020016149dc565b60408051601f198184030181529082905280516020918201206002840155612a1c9101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020303179055612a5891611ad091016152ee565b50604051602001612a68906152ee565b60408051601f1981840301815282825280516020918201206000878152600586018352928320559091612a9f9161217191016152ee565b90506040518060600160405280602c81526020016155d6602c91396004820190612ac99082615413565b50604051602001612ad9906149dc565b60408051601f198184030181529082905280516020918201206002840155612b0191016153a4565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff191662020302179055612b539101614a3c565b60408051601f198184030181529082905280516020918201208355600091612b7f91611fd79101614b68565b90506040518060600160405280602781526020016154f0602791396003820190612ba99082615413565b5060048101805461ffff191661ffff179055604051612bca906020016149dc565b60408051601f198184030181529082905280516020918201206002840155612bf29101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020303179055612c2e91611ad091016152ee565b50604051602001612c3e906149fd565b60408051601f1981840301815282825280516020918201206000898152600586018352928320559091612c75916126c891016149fd565b90506040518060600160405280602d8152602001615543602d91396004820190612c9f9082615413565b50604051602001612caf906149dc565b60408051601f198184030181529082905280516020918201206002840155612cd79101614b68565b60408051808303601f19018152908290528051602091820120600384015560058301805465ffffffffffff19166301ffffff17905560018301805462ffffff191662020302179055612d299101614a3c565b60408051601f1981840301815290829052805160209182012090925560009450612d599350611e25925001615117565b9050604051806060016040528060228152602001615570602291396003820190612d839082615413565b5060048101805461ffff19169055604051612da0906020016149dc565b60408051601f198184030181529082905280516020918201206002840155612dc89101614a3c565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166201030317905560008051602061571883398151915290820152600090612e1890603c01611f04565b90506040518060400160405280601c8152602001600080516020615718833981519152815250816003019081612e4e9190615413565b5060048101805461ffff19169055604051612e6b906020016149dc565b60408051601f198184030181529082905280516020918201206002840155612e939101614a3c565b60408051601f19818403018152828252805160209182012084556001938401805462ffffff191662010303179055928901805466ffffffff0000001916631000000017905581810190528181527f444f4d41494e2e4c4956454c595f56455253452e4c4956454c595f475541524491810191909152612f209150612f1690613f7d565b6004870190613288565b505050505050505050565b6040516bffffffffffffffffffffffff19606083901b1660208201526000906034015b604051602081830303815290604052805190602001209050919050565b6000818152602083905260408120819060025b600182015460ff166003811115612f9757612f97614885565b03612fb657604080518581526020810187905220925060019150612fc0565b6000199250600091505b509250929050565b600081815260208390526040812081906003612f7e565b600081815260208390526040812060010154819060ff16600281600381111561300a5761300a614885565b0361304257600061301b8686613f90565b60020154600081815260018089016020526040909120015460ff1694509250613070915050565b600381600381111561305657613056614885565b0361306757600061301b8686613294565b50600091508190505b9250929050565b600081815260208390526040812060018082015460ff16600381111561309f5761309f614885565b036130ba57604080518481526020810186905220915061314d565b6000600182015460ff1660038111156130d5576130d5614885565b036131125760405162461bcd60e51b815260206004820152600d60248201526c13525108139bdd08119bdd5b99609a1b60448201526064016106ba565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081352510814db1bdd60821b60448201526064016106ba565b5092915050565b6000610631838361402f565b6001600160a01b0381166000908152600584016020526040812080549091036131b5576001600160a01b038216600090815260058501602090815260408220805460018101825590835291200183905561321c565b80546010116132065760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c2050726f66696c654163636f756e744c696d6974000000000060448201526064016106ba565b8054600181018255600082815260209020018390555b50505050565b600081815260208390526040812081600182015460ff16600381111561324a5761324a614885565b148061326d575060018082015460ff16600381111561326b5761326b614885565b145b1561311257604080518481526020810186905220915061314d565b60006106318383614122565b60008181526020839052604081206003600182015460ff1660038111156132bd576132bd614885565b036132d857604080518481526020810186905220915061314d565b6000600182015460ff1660038111156132f3576132f3614885565b036133305760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b60448201526064016106ba565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b60448201526064016106ba565b600080806133798686613294565b60008581526005820160205260408120549192506133978883613f90565b6002015460008181526001998a01602052604090209098015460ff16989650505050505050565b600080806133cc8785614171565b91509150806133e0576005925050506107c3565b60008681526020889052604090206001015460ff16600281600381111561340957613409614885565b036135a75760008061341b8a8a612f6b565b9150915080613432576003955050505050506107c3565b60036001830154610100900460ff16600381111561345257613452614885565b14613465576006955050505050506107c3565b60008061347f84600301548d612fc890919063ffffffff16565b91509150806134985760049750505050505050506107c3565b60036001830154610100900460ff1660038111156134b8576134b8614885565b146134cd5760079750505050505050506107c3565b60008a81526005830160205260409020548b146134f45760019750505050505050506107c3565b60008c60020160008e60030160008f8152602001908152602001600020548152602001908152602001600020905060038081111561353457613534614885565b600382810154640100000000900460ff169081111561355557613555614885565b14801561358057506004880154600382015464010000000090910460ff908116620100009092041610155b15613596576002985050505050505050506107c3565b6000985050505050505050506107c3565b60038160038111156135bb576135bb614885565b03613739576000806135cd8a8a612fc8565b91509150806135e4576004955050505050506107c3565b60036001830154610100900460ff16600381111561360457613604614885565b14613617576007955050505050506107c3565b600088815260058301602052604081205490806136348d84612f6b565b915091508061364e576003985050505050505050506107c3565b60036001830154610100900460ff16600381111561366e5761366e614885565b14613684576006985050505050505050506107c3565b60008d60020160008f600301600087815260200190815260200160002054815260200190815260200160002090506003808111156136c4576136c4614885565b600382810154640100000000900460ff16908111156136e5576136e5614885565b14801561371057506004890154600382015464010000000090910460ff908116620100009092041610155b1561372757600299505050505050505050506107c3565b600099505050505050505050506107c3565b506001979650505050505050565b600061375b60405160200161190f906150f4565b905060405180604001604052806017815260200176554e4956455253452e4c4956454c595f50524f46494c4560481b81525081600301908161379d9190615413565b50600a840154600282018054600160681b90920461ffff1661ffff1990921691909117905560018101805462ffffff1916620203051790556040516137e490602001614b35565b60408051808303601f1901815290829052805160209182012083557f545950452e4c4956454c595f50524f46494c452e4c4956454c595f414e5900009082015260009061383390603e016119f0565b90506040518060400160405280601c81526020016000805160206157188339815191528152508160030190816138699190615413565b5060048101805461ffff19169055604051613886906020016150f4565b60408051601f1981840301815290829052805160209182012060028401556138ae9101614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662010303179055600091613912916138ed9101614b35565b6040516020818303038152906040528051906020012087613e7190919063ffffffff16565b905060405180606001604052806021815260200161573860219139600382019061393c9082615413565b50600a8601546001600160881b90910461ffff161161395c57600161396d565b600a860154600160881b900461ffff165b60048201805461ffff191661ffff92909216919091179055604051613994906020016150f4565b60408051601f1981840301815290829052805160209182012060028401556139bc9101614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203031790556139f891611ad09101614afc565b506000613a32604051602001613a0d90614afc565b6040516020818303038152906040528051906020012088613ed890919063ffffffff16565b90506040518060600160405280602781526020016157d6602791396004820190613a5c9082615413565b50604051602001613a6c906150f4565b60408051601f198184030181529082905280516020918201206002840155613a949101614b35565b60408051808303601f1901815291905280516020909101206003820155600a8701546001600160401b90910462ffffff1611613ad1576001613ae3565b600a870154600160401b900462ffffff165b60058201805465ffffffffffff191662ffffff9290921691909117630100000017905560018101805462ffffff191662020302179055604051613b2890602001614afc565b60408051601f19818403018152919052805160209091012081556000613b4d87612f2b565b90506000613b5b8983613222565b6002810180546001600160a01b038b166001600160a01b0319821681178355600a8d018054600160b01b61ffff600160981b90920482168102600163ffff000160a01b03199095169093179390931780855590548316600160a01b90810261ffff60a01b199283161790945560098e01805460038701805463ffffffff19811663ffffffff938416908117835584546401000000009081900485160267ffffffffffffffff1990921617178082558354600160401b9081900484160263ffffffff60401b198216811783558454600160601b9081900485160263ffffffff60601b1990911667ffffffffffffffff60401b1990921691909117178082558354600160801b9081900490931690920263ffffffff60801b19831681178255835488900487169097029690931665ffffffffffff60801b1990911617949094178082558454839004841690920261ffff60b01b198316811782559354600160c01b9081900490931690920261ffff60c01b1990931663ffffffff60b01b1990911617919091179055604051909150613cf390602001614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff191662020301179055613d2f91610bfc9101614b35565b50604051602001613d3f90614afc565b60408051601f198184030181529181528151602092830120600085815260058801909352912055613d7089886141bf565b50505050600191909101805466ffffffff0000001916630500000017905550505050565b6001600160a01b03811660009081526001830160205260408120541515610631565b6000610631836001600160a01b038416614122565b6000818152600183016020526040812081600182015460ff166005811115613df557613df5614885565b1480613e1957506005600182015460ff166005811115613e1757613e17614885565b145b15613e36576040805184815260018601602082015220915061314d565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b0811d2510814db1bdd60821b60448201526064016106ba565b600081815260208390526040812081600182015460ff166003811115613e9957613e99614885565b1480613ebd57506003600182015460ff166003811115613ebb57613ebb614885565b145b1561333057604080518481526020810186905220915061314d565b600081815260208390526040812081600182015460ff166003811115613f0057613f00614885565b1480613f2457506002600182015460ff166003811115613f2257613f22614885565b145b15613f3f57604080518481526020810186905220915061314d565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b60448201526064016106ba565b600081604051602001612f4e91906154d3565b60008181526020839052604081206002600182015460ff166003811115613fb957613fb9614885565b03613fd457604080518481526020810186905220915061314d565b6000600182015460ff166003811115613fef57613fef614885565b03613f3f5760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b60448201526064016106ba565b60008181526001830160205260408120548015614118576000614053600183614aba565b855490915060009061406790600190614aba565b90508181146140cc57600086600001828154811061408757614087614a8e565b90600052602060002001549050808760000184815481106140aa576140aa614a8e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140dd576140dd614acd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611345565b6000915050611345565b600081815260018301602052604081205461416957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611345565b506000611345565b60008181526001808401602052604082208291600182015460ff16600581111561419d5761419d614885565b03612fb657604080518581526001878101602083015291902093509150612fc0565b60006141f86040516020016141d39061536a565b6040516020818303038152906040528051906020012084613e7190919063ffffffff16565b90506040518060600160405280602881526020016156286028913960038201906142229082615413565b50600a8301546001600160881b90910461ffff1611614242576001614253565b600a830154600160881b900461ffff165b60048201805461ffff191661ffff9290921691909117905560405161427a906020016150f4565b60408051601f1981840301815290829052805160209182012060028401556142a29101614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff1916620203031790556142de91611ad091016152ae565b5060006143186040516020016142f3906152ae565b6040516020818303038152906040528051906020012085613ed890919063ffffffff16565b90506040518060600160405280602e8152602001615759602e913960048201906143429082615413565b50604051602001614352906150f4565b60408051601f19818403018152908290528051602091820120600284015561437a910161536a565b60408051808303601f1901815291905280516020909101206003820155600a8401546001600160401b90910462ffffff16116143b75760016143c9565b600a840154600160401b900462ffffff165b60058201805465ffffffffffff191662ffffff9290921691909117630100000017905560018101805462ffffff19166202030217905560405161440e90602001614afc565b60408051601f1981840301815291905280516020909101208155600061443384612f2b565b905060006144418683613222565b600a87018054600283018054600160b01b61ffff600160981b90940484160261ffff60b01b198216811783559354909216600160a01b0261ffff60a01b1990931663ffffffff60a01b19909216919091179190911780825560408051610100810182526000808252602080830182905282840182905260098d0154600160601b80820463ffffffff90811660608701819052600160801b938490049091166080870181905260a0870186905260c0870186905260e09096019490945260038901805465ffffffffffff60a01b199690930263ffffffff60801b1995909202949094166001600160a01b03199283161717939093169091556001600160a01b038b16919093161790925590519192506145599101614afc565b60408051601f19818403018152908290528051602091820120835560018301805462ffffff19166202030117905561459591610bfc910161536a565b506040516020016145a5906152ae565b60408051601f198184030181529181528151602092830120600094855260059096019091529091209290925550505050565b50805460008255906000526020600020908101906145f591906145f8565b50565b5b8082111561460d57600081556001016145f9565b5090565b80356001600160a01b038116811461462857600080fd5b919050565b60008060006060848603121561464257600080fd5b8335925061465260208501614611565b915061466060408501614611565b90509250925092565b60008060006060848603121561467e57600080fd5b833592506020840135915061466060408501614611565b600080600080608085870312156146ab57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600083850360808112156146dd57600080fd5b84359350602085013592506040603f19820112156146fa57600080fd5b506040840190509250925092565b60005b8381101561472357818101518382015260200161470b565b50506000910152565b602081526000825180602084015261474b816040850160208701614708565b601f01601f19169190910160400192915050565b600080600080600060a0868803121561477757600080fd5b85359450602086013567ffffffffffffffff81111561479557600080fd5b86016102c081890312156147a857600080fd5b94979496505050506040830135926060810135926080909101359150565b600080604083850312156147d957600080fd5b82359150602083013567ffffffffffffffff8111156147f757600080fd5b83016060818603121561480957600080fd5b809150509250929050565b6000806000806080858703121561482a57600080fd5b84359350602085013592506040850135915060608501356006811061484e57600080fd5b939692955090935050565b6000806040838503121561486c57600080fd5b8235915061487c60208401614611565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b600881106148b957634e487b7160e01b600052602160045260246000fd5b9052565b60208101611345828461489b565b7f545950452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f81526526a0a9aa22a960d11b602082015260260190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f53434f50455f4d81526a20a9aa22a92fa0a226a4a760a91b6020820152602b0190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f47554152442e4d81526420a9aa22a960d91b602082015260250190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f53595354454d5f81526526a0a9aa22a960d11b602082015260260190565b602080825260139082015272496c6c6567616c2041646d696e2053636f706560681b604082015260600190565b74554e4956455253452e4c4956454c595f564552534560581b815260150190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f50524f46494c4581526c2fa6a0a9aa22a92fa0a226a4a760991b6020820152602d0190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f4d41535445525f81526420a226a4a760d91b602082015260250190565b600060208284031215614a8557600080fd5b61063182614611565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561134557611345614aa4565b634e487b7160e01b600052603160045260246000fd5b600060018201614af557614af5614aa4565b5060010190565b7f524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f4d41535445815266292fa0a226a4a760c91b602082015260270190565b7f545950452e4c4956454c595f50524f46494c452e4c4956454c595f4d415354458152602960f91b602082015260210190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f50524f46494c458152662fa6a0a9aa22a960c91b602082015260270190565b6020808252600d908201526c496c6c6567616c2053636f706560981b604082015260600190565b61ffff811681146145f557600080fd5b600060208284031215614bea57600080fd5b813561063181614bc8565b6000808335601e19843603018112614c0c57600080fd5b83018035915067ffffffffffffffff821115614c2757600080fd5b60200191503681900382131561307057600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c90821680614c6657607f821691505b602082108103614c8657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156104b157600081815260208120601f850160051c81016020861015614cb35750805b601f850160051c820191505b81811015614cd257828155600101614cbf565b505050505050565b67ffffffffffffffff831115614cf257614cf2614c3c565b614d0683614d008354614c52565b83614c8c565b6000601f841160018114614d3a5760008515614d225750838201355b600019600387901b1c1916600186901b178355614d94565b600083815260209020601f19861690835b82811015614d6b5786850135825560209485019460019092019101614d4b565b5086821015614d885760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000813563ffffffff8116811461134557600080fd5b6000813561134581614bc8565b614de1614dca83614d9b565b825463ffffffff191663ffffffff91909116178255565b614e12614df060208401614d9b565b825467ffffffff00000000191660209190911b67ffffffff0000000016178255565b614e1e60408301614d9b565b815463ffffffff60401b19811660409290921b6bffffffff000000000000000016918217835563ffffffff60601b614e5860608601614d9b565b60601b1680836fffffffffffffffff00000000000000001984161717845563ffffffff60801b614e8a60808701614d9b565b60801b168373ffffffffffffffffffffffff0000000000000000198416178217178455505050614edf614ebf60a08401614db1565b82805461ffff60a01b191660a09290921b61ffff60a01b16919091179055565b614f0e614eee60c08401614db1565b82805461ffff60b01b191660b09290921b61ffff60b01b16919091179055565b614f3d614f1d60e08401614db1565b82805461ffff60c01b191660c09290921b61ffff60c01b16919091179055565b5050565b6000813560ff8116811461134557600080fd5b614f60614dca83614d9b565b614f6f614df060208401614d9b565b604082013562ffffff81168114614f8557600080fd5b81546affffff0000000000000000191660409190911b6affffff000000000000000016178155614fda614fba60608401614db1565b82805461ffff60581b191660589290921b61ffff60581b16919091179055565b615009614fe960808401614db1565b82805461ffff60681b191660689290921b61ffff60681b16919091179055565b61503861501860a08401614db1565b82805461ffff60781b191660789290921b61ffff60781b16919091179055565b61506761504760c08401614db1565b82805461ffff60881b191660889290921b61ffff60881b16919091179055565b61509661507660e08401614db1565b82805461ffff60981b191660989290921b61ffff60981b16919091179055565b6150c66150a66101008401614db1565b82805461ffff60a81b191660a89290921b61ffff60a81b16919091179055565b614f3d6150d66101208401614f41565b82805460ff60b81b191660b89290921b60ff60b81b16919091179055565b76554e4956455253452e4c4956454c595f50524f46494c4560481b815260170190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f414e4f4e594d4f815261555360f01b602082015260220190565b6000808335601e1984360301811261516257600080fd5b83018035915067ffffffffffffffff82111561517d57600080fd5b6020019150600581901b360382131561307057600080fd5b6000602082840312156151a757600080fd5b81356001600160e01b03198116811461063157600080fd5b63ffffffff81811683821601908082111561314d5761314d614aa4565b6000602082840312156151ee57600080fd5b8151801515811461063157600080fd5b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f53595354454d5f81526b26a0a9aa22a92fa0a226a4a760a11b6020820152602c0190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f545950455f4d4181526329aa22a960e11b602082015260240190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f545950455f4d4181526929aa22a92fa0a226a4a760b11b6020820152602a0190565b7f524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f535953544581526d26afa6a0a9aa22a92fa0a226a4a760911b6020820152602e0190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f504f4c4943595f81526b26a0a9aa22a92fa0a226a4a760a11b6020820152602c0190565b7f524f4c452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f81526b26a0a9aa22a92fa0a226a4a760a11b6020820152602c0190565b7f545950452e4c4956454c595f50524f46494c452e4c4956454c595f535953544581526726afa6a0a9aa22a960c11b602082015260280190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f504f4c4943595f81526526a0a9aa22a960d11b602082015260260190565b7f545950452e4c4956454c595f56455253452e4c4956454c595f53434f50455f4d81526420a9aa22a960d91b602082015260250190565b815167ffffffffffffffff81111561542d5761542d614c3c565b6154418161543b8454614c52565b84614c8c565b602080601f831160018114615476576000841561545e5750858301515b600019600386901b1c1916600185901b178555614cd2565b600085815260208120601f198616915b828110156154a557888601518255948401946001909101908401615486565b50858210156154c35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082516154e5818460208701614708565b919091019291505056fe545950452e4c4956454c595f56455253452e4c4956454c595f50524f46494c455f4d4153544552524f4c452e4c4956454c595f56455253452e4c4956454c595f53595354454d5f4d41535445525f41444d494e524f4c452e4c4956454c595f56455253452e4c4956454c595f50524f46494c455f4d41535445525f41444d494e545950452e4c4956454c595f56455253452e4c4956454c595f414e4f4e594d4f5553545950452e4c4956454c595f56455253452e4c4956454c595f545950455f4d4153544552545950452e4c4956454c595f56455253452e4c4956454c595f4d415354455200524f4c452e4c4956454c595f56455253452e4c4956454c595f504f4c4943595f4d41535445525f41444d494e545950452e4c4956454c595f56455253452e4c4956454c595f504f4c4943595f4d4153544552545950452e4c4956454c595f50524f46494c452e4c4956454c595f53595354454d5f4d4153544552545950452e4c4956454c595f56455253452e4c4956454c595f53595354454d5f4d4153544552545950452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f4d4153544552524f4c452e4c4956454c595f56455253452e4c4956454c595f53434f50455f4d41535445525f41444d494e524f4c452e4c4956454c595f56455253452e4c4956454c595f4d41535445525f41444d494e524f4c452e4c4956454c595f56455253452e4c4956454c595f4d454d4245525f4d41535445525f41444d494e545950452e4c4956454c595f56455253452e4c4956454c595f414e5900000000545950452e4c4956454c595f50524f46494c452e4c4956454c595f4d4153544552524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f53595354454d5f4d41535445525f41444d494e524f4c452e4c4956454c595f56455253452e4c4956454c595f545950455f4d41535445525f41444d494e545950452e4c4956454c595f56455253452e4c4956454c595f53434f50455f4d4153544552524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f4d41535445525f41444d494ea2646970667358221220684e58b126465adddf027ce74f4e37c506aaa093fa27a3accce5dfd514c1fb4864736f6c63430008130033",
  "devdoc": {
    "author": "Sina Tadayon, https://github.com/SinaTadayon",
    "kind": "dev",
    "methods": {},
    "title": "ACL Commons Library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}