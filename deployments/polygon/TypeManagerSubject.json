{
  "address": "0xB43781502F0B48430b30f095Ec0a0E02D513f28A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum IACL.AuthorizationStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "ACLActionForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLCallForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLContextActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLContextNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLDomainActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLDomainNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLFunctionActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLFunctionNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLMemberActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLMemberNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLPolicyForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRealmActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRealmNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRoleActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRoleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLRoleScopeForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLTypeActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLUnauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACLUniverseActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessFunctionNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessNotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessPolicyForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessRoleActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessRoleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessTypeActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AdminAccessTypeNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "initCount",
          "type": "uint16"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "acl",
          "type": "address"
        }
      ],
      "name": "ProxyAccessControlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "ProxyLocalAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "sstat",
          "type": "uint8"
        }
      ],
      "name": "ProxySafeModeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "ustat",
          "type": "uint8"
        }
      ],
      "name": "ProxyUpdatabilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "ProxyUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IACLCommons.ActivityStatus",
          "name": "acstat",
          "type": "uint8"
        }
      ],
      "name": "TypeActivityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "adminId",
          "type": "bytes32"
        }
      ],
      "name": "TypeAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum IACLCommons.AlterabilityStatus",
          "name": "alstat",
          "type": "uint8"
        }
      ],
      "name": "TypeAlterabilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "scopeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "adminId",
          "type": "bytes32"
        }
      ],
      "name": "TypeRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        }
      ],
      "name": "TypeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "roleLimit",
          "type": "uint16"
        }
      ],
      "name": "TypeRoleLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "scopeId",
          "type": "bytes32"
        }
      ],
      "name": "TypeScopeUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEMBER_SIGNATURE_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PREDICT_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractVersion",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accessControlManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeModeStatus",
      "outputs": [
        {
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "acl",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLocalAdmin",
          "type": "address"
        }
      ],
      "name": "setLocalAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBaseProxy.ProxySafeModeStatus",
          "name": "sstat",
          "type": "uint8"
        }
      ],
      "name": "setSafeModeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "ustat",
          "type": "uint8"
        }
      ],
      "name": "setUpdatabilityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "typeCheckAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        }
      ],
      "name": "typeCheckId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "typeName",
          "type": "string"
        }
      ],
      "name": "typeCheckName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        }
      ],
      "name": "typeGetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "scopeId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "roleLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "roleCount",
              "type": "uint16"
            },
            {
              "internalType": "enum IACLCommons.AgentType",
              "name": "adminType",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AgentType",
              "name": "atype",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct ITypeManagement.TypeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        }
      ],
      "name": "typeGetRoles",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "typeHasAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "typeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "roleId",
          "type": "bytes32"
        }
      ],
      "name": "typeHasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "scopeId",
              "type": "bytes32"
            },
            {
              "internalType": "int24",
              "name": "roleLimit",
              "type": "int24"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct ITypeManagement.TypeRegisterRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "typeRegister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "types",
          "type": "bytes32[]"
        }
      ],
      "name": "typeRemove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "enum IACLCommons.ActivityStatus",
              "name": "acstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IACLCommons.UpdateActivityRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "typeUpdateActivityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IACLCommons.UpdateAdminRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "typeUpdateAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "enum IACLCommons.AlterabilityStatus",
              "name": "alstat",
              "type": "uint8"
            }
          ],
          "internalType": "struct IACLCommons.UpdateAlterabilityRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "typeUpdateAlterabilityStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "typeId",
              "type": "bytes32"
            },
            {
              "internalType": "uint16",
              "name": "roleLimit",
              "type": "uint16"
            }
          ],
          "internalType": "struct ITypeManagement.TypeUpdateRoleLimitRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "typeUpdateRoleLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiredAt",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IACLCommons.MemberSignature",
          "name": "memberSign",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "scopeId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IACLCommons.UpdateScopeRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "typeUpdateScope",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatabilityStatus",
      "outputs": [
        {
          "internalType": "enum IBaseProxy.ProxyUpdatabilityStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "forceCall",
          "type": "bool"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x02f7aee373e655e9c349e92d8fd53283036fa1a360020a7624daf761857f9bd5",
  "receipt": {
    "to": null,
    "from": "0xCB93d383638cc7B174FE2139Dec8570521Bb8118",
    "contractAddress": "0xB43781502F0B48430b30f095Ec0a0E02D513f28A",
    "transactionIndex": 49,
    "gasUsed": "4968642",
    "logsBloom": "0x
    "blockHash": "0x3b68c654894a9e0d3f96fd0bdaf5fed058895f30fb1479bd9cd4df53f997e582",
    "transactionHash": "0x02f7aee373e655e9c349e92d8fd53283036fa1a360020a7624daf761857f9bd5",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 40018257,
        "transactionHash": "0x02f7aee373e655e9c349e92d8fd53283036fa1a360020a7624daf761857f9bd5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cb93d383638cc7b174fe2139dec8570521bb8118",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002378b67c25317a000000000000000000000000000000000000000000000000315ee2f422637fb3e00000000000000000000000000000000000000000000039193e03f9f38b78fe600000000000000000000000000000000000000000000000313b6a3da63e4e39e0000000000000000000000000000000000000000000003919617cb06fb0aa786",
        "logIndex": 195,
        "blockHash": "0x3b68c654894a9e0d3f96fd0bdaf5fed058895f30fb1479bd9cd4df53f997e582"
      }
    ],
    "blockNumber": 40018257,
    "cumulativeGasUsed": "14206909",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3d37f12163392c6a812b5af749abec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum IACL.AuthorizationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ACLActionForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLCallForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLContextActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLContextNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLDomainActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLDomainNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLFunctionActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLFunctionNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLMemberActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLMemberNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLPolicyForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRealmActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRealmNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRoleActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRoleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRoleScopeForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLTypeActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLUniverseActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessFunctionNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessNotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessPolicyForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessRoleActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessRoleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessTypeActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdminAccessTypeNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"initCount\",\"type\":\"uint16\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acl\",\"type\":\"address\"}],\"name\":\"ProxyAccessControlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ProxyLocalAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"sstat\",\"type\":\"uint8\"}],\"name\":\"ProxySafeModeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"ustat\",\"type\":\"uint8\"}],\"name\":\"ProxyUpdatabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ProxyUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"}],\"name\":\"TypeActivityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"}],\"name\":\"TypeAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"name\":\"TypeAlterabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"scopeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"}],\"name\":\"TypeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"}],\"name\":\"TypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roleLimit\",\"type\":\"uint16\"}],\"name\":\"TypeRoleLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"scopeId\",\"type\":\"bytes32\"}],\"name\":\"TypeScopeUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMBER_SIGNATURE_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREDICT_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractVersion\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accessControlManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeModeStatus\",\"outputs\":[{\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acl\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLocalAdmin\",\"type\":\"address\"}],\"name\":\"setLocalAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBaseProxy.ProxySafeModeStatus\",\"name\":\"sstat\",\"type\":\"uint8\"}],\"name\":\"setSafeModeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"ustat\",\"type\":\"uint8\"}],\"name\":\"setUpdatabilityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"typeCheckAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"}],\"name\":\"typeCheckId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"typeName\",\"type\":\"string\"}],\"name\":\"typeCheckName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"}],\"name\":\"typeGetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"scopeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"roleLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"roleCount\",\"type\":\"uint16\"},{\"internalType\":\"enum IACLCommons.AgentType\",\"name\":\"adminType\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AgentType\",\"name\":\"atype\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ITypeManagement.TypeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"}],\"name\":\"typeGetRoles\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"typeHasAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"roleId\",\"type\":\"bytes32\"}],\"name\":\"typeHasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"scopeId\",\"type\":\"bytes32\"},{\"internalType\":\"int24\",\"name\":\"roleLimit\",\"type\":\"int24\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ITypeManagement.TypeRegisterRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"typeRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"types\",\"type\":\"bytes32[]\"}],\"name\":\"typeRemove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum IACLCommons.ActivityStatus\",\"name\":\"acstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.UpdateActivityRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"typeUpdateActivityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IACLCommons.UpdateAdminRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"typeUpdateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum IACLCommons.AlterabilityStatus\",\"name\":\"alstat\",\"type\":\"uint8\"}],\"internalType\":\"struct IACLCommons.UpdateAlterabilityRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"typeUpdateAlterabilityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"typeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"roleLimit\",\"type\":\"uint16\"}],\"internalType\":\"struct ITypeManagement.TypeUpdateRoleLimitRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"typeUpdateRoleLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiredAt\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IACLCommons.MemberSignature\",\"name\":\"memberSign\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"scopeId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IACLCommons.UpdateScopeRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"typeUpdateScope\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatabilityStatus\",\"outputs\":[{\"internalType\":\"enum IBaseProxy.ProxyUpdatabilityStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forceCall\",\"type\":\"bool\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Sina Tadayon, https://github.com/SinaTadayon\",\"events\":{\"Initialized(address,address,address,string,string,uint16)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ProxyLocalAdminUpdated(address,address,address)\":{\"details\":\"Emitted when the admin account has changed.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"ACL Type Manager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/acl/agent/TypeManager.sol\":\"TypeManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/contracts/acl/ACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Abstract Access Control List Storage Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract ACLStorage is BaseUUPSStorage, IACLCommons {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  struct DataCollection {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    mapping(bytes32 => ProfileEntity) profiles;\\n    mapping(address => ProfileAccount) profileAccounts;\\n    mapping(bytes4 => address) selectors;\\n    mapping(address => FacetEntity) facets;\\n    LEnumerableSet.AddressSet facetSet;\\n  }\\n\\n  bytes32 public constant CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"PredictContext(address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"MemberSignature(address account,uint256 expiredAt)\\\");\\n\\n  bytes32 public constant PROFILE_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileContext(string profile,address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfilePredictContext(string profile,address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileMemberSignature(string profile,address account,uint256 expiredAt)\\\");\\n\\n  // General Types ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SCOPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_MEMBER_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_TYPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_POLICY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_PROFILE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\"));\\n\\n  // Universe Scope ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_VERSE\\\"));\\n\\n  // General Profile Type\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n\\n  bool internal _firstInit;\\n  DataCollection internal _data;\\n  // Note: for next upgrade add new variables after this line\\n}\\n\",\"keccak256\":\"0x748ba9ee4ce4e5492afd3261bf61e8360b3f45ae3588218c1bbf90699df2065b\",\"license\":\"MIT\"},\"src/contracts/acl/IACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACL {\\n  enum AuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ACLUnauthorized();\\n  error ACLPolicyForbidden();\\n  error ACLCallForbidden();\\n  error ACLRoleScopeForbidden();\\n  error ACLMemberNotFound();\\n  error ACLRoleNotFound();\\n  error ACLTypeNotFound();\\n  error ACLFunctionNotFound();\\n  error ACLContextNotFound();\\n  error ACLRealmNotFound();\\n  error ACLDomainNotFound();\\n  error ACLMemberActivityForbidden();\\n  error ACLRoleActivityForbidden();\\n  error ACLTypeActivityForbidden();\\n  error ACLFunctionActivityForbidden();\\n  error ACLContextActivityForbidden();\\n  error ACLRealmActivityForbidden();\\n  error ACLDomainActivityForbidden();\\n  error ACLUniverseActivityForbidden();\\n\\n  error ACLActionForbidden(AuthorizationStatus);\\n\\n  enum AdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error AdminAccessNotPermitted();\\n  error AdminAccessPolicyForbidden();\\n  error AdminAccessRoleNotFound();\\n  error AdminAccessTypeNotFound();\\n  error AdminAccessFunctionNotFound();\\n  error AdminAccessRoleActivityForbidden();\\n  error AdminAccessTypeActivityForbidden();\\n\\n  error SetAdminForbidden(AdminAccessStatus);\\n\\n  function hasAccess(bytes32 functionId) external returns (AuthorizationStatus);\\n\\n  function hasMemberAccess(bytes32 functionId, bytes32 memberId) external returns (AuthorizationStatus);\\n\\n  function hasCSAccess(address contractId, bytes4 selector) external returns (AuthorizationStatus);\\n\\n  function hasAccountAccess(\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (AuthorizationStatus);\\n}\\n\",\"keccak256\":\"0x3b4bd5cd73079a4bcbc82fe3699b21fcc08fdafc964f978a9c540756302dbb2e\",\"license\":\"MIT\"},\"src/contracts/acl/IACLCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLCommons {\\n  enum AgentType {\\n    NONE,\\n    MEMBER,\\n    ROLE,\\n    TYPE\\n  }\\n\\n  enum ActivityStatus {\\n    NONE,\\n    DELETED,\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum AlterabilityStatus {\\n    NONE,\\n    DISABLED,\\n    UPDATABLE,\\n    UPGRADABLE\\n  }\\n\\n  enum ScopeType {\\n    NONE,\\n    FUNCTION,\\n    CONTEXT,\\n    REALM,\\n    DOMAIN,\\n    UNIVERSE\\n  }\\n\\n  enum ActionType {\\n    ADD,\\n    UPDATE,\\n    REMOVE\\n  }\\n\\n  enum PolicyType {\\n    UNLOCK, // 0\\n    SLOCK, // soft lock, 1 - 63\\n    MLOCK, // medium lock, 64 - 127\\n    RLOCK, // restrict lock, 128 - 191\\n    HLOCK, // hard lock, 192 - 254\\n    LOCK // 255\\n  }\\n\\n  struct BaseAgent {\\n    bytes32 adminId;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct BaseScope {\\n    bytes32 adminId;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    uint32 referredByAgent;\\n  }\\n\\n  struct PolicyEntity {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint8 policyCode;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FunctionEntity {\\n    BaseScope bs;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n  }\\n\\n  struct ContextEntity {\\n    BaseScope bs;\\n    bytes32 realmId;\\n    address contractId;\\n    uint8 functionLimit;\\n    LEnumerableSet.Bytes32Set functions;\\n  }\\n\\n  struct RealmEntity {\\n    BaseScope bs;\\n    bytes32 domainId;\\n    uint32 contextLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set contexts;\\n  }\\n\\n  struct DomainEntity {\\n    BaseScope bs;\\n    bytes32 universeId;\\n    uint16 realmLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set realms;\\n  }\\n\\n  struct UniverseEntity {\\n    BaseScope bs;\\n    uint16 domainLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set domains;\\n  }\\n\\n  struct GeneralLimit {\\n    uint24 memberLimit;\\n    uint16 memberRegisterLimit;\\n    uint16 contextRegisterLimit;\\n    uint16 functionRegisterLimit;\\n    uint16 profileRegisterLimit;\\n    uint16 contextLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 callLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint8 roleRegisterLimit;\\n    uint8 typeRegisterLimit;\\n    uint8 realmRegisterLimit;\\n    uint8 domainRegisterLimit;\\n    uint8 policyRegisterLimit;\\n    uint8 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct MemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    GeneralLimit limits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct MemberSignature {\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct RoleEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n  }\\n\\n  struct TypeEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    mapping(bytes32 => bytes32) members;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FacetEntity {\\n    address subjectId;\\n  }\\n\\n  struct UpdateActivityRequest {\\n    bytes32 id;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct UpdateAlterabilityRequest {\\n    bytes32 id;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct UpdateAdminRequest {\\n    bytes32 id;\\n    bytes32 adminId;\\n  }\\n\\n  // used in Policy / Role / Type\\n  struct UpdateScopeRequest {\\n    bytes32 id;\\n    bytes32 scopeId;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////\\n  // Profiles\\n\\n  struct ProfileMemberSignature {\\n    string profileName;\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct ProfileRegisterLimit {\\n    uint32 memberRegisterLimit;\\n    uint32 roleRegisterLimit;\\n    uint32 typeRegisterLimit;\\n    uint32 functionRegisterLimit;\\n    uint32 contextRegisterLimit;\\n    uint16 realmRegisterLimit;\\n    uint16 domainRegisterLimit;\\n    uint16 policyRegisterLimit;\\n  }\\n\\n  struct ProfileLimit {\\n    uint32 profileCallLimit;\\n    uint32 contextLimit;\\n    uint24 memberLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 memberCallLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint16 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ProfileAccount {\\n    bytes32[] profiles;\\n  }\\n\\n  struct ProfileEntity {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    LEnumerableSet.Bytes32Set admins;\\n    bytes32 adminId;\\n    string name;\\n    address owner;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileMemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    uint16 callLimit;\\n    uint16 typeLimit;\\n    ProfileRegisterLimit registerLimits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct ProfileUpdateActivityRequest {\\n    bytes32 entityId;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct ProfileUpdateAlterabilityRequest {\\n    bytes32 entityId;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct ProfileUpdateAdminRequest {\\n    bytes32 entityId;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateScopeRequest {\\n    bytes32 entityId;\\n    bytes32 scopeId;\\n  }\\n}\\n\",\"keccak256\":\"0x2269cec662cb8f25c0523b281f8f97bd9b5115ea80771c7d1e4083031f4a1c87\",\"license\":\"MIT\"},\"src/contracts/acl/IACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function getAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function getAnyType() external pure returns (bytes32);\\n\\n  // scope master type\\n  function getScopeMasterType() external pure returns (bytes32);\\n\\n  // type master type\\n  function getTypeMasterType() external pure returns (bytes32);\\n\\n  // member master type\\n  function getMemberMasterType() external pure returns (bytes32);\\n\\n  // system master type\\n  function getSystemMasterType() external pure returns (bytes32);\\n\\n  // lively master type\\n  function getLivelyMasterType() external pure returns (bytes32);\\n\\n  // Policy Master type\\n  function getPolicyMasterType() external pure returns (bytes32);\\n\\n  // Profile Master type\\n  function getProfileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function getUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function isAgentExist(bytes32 agentId) external view returns (bool);\\n\\n  function isScopeExist(bytes32 scopeId) external view returns (bool);\\n\\n  function getScopeBaseInfo(bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function getAgentBaseInfo(bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function isScopesCompatible(bytes32 destScopeId, bytes32 srcScopeId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x303b03b04f7fc7356cc4c88bf54e218e29ce9fb479b44310d0788fa176ecfc50\",\"license\":\"MIT\"},\"src/contracts/acl/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control Manager Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLManager is IACLCommons {\\n  // Request Types\\n  struct FacetSelectorUpgradeRequest {\\n    ActionType action;\\n    bytes4[] selectors;\\n  }\\n\\n  struct FacetUpgradeRequest {\\n    address facetId;\\n    address subjectId;\\n    FacetSelectorUpgradeRequest[] functions;\\n  }\\n\\n  struct FacetRegisterRequest {\\n    address facetId;\\n    address subjectId;\\n    bytes4[] selectors;\\n  }\\n\\n  struct FacetInfo {\\n    address subjectId;\\n  }\\n\\n  event ACLFacetRegistered(address indexed sender, address indexed facetId, address indexed subjectId);\\n\\n  event ACLFacetUpgraded(address indexed sender, address indexed facetId, address indexed subjectId);\\n\\n  event ACLFacetFunctionUpgraded(address indexed sender, address indexed facetId, bytes4 selector, ActionType action);\\n\\n  event ACLInitialized(\\n    address indexed sender,\\n    address indexed admin,\\n    address indexed systemAdmin,\\n    address contextManager,\\n    address functionManager\\n  );\\n\\n  function aclRegisterFacet(FacetRegisterRequest[] calldata requests) external returns (bool);\\n\\n  function aclUpgradeFacet(FacetUpgradeRequest[] calldata requests) external returns (bool);\\n\\n  function aclGetFacets() external view returns (address[] memory);\\n\\n  function aclGetFacet(bytes4 selector) external view returns (address);\\n\\n  function aclHasSelector(bytes4 selector) external view returns (bool);\\n\\n  function aclGetFacetInfo(address facetId) external view returns (FacetInfo memory);\\n}\\n\",\"keccak256\":\"0xc124daf10a79621e8a3fa8d6c4a21e3afafc7d4d1864bef1223bb7530addd270\",\"license\":\"MIT\"},\"src/contracts/acl/agent/IMemberManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Member Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IMemberManagement is IACLCommons {\\n  struct MemberRegisterRequest {\\n    bytes32 roleId;\\n    bytes32 adminId;\\n    address account;\\n    GeneralLimit limits;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct MemberUpdateGeneralLimitRequest {\\n    bytes32 memberId;\\n    GeneralLimit limits;\\n  }\\n\\n  struct MemberInfo {\\n    bytes32 adminId;\\n    address account;\\n    GeneralLimit limits;\\n    uint16 typeCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event MemberRegistered(\\n    address indexed sender,\\n    bytes32 indexed memberId,\\n    address indexed account,\\n    bytes32 roleId,\\n    bytes32 adminId,\\n    GeneralLimit limits\\n  );\\n\\n  event MemberGeneralLimitUpdated(address indexed sender, bytes32 indexed memberId, GeneralLimit limits);\\n\\n  event MemberAdminUpdated(address indexed sender, bytes32 indexed memberId, bytes32 indexed adminId);\\n\\n  event MemberActivityUpdated(address indexed sender, bytes32 indexed memberId, ActivityStatus acstat);\\n\\n  event MemberAlterabilityUpdated(address indexed sender, bytes32 indexed memberId, AlterabilityStatus alstat);\\n\\n  event MemberRoleRevoked(address indexed sender, bytes32 indexed memberId, bytes32 indexed roleId, bytes32 typeId);\\n\\n  event MemberRemoved(address indexed sender, bytes32 indexed memberId, bool isCompleted);\\n\\n  function memberRegister(MemberSignature calldata memberSign, MemberRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function memberUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function memberUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function memberUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function memberUpdateGeneralLimit(\\n    MemberSignature calldata memberSign,\\n    MemberUpdateGeneralLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function memberRemove(MemberSignature calldata memberSign, bytes32[] calldata members) external returns (bool);\\n\\n  function memberCheckId(bytes32 memberId) external view returns (bool);\\n\\n  function memberCheckAccount(address account) external view returns (bool);\\n\\n  function memberCheckAdmin(bytes32 memberId, address account) external view returns (bool);\\n\\n  function memberHasType(bytes32 memberId, bytes32 typeId) external view returns (bool);\\n\\n  function memberGetTypes(bytes32 memberId) external view returns (bytes32[] memory);\\n\\n  function memberGetInfo(bytes32 memberId) external view returns (MemberInfo memory);\\n}\\n\",\"keccak256\":\"0xf37af1012005b6b55ccee3de27c1dd0e5851a550388257c6a77f73962d822945\",\"license\":\"MIT\"},\"src/contracts/acl/agent/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Role Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IRoleManagement is IACLCommons {\\n  struct RoleRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    int32 memberLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  struct RoleGrantMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct RoleRevokeMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct RoleUpdateMemberLimitRequest {\\n    bytes32 roleId;\\n    uint24 memberLimit;\\n  }\\n\\n  struct RoleInfo {\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    bytes32 adminId;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed roleId,\\n    bytes32 indexed typeId,\\n    bytes32 adminId,\\n    bytes32 scopeId\\n  );\\n\\n  event RoleMemberDeleted(\\n    address indexed sender,\\n    bytes32 indexed roleId,\\n    bytes32 indexed memberId,\\n    bytes32 typeId,\\n    address account\\n  );\\n\\n  event RoleMemberGranted(address indexed sender, bytes32 indexed roleId, bytes32 indexed memberId, bytes32 typeId);\\n\\n  event RoleMemberRevoked(address indexed sender, bytes32 indexed roleId, bytes32 indexed memberId, bytes32 typeId);\\n\\n  event RoleMemberLimitUpdated(address indexed sender, bytes32 indexed roleId, uint24 memberLimit);\\n\\n  event RoleAdminUpdated(address indexed sender, bytes32 indexed roleId, bytes32 indexed adminId);\\n\\n  event RoleScopeUpdated(address indexed sender, bytes32 indexed roleId, bytes32 indexed scopeId);\\n\\n  event RoleActivityUpdated(address indexed sender, bytes32 indexed roleId, ActivityStatus acstat);\\n\\n  event RoleAlterabilityUpdated(address indexed sender, bytes32 indexed roleId, AlterabilityStatus alstat);\\n\\n  event RoleRemoved(address indexed sender, bytes32 indexed roleId);\\n\\n  function roleRegister(MemberSignature calldata memberSign, RoleRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleGrantMembers(MemberSignature calldata memberSign, RoleGrantMembersRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleRevokeMembers(MemberSignature calldata memberSign, RoleRevokeMembersRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateScope(MemberSignature calldata memberSign, UpdateScopeRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function roleUpdateMemberLimit(MemberSignature calldata memberSign, RoleUpdateMemberLimitRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleRemove(MemberSignature calldata memberSign, bytes32[] calldata roles) external returns (bool);\\n\\n  function roleCheckId(bytes32 roleId) external view returns (bool);\\n\\n  function roleCheckName(string calldata roleName) external view returns (bool);\\n\\n  function roleCheckAdmin(bytes32 roleId, address account) external view returns (bool);\\n\\n  function roleHasAccount(bytes32 roleId, address account) external view returns (bool);\\n\\n  function roleGetInfo(bytes32 roleId) external view returns (RoleInfo memory);\\n}\\n\",\"keccak256\":\"0xd577f997c4da278bcf299f28134d89a2807745820b182d7f4de0bcfa68ad262c\",\"license\":\"MIT\"},\"src/contracts/acl/agent/ITypeManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Type Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface ITypeManagement is IACLCommons {\\n  struct TypeRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    int24 roleLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  struct TypeUpdateRoleLimitRequest {\\n    bytes32 typeId;\\n    uint16 roleLimit;\\n  }\\n\\n  struct TypeInfo {\\n    bytes32 scopeId;\\n    bytes32 adminId;\\n    uint16 roleLimit;\\n    uint16 roleCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event TypeRegistered(address indexed sender, bytes32 indexed typeId, bytes32 indexed scopeId, bytes32 adminId);\\n\\n  event TypeActivityUpdated(address indexed sender, bytes32 indexed typeId, ActivityStatus acstat);\\n\\n  event TypeAlterabilityUpdated(address indexed sender, bytes32 indexed typeId, AlterabilityStatus alstat);\\n\\n  event TypeRoleLimitUpdated(address indexed sender, bytes32 indexed typeId, uint16 roleLimit);\\n\\n  event TypeScopeUpdated(address indexed sender, bytes32 indexed typeId, bytes32 indexed scopeId);\\n\\n  event TypeAdminUpdated(address indexed sender, bytes32 indexed typeId, bytes32 indexed adminId);\\n\\n  event TypeRemoved(address indexed sender, bytes32 indexed typeId);\\n\\n  function typeRegister(MemberSignature calldata memberSign, TypeRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeUpdateScope(MemberSignature calldata memberSign, UpdateScopeRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function typeUpdateRoleLimit(MemberSignature calldata memberSign, TypeUpdateRoleLimitRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function typeRemove(MemberSignature calldata memberSign, bytes32[] calldata types) external returns (bool);\\n\\n  function typeCheckId(bytes32 typeId) external view returns (bool);\\n\\n  function typeCheckName(string calldata typeName) external view returns (bool);\\n\\n  function typeCheckAdmin(bytes32 typeId, address account) external view returns (bool);\\n\\n  function typeHasAccount(bytes32 typeId, address account) external view returns (bool);\\n\\n  function typeHasRole(bytes32 typeId, bytes32 roleId) external view returns (bool);\\n\\n  function typeGetRoles(bytes32 typeId) external view returns (bytes32[] memory);\\n\\n  function typeGetInfo(bytes32 typeId) external view returns (TypeInfo memory);\\n}\\n\",\"keccak256\":\"0x5265339aadcd95091fb3596d1c32e39c69e4da3f74c75ac0623769c3825ea3cc\",\"license\":\"MIT\"},\"src/contracts/acl/agent/TypeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../ACLStorage.sol\\\";\\nimport \\\"./IMemberManagement.sol\\\";\\nimport \\\"./ITypeManagement.sol\\\";\\nimport \\\"../IACL.sol\\\";\\nimport \\\"../IACLGenerals.sol\\\";\\nimport \\\"../scope/IFunctionManagement.sol\\\";\\nimport \\\"../../lib/acl/LACLStorage.sol\\\";\\nimport \\\"../../lib/acl/LACLCommons.sol\\\";\\nimport \\\"../../lib/acl/LACLUtils.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../proxy/BaseUUPSProxy.sol\\\";\\n\\n/**\\n * @title ACL Type Manager Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ncontract TypeManager is ACLStorage, BaseUUPSProxy, ITypeManagement {\\n  using LACLStorage for DataCollection;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  constructor() {}\\n\\n  function initialize(\\n    string calldata contractName,\\n    string calldata contractVersion,\\n    address accessControlManager\\n  ) public onlyProxy onlyLocalAdmin initializer {\\n    __BASE_UUPS_init(contractName, contractVersion, accessControlManager);\\n\\n    emit Initialized(\\n      _msgSender(),\\n      address(this),\\n      _implementation(),\\n      contractName,\\n      contractVersion,\\n      _getInitializedCount()\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(ITypeManagement).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n  function typeRegister(MemberSignature calldata memberSign, TypeRegisterRequest[] calldata requests)\\n    external\\n    returns (bool)\\n  {\\n    (, bytes32 senderId, address sender) = _accessPermission(memberSign, ITypeManagement.typeRegister.selector);\\n\\n    // check and set\\n    MemberEntity storage memberEntity = _data.memberReadSlot(senderId);\\n    require(\\n      int16(uint16(memberEntity.limits.typeRegisterLimit)) - int8(uint8(requests.length)) >= 0,\\n      \\\"Illegal RegisterLimit\\\"\\n    );\\n    unchecked {\\n      memberEntity.limits.typeRegisterLimit -= uint8(requests.length);\\n    }\\n\\n    // fetch scope type and scope id of sender\\n    (ScopeType senderScopeType, bytes32 senderScopeId) = _doGetMemberScopeInfoFromType(\\n      _LIVELY_VERSE_TYPE_MASTER_TYPE_ID,\\n      senderId\\n    );\\n\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      bytes32 newTypeId = LACLUtils.generateId(requests[i].name);\\n      require(_data.agents[newTypeId].atype == AgentType.NONE, \\\"Already Exist\\\");\\n      require(\\n        requests[i].acstat > ActivityStatus.DELETED && requests[i].alstat > AlterabilityStatus.NONE,\\n        \\\"Illegal Activity/Alterability\\\"\\n      );\\n\\n      // checking requested type scope\\n      BaseScope storage requestedScope = _getCheckUpdateRequestScope(\\n        requests[i].scopeId,\\n        senderScopeId,\\n        senderScopeType\\n      );\\n\\n      // create new type\\n      TypeEntity storage newType = _data.typeWriteSlot(newTypeId);\\n      newType.ba.atype = AgentType.TYPE;\\n      newType.ba.acstat = requests[i].acstat;\\n      newType.ba.alstat = requests[i].alstat;\\n      newType.ba.adminId = requests[i].adminId;\\n      newType.scopeId = requests[i].scopeId;\\n      newType.roleLimit = requests[i].roleLimit >= 0\\n        ? uint16(uint24(requests[i].roleLimit))\\n        : memberEntity.limits.typeRoleLimit;\\n      newType.name = requests[i].name;\\n      newType.ba.adminId = _getTypeAdmin(\\n        requestedScope.stype,\\n        requestedScope.adminId,\\n        requests[i].scopeId,\\n        requests[i].adminId\\n      );\\n      emit TypeRegistered(sender, newTypeId, requests[i].scopeId, requests[i].adminId);\\n    }\\n    return true;\\n  }\\n\\n  function typeUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool)\\n  {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      ITypeManagement.typeUpdateAdmin.selector\\n    );\\n\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      TypeEntity storage typeEntity = _doGetEntityAndCheckAdminAccess(\\n        requests[i].id,\\n        senderId,\\n        functionId,\\n        ITypeManagement.typeUpdateAdmin.selector\\n      );\\n\\n      // checking requested type admin\\n      typeEntity.ba.adminId = _getTypeAdmin(\\n        _data.scopes[typeEntity.scopeId].stype,\\n        _data.scopes[typeEntity.scopeId].adminId,\\n        typeEntity.scopeId,\\n        requests[i].adminId\\n      );\\n\\n      emit TypeAdminUpdated(sender, requests[i].id, requests[i].adminId);\\n    }\\n    return true;\\n  }\\n\\n  function typeUpdateScope(MemberSignature calldata memberSign, UpdateScopeRequest[] calldata requests)\\n    external\\n    returns (bool)\\n  {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      ITypeManagement.typeUpdateScope.selector\\n    );\\n    ScopeType senderScopeType;\\n    bytes32 senderScopeId;\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      TypeEntity storage typeEntity = _doGetEntityAndCheckAdminAccess(\\n        requests[i].id,\\n        senderId,\\n        functionId,\\n        ITypeManagement.typeUpdateScope.selector\\n      );\\n\\n      AgentType adminAgentType = _data.agents[typeEntity.ba.adminId].atype;\\n      if (adminAgentType == AgentType.ROLE) {\\n        RoleEntity storage roleEntity = _data.roleReadSlot(typeEntity.ba.adminId);\\n        senderScopeId = roleEntity.scopeId;\\n        senderScopeType = _data.scopes[roleEntity.scopeId].stype;\\n      } else {\\n        TypeEntity storage agentType = _data.typeReadSlot(typeEntity.ba.adminId);\\n        bytes32 memberRoleId = agentType.members[senderId];\\n        RoleEntity storage memberAgentRole = _data.roleReadSlot(memberRoleId);\\n        senderScopeType = _data.scopes[memberAgentRole.scopeId].stype;\\n        senderScopeId = memberAgentRole.scopeId;\\n      }\\n\\n      BaseScope storage requestScope = _getCheckUpdateRequestScope(requests[i].scopeId, senderScopeId, senderScopeType);\\n      BaseScope storage currentScope = _data.scopes[typeEntity.scopeId];\\n      if (typeEntity.roles.length() > 0) {\\n        require(requestScope.stype > currentScope.stype, \\\"Illegal ScopeType\\\");\\n        require(\\n          IACLGenerals(address(this)).isScopesCompatible(requests[i].scopeId, typeEntity.scopeId),\\n          \\\"Illegal Scope\\\"\\n        );\\n      }\\n      require(currentScope.referredByAgent > 0, \\\"Illeagl Referred\\\");\\n      unchecked {\\n        currentScope.referredByAgent -= 1;\\n      }\\n      typeEntity.scopeId = requests[i].scopeId;\\n      emit TypeScopeUpdated(sender, requests[i].id, requests[i].scopeId);\\n    }\\n    return true;\\n  }\\n\\n  function typeUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool)\\n  {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      ITypeManagement.typeUpdateActivityStatus.selector\\n    );\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      TypeEntity storage typeEntity = _doGetEntityAndCheckAdminAccess(\\n        requests[i].id,\\n        senderId,\\n        functionId,\\n        ITypeManagement.typeUpdateActivityStatus.selector\\n      );\\n      require(requests[i].acstat > ActivityStatus.DELETED, \\\"Illegal Activity\\\");\\n      typeEntity.ba.acstat = requests[i].acstat;\\n      emit TypeActivityUpdated(sender, requests[i].id, requests[i].acstat);\\n    }\\n    return true;\\n  }\\n\\n  function typeUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool) {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      ITypeManagement.typeUpdateAlterabilityStatus.selector\\n    );\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      TypeEntity storage typeEntity = _data.typeReadSlot(requests[i].id);\\n      IACL.AdminAccessStatus status = _doCheckAdminAccess(typeEntity.ba.adminId, senderId, functionId);\\n      if (status != IACL.AdminAccessStatus.PERMITTED) LACLUtils.generateAdminAccessError(status);\\n      require(requests[i].alstat != AlterabilityStatus.NONE, \\\"Illegal Alterability\\\");\\n      typeEntity.ba.alstat = requests[i].alstat;\\n      emit TypeAlterabilityUpdated(sender, requests[i].id, requests[i].alstat);\\n    }\\n    return true;\\n  }\\n\\n  function typeUpdateRoleLimit(MemberSignature calldata memberSign, TypeUpdateRoleLimitRequest[] calldata requests)\\n    external\\n    returns (bool)\\n  {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      ITypeManagement.typeUpdateRoleLimit.selector\\n    );\\n\\n    for (uint256 i = 0; i < requests.length; i++) {\\n      TypeEntity storage typeEntity = _doGetEntityAndCheckAdminAccess(\\n        requests[i].typeId,\\n        senderId,\\n        functionId,\\n        ITypeManagement.typeUpdateRoleLimit.selector\\n      );\\n      require(requests[i].roleLimit > typeEntity.roles.length(), \\\"Illegal Limit\\\");\\n      typeEntity.roleLimit = requests[i].roleLimit;\\n      emit TypeRoleLimitUpdated(sender, requests[i].typeId, requests[i].roleLimit);\\n    }\\n    return true;\\n  }\\n\\n  function typeRemove(MemberSignature calldata memberSign, bytes32[] calldata types) external returns (bool) {\\n    (bytes32 functionId, bytes32 senderId, address sender) = _accessPermission(\\n      memberSign,\\n      ITypeManagement.typeRemove.selector\\n    );\\n\\n    for (uint256 i = 0; i < types.length; i++) {\\n      TypeEntity storage typeEntity = _data.typeReadSlot(types[i]);\\n      IACL.AdminAccessStatus status = _doCheckAdminAccess(typeEntity.ba.adminId, senderId, functionId);\\n      if (status != IACL.AdminAccessStatus.PERMITTED) LACLUtils.generateAdminAccessError(status);\\n\\n      require(typeEntity.roles.length() == 0, \\\"Illegal Remove\\\");\\n\\n      BaseScope storage typeScope = _data.scopes[typeEntity.scopeId];\\n      require(typeScope.referredByAgent > 0, \\\"Illeagl Referred\\\");\\n      unchecked {\\n        typeScope.referredByAgent -= 1;\\n      }\\n\\n      delete typeEntity.ba;\\n      delete typeEntity.scopeId;\\n      delete typeEntity.name;\\n      delete typeEntity.roleLimit;\\n      delete typeEntity.roles;\\n\\n      emit TypeRemoved(sender, types[i]);\\n    }\\n    return true;\\n  }\\n\\n  function typeCheckId(bytes32 typeId) external view returns (bool) {\\n    return _data.agents[typeId].atype == AgentType.TYPE;\\n  }\\n\\n  function typeCheckName(string calldata typeName) external view returns (bool) {\\n    return _data.agents[keccak256(abi.encodePacked(typeName))].atype == AgentType.TYPE;\\n  }\\n\\n  function typeCheckAdmin(bytes32 typeId, address account) external view returns (bool) {\\n    if (_data.agents[typeId].atype != AgentType.TYPE) return false;\\n\\n    bytes32 typeAdminId = _data.agents[typeId].adminId;\\n    AgentType adminAgentType = _data.agents[typeAdminId].atype;\\n    bytes32 memberId = LACLUtils.accountGenerateId(account);\\n\\n    if (adminAgentType == AgentType.ROLE) {\\n      (RoleEntity storage roleEntity, bool result) = _data.roleTryReadSlot(typeAdminId);\\n      if (!result) return false;\\n\\n      (TypeEntity storage typeEntity, bool result1) = _data.typeTryReadSlot(roleEntity.typeId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] == typeAdminId;\\n    } else if (adminAgentType == AgentType.TYPE) {\\n      (TypeEntity storage typeEntity, bool result1) = _data.typeTryReadSlot(typeAdminId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] != bytes32(0);\\n    }\\n\\n    return false;\\n  }\\n\\n  function typeHasAccount(bytes32 typeId, address account) external view returns (bool) {\\n    (TypeEntity storage te, bool result) = _data.typeTryReadSlot(typeId);\\n    if (!result) return false;\\n    return te.members[LACLUtils.accountGenerateId(account)] != bytes32(0);\\n  }\\n\\n  function typeHasRole(bytes32 typeId, bytes32 roleId) external view returns (bool) {\\n    (TypeEntity storage te, bool result) = _data.typeTryReadSlot(typeId);\\n    if (!result) return false;\\n    return te.roles.contains(roleId);\\n  }\\n\\n  function typeGetRoles(bytes32 typeId) external view returns (bytes32[] memory) {\\n    (TypeEntity storage te, bool result) = _data.typeTryReadSlot(typeId);\\n    if (!result) return new bytes32[](0);\\n    return te.roles.values();\\n  }\\n\\n  function typeGetInfo(bytes32 typeId) external view returns (TypeInfo memory) {\\n    (TypeEntity storage te, bool result) = _data.typeTryReadSlot(typeId);\\n    if (!result) {\\n      return\\n        TypeInfo({\\n          scopeId: bytes32(0),\\n          adminId: bytes32(0),\\n          roleLimit: 0,\\n          roleCount: 0,\\n          adminType: AgentType.NONE,\\n          atype: AgentType.NONE,\\n          acstat: ActivityStatus.NONE,\\n          alstat: AlterabilityStatus.NONE,\\n          name: \\\"\\\"\\n        });\\n    }\\n\\n    return\\n      TypeInfo({\\n        scopeId: te.scopeId,\\n        adminId: te.ba.adminId,\\n        roleLimit: te.roleLimit,\\n        roleCount: uint16(te.roles.length()),\\n        adminType: _data.agents[te.ba.adminId].atype,\\n        atype: te.ba.atype,\\n        acstat: te.ba.acstat,\\n        alstat: te.ba.alstat,\\n        name: te.name\\n      });\\n  }\\n\\n  function _doAgentGetScopeInfo(bytes32 agentId) internal view returns (ScopeType, bytes32) {\\n    AgentType atype = _data.agents[agentId].atype;\\n    if (atype == AgentType.ROLE) {\\n      RoleEntity storage roleEntity = _data.roleReadSlot(agentId);\\n      BaseScope storage baseScope = _data.scopes[roleEntity.scopeId];\\n      return (baseScope.stype, roleEntity.scopeId);\\n    } else if (atype == AgentType.TYPE) {\\n      TypeEntity storage typeEntity = _data.typeReadSlot(agentId);\\n      BaseScope storage baseScope = _data.scopes[typeEntity.scopeId];\\n      return (baseScope.stype, typeEntity.scopeId);\\n    }\\n\\n    return (ScopeType.NONE, bytes32(0));\\n  }\\n\\n  function _doCheckAdminAccess(\\n    bytes32 adminId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) internal view returns (IACL.AdminAccessStatus) {\\n    return LACLCommons.checkAdminAccess(_data, adminId, memberId, functionId);\\n  }\\n\\n  function _accessPermission(MemberSignature calldata memberSign, bytes4 selector)\\n    internal\\n    returns (\\n      bytes32,\\n      bytes32,\\n      address\\n    )\\n  {\\n    require(IProxy(address(this)).safeModeStatus() == IBaseProxy.ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    address signer;\\n\\n    if (memberSign.signature.length > 0) {\\n      require(memberSign.expiredAt > block.timestamp, \\\"Expired Signature\\\");\\n      signer = LACLUtils.getMemeberSignerAddress(memberSign, MEMBER_SIGNATURE_MESSAGE_TYPEHASH);\\n    } else {\\n      signer = msg.sender;\\n    }\\n\\n    address functionFacetId = _data.selectors[selector];\\n    bytes32 functionId = LACLUtils.functionGenerateId(functionFacetId, selector);\\n    bytes32 senderId = LACLUtils.accountGenerateId(signer);\\n    IACL.AuthorizationStatus status = IACL(address(this)).hasMemberAccess(functionId, senderId);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) {\\n      if (\\n        status == IACL.AuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN &&\\n        selector == ITypeManagement.typeUpdateActivityStatus.selector\\n      ) {\\n        return (functionId, senderId, signer);\\n      }\\n      LACLUtils.generateAuthorizationError(status);\\n    }\\n    return (functionId, senderId, signer);\\n  }\\n\\n  function _getTypeAdmin(\\n    ScopeType requestScopeType,\\n    bytes32 requestScopeAdmin,\\n    bytes32 scopeId,\\n    bytes32 adminId\\n  ) internal view returns (bytes32 typeAdminId) {\\n    // checking requested type admin\\n    if (adminId != bytes32(0)) {\\n      require(_data.agents[adminId].atype > AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      (ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doAgentGetScopeInfo(adminId);\\n      require(requestScopeType <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (requestScopeType == requestAdminScopeType) {\\n        require(requestAdminScopeId == scopeId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(IACLGenerals(address(this)).isScopesCompatible(requestAdminScopeId, scopeId), \\\"Illegal Admin Scope\\\");\\n      }\\n      typeAdminId = adminId;\\n    } else {\\n      typeAdminId = requestScopeAdmin;\\n    }\\n  }\\n\\n  function _doGetMemberScopeInfoFromType(bytes32 typeId, bytes32 senderId) internal view returns (ScopeType, bytes32) {\\n    TypeEntity storage agentType = _data.typeReadSlot(typeId);\\n    bytes32 memberRoleId = agentType.members[senderId];\\n    RoleEntity storage memberAgentRole = _data.roleReadSlot(memberRoleId);\\n    return (_data.scopes[memberAgentRole.scopeId].stype, memberAgentRole.scopeId);\\n  }\\n\\n  function _doGetEntityAndCheckAdminAccess(\\n    bytes32 typeId,\\n    bytes32 senderId,\\n    bytes32 functionId,\\n    bytes4 selector\\n  ) internal view returns (TypeEntity storage) {\\n    TypeEntity storage typeEntity = _data.typeReadSlot(typeId);\\n    require(typeEntity.ba.alstat >= AlterabilityStatus.UPDATABLE, \\\"Illegal Updatable\\\");\\n    IACL.AdminAccessStatus status = _doCheckAdminAccess(typeEntity.ba.adminId, senderId, functionId);\\n    if (status != IACL.AdminAccessStatus.PERMITTED) {\\n      if (\\n        status == IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN &&\\n        selector == ITypeManagement.typeUpdateActivityStatus.selector\\n      ) {\\n        return typeEntity;\\n      }\\n      LACLUtils.generateAdminAccessError(status);\\n    }\\n\\n    return typeEntity;\\n  }\\n\\n  function _getCheckUpdateRequestScope(\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    ScopeType senderScopeType\\n  ) internal returns (BaseScope storage) {\\n    // checking requested type scope\\n    BaseScope storage requestedScope = _data.scopes[requestScopeId];\\n    require(requestedScope.stype != ScopeType.NONE, \\\"Not Found\\\");\\n    require(requestedScope.acstat > ActivityStatus.DELETED, \\\"Scope Deleted\\\");\\n\\n    // increase referred count to target scope\\n    requestedScope.referredByAgent += 1;\\n\\n    // check sender scope with request scope\\n    require(senderScopeType >= requestedScope.stype, \\\"Illegal Sender ScopeType\\\");\\n    if (senderScopeType == requestedScope.stype) {\\n      require(senderScopeId == requestScopeId, \\\"Illegal Sender Scope\\\");\\n    } else {\\n      require(IACLGenerals(address(this)).isScopesCompatible(senderScopeId, requestScopeId), \\\"Illegal Sender Scope\\\");\\n    }\\n\\n    return requestedScope;\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LACLCommons);\\n  }\\n}\\n\",\"keccak256\":\"0xfbe7c73b56396df4d732f1eb73066b66f8a7f6c5a23ec90284a3d33a1fc0a1dc\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACL {\\n  enum ProfileAuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    PROFILE_CALL_FORBIDDEN,\\n    MEMBER_CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN,\\n    PROFILE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileACLUnauthorized();\\n  error ProfileACLPolicyForbidden();\\n  error ProfileACLCallForbidden();\\n  error ProfileACLRoleScopeForbidden();\\n  error ProfileACLMemberCallForbidden();\\n  error ProfileACLMemberNotFound();\\n  error ProfileACLRoleNotFound();\\n  error ProfileACLTypeNotFound();\\n  error ProfileACLFunctionNotFound();\\n  error ProfileACLContextNotFound();\\n  error ProfileACLRealmNotFound();\\n  error ProfileACLDomainNotFound();\\n  error ProfileACLMemberActivityForbidden();\\n  error ProfileACLRoleActivityForbidden();\\n  error ProfileACLTypeActivityForbidden();\\n  error ProfileACLFunctionActivityForbidden();\\n  error ProfileACLContextActivityForbidden();\\n  error ProfileACLRealmActivityForbidden();\\n  error ProfileACLDomainActivityForbidden();\\n  error ProfileACLUniverseActivityForbidden();\\n  error ProfileACLProfileActivityForbidden();\\n\\n  enum ProfileAdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileAdminAccessNotPermitted();\\n  error ProfileAdminAccessPolicyForbidden();\\n  error ProfileAdminAccessRoleNotFound();\\n  error ProfileAdminAccessTypeNotFound();\\n  error ProfileAdminAccessFunctionNotFound();\\n  error ProfileAdminAccessRoleActivityForbidden();\\n  error ProfileAdminAccessTypeActivityForbidden();\\n\\n  error ProfileSetAdminForbidden(ProfileAdminAccessStatus);\\n\\n  function profileHasAccess(bytes32 profileId, bytes32 functionId) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasCSAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasAccountAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (ProfileAuthorizationStatus);\\n}\\n\",\"keccak256\":\"0xb3687f11a1d2d28b78e815657864fbe1ef4aeba750e8c9760b3d3f97e467efc2\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control General Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function profileAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function profileAnyType() external pure returns (bytes32);\\n\\n  // system master type\\n  function profileSystemMasterType() external pure returns (bytes32);\\n\\n  // profile master type\\n  function profileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function profileUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function profileIsAgentExist(bytes32 profileId, bytes32 agentId) external view returns (bool);\\n\\n  function profileIsScopeExist(bytes32 profileId, bytes32 scopeId) external view returns (bool);\\n\\n  function profileScopeBaseInfo(bytes32 profileId, bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function profileAgentBaseInfo(bytes32 profileId, bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function profileIsScopesCompatible(\\n    bytes32 profileId,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5eeaa7ce1f5f26662cf0368f1c9b415214f37f1659c3a2defccedf0d1943760f\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileManagement is IACLCommons {\\n  struct ProfileRegisterRequest {\\n    string name;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    address profileOwner;\\n    address profileSystemAdmin;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateOwnerAccountRequest {\\n    bytes32 profileId;\\n    address newOwner;\\n  }\\n\\n  struct ProfileUpdateLimitsRequest {\\n    bytes32 profileId;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileInfo {\\n    string name;\\n    bytes32 adminId;\\n    address owner;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    AgentType adminType;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfileRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed profileOwner,\\n    address profileSystemAdmin,\\n    bytes32 adminId,\\n    ProfileRegisterLimit registerlimits,\\n    ProfileLimit limits\\n  );\\n\\n  event ProfileAdminUpdated(address indexed sender, bytes32 indexed profileId, bytes32 indexed adminId);\\n\\n  event ProfileActivityUpdated(address indexed sender, bytes32 indexed profileId, ActivityStatus acstat);\\n\\n  event ProfileAlterabilityUpdated(address indexed sender, bytes32 indexed profileId, AlterabilityStatus alstat);\\n\\n  event ProfileLimitsUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    ProfileLimit limit,\\n    ProfileRegisterLimit registerLimit\\n  );\\n\\n  event ProfileOwnerAccountUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed owner,\\n    address newOwner\\n  );\\n\\n  function profileRegister(MemberSignature calldata memberSign, ProfileRegisterRequest[] calldata request)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateLimits(MemberSignature calldata memberSign, ProfileUpdateLimitsRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateOwnerAccount(\\n    MemberSignature calldata memberSign,\\n    ProfileUpdateOwnerAccountRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileCheckId(bytes32 profileId) external view returns (bool);\\n\\n  function profileCheckName(string calldata name) external view returns (bool);\\n\\n  function profileCheckOwner(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileSystemAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileGetProfileAccount(address account) external view returns (bytes32[] memory);\\n\\n  function profileGetAdmins(bytes32 profileId) external view returns (bytes32[] memory);\\n\\n  function profileGetInfo(bytes32 profileId) external view returns (ProfileInfo memory);\\n}\\n\",\"keccak256\":\"0x32153a5a19ef691b56e8987b82b455e024cfc24c42393955d12d43e0c148d6fc\",\"license\":\"MIT\"},\"src/contracts/acl/scope/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Context Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IContextManagement is IACLCommons {\\n  struct ContextRegisterRequest {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address contractId;\\n    address subject;\\n    address deployer;\\n    int16 functionLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    bytes signature;\\n  }\\n\\n  struct ContextUpdateFunctionLimitRequest {\\n    bytes32 contextId;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ContextInfo {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    address contractId;\\n    uint8 functionCount;\\n    uint8 functionLimit;\\n    uint32 referredByAgent;\\n    AgentType adminType;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ContextRegistered(\\n    address indexed sender,\\n    bytes32 indexed contextId,\\n    address indexed contractId,\\n    bytes32 realmId,\\n    address deployer,\\n    address subject,\\n    bytes32 adminId\\n  );\\n\\n  event ContextAdminUpdated(address indexed sender, bytes32 indexed contextId, bytes32 indexed adminId);\\n\\n  event ContextActivityUpdated(address indexed sender, bytes32 indexed contextId, ActivityStatus acstat);\\n\\n  event ContextAlterabilityUpdated(address indexed sender, bytes32 indexed contextId, AlterabilityStatus alstat);\\n\\n  event ContextFunctionLimitUpdated(address indexed sender, bytes32 indexed contextId, uint8 functionLimit);\\n\\n  event ContextRemoved(address indexed sender, bytes32 indexed contextId, bool isSoftDelete);\\n\\n  function contextRegister(MemberSignature calldata memberSign, ContextRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateFunctionLimit(\\n    MemberSignature calldata memberSign,\\n    ContextUpdateFunctionLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextRemove(MemberSignature calldata memberSign, bytes32[] calldata contexts) external returns (bool);\\n\\n  function contextCheckId(bytes32 contextId) external view returns (bool);\\n\\n  function contextCheckAccount(address contractId) external view returns (bool);\\n\\n  function contextCheckAdmin(bytes32 contextId, address account) external view returns (bool);\\n\\n  function contextHasFunction(bytes32 contextId, bytes32 functionId) external view returns (bool);\\n\\n  function contextHasSelector(address contractId, bytes4 selector) external view returns (bool);\\n\\n  function contextGetFunctions(bytes32 contextId) external view returns (bytes32[] memory);\\n\\n  function contextGetInfo(bytes32 contextId) external view returns (ContextInfo memory);\\n}\\n\",\"keccak256\":\"0x3db7b4eaff9522c669111ec8e268f603b57da7b4c0846d3d6ffb74d9f9a07f08\",\"license\":\"MIT\"},\"src/contracts/acl/scope/IFunctionManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Function Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IFunctionManagement is IACLCommons {\\n  struct FunctionRegisterRequest {\\n    bytes signature;\\n    bytes32 realmId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address subject;\\n    address deployer;\\n    address contractId;\\n    FunctionRequest[] functions;\\n  }\\n\\n  struct FunctionRequest {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct FunctionUpdatePolicyRequest {\\n    bytes32 functionId;\\n    uint8 policyCode;\\n  }\\n\\n  struct FunctionUpdateAgentRequest {\\n    bytes32 functionId;\\n    bytes32 agentId;\\n  }\\n\\n  struct FunctionInfo {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint32 referredByAgent;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    AgentType adminType;\\n    AgentType agentType;\\n    uint8 policyCode;\\n  }\\n\\n  event FunctionRegistered(\\n    address indexed sender,\\n    bytes32 indexed contextId,\\n    bytes32 indexed functionId,\\n    bytes32 adminId,\\n    bytes32 agentId\\n  );\\n\\n  event FunctionAdminUpdated(address indexed sender, bytes32 indexed functionId, bytes32 indexed adminId);\\n\\n  event FunctionAgentUpdated(address indexed sender, bytes32 indexed functionId, bytes32 indexed agentId);\\n\\n  event FunctionActivityUpdated(address indexed sender, bytes32 indexed functionId, ActivityStatus acstat);\\n\\n  event FunctionAlterabilityUpdated(address indexed sender, bytes32 indexed functionId, AlterabilityStatus alstat);\\n\\n  event FunctionPolicyUpdated(address indexed sender, bytes32 indexed functionId, uint8 policyCode);\\n\\n  event FunctionRemoved(address indexed sender, bytes32 indexed functionId, bool isSoftDeleted);\\n\\n  function functionRegister(MemberSignature calldata memberSign, FunctionRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateAgent(MemberSignature calldata memberSign, FunctionUpdateAgentRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function functionUpdatePolicyCode(\\n    MemberSignature calldata memberSign,\\n    FunctionUpdatePolicyRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function functionRemove(MemberSignature calldata memberSign, bytes32[] calldata functions) external returns (bool);\\n\\n  function functionCheckId(bytes32 functionId) external view returns (bool);\\n\\n  function functionCheckSelector(address contractId, bytes4 selector) external view returns (bool);\\n\\n  function functionCheckAdmin(bytes32 functionId, address account) external view returns (bool);\\n\\n  function functionCheckAgent(bytes32 functionId, address account) external view returns (bool);\\n\\n  function functionGetInfo(bytes32 functionId) external view returns (FunctionInfo memory);\\n}\\n\",\"keccak256\":\"0xf9cab043ca2218987527dc17343b3bb632a65ba9be0ab9e863c6c140d9d488b7\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  function isContract2(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-universe-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb46e5ff7d2a40ad64a6ca16bf560fef69391201577931c8c0b8395292014035e\",\"license\":\"MIT\"},\"src/contracts/lib/LStorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary LStorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfe230bd4ca404541c3f9b857b24b92ed65ca09a1cbfc6222e8c308e131eca256\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0xf6b56daea1f2692628dff63bd57ff8ad0bc38ecbc34887db37a8305162ce1394\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./LACLUtils.sol\\\";\\nimport \\\"./LACLStorage.sol\\\";\\nimport \\\"./LProfileStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/IACLGenerals.sol\\\";\\nimport \\\"../../acl/IACLManager.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../proxy/IERC1822.sol\\\";\\nimport \\\"../../utils/IERC165.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/agent/IRoleManagement.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/profile/IProfileACLGenerals.sol\\\";\\nimport \\\"../../acl/profile/IProfileManagement.sol\\\";\\n\\n/**\\n * @title ACL Commons Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLCommons {\\n  using LProfileStorage for IACLCommons.ProfileEntity;\\n  using LACLStorage for ACLStorage.DataCollection;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  string public constant LIB_NAME = \\\"LACLCommons\\\";\\n  string public constant LIB_VERSION = \\\"3.0.0\\\";\\n\\n  bytes32 public constant LIVELY_VERSE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 public constant LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n  bytes32 public constant LIVELY_VERSE_SCOPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_MEMBER_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_TYPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_POLICY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\"));\\n  bytes32 public constant LIVELY_VERSE_PROFILE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\"));\\n\\n  // Universe Scope ID\\n  bytes32 private constant LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID = keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_VERSE\\\"));\\n\\n  // General Roles ID\\n  bytes32 public constant LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_SCOPE_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_TYPE_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_MEMBER_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_POLICY_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_VERSE_PROFILE_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_VERSE.LIVELY_PROFILE_MASTER_ADMIN\\\"));\\n\\n  // Profile Commons\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n\\n  // ACL Type\\n  bytes32 public constant LIVELY_VERSE_LIVELY_GUARD_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_GUARD.MASTER\\\"));\\n\\n  function registerProxyFacet(ACLStorage.DataCollection storage data, address implementation) external {\\n    data.facetSet.add(address(this));\\n    IACLCommons.FacetEntity storage facetEntity = data.facets[address(this)];\\n    facetEntity.subjectId = implementation;\\n    data.selectors[IProxy.upgradeTo.selector] = address(this);\\n    data.selectors[IProxy.setSafeModeStatus.selector] = address(this);\\n    data.selectors[IProxy.setUpdatabilityStatus.selector] = address(this);\\n    data.selectors[IProxy.setLocalAdmin.selector] = address(this);\\n    data.selectors[IProxy.setAccessControlManager.selector] = address(this);\\n    data.selectors[IProxy.contractName.selector] = address(this);\\n    data.selectors[IProxy.contractVersion.selector] = address(this);\\n    data.selectors[IProxy.accessControlManager.selector] = address(this);\\n    data.selectors[IProxy.subjectAddress.selector] = address(this);\\n    data.selectors[IProxy.safeModeStatus.selector] = address(this);\\n    data.selectors[IProxy.updatabilityStatus.selector] = address(this);\\n    data.selectors[IProxy.localAdmin.selector] = address(this);\\n    data.selectors[IProxy.domainSeparator.selector] = address(this);\\n    data.selectors[IProxy.initVersion.selector] = address(this);\\n    data.selectors[IProxy.withdrawBalance.selector] = address(this);\\n    data.selectors[IERC165.supportsInterface.selector] = address(this);\\n    data.selectors[IACLManager.aclRegisterFacet.selector] = address(this);\\n    data.selectors[IACLManager.aclUpgradeFacet.selector] = address(this);\\n    data.selectors[IACLManager.aclGetFacets.selector] = address(this);\\n    data.selectors[IACLManager.aclGetFacet.selector] = address(this);\\n    data.selectors[IACLManager.aclHasSelector.selector] = address(this);\\n    data.selectors[IACLManager.aclGetFacetInfo.selector] = address(this);\\n    data.selectors[IERC1822Proxiable.proxiableUUID.selector] = address(this);\\n    data.selectors[bytes4(keccak256(\\\"initialize(string,string)\\\"))] = address(this);\\n    data.selectors[bytes4(keccak256(\\\"initACL(address,address,address,address)\\\"))] = address(this);\\n    data.selectors[bytes4(keccak256(\\\"getFirstInit()\\\"))] = address(this);\\n    data.selectors[bytes4(keccak256(\\\"getLibrary()\\\"))] = address(this);\\n  }\\n\\n  function aclRegisterFacet(ACLStorage.DataCollection storage data, IACLManager.FacetRegisterRequest calldata request)\\n    external\\n    returns (bool)\\n  {\\n    require(!data.facetSet.contains(request.facetId), \\\"Facet Already Exist\\\");\\n    for (uint256 j = 0; j < request.selectors.length; j++) {\\n      require(data.selectors[request.selectors[j]] == address(0), \\\"Illegal Selector\\\");\\n      data.selectors[request.selectors[j]] = request.facetId;\\n    }\\n    data.facetSet.add(request.facetId);\\n    IACLCommons.FacetEntity storage facetEntity = data.facets[request.facetId];\\n    facetEntity.subjectId = request.subjectId;\\n\\n    return true;\\n  }\\n\\n  function initACLAgents(\\n    ACLStorage.DataCollection storage data,\\n    address livelyAdmin,\\n    address systemAdmin\\n  ) public {\\n    _initACLAgents(data, livelyAdmin, systemAdmin);\\n  }\\n\\n  function checkAdminAccess(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 adminId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) external view returns (IACL.AdminAccessStatus) {\\n    return _doCheckAdminAccess(data, adminId, memberId, functionId);\\n  }\\n\\n  function getCheckUpdateRequestScope(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    IACLCommons.ScopeType senderScopeType\\n  ) external returns (IACLCommons.BaseScope storage) {\\n    // checking requested type scope\\n    IACLCommons.BaseScope storage requestedScope = data.scopes[requestScopeId];\\n    require(requestedScope.stype != IACLCommons.ScopeType.NONE, \\\"Scope Not Found\\\");\\n    require(requestedScope.acstat > IACLCommons.ActivityStatus.DELETED, \\\"Scope Deleted\\\");\\n\\n    // increase referred count to target scope\\n    requestedScope.referredByAgent += 1;\\n\\n    require(requestedScope.stype <= senderScopeType, \\\"Illegal ScopeType\\\");\\n    if (requestedScope.stype == senderScopeType) {\\n      require(requestScopeId == senderScopeId, \\\"Illegal Scope\\\");\\n    } else {\\n      require(IACLGenerals(address(this)).isScopesCompatible(senderScopeId, requestScopeId), \\\"Illegal Scope\\\");\\n    }\\n\\n    return requestedScope;\\n  }\\n\\n  function profileCheckAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    address account\\n  ) external view returns (bool) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    if (profileEntity.acstat == IACLCommons.ActivityStatus.NONE) return false;\\n\\n    bytes32 profileAdminId = profileEntity.adminId;\\n    IACLCommons.AgentType agentType = data.agents[profileAdminId].atype;\\n    bytes32 memberId = LACLUtils.accountGenerateId(account);\\n\\n    if (agentType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = data.roleTryReadSlot(profileAdminId);\\n      if (!result) return false;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(roleEntity.typeId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] == profileAdminId;\\n    } else if (agentType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(profileAdminId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] != bytes32(0);\\n    }\\n\\n    return false;\\n  }\\n\\n  function profileUpdateOwnerAccount(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfileManagement.ProfileUpdateOwnerAccountRequest calldata request\\n  ) external returns (bool) {\\n    // disable profile owner\\n    bytes32 ownerId = LACLUtils.accountGenerateId(profileEntity.owner);\\n    bytes32 newOwnerId = LACLUtils.accountGenerateId(request.newOwner);\\n\\n    // check new ownerId\\n    require(profileEntity.agents[newOwnerId].acstat == IACLCommons.ActivityStatus.NONE, \\\"Already Exists\\\");\\n\\n    // remove old owner\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(ownerId);\\n    profileMemberEntity.ba.acstat = IACLCommons.ActivityStatus.DISABLED;\\n    profileMemberEntity.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n    profileEntity.admins.remove(ownerId);\\n\\n    // remove from profileAccount\\n    IACLCommons.ProfileAccount storage profileAccount = data.profileAccounts[profileEntity.owner];\\n    for (uint256 j = 0; j < profileAccount.profiles.length; j++) {\\n      if (profileAccount.profiles[j] == request.profileId) {\\n        if (profileAccount.profiles.length > 1) {\\n          if (j < profileAccount.profiles.length - 1)\\n            profileAccount.profiles[j] = profileAccount.profiles[profileAccount.profiles.length - 1];\\n          profileAccount.profiles.pop();\\n        } else {\\n          profileAccount.profiles.pop();\\n          delete profileAccount.profiles;\\n        }\\n        break;\\n      }\\n    }\\n\\n    // add profile's new owner\\n    _doCreateUpdateProfileAccount(data, request.profileId, request.newOwner);\\n\\n    // Create Owner Member\\n    IACLCommons.ProfileMemberEntity storage ownerMember = profileEntity.profileMemberWriteSlot(newOwnerId);\\n    ownerMember.account = request.newOwner;\\n    ownerMember.typeLimit = profileEntity.limits.typeLimit;\\n    ownerMember.callLimit = uint16(profileEntity.limits.profileCallLimit);\\n    ownerMember.registerLimits = profileEntity.registerLimits;\\n    ownerMember.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    ownerMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n    ownerMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    ownerMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    ownerMember.types.add(LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID);\\n\\n    profileEntity.owner = request.newOwner;\\n    profileEntity.admins.add(newOwnerId);\\n\\n    // update profile lively master type\\n    IACLCommons.TypeEntity storage livelyMasterType = profileEntity.profileTypeReadSlot(\\n      LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID\\n    );\\n    delete livelyMasterType.members[ownerId];\\n    livelyMasterType.members[newOwnerId] = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    return true;\\n  }\\n\\n  function createUpdateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    address memberAddress\\n  ) external {\\n    _doCreateUpdateProfileAccount(data, profileId, memberAddress);\\n  }\\n\\n  function profileRegister(\\n    ACLStorage.DataCollection storage data,\\n    IProfileManagement.ProfileRegisterRequest calldata request,\\n    bytes32 signerId,\\n    bytes32 profileId,\\n    bytes32 functionId\\n  ) external returns (bytes32) {\\n    // fetch scope type and scope id of sender\\n    (IACLCommons.ScopeType signerScopeType, bytes32 signerScopeId) = _doGetScopeFromType(\\n      data,\\n      LIVELY_VERSE_PROFILE_MASTER_TYPE_ID,\\n      signerId\\n    );\\n    require(\\n      signerScopeType == IACLCommons.ScopeType.UNIVERSE && signerScopeId == LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID,\\n      \\\"Illegal Scope\\\"\\n    );\\n    require(request.limits.typeLimit >= 1, \\\"Illegal TypeLimit\\\");\\n\\n    _doCreateUpdateProfileAccount(data, profileId, request.profileOwner);\\n    _doCreateUpdateProfileAccount(data, profileId, request.profileSystemAdmin);\\n\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    profileEntity.name = request.name;\\n    profileEntity.owner = request.profileOwner;\\n    profileEntity.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    profileEntity.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    profileEntity.registerLimits = request.registerLimits;\\n    profileEntity.limits = request.limits;\\n    profileEntity.admins.add(LACLUtils.accountGenerateId(request.profileOwner));\\n\\n    // check adminId\\n    if (request.adminId != bytes32(0)) {\\n      require(data.agents[request.adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      (, bytes32 requestAdminScopeId) = _doAgentGetScopeInfo(data, request.adminId);\\n      require(requestAdminScopeId == LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Admin Scope\\\");\\n      IACL.AdminAccessStatus adminAccessStatus = _doCheckAdminAccess(\\n        data,\\n        LIVELY_VERSE_PROFILE_MASTER_TYPE_ID,\\n        signerId,\\n        functionId\\n      );\\n      if (adminAccessStatus != IACL.AdminAccessStatus.PERMITTED) revert IACL.SetAdminForbidden(adminAccessStatus);\\n      profileEntity.adminId = request.adminId;\\n    } else {\\n      profileEntity.adminId = LIVELY_VERSE_PROFILE_MASTER_TYPE_ID;\\n    }\\n\\n    _doInitProfile(profileEntity, request.profileOwner, request.profileSystemAdmin);\\n    return profileEntity.adminId;\\n  }\\n\\n  function realmGetAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 requestScopeAdmin,\\n    bytes32 domainId,\\n    bytes32 adminId\\n  ) external view returns (bytes32 realmAdminId) {\\n    // checking requested context admin\\n    if (adminId != bytes32(0)) {\\n      require(data.agents[adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doAgentGetScopeInfo(data, adminId);\\n      require(IACLCommons.ScopeType.DOMAIN <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (IACLCommons.ScopeType.DOMAIN == requestAdminScopeType) {\\n        require(requestAdminScopeId == domainId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(requestAdminScopeId == LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID, \\\"Illegal Admin Scope\\\");\\n      }\\n      realmAdminId = adminId;\\n    } else {\\n      realmAdminId = requestScopeAdmin;\\n    }\\n  }\\n\\n  function _doAgentGetScopeInfo(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    private\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    IACLCommons.AgentType atype = data.agents[agentId].atype;\\n    if (atype == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = data.roleReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = data.scopes[roleEntity.scopeId];\\n      return (baseScope.stype, roleEntity.scopeId);\\n    } else if (atype == IACLCommons.AgentType.TYPE) {\\n      IACLCommons.TypeEntity storage typeEntity = data.typeReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = data.scopes[typeEntity.scopeId];\\n      return (baseScope.stype, typeEntity.scopeId);\\n    }\\n\\n    return (IACLCommons.ScopeType.NONE, bytes32(0));\\n  }\\n\\n  function _doCheckAdminAccess(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 adminId,\\n    bytes32 memberId,\\n    bytes32 functionId\\n  ) private view returns (IACL.AdminAccessStatus) {\\n    (IACLCommons.FunctionEntity storage functionEntity, bool res) = data.functionTryReadSlot(functionId);\\n    if (!res) return IACL.AdminAccessStatus.FUNCTION_NOT_FOUND;\\n\\n    IACLCommons.AgentType adminAgentType = data.agents[adminId].atype;\\n    if (adminAgentType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = data.roleTryReadSlot(adminId);\\n      if (!result) return IACL.AdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(roleEntity.typeId);\\n      if (!result1) return IACL.AdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      if (typeEntity.members[memberId] != adminId) return IACL.AdminAccessStatus.NOT_PERMITTED;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = data.policies[data.rolePolicyMap[adminId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IACL.AdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IACL.AdminAccessStatus.PERMITTED;\\n    } else if (adminAgentType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = data.typeTryReadSlot(adminId);\\n      if (!result1) return IACL.AdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      bytes32 roleId = typeEntity.members[memberId];\\n      (IACLCommons.RoleEntity storage roleEntity, bool result2) = data.roleTryReadSlot(roleId);\\n      if (!result2) return IACL.AdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = data.policies[data.rolePolicyMap[roleId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IACL.AdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IACL.AdminAccessStatus.PERMITTED;\\n    }\\n\\n    return IACL.AdminAccessStatus.NOT_PERMITTED;\\n  }\\n\\n  function _doCreateUpdateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    address memberAddress\\n  ) private {\\n    IACLCommons.ProfileAccount storage profileAccount = data.profileAccounts[memberAddress];\\n    if (profileAccount.profiles.length == 0) {\\n      IACLCommons.ProfileAccount storage newProfileAccount = data.profileAccounts[memberAddress];\\n      newProfileAccount.profiles.push(profileId);\\n    } else {\\n      require(profileAccount.profiles.length < 16, \\\"Illegal ProfileAccountLimit\\\");\\n      profileAccount.profiles.push(profileId);\\n    }\\n  }\\n\\n  function _doGetScopeFromType(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 typeId,\\n    bytes32 senderId\\n  ) private view returns (IACLCommons.ScopeType, bytes32) {\\n    IACLCommons.TypeEntity storage agentType = data.typeReadSlot(typeId);\\n    bytes32 memberRoleId = agentType.members[senderId];\\n    IACLCommons.RoleEntity storage memberAgentRole = data.roleReadSlot(memberRoleId);\\n    return (data.scopes[memberAgentRole.scopeId].stype, memberAgentRole.scopeId);\\n  }\\n\\n  function _doInitProfile(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    address profileOwner,\\n    address profileSystemAdmin\\n  ) private {\\n    // init Universe Scope\\n    IACLCommons.UniverseEntity storage livelyUniverseEntity = profileEntity.profileUniverseWriteSlot(\\n      LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID\\n    );\\n    livelyUniverseEntity.name = \\\"UNIVERSE.LIVELY_PROFILE\\\";\\n    livelyUniverseEntity.domainLimit = profileEntity.limits.domainLimit;\\n    livelyUniverseEntity.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyUniverseEntity.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyUniverseEntity.bs.stype = IACLCommons.ScopeType.UNIVERSE;\\n    livelyUniverseEntity.bs.adminId = LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID;\\n\\n    // Create Any Type\\n    IACLCommons.TypeEntity storage anyType = profileEntity.profileTypeWriteSlot(LIVELY_PROFILE_ANY_TYPE_ID);\\n    anyType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\";\\n    anyType.roleLimit = 0;\\n    anyType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    anyType.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    anyType.ba.atype = IACLCommons.AgentType.TYPE;\\n    anyType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    anyType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n\\n    // Create Lively Master Type\\n    IACLCommons.TypeEntity storage livelyMasterType = profileEntity.profileTypeWriteSlot(\\n      LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID\\n    );\\n    livelyMasterType.name = \\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\";\\n    livelyMasterType.roleLimit = profileEntity.limits.typeRoleLimit > 1 ? profileEntity.limits.typeRoleLimit : 1;\\n    livelyMasterType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    livelyMasterType.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    livelyMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n    livelyMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterType.roles.add(LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID);\\n\\n    // Create Lively Master Admin Role\\n    IACLCommons.RoleEntity storage livelyMasterAdminRole = profileEntity.profileRoleWriteSlot(\\n      LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID\\n    );\\n    livelyMasterAdminRole.name = \\\"ROLE.LIVELY_PROFILE.LIVELY_MASTER_ADMIN\\\";\\n    livelyMasterAdminRole.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    livelyMasterAdminRole.typeId = LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID;\\n    livelyMasterAdminRole.memberLimit = profileEntity.limits.memberLimit > 1 ? profileEntity.limits.memberLimit : 1;\\n    livelyMasterAdminRole.memberCount = 1;\\n    livelyMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n    livelyMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterAdminRole.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    // Create Owner Member\\n    bytes32 ownerMemberId = LACLUtils.accountGenerateId(profileOwner);\\n    IACLCommons.ProfileMemberEntity storage ownerMember = profileEntity.profileMemberWriteSlot(ownerMemberId);\\n    ownerMember.account = profileOwner;\\n    ownerMember.typeLimit = profileEntity.limits.typeLimit;\\n    ownerMember.callLimit = uint16(profileEntity.limits.profileCallLimit);\\n    ownerMember.registerLimits = profileEntity.registerLimits;\\n    ownerMember.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    ownerMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n    ownerMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    ownerMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n\\n    // bind Lively Master Admin Member to Admin role of Lively,\\n    ownerMember.types.add(LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID);\\n\\n    // bind Lively Master Admin Member to Admin role\\n    // livelyMasterType.members[livelyMasterAdminMemberId] = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    livelyMasterType.members[ownerMemberId] = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    _doInitProfileSystemMaster(profileEntity, profileSystemAdmin);\\n\\n    // update livelyUniverseEntity.bs.referredByAgent\\n    livelyUniverseEntity.bs.referredByAgent = 5;\\n  }\\n\\n  function _doInitProfileSystemMaster(IACLCommons.ProfileEntity storage profileEntity, address profileSystemAdmin)\\n    private\\n  {\\n    // Create System Master Type\\n    IACLCommons.TypeEntity storage systemMasterType = profileEntity.profileTypeWriteSlot(\\n      LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID\\n    );\\n    systemMasterType.name = \\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\";\\n    systemMasterType.roleLimit = profileEntity.limits.typeRoleLimit > 1 ? profileEntity.limits.typeRoleLimit : 1;\\n    systemMasterType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    systemMasterType.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    systemMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n    systemMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    systemMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    systemMasterType.roles.add(LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID);\\n\\n    // Create System Master Admin Role\\n    IACLCommons.RoleEntity storage systemMasterAdminRole = profileEntity.profileRoleWriteSlot(\\n      LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID\\n    );\\n    systemMasterAdminRole.name = \\\"ROLE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER_ADMIN\\\";\\n    systemMasterAdminRole.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n    systemMasterAdminRole.typeId = LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID;\\n    systemMasterAdminRole.memberLimit = profileEntity.limits.memberLimit > 1 ? profileEntity.limits.memberLimit : 1;\\n    systemMasterAdminRole.memberCount = 1;\\n    systemMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n    systemMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    systemMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    systemMasterAdminRole.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    // Create System Master Admin Member\\n    bytes32 systemMasterAdminMemberId = LACLUtils.accountGenerateId(profileSystemAdmin);\\n    IACLCommons.ProfileMemberEntity storage systemMasterAdminMember = profileEntity.profileMemberWriteSlot(\\n      systemMasterAdminMemberId\\n    );\\n    systemMasterAdminMember.typeLimit = profileEntity.limits.typeLimit;\\n    systemMasterAdminMember.callLimit = uint16(profileEntity.limits.profileCallLimit);\\n    systemMasterAdminMember.registerLimits = IACLCommons.ProfileRegisterLimit({\\n      memberRegisterLimit: 0,\\n      roleRegisterLimit: 0,\\n      typeRegisterLimit: 0,\\n      functionRegisterLimit: profileEntity.registerLimits.functionRegisterLimit,\\n      contextRegisterLimit: profileEntity.registerLimits.contextRegisterLimit,\\n      realmRegisterLimit: 0,\\n      domainRegisterLimit: 0,\\n      policyRegisterLimit: 0\\n    });\\n    systemMasterAdminMember.account = profileSystemAdmin;\\n    systemMasterAdminMember.ba.adminId = LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    systemMasterAdminMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n    systemMasterAdminMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    systemMasterAdminMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    systemMasterAdminMember.types.add(LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID);\\n\\n    // bind Lively Master Admin Member to Admin role\\n    systemMasterType.members[systemMasterAdminMemberId] = LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID;\\n  }\\n\\n  function _initACLAgents(\\n    ACLStorage.DataCollection storage data,\\n    address livelyAdmin,\\n    address systemAdmin\\n  ) private {\\n    // init Universe Scope\\n    IACLCommons.UniverseEntity storage livelyUniverseEntity = data.universeWriteSlot(\\n      LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID\\n    );\\n    livelyUniverseEntity.name = \\\"UNIVERSE.LIVELY_VERSE\\\";\\n    livelyUniverseEntity.domainLimit = type(uint16).max;\\n    livelyUniverseEntity.bs.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyUniverseEntity.bs.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyUniverseEntity.bs.stype = IACLCommons.ScopeType.UNIVERSE;\\n    livelyUniverseEntity.bs.adminId = LIVELY_VERSE_LIVELY_MASTER_TYPE_ID;\\n\\n    // Create Lively Master Type\\n    IACLCommons.TypeEntity storage livelyMasterType = data.typeWriteSlot(LIVELY_VERSE_LIVELY_MASTER_TYPE_ID);\\n    livelyMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\";\\n    livelyMasterType.roleLimit = type(uint16).max;\\n    livelyMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n    livelyMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    livelyMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n    livelyMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterType.roles.add(LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID);\\n\\n    // Create Lively Master Admin Role\\n    IACLCommons.RoleEntity storage livelyMasterAdminRole = data.roleWriteSlot(LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID);\\n    livelyMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_MASTER_ADMIN\\\";\\n    livelyMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n    livelyMasterAdminRole.typeId = LIVELY_VERSE_LIVELY_MASTER_TYPE_ID;\\n    livelyMasterAdminRole.memberLimit = type(uint24).max;\\n    livelyMasterAdminRole.memberCount = 1;\\n    livelyMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n    livelyMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    livelyMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    // Create Lively Master Admin Member\\n    bytes32 livelyMasterAdminMemberId = LACLUtils.accountGenerateId(livelyAdmin);\\n    IACLCommons.MemberEntity storage livelyMasterAdminMember = data.memberWriteSlot(livelyMasterAdminMemberId);\\n    livelyMasterAdminMember.account = livelyAdmin;\\n    livelyMasterAdminMember.limits = IACLCommons.GeneralLimit({\\n      memberLimit: type(uint24).max,\\n      memberRegisterLimit: type(uint16).max,\\n      contextRegisterLimit: type(uint16).max,\\n      functionRegisterLimit: type(uint16).max,\\n      profileRegisterLimit: type(uint16).max,\\n      contextLimit: type(uint16).max,\\n      realmLimit: type(uint16).max,\\n      domainLimit: type(uint16).max,\\n      callLimit: type(uint16).max,\\n      typeRoleLimit: type(uint16).max,\\n      typeLimit: type(uint16).max,\\n      roleRegisterLimit: type(uint8).max,\\n      typeRegisterLimit: type(uint8).max,\\n      realmRegisterLimit: type(uint8).max,\\n      domainRegisterLimit: type(uint8).max,\\n      policyRegisterLimit: type(uint8).max,\\n      policyRoleLimit: type(uint8).max,\\n      functionLimit: type(uint8).max\\n    });\\n\\n    livelyMasterAdminMember.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    livelyMasterAdminMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n    livelyMasterAdminMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    livelyMasterAdminMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n\\n    // bind Lively Master Admin Member to Admin role of Lively, Scope, Type, Member, Profile and Policy types\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_LIVELY_MASTER_TYPE_ID);\\n\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_SCOPE_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_TYPE_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_MEMBER_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_POLICY_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_PROFILE_MASTER_TYPE_ID);\\n    livelyMasterAdminMember.types.add(LIVELY_VERSE_LIVELY_GUARD_MASTER_TYPE_ID);\\n\\n    // bind Lively Master Admin Member to Admin role\\n    livelyMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n    {\\n      // Create Profile Any Type\\n      IACLCommons.TypeEntity storage profileAnyType = data.typeWriteSlot(LIVELY_PROFILE_ANY_TYPE_ID);\\n      profileAnyType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\";\\n      profileAnyType.roleLimit = 0;\\n      profileAnyType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileAnyType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      profileAnyType.ba.atype = IACLCommons.AgentType.TYPE;\\n      profileAnyType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileAnyType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n\\n      // Create Profile Lively Master Type\\n      IACLCommons.TypeEntity storage profileLivelyMasterType = data.typeWriteSlot(LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID);\\n      profileLivelyMasterType.name = \\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\";\\n      profileLivelyMasterType.roleLimit = 0;\\n      profileLivelyMasterType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileLivelyMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      profileLivelyMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      profileLivelyMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileLivelyMasterType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n\\n      // Create Profile System Master Type\\n      IACLCommons.TypeEntity storage profileSystemMasterType = data.typeWriteSlot(LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID);\\n      profileSystemMasterType.name = \\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\";\\n      profileSystemMasterType.roleLimit = 0;\\n      profileSystemMasterType.scopeId = LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileSystemMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      profileSystemMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      profileSystemMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileSystemMasterType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n    }\\n\\n    {\\n      // Create System Master Type\\n      IACLCommons.TypeEntity storage systemMasterType = data.typeWriteSlot(LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID);\\n      systemMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\";\\n      systemMasterType.roleLimit = type(uint16).max;\\n      systemMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      systemMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      systemMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      systemMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      systemMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      systemMasterType.roles.add(LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID);\\n\\n      // Create System Master Admin Role\\n      IACLCommons.RoleEntity storage systemMasterAdminRole = data.roleWriteSlot(\\n        LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID\\n      );\\n      systemMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER_ADMIN\\\";\\n      systemMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      systemMasterAdminRole.typeId = LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID;\\n      systemMasterAdminRole.memberLimit = type(uint24).max;\\n      systemMasterAdminRole.memberCount = 1;\\n      systemMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      systemMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      systemMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      systemMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create System Master Admin Member\\n      bytes32 systemMasterAdminMemberId = LACLUtils.accountGenerateId(systemAdmin);\\n      IACLCommons.MemberEntity storage systemMasterAdminMember = data.memberWriteSlot(systemMasterAdminMemberId);\\n\\n      systemMasterAdminMember.limits = IACLCommons.GeneralLimit({\\n        memberLimit: 1024,\\n        memberRegisterLimit: 0,\\n        contextRegisterLimit: 128,\\n        functionRegisterLimit: type(uint16).max,\\n        profileRegisterLimit: 0,\\n        contextLimit: type(uint16).max,\\n        realmLimit: 0,\\n        domainLimit: 0,\\n        callLimit: type(uint16).max,\\n        typeRoleLimit: type(uint8).max,\\n        typeLimit: type(uint8).max,\\n        roleRegisterLimit: 0,\\n        typeRegisterLimit: 0,\\n        realmRegisterLimit: 0,\\n        domainRegisterLimit: 0,\\n        policyRegisterLimit: 0,\\n        policyRoleLimit: type(uint8).max,\\n        functionLimit: type(uint8).max\\n      });\\n\\n      systemMasterAdminMember.account = systemAdmin;\\n      systemMasterAdminMember.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      systemMasterAdminMember.ba.atype = IACLCommons.AgentType.MEMBER;\\n      systemMasterAdminMember.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      systemMasterAdminMember.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      systemMasterAdminMember.types.add(LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID);\\n\\n      // bind Lively Master Admin Member to Admin role\\n      systemMasterType.members[systemMasterAdminMemberId] = LIVELY_VERSE_SYSTEM_MASTER_ADMIN_ROLE_ID;\\n    }\\n\\n    {\\n      // Create Scope Master Type\\n      IACLCommons.TypeEntity storage scopeMasterType = data.typeWriteSlot(LIVELY_VERSE_SCOPE_MASTER_TYPE_ID);\\n      scopeMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\";\\n      scopeMasterType.roleLimit = type(uint16).max;\\n      scopeMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      scopeMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      scopeMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      scopeMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      scopeMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      scopeMasterType.roles.add(LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID);\\n      scopeMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Scope Master Admin Role\\n      IACLCommons.RoleEntity storage scopeMasterAdminRole = data.roleWriteSlot(LIVELY_VERSE_SCOPE_MASTER_ADMIN_ROLE_ID);\\n      scopeMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_SCOPE_MASTER_ADMIN\\\";\\n      scopeMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      scopeMasterAdminRole.typeId = LIVELY_VERSE_SCOPE_MASTER_TYPE_ID;\\n      scopeMasterAdminRole.memberLimit = type(uint24).max;\\n      scopeMasterAdminRole.memberCount = 1;\\n      scopeMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      scopeMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      scopeMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      scopeMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Type Master Type\\n      IACLCommons.TypeEntity storage typeMasterType = data.typeWriteSlot(LIVELY_VERSE_TYPE_MASTER_TYPE_ID);\\n      typeMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\";\\n      typeMasterType.roleLimit = type(uint16).max;\\n      typeMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      typeMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      typeMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      typeMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      typeMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      typeMasterType.roles.add(LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID);\\n      typeMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Type Master Admin Role\\n      IACLCommons.RoleEntity storage typeMasterAdminRole = data.roleWriteSlot(LIVELY_VERSE_TYPE_MASTER_ADMIN_ROLE_ID);\\n      typeMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_TYPE_MASTER_ADMIN\\\";\\n      typeMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      typeMasterAdminRole.typeId = LIVELY_VERSE_TYPE_MASTER_TYPE_ID;\\n      typeMasterAdminRole.memberLimit = type(uint24).max;\\n      typeMasterAdminRole.memberCount = 1;\\n      typeMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      typeMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      typeMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      typeMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    }\\n\\n    {\\n      // Create Member Master Type\\n      IACLCommons.TypeEntity storage memberMasterType = data.typeWriteSlot(LIVELY_VERSE_MEMBER_MASTER_TYPE_ID);\\n      memberMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\";\\n      memberMasterType.roleLimit = type(uint16).max;\\n      memberMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      memberMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      memberMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      memberMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      memberMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      memberMasterType.roles.add(LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID);\\n      memberMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Member Master Admin Role\\n      IACLCommons.RoleEntity storage memberMasterAdminRole = data.roleWriteSlot(\\n        LIVELY_VERSE_MEMBER_MASTER_ADMIN_ROLE_ID\\n      );\\n      memberMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_MEMBER_MASTER_ADMIN\\\";\\n      memberMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      memberMasterAdminRole.typeId = LIVELY_VERSE_MEMBER_MASTER_TYPE_ID;\\n      memberMasterAdminRole.memberLimit = type(uint24).max;\\n      memberMasterAdminRole.memberCount = 1;\\n      memberMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      memberMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      memberMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      memberMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    }\\n\\n    {\\n      // Create Policy Master Type\\n      IACLCommons.TypeEntity storage policyMasterType = data.typeWriteSlot(LIVELY_VERSE_POLICY_MASTER_TYPE_ID);\\n      policyMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\";\\n      policyMasterType.roleLimit = type(uint16).max;\\n      policyMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      policyMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      policyMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      policyMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      policyMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      policyMasterType.roles.add(LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID);\\n      policyMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Policy Master Admin Role\\n      IACLCommons.RoleEntity storage policyMasterAdminRole = data.roleWriteSlot(\\n        LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID\\n      );\\n      policyMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_POLICY_MASTER_ADMIN\\\";\\n      policyMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      policyMasterAdminRole.typeId = LIVELY_VERSE_POLICY_MASTER_TYPE_ID;\\n      policyMasterAdminRole.memberLimit = type(uint24).max;\\n      policyMasterAdminRole.memberCount = 1;\\n      policyMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      policyMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      policyMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      policyMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Profile Master Type\\n      IACLCommons.TypeEntity storage profileMasterType = data.typeWriteSlot(LIVELY_VERSE_PROFILE_MASTER_TYPE_ID);\\n      profileMasterType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\";\\n      profileMasterType.roleLimit = type(uint16).max;\\n      profileMasterType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileMasterType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      profileMasterType.ba.atype = IACLCommons.AgentType.TYPE;\\n      profileMasterType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileMasterType.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      profileMasterType.roles.add(LIVELY_VERSE_POLICY_MASTER_ADMIN_ROLE_ID);\\n      profileMasterType.members[livelyMasterAdminMemberId] = LIVELY_VERSE_PROFILE_MASTER_ADMIN_ROLE_ID;\\n\\n      // Create Profile Master Admin Role\\n      IACLCommons.RoleEntity storage profileMasterAdminRole = data.roleWriteSlot(\\n        LIVELY_VERSE_PROFILE_MASTER_ADMIN_ROLE_ID\\n      );\\n      profileMasterAdminRole.name = \\\"ROLE.LIVELY_VERSE.LIVELY_PROFILE_MASTER_ADMIN\\\";\\n      profileMasterAdminRole.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      profileMasterAdminRole.typeId = LIVELY_VERSE_PROFILE_MASTER_TYPE_ID;\\n      profileMasterAdminRole.memberLimit = type(uint24).max;\\n      profileMasterAdminRole.memberCount = 1;\\n      profileMasterAdminRole.ba.atype = IACLCommons.AgentType.ROLE;\\n      profileMasterAdminRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      profileMasterAdminRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n      profileMasterAdminRole.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n    }\\n    {\\n      // Create Anonymouse  Type\\n      IACLCommons.TypeEntity storage anonymousType = data.typeWriteSlot(LIVELY_VERSE_ANONYMOUS_TYPE_ID);\\n      anonymousType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\";\\n      anonymousType.roleLimit = 0;\\n      anonymousType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      anonymousType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      anonymousType.ba.atype = IACLCommons.AgentType.TYPE;\\n      anonymousType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      anonymousType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n\\n      // Create Any Type\\n      IACLCommons.TypeEntity storage anyType = data.typeWriteSlot(LIVELY_VERSE_ANY_TYPE_ID);\\n      anyType.name = \\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\";\\n      anyType.roleLimit = 0;\\n      anyType.scopeId = LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID;\\n      anyType.ba.adminId = LIVELY_VERSE_LIVELY_MASTER_ADMIN_ROLE_ID;\\n      anyType.ba.atype = IACLCommons.AgentType.TYPE;\\n      anyType.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n      anyType.ba.alstat = IACLCommons.AlterabilityStatus.DISABLED;\\n    }\\n\\n    // update livelyUniverseEntity.bs.referredByAgent\\n    livelyUniverseEntity.bs.referredByAgent = 16;\\n    livelyUniverseEntity.domains.add(LACLUtils.generateId2(\\\"DOMAIN.LIVELY_VERSE.LIVELY_GUARD\\\"));\\n  }\\n}\\n\",\"keccak256\":\"0xd9ab2921baad6de06818f490d430429edceb41fa449152c49ab595d476a9cccd\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLStorage {\\n  function universeReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function universeWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function functionReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fc.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function functionWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fc)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fc.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function functionTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function contextWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function contextTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function realmWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function realmTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryReadSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function domainWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function domainTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = data.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(data.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function memberWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function memberTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.MemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function roleWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function roleTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryReadSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n\\n  function typeWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function typeTryWriteSlot(ACLStorage.DataCollection storage data, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = data.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(data.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n    } else {\\n      assembly {\\n        te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n      }\\n      result = false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1db1476a40cb3e0912d1c07d6ed6c1e9171f6960014e49b66e3532610c80bb6d\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\n\\n/**\\n * @title Context Utils Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLUtils {\\n  function functionGenerateId(address contractId, bytes4 selector) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId, selector));\\n  }\\n\\n  function accountGenerateId(address account) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(account));\\n  }\\n\\n  function generateId(string calldata name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateId2(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateHash(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function getMemeberSignerAddress(IACLCommons.MemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateMemberSignMsgHash(msgTypeHash, memberSign.account, memberSign.expiredAt)\\n      );\\n  }\\n\\n  function getProfileMemeberSignerAddress(IACLCommons.ProfileMemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateProfileMemberSignMsgHash(\\n          msgTypeHash,\\n          generateId(memberSign.profileName),\\n          memberSign.account,\\n          memberSign.expiredAt\\n        )\\n      );\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) private view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(IProxy(address(this)).domainSeparator(), structHash);\\n  }\\n\\n  function _generateMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, account, expiredAt));\\n  }\\n\\n  function _generateProfileMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    bytes32 profileName,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, profileName, account, expiredAt));\\n  }\\n\\n  function getSignerAddress(bytes memory signature, bytes32 structHash) internal view returns (address) {\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal Signature\\\");\\n    return msgSigner;\\n  }\\n\\n  function generateAuthorizationError(IACL.AuthorizationStatus status) internal pure {\\n    if (status == IACL.AuthorizationStatus.UNAUTHORIZED) revert IACL.ACLUnauthorized();\\n    else if (status == IACL.AuthorizationStatus.POLICY_FORBIDDEN) revert IACL.ACLPolicyForbidden();\\n    else if (status == IACL.AuthorizationStatus.CALL_FORBIDDEN) revert IACL.ACLCallForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_SCOPE_FORBIDDEN) revert IACL.ACLRoleScopeForbidden();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_NOT_FOUND) revert IACL.ACLMemberNotFound();\\n    else if (status == IACL.AuthorizationStatus.ROLE_NOT_FOUND) revert IACL.ACLRoleNotFound();\\n    else if (status == IACL.AuthorizationStatus.TYPE_NOT_FOUND) revert IACL.ACLTypeNotFound();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_NOT_FOUND) revert IACL.ACLFunctionNotFound();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_NOT_FOUND) revert IACL.ACLContextNotFound();\\n    else if (status == IACL.AuthorizationStatus.REALM_NOT_FOUND) revert IACL.ACLRealmNotFound();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_NOT_FOUND) revert IACL.ACLDomainNotFound();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN) revert IACL.ACLMemberActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.ACLRoleActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.ACLTypeActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN) revert IACL.ACLFunctionActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN) revert IACL.ACLContextActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.REALM_ACTIVITY_FORBIDDEN) revert IACL.ACLRealmActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN) revert IACL.ACLDomainActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN) revert IACL.ACLUniverseActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAuthorizationError(IProfileACL.ProfileAuthorizationStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAuthorizationStatus.UNAUTHORIZED) revert IProfileACL.ProfileACLUnauthorized();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleScopeForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_NOT_FOUND)\\n      revert IProfileACL.ProfileACLMemberNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRoleNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLTypeNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileACLFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_NOT_FOUND)\\n      revert IProfileACL.ProfileACLContextNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRealmNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_NOT_FOUND)\\n      revert IProfileACL.ProfileACLDomainNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLTypeActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLFunctionActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLContextActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRealmActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLDomainActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLUniverseActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLProfileActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAdminAccessError(IProfileACL.ProfileAdminAccessStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED)\\n      revert IProfileACL.ProfileAdminAccessNotPermitted();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessRoleNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessTypeNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateAdminAccessError(IACL.AdminAccessStatus status) internal pure {\\n    if (status == IACL.AdminAccessStatus.NOT_PERMITTED) revert IACL.AdminAccessNotPermitted();\\n    else if (status == IACL.AdminAccessStatus.POLICY_FORBIDDEN) revert IACL.AdminAccessPolicyForbidden();\\n    else if (status == IACL.AdminAccessStatus.ROLE_NOT_FOUND) revert IACL.AdminAccessRoleNotFound();\\n    else if (status == IACL.AdminAccessStatus.TYPE_NOT_FOUND) revert IACL.AdminAccessTypeNotFound();\\n    else if (status == IACL.AdminAccessStatus.FUNCTION_NOT_FOUND) revert IACL.AdminAccessFunctionNotFound();\\n    else if (status == IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessRoleActivityForbidden();\\n    else if (status == IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x0a1ead86733fdae5c48faf98479dea608f2a5743722b7d458981c33ff13489c1\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LProfileStorage {\\n  function profileUniverseReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function profileUniverseWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileFunctionWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n}\\n\",\"keccak256\":\"0xe95300b9bb0c9fa78648108acf843bd0609e08a60b03b61a79f271f5fcb46b91\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0x75b905d070ebb72fa3358e262ab18166f6c6386c11171324f235058ce9185ca4\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe49098eb2019f9d9628a399f6a06ec310fe8a10785c369cc508c56df1f203dd0\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Abstract Base Proxy Contract\\n * @dev\\n *\\n */\\nabstract contract BaseProxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overridden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xbfec492ce3aa18df2eb26ce155269056e8039eaccec4a3146dd9036b565396a6\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC1822.sol\\\";\\nimport \\\"./IProxy.sol\\\";\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"./BaseUUPSStorage.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"../lib/LAddress.sol\\\";\\nimport \\\"../lib/LStorageSlot.sol\\\";\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/scope/IContextManagement.sol\\\";\\nimport \\\"../utils/Message.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"../lib/acl/LACLUtils.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Proxy Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSProxy is\\n  BaseUUPSStorage,\\n  BaseProxy,\\n  Initializable,\\n  IProxy,\\n  IERC1822Proxiable,\\n  Message,\\n  ERC165\\n{\\n  /**\\n   * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n   * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n   * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n   * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n   * fail.\\n   */\\n  modifier onlyProxy() {\\n    require(address(this) != __self, \\\"Illegal Call\\\"); // Illegal Contract Call\\n    require(_implementation() == __self, \\\"Invalid Call\\\"); // Invalid Proxy Call\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyLocalAdmin() {\\n    require(_getLocalAdmin() == _msgSender(), \\\"Access Denied\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n   * callable on the implementing contract but not through proxies.\\n   */\\n  modifier notDelegated() {\\n    require(address(this) == __self, \\\"Illegal Call\\\"); // Illegal Contract Delegatecall\\n    _;\\n  }\\n\\n  modifier safeModeCheck() {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    _;\\n  }\\n\\n  modifier aclCheck(bytes4 selector) {\\n    IACL.AuthorizationStatus status = _hasPermission(selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _;\\n  }\\n\\n  function _hasPermission(bytes4 selector) internal returns (IACL.AuthorizationStatus) {\\n    return IACL(_accessControlManager).hasAccountAccess(address(this), selector, _msgSender());\\n  }\\n\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n   */\\n\\n  constructor() {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n    // set contract Admin (implementation contract)\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = _msgSender();\\n\\n    // set _isUpgradable and _isSafeMode of contact\\n    _ustat = ProxyUpdatabilityStatus.DISABLED;\\n    _sstat = ProxySafeModeStatus.ENABLED;\\n  }\\n\\n  function __BASE_UUPS_init(\\n    string calldata cname,\\n    string calldata cverion,\\n    address accessControl\\n  ) internal {\\n    __BASE_UUPS_init_unchained(cname, cverion, accessControl);\\n  }\\n\\n  function __BASE_UUPS_init_unchained(\\n    string calldata cname,\\n    string calldata cverion,\\n    address accessControl\\n  ) internal onlyInitializing {\\n    _contractName = cname;\\n    _contractVersion = cverion;\\n\\n    if (accessControl != address(this)) {\\n      require(LAddress.isContract(accessControl), \\\"Illegal Contract\\\");\\n      if (!IERC165(accessControl).supportsInterface(type(IACL).interfaceId)) {\\n        revert(\\\"Illegal ACL\\\");\\n      }\\n    } else {\\n      if (!supportsInterface(type(IACL).interfaceId)) {\\n        revert(\\\"Not Supported\\\");\\n      }\\n    }\\n\\n    _accessControlManager = accessControl;\\n    _ustat = ProxyUpdatabilityStatus.DISABLED;\\n    _sstat = ProxySafeModeStatus.DISABLED;\\n    _setLocalAdmin(_msgSender());\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IProxy).interfaceId ||\\n      interfaceId == type(IERC1822Proxiable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation() internal view override returns (address) {\\n    return LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit ProxyUpgraded(msg.sender, address(this), newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      return LAddress.functionDelegateCall(newImplementation, data, \\\"Call Failed\\\"); // delegatecall failed\\n    }\\n    return new bytes(0);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCallUUPS(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\n    if (LStorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n      _setImplementation(newImplementation);\\n      return new bytes(0);\\n    } else {\\n      if (IERC1822Proxiable(newImplementation).proxiableUUID() != _IMPLEMENTATION_SLOT) {\\n        revert(\\\"Illegal UUPS\\\");\\n      }\\n\\n      if (!IERC165(newImplementation).supportsInterface(type(IProxy).interfaceId)) {\\n        revert(\\\"Illegal IProxy\\\");\\n      }\\n\\n      return _upgradeToAndCall(newImplementation, data, forceCall);\\n    }\\n  }\\n\\n  /**\\n   * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n   * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n   */\\n  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n    return _IMPLEMENTATION_SLOT;\\n  }\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external virtual onlyProxy returns (bytes memory) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    require(LAddress.isContract(newImplementation), \\\"Illegal Contract\\\");\\n    _authorizeUpgrade(newImplementation);\\n    return _upgradeToAndCallUUPS(newImplementation, data, forceCall);\\n  }\\n\\n  /**\\n   * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n   * {upgradeTo} and {upgradeToAndCall}.\\n   *\\n   * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n   *\\n   * ```solidity\\n   * function _authorizeUpgrade(address) internal override onlyOwner {}\\n   * ```\\n   */\\n  function _authorizeUpgrade(address newImplementation) internal virtual {\\n    require(newImplementation != _implementation(), \\\"Illegal\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.upgradeTo.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n  }\\n\\n  function localAdmin() external view returns (address) {\\n    return _getLocalAdmin();\\n  }\\n\\n  function setLocalAdmin(address newLocalAdmin) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setLocalAdmin.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    require(newLocalAdmin != address(0), \\\"Invalid\\\");\\n    _setLocalAdmin(newLocalAdmin);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.require(!_isSafeMode, \\\"Rejected\\\");\\n   */\\n  function _getLocalAdmin() internal view returns (address) {\\n    return LStorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setLocalAdmin(address newAdmin) internal {\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    emit ProxyLocalAdminUpdated(_msgSender(), address(this), newAdmin);\\n  }\\n\\n  // In each upgrade the initialize requirement must be changed\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external onlyProxy returns (bool) {\\n    require(_getInitializedCount() > 0, \\\"NOT INIT\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setSafeModeStatus.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _sstat = sstat;\\n    emit ProxySafeModeUpdated(_msgSender(), address(this), sstat);\\n    return true;\\n  }\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.setUpdatabilityStatus.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    _ustat = ustat;\\n    emit ProxyUpdatabilityUpdated(_msgSender(), address(this), ustat);\\n    return true;\\n  }\\n\\n  function setAccessControlManager(address acl) external onlyProxy returns (bool) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    require(_ustat == ProxyUpdatabilityStatus.ENABLED, \\\"Illegal Updatable\\\");\\n    require(acl != address(0) && LAddress.isContract(acl), \\\"Illegal Contract\\\");\\n\\n    if (_accessControlManager != address(0)) {\\n      IACL.AuthorizationStatus status = _hasPermission(this.setAccessControlManager.selector);\\n      if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    } else {\\n      require(_getLocalAdmin() == _msgSender(), \\\"Access Denied\\\");\\n    }\\n\\n    if (!IERC165(acl).supportsInterface(type(IACL).interfaceId)) {\\n      revert(\\\"Illegal ACL\\\");\\n    }\\n\\n    _accessControlManager = acl;\\n    emit ProxyAccessControlUpdated(_msgSender(), address(this), _accessControlManager);\\n    return true;\\n  }\\n\\n  function contractName() external view returns (string memory) {\\n    return _contractName;\\n  }\\n\\n  function contractVersion() external view returns (string memory) {\\n    return _contractVersion;\\n  }\\n\\n  function accessControlManager() external view returns (address) {\\n    return _accessControlManager;\\n  }\\n\\n  function subjectAddress() external view returns (address) {\\n    return _implementation();\\n  }\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus) {\\n    return _sstat;\\n  }\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus) {\\n    return _ustat;\\n  }\\n\\n  function domainSeparator() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          keccak256(abi.encodePacked(_contractName)),\\n          keccak256(abi.encodePacked(_contractVersion)),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  function initVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  function withdrawBalance(address recepient) external returns (uint256) {\\n    require(_sstat == ProxySafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    IACL.AuthorizationStatus status = _hasPermission(this.withdrawBalance.selector);\\n    if (status != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(status);\\n    uint256 balance = address(this).balance;\\n    payable(recepient).transfer(address(this).balance);\\n    return balance;\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable override {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable override {}\\n}\\n\",\"keccak256\":\"0x711f8267d66a827c0cf581e8f070580586aa0fddd197637fac5b85bfd371627b\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Storage Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSStorage is IBaseProxy {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  address internal immutable __self = address(this);\\n\\n  string internal _contractName;\\n  string internal _contractVersion;\\n  address internal _accessControlManager;\\n  ProxySafeModeStatus internal _sstat;\\n  ProxyUpdatabilityStatus internal _ustat;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x4ff079fd2fd1ad102d42e82a72bff6bb1ffb8f9ab29cec2dd8e970b892ea415e\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IBaseProxy {\\n  enum ProxySafeModeStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum ProxyUpdatabilityStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  event ProxyUpgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x4b2695303b3acb300ba472d17da71a16367191af571d325d43171503d7c92846\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x98571e9bc4231bb67b3c8b339c052fa968e56b0bef3e35f5d82c391335336ae8\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event ProxyLocalAdminUpdated(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event ProxyAccessControlUpdated(address indexed sender, address indexed proxy, address acl);\\n\\n  event ProxySafeModeUpdated(address indexed sender, address indexed proxy, ProxySafeModeStatus sstat);\\n\\n  event ProxyUpdatabilityUpdated(address indexed sender, address indexed proxy, ProxyUpdatabilityStatus ustat);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external returns (bool);\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function setAccessControlManager(address acl) external returns (bool);\\n\\n  function withdrawBalance(address recepient) external returns (uint256);\\n\\n  function contractName() external view returns (string memory);\\n\\n  function contractVersion() external view returns (string memory);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus);\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xaadf51e846486cf9dc7387ad1dcac9a67e6a2d9354ce71694d79de783e1dea3b\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0x5603924c0330dcabd0b81d2b6a8113be8ad3ecbbfd0e75795a79221c21990f45\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xd4388084c83f15ac54be8d4e28a9d0f7be51c87efc357a33e7080e9769d5553a\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x95ac867088cd7cca6d583788b83e56e0c521c847aa9844f6184c14f5ce3ddf90\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Abstract Message Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x9fe52fdf93ebcdcbe224c4eba70bd3d8f6b4479fcc67d681b18070975d1ba970\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200004360017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620000fd565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc1462000074576200007462000125565b620000a160017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620000fd565b600080516020620059bd83398151915214620000c157620000c162000125565b600080516020620059bd83398151915280546001600160a01b0319163317905560028054600160a01b61ffff60a01b199091161790556200013b565b818103818111156200011f57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052600160045260246000fd5b608051615812620001ab60003960008181610ac301528181610b0c01528181610cfb01528181610d3b0152818161109701528181611924015281816119640152818161214601528181612186015281816129d501528181612a1501528181612b890152612bc901526158126000f3fe6080604052600436106102275760003560e01c8063756af45f11610122578063ba696695116100a5578063f696bbcc1161006c578063f696bbcc14610766578063f698da2514610786578063f708ceb01461079b578063f94a0adb146107bb578063fcc40178146107d057005b8063ba696695146106b2578063d9dc1f19146106d2578063e05e0a0f146106f2578063eb3a405814610712578063f0b15def1461073257005b8063a0a8e460116100e9578063a0a8e46014610620578063a304e35314610635578063ae7dd7c714610654578063ae9710cf14610674578063b4a0bdf31461069457005b8063756af45f1461057057806375d0c0dc146105905780637678922e146105a55780638d893608146105cc5780639b97b534146105ec57005b806346506345116101aa57806358dbc45d1161017157806358dbc45d146104a257806364d4c819146104cf57806369cd0ec21461050357806370dc241b146105235780637147855d1461054357005b806346506345146103f15780634888f482146104115780634bf0414d1461043957806352d1902d1461046d578063589a8d0b1461048257005b80631b452f4b116101ee5780631b452f4b146102f257806320747ceb14610334578063301c12801461036157806334109de21461039557806338d38c97146103c957005b806301ffc9a714610230578063025524b11461026557806304c16d5714610292578063077f224a146102b25780630e32cb86146102d257005b3661022e57005b005b34801561023c57600080fd5b5061025061024b366004614c7b565b6107f0565b60405190151581526020015b60405180910390f35b34801561027157600080fd5b50610285610280366004614ca5565b61081b565b60405161025c9190614d41565b34801561029e57600080fd5b506102506102ad366004614e26565b610a56565b3480156102be57600080fd5b5061022e6102cd366004614e7e565b610ab9565b3480156102de57600080fd5b506102506102ed366004614efe565b610cef565b3480156102fe57600080fd5b506103267f7bfb2abd6084c8ce20d7ff92c1620e7e7267603f0eac446b9176959d243306bc81565b60405190815260200161025c565b34801561034057600080fd5b5061035461034f366004614ca5565b610ffd565b60405161025c9190614f19565b34801561036d57600080fd5b506103267f541cf898e7c3085cbc6b7402ba06e7237285bc4bd5baa510e708e35537a71ffd81565b3480156103a157600080fd5b506103267f7aabe2571874f2a330ea11c8972d9cc3792d973efc6b36e3e29005861a34418881565b3480156103d557600080fd5b506103de611045565b60405161ffff909116815260200161025c565b3480156103fd57600080fd5b5061025061040c366004614ca5565b611059565b34801561041d57600080fd5b50600254600160a81b900460ff165b60405161025c9190614f6d565b34801561044557600080fd5b506103267f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d5581565b34801561047957600080fd5b5061032661108a565b34801561048e57600080fd5b5061025061049d366004614fdc565b6110e7565b3480156104ae57600080fd5b506104b76112b5565b6040516001600160a01b03909116815260200161025c565b3480156104db57600080fd5b506103267f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b34801561050f57600080fd5b5061025061051e366004615088565b6112bf565b34801561052f57600080fd5b5061025061053e3660046150e3565b6118ca565b34801561054f57600080fd5b5061056361055e36600461513e565b611918565b60405161025c919061520f565b34801561057c57600080fd5b5061032661058b366004614efe565b611a6f565b34801561059c57600080fd5b50610563611b34565b3480156105b157600080fd5b507361a74e6467B0eDd133Bf2fa08193Fc8B663D17506104b7565b3480156105d857600080fd5b506102506105e7366004615222565b611bc6565b3480156105f857600080fd5b506103267fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b881565b34801561062c57600080fd5b50610563611bff565b34801561064157600080fd5b50600254600160a01b900460ff1661042c565b34801561066057600080fd5b5061025061066f366004615088565b611c0e565b34801561068057600080fd5b5061025061068f366004614fdc565b611e25565b3480156106a057600080fd5b506002546001600160a01b03166104b7565b3480156106be57600080fd5b506102506106cd366004614fdc565b611f47565b3480156106de57600080fd5b506102506106ed366004614efe565b61213a565b3480156106fe57600080fd5b5061025061070d366004614fdc565b6122f0565b34801561071e57600080fd5b5061025061072d366004614fdc565b6126b7565b34801561073e57600080fd5b506103267ffc434588684348dd50856b075c47bed14245c1030aa04c32955af5549981462781565b34801561077257600080fd5b506102506107813660046150e3565b612863565b34801561079257600080fd5b506103266129bf565b3480156107a757600080fd5b506102506107b6366004615251565b6129c9565b3480156107c757600080fd5b506104b7612b73565b3480156107dc57600080fd5b506102506107eb366004615251565b612b7d565b60006001600160e01b03198216633af0e5e560e21b1480610815575061081582612d08565b92915050565b61086a6040805161012081018252600080825260208201819052918101829052606081018290529060808201908152602001600081526020016000815260200160008152602001606081525090565b600080610878604485612d58565b91509150806108dd57604080516101208101825260008082526020820181905291810182905260608101829052906080820190815260200160008152602001600081526020016000815260408051602081810190925260008152910152949350505050565b60408051610120810182526002840154815283546020820152600484015461ffff16918101919091526060810161091660068501612db5565b61ffff168152835460009081526044602090815260409091206001015491019060ff16600381111561094a5761094a614cbe565b8152600184015460209091019060ff16600381111561096b5761096b614cbe565b81526001840154602090910190610100900460ff16600381111561099157610991614cbe565b8152600184015460209091019062010000900460ff1660038111156109b8576109b8614cbe565b81526020018360030180546109cc9061526e565b80601f01602080910402602001604051908101604052809291908181526020018280546109f89061526e565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b505050505081525092505050919050565b60006003604460000160008585604051602001610a749291906152a2565b60408051601f198184030181529181528151602092830120835290820192909252016000206001015460ff166003811115610ab157610ab1614cbe565b149392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b0a5760405162461bcd60e51b8152600401610b01906152b2565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b3c612dbf565b6001600160a01b031614610b625760405162461bcd60e51b8152600401610b01906152d8565b33610b6b612de0565b6001600160a01b031614610bb15760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610b01565b604e5462010000900460ff1615808015610bd35750604e54600161ffff909116105b80610bee5750303b158015610bee5750604e5461ffff166001145b610c3a5760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a6564000000006044820152606401610b01565b604e805461ffff191660011790558015610c6057604e805462ff00001916620100001790555b610c6d8686868686612e08565b610c75612dbf565b6001600160a01b031630336001600160a01b03167f247ab7b17ee489fa140c6666edc3822eefed2727610cd6e37192462b87244c6089898989610cbb604e5461ffff1690565b604051610ccc959493929190615327565b60405180910390a48015610ce757604e805462ff0000191690555b505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d395760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d6b612dbf565b6001600160a01b031614610d915760405162461bcd60e51b8152600401610b01906152d8565b6000600254600160a01b900460ff166001811115610db157610db1614cbe565b14610dce5760405162461bcd60e51b8152600401610b0190615365565b6001600254600160a81b900460ff166001811115610dee57610dee614cbe565b14610e0b5760405162461bcd60e51b8152600401610b0190615387565b6001600160a01b03821615801590610e2c57506001600160a01b0382163b15155b610e485760405162461bcd60e51b8152600401610b01906153b2565b6002546001600160a01b031615610ea7576000610e6b63071965c360e11b612e1c565b90506000816013811115610e8157610e81614cbe565b14610ea15780604051637f0911d160e01b8152600401610b0191906153dc565b50610ef6565b33610eb0612de0565b6001600160a01b031614610ef65760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610b01565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6591906153f0565b610f9f5760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610b01565b600280546001600160a01b0384166001600160a01b031990911681179091556040805191825251309133917f410bf468eebeeed60acaedb904afb2db7c0bb0131f7d14c3714d81b14fe8ed3c9181900360200190a35060015b919050565b606060008061100d604485612d58565b91509150806110315760408051600080825260208201909252905b50949350505050565b61103d82600601612ea7565b949350505050565b6000611054604e5461ffff1690565b905090565b6000600360008381526044602052604090206001015460ff16600381111561108357611083614cbe565b1492915050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110d45760405162461bcd60e51b8152600401610b01906152b2565b506000805160206157bd83398151915290565b60008080806110fd8763589a8d0b60e01b612eb2565b92509250925060005b858110156112a557600061113e8888848181106111255761112561540d565b60400291909101359050858763589a8d0b60e01b613114565b905060018888848181106111545761115461540d565b905060400201602001602081019061116c9190615430565b600381111561117d5761117d614cbe565b116111bd5760405162461bcd60e51b815260206004820152601060248201526f496c6c6567616c20416374697669747960801b6044820152606401610b01565b8787838181106111cf576111cf61540d565b90506040020160200160208101906111e79190615430565b60018201805461ff00191661010083600381111561120757611207614cbe565b021790555087878381811061121e5761121e61540d565b90506040020160000135836001600160a01b03167fea9ccbce19532fbbbb442919f1510230d08be4c0419b3f0c0390a8a7e4701ef48a8a868181106112655761126561540d565b905060400201602001602081019061127d9190615430565b60405161128a919061544d565b60405180910390a3508061129d81615470565b915050611106565b50600193505050505b9392505050565b6000611054612dbf565b600080806112d4866334e6876160e11b612eb2565b9093509150600090506112e86044846131df565b600381015490915060009061130a9087830b90600160c01b900460ff16615489565b60010b12156113535760405162461bcd60e51b8152602060048201526015602482015274125b1b1959d85b08149959da5cdd195c931a5b5a5d605a1b6044820152606401610b01565b60038101805460ff600160c01b80830482168990039091160260ff60c01b1990911617905560405160009081906113dd906113c1906020017f545950452e4c4956454c595f56455253452e4c4956454c595f545950455f4d4181526329aa22a960e11b602082015260240190565b60405160208183030381529060405280519060200120866132bc565b9150915060005b878110156118ba5760006114288a8a848181106114035761140361540d565b905060200281019061141591906154ac565b6114239060a08101906154cc565b613312565b90506000808281526044602052604090206001015460ff16600381111561145157611451614cbe565b1461148e5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e48115e1a5cdd609a1b6044820152606401610b01565b60018a8a848181106114a2576114a261540d565b90506020028101906114b491906154ac565b6114c5906080810190606001615430565b60038111156114d6576114d6614cbe565b118015611528575060008a8a848181106114f2576114f261540d565b905060200281019061150491906154ac565b6115159060a0810190608001615430565b600381111561152657611526614cbe565b115b6115745760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c2041637469766974792f416c7465726162696c6974790000006044820152606401610b01565b60006115a88b8b8581811061158b5761158b61540d565b905060200281019061159d91906154ac565b602001358587613345565b905060006115b76044846135e2565b60018101805460ff1916600317905590508b8b858181106115da576115da61540d565b90506020028101906115ec91906154ac565b6115fd906080810190606001615430565b60018201805461ff00191661010083600381111561161d5761161d614cbe565b02179055508b8b858181106116345761163461540d565b905060200281019061164691906154ac565b6116579060a0810190608001615430565b60018201805462ff000019166201000083600381111561167957611679614cbe565b02179055508b8b858181106116905761169061540d565b90506020028101906116a291906154ac565b3581558b8b858181106116b7576116b761540d565b90506020028101906116c991906154ac565b60200135600282015560008c8c868181106116e6576116e661540d565b90506020028101906116f891906154ac565b611709906060810190604001615512565b60020b1215611727576003870154600160981b900461ffff1661175c565b8b8b858181106117395761173961540d565b905060200281019061174b91906154ac565b61175c906060810190604001615512565b60048201805461ffff191661ffff929092169190911790558b8b858181106117865761178661540d565b905060200281019061179891906154ac565b6117a69060a08101906154cc565b60038301916117b6919083615580565b50600182015482546118189160ff16908e8e888181106117d8576117d861540d565b90506020028101906117ea91906154ac565b602001358f8f898181106118005761180061540d565b905060200281019061181291906154ac565b35613684565b81558b8b8581811061182c5761182c61540d565b905060200281019061183e91906154ac565b6020013583896001600160a01b03167fd347230059f90a0eb415cc5739ee258a455c52d28907f3cf3bb33af47eb3ba2f8f8f898181106118805761188061540d565b905060200281019061189291906154ac565b6040519035815260200160405180910390a450505080806118b290615470565b9150506113e4565b5060019998505050505050505050565b600080806118d9604486612d58565b91509150806118ed57600092505050610815565b600060058301816118fd876138b2565b81526020019081526020016000205414159250505092915050565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119625760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611994612dbf565b6001600160a01b0316146119ba5760405162461bcd60e51b8152600401610b01906152d8565b6000600254600160a01b900460ff1660018111156119da576119da614cbe565b146119f75760405162461bcd60e51b8152600401610b0190615365565b6001600254600160a81b900460ff166001811115611a1757611a17614cbe565b14611a345760405162461bcd60e51b8152600401610b0190615387565b6001600160a01b0384163b611a5b5760405162461bcd60e51b8152600401610b01906153b2565b611a64846138f1565b61103d84848461398f565b600080600254600160a01b900460ff166001811115611a9057611a90614cbe565b14611aad5760405162461bcd60e51b8152600401610b0190615365565b6000611abf63756af45f60e01b612e1c565b90506000816013811115611ad557611ad5614cbe565b14611af55780604051637f0911d160e01b8152600401610b0191906153dc565b60405147906001600160a01b038516904780156108fc02916000818181858888f19350505050158015611b2c573d6000803e3d6000fd5b509392505050565b606060008054611b439061526e565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6f9061526e565b8015611bbc5780601f10611b9157610100808354040283529160200191611bbc565b820191906000526020600020905b815481529060010190602001808311611b9f57829003601f168201915b5050505050905090565b60008080611bd5604486612d58565b9150915080611be957600092505050610815565b611bf66006830185613b47565b95945050505050565b606060018054611b439061526e565b6000808080611c248763ae7dd7c760e01b612eb2565b92509250925060005b858110156112a5576000611c63888884818110611c4c57611c4c61540d565b905060200201356044613b5f90919063ffffffff16565b8054909150600090611c76908688613bfb565b90506000816007811115611c8c57611c8c614cbe565b14611c9a57611c9a81613c87565b611ca682600601612db5565b15611ce45760405162461bcd60e51b815260206004820152600e60248201526d496c6c6567616c2052656d6f766560901b6044820152606401610b01565b6002820154600090815260456020526040902060018101546301000000900463ffffffff16611d485760405162461bcd60e51b815260206004820152601060248201526f125b1b195859db08149959995c9c995960821b6044820152606401610b01565b6001818101805460001963ffffffff6301000000808404821692909201160266ffffffff000000199091161790556000808555908401805462ffffff1916905560028401819055611d9d906003850190614c0e565b60048301805461ffff191690556006830160008181611dbc8282614c48565b50505050898985818110611dd257611dd261540d565b90506020020135856001600160a01b03167f8ec7ac0824b727a755715eb01cbe8166d65b7b7c39c1bd44aff31eb1b643fb1060405160405180910390a35050508080611e1d90615470565b915050611c2d565b6000808080611e3b8763ae9710cf60e01b612eb2565b92509250925060005b858110156112a5576000611e7c888884818110611e6357611e6361540d565b60400291909101359050858763ae9710cf60e01b613114565b6002810154600081815260456020526040902060018101549054929350611ec49260ff909116918b8b87818110611eb557611eb561540d565b90506040020160200135613684565b8155878783818110611ed857611ed861540d565b90506040020160200135888884818110611ef457611ef461540d565b90506040020160000135846001600160a01b03167fd407cb2fbf8a9249d1838b941f8492f7c348700eb49cba7f8d4bab5e6fd4c55360405160405180910390a45080611f3f81615470565b915050611e44565b6000808080611f5d8763ba69669560e01b612eb2565b92509250925060005b858110156112a5576000611f96888884818110611f8557611f8561540d565b604492604090910201359050613b5f565b8054909150600090611fa9908688613bfb565b90506000816007811115611fbf57611fbf614cbe565b14611fcd57611fcd81613c87565b6000898985818110611fe157611fe161540d565b9050604002016020016020810190611ff99190615430565b600381111561200a5761200a614cbe565b0361204e5760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20416c7465726162696c69747960601b6044820152606401610b01565b8888848181106120605761206061540d565b90506040020160200160208101906120789190615430565b60018301805462ff000019166201000083600381111561209a5761209a614cbe565b02179055508888848181106120b1576120b161540d565b90506040020160000135846001600160a01b03167f521942249a1b9e9e74b64de74b41bc597b22ebbee224405e9c7f398f15acd60a8b8b878181106120f8576120f861540d565b90506040020160200160208101906121109190615430565b60405161211d919061544d565b60405180910390a35050808061213290615470565b915050611f66565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036121845760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166121b6612dbf565b6001600160a01b0316146121dc5760405162461bcd60e51b8152600401610b01906152d8565b6000600254600160a01b900460ff1660018111156121fc576121fc614cbe565b146122195760405162461bcd60e51b8152600401610b0190615365565b6001600254600160a81b900460ff16600181111561223957612239614cbe565b146122565760405162461bcd60e51b8152600401610b0190615387565b600061226863d9dc1f1960e01b612e1c565b9050600081601381111561227e5761227e614cbe565b1461229e5780604051637f0911d160e01b8152600401610b0191906153dc565b6001600160a01b0383166122de5760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606401610b01565b6122e783613e1e565b50600192915050565b60008080806123068763e05e0a0f60e01b612eb2565b92509250925060008060005b878110156118ba57600061234a8a8a848181106123315761233161540d565b60400291909101359050878963e05e0a0f60e01b613114565b805460009081526044602052604090206001015490915060ff16600281600381111561237857612378614cbe565b036123b257815460009061238e90604490613e95565b6002015460008181526045602052604090206001015460ff16965094506124039050565b81546000906123c390604490613b5f565b60008981526005820160205260408120549192506123e2604483613e95565b6002015460008181526045602052604090206001015460ff16985096505050505b600061242b8c8c8681811061241a5761241a61540d565b905060400201602001358688613345565b6002840154600090815260456020526040812091925061244d60068601612db5565b111561259057600181015460ff16600581111561246c5761246c614cbe565b600183015460ff16600581111561248557612485614cbe565b116124c65760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c2053636f70655479706560781b6044820152606401610b01565b30633bc6460a8e8e888181106124de576124de61540d565b9050604002016020013586600201546040518363ffffffff1660e01b8152600401612513929190918252602082015260400190565b602060405180830381865afa158015612530573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255491906153f0565b6125905760405162461bcd60e51b815260206004820152600d60248201526c496c6c6567616c2053636f706560981b6044820152606401610b01565b60018101546301000000900463ffffffff166125e15760405162461bcd60e51b815260206004820152601060248201526f125b1b195859db08149959995c9c995960821b6044820152606401610b01565b60018101805460001963ffffffff6301000000808404821692909201160266ffffffff000000199091161790558c8c868181106126205761262061540d565b9050604002016020013584600201819055508c8c868181106126445761264461540d565b905060400201602001358d8d878181106126605761266061540d565b90506040020160000135896001600160a01b03167fc21cc81eb30a073f4a2d9f83cfe7c770b14b79e58da6a450ab052f127b308a8b60405160405180910390a45050505080806126af90615470565b915050612312565b60008080806126cd87631d67480b60e31b612eb2565b92509250925060005b858110156112a557600061270e8888848181106126f5576126f561540d565b604002919091013590508587631d67480b60e31b613114565b905061271c81600601612db5565b88888481811061272e5761272e61540d565b9050604002016020016020810190612746919061563f565b61ffff16116127875760405162461bcd60e51b815260206004820152600d60248201526c125b1b1959d85b08131a5b5a5d609a1b6044820152606401610b01565b8787838181106127995761279961540d565b90506040020160200160208101906127b1919061563f565b60048201805461ffff191661ffff929092169190911790558787838181106127db576127db61540d565b90506040020160000135836001600160a01b03167f5c6c687adedce80d5c216dde612b70b29da16daa5d5a65ed1cb846fd21b40dd98a8a868181106128225761282261540d565b905060400201602001602081019061283a919061563f565b60405161ffff909116815260200160405180910390a3508061285b81615470565b9150506126d6565b6000600360008481526044602052604090206001015460ff16600381111561288d5761288d614cbe565b1461289a57506000610815565b6000838152604460205260408082205480835290822060010154909160ff909116906128c5856138b2565b905060028260038111156128db576128db614cbe565b03612958576000806128ee604486613f72565b915091508061290557600095505050505050610815565b60008061292084600301546044612d5890919063ffffffff16565b9150915080612939576000975050505050505050610815565b5060009384526005016020525050604090205490911491506108159050565b600382600381111561296c5761296c614cbe565b036129b35760008061297f604486612d58565b915091508061299657600095505050505050610815565b506000918252600501602052604090205415159250610815915050565b50600095945050505050565b6000611054613f89565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612a135760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612a45612dbf565b6001600160a01b031614612a6b5760405162461bcd60e51b8152600401610b01906152d8565b6000612a7a604e5461ffff1690565b61ffff1611612ab65760405162461bcd60e51b81526020600482015260086024820152671393d5081253925560c21b6044820152606401610b01565b6000612ac8630f708ceb60e41b612e1c565b90506000816013811115612ade57612ade614cbe565b14612afe5780604051637f0911d160e01b8152600401610b0191906153dc565b6002805484919060ff60a01b1916600160a01b836001811115612b2357612b23614cbe565b021790555030336001600160a01b03167fc08ec585c25f1907baaab6f278c5994531a2e34c59935b3fcfe813067a3b487885604051612b629190614f6d565b60405180910390a350600192915050565b6000611054612de0565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612bc75760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612bf9612dbf565b6001600160a01b031614612c1f5760405162461bcd60e51b8152600401610b01906152d8565b6000600254600160a01b900460ff166001811115612c3f57612c3f614cbe565b14612c5c5760405162461bcd60e51b8152600401610b0190615365565b6000612c6e631f98802f60e31b612e1c565b90506000816013811115612c8457612c84614cbe565b14612ca45780604051637f0911d160e01b8152600401610b0191906153dc565b6002805484919060ff60a81b1916600160a81b836001811115612cc957612cc9614cbe565b021790555030336001600160a01b03167ff5912c5e436152157ed2b4a84bc313b4b1fe09a15b941f195d23c99a1b8c45ad85604051612b629190614f6d565b60006001600160e01b03198216633d817cff60e01b1480612d3957506001600160e01b031982166352d1902d60e01b145b8061081557506301ffc9a760e01b6001600160e01b0319831614610815565b6000818152602083905260408120819060035b600182015460ff166003811115612d8457612d84614cbe565b03612da357604080518581526020810187905220925060019150612dad565b6000199250600091505b509250929050565b6000610815825490565b60006000805160206157bd8339815191525b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612dd1565b612e15858585858561403d565b5050505050565b6002546040805163172cb29d60e11b81523060048201526001600160e01b03198416602482015233604482015290516000926001600160a01b031691632e59653a916064808301926020929190829003018187875af1158015612e83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190615663565b606061081582614206565b6000808080306001600160a01b031663a304e3536040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f199190615684565b6001811115612f2a57612f2a614cbe565b14612f475760405162461bcd60e51b8152600401610b0190615365565b600080612f5760408801886154cc565b90501115612feb5742612f7060408801602089016156a1565b6001600160401b031611612fba5760405162461bcd60e51b815260206004820152601160248201527045787069726564205369676e617475726560781b6044820152606401610b01565b612fe4867fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b8614262565b9050612fee565b50335b6001600160e01b031985166000908152604a60205260408120546001600160a01b03169061301c828861431a565b90506000613029846138b2565b604051634902a91960e11b8152600481018490526024810182905290915060009030906392055232906044016020604051808303816000875af1158015613074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130989190615663565b905060008160138111156130ae576130ae614cbe565b1461310257600e8160138111156130c7576130c7614cbe565b1480156130e457506001600160e01b0319891663589a8d0b60e01b145b156130f95750909550935090915061310d9050565b61310281614351565b509095509350909150505b9250925092565b600080613122604487613b5f565b90506002600182015462010000900460ff16600381111561314557613145614cbe565b10156131635760405162461bcd60e51b8152600401610b0190615387565b8054600090613173908787613bfb565b9050600081600781111561318957613189614cbe565b146131d55760078160078111156131a2576131a2614cbe565b1480156131bf57506001600160e01b0319841663589a8d0b60e01b145b156131cc5750905061103d565b6131d581613c87565b5095945050505050565b600081815260208390526040812060018082015460ff16600381111561320757613207614cbe565b036132225760408051848152602081018690522091506132b5565b6000600182015460ff16600381111561323d5761323d614cbe565b0361327a5760405162461bcd60e51b815260206004820152600d60248201526c13525108139bdd08119bdd5b99609a1b6044820152606401610b01565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081352510814db1bdd60821b6044820152606401610b01565b5092915050565b600080806132cb604486613b5f565b60008581526005820160205260408120549192506132ea604483613e95565b6002015460008181526045602052604090206001015460ff16955093505050505b9250929050565b600082826040516020016133279291906152a2565b60405160208183030381529060405280519060200120905092915050565b600083815260456020526040812081600182015460ff16600581111561336d5761336d614cbe565b036133a65760405162461bcd60e51b8152602060048201526009602482015268139bdd08119bdd5b9960ba1b6044820152606401610b01565b600180820154610100900460ff1660038111156133c5576133c5614cbe565b116134025760405162461bcd60e51b815260206004820152600d60248201526c14d8dbdc194811195b195d1959609a1b6044820152606401610b01565b600181810180546003906134249084906301000000900463ffffffff166156ca565b825463ffffffff9182166101009390930a928302919092021990911617905550600181015460ff16600581111561345d5761345d614cbe565b83600581111561346f5761346f614cbe565b10156134bd5760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c2053656e6465722053636f70655479706500000000000000006044820152606401610b01565b600181015460ff1660058111156134d6576134d6614cbe565b8360058111156134e8576134e8614cbe565b03613538578484146135335760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c2053656e6465722053636f706560601b6044820152606401610b01565b61103d565b604051631de3230560e11b815260048101859052602481018690523090633bc6460a90604401602060405180830381865afa15801561357b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359f91906153f0565b61103d5760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c2053656e6465722053636f706560601b6044820152606401610b01565b600081815260208390526040812081600182015460ff16600381111561360a5761360a614cbe565b148061362e57506003600182015460ff16600381111561362c5761362c614cbe565b145b156136495760408051848152602081018690522091506132b5565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b6044820152606401610b01565b600081156138a957600160008381526044602052604090206001015460ff1660038111156136b4576136b4614cbe565b116137015760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c2041646d696e204167656e74547970650000000000000000006044820152606401610b01565b60008061370d84614706565b9150915081600581111561372357613723614cbe565b87600581111561373557613735614cbe565b11156137835760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c2041646d696e2053636f7065547970650000000000000000006044820152606401610b01565b81600581111561379557613795614cbe565b8760058111156137a7576137a7614cbe565b036137f6578481146137f15760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2041646d696e2053636f706560681b6044820152606401610b01565b61389f565b604051631de3230560e11b815260048101829052602481018690523090633bc6460a90604401602060405180830381865afa158015613839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385d91906153f0565b61389f5760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2041646d696e2053636f706560681b6044820152606401610b01565b839250505061103d565b50919392505050565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b6138f9612dbf565b6001600160a01b0316816001600160a01b0316036139435760405162461bcd60e51b8152602060048201526007602482015266125b1b1959d85b60ca1b6044820152606401610b01565b6000613955637147855d60e01b612e1c565b9050600081601381111561396b5761396b614cbe565b1461398b5780604051637f0911d160e01b8152600401610b0191906153dc565b5050565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156139d9576139c484614799565b506040805160008152602081019091526112ae565b6000805160206157bd83398151915260001b846001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4d91906156e7565b14613a895760405162461bcd60e51b815260206004820152600c60248201526b496c6c6567616c205555505360a01b6044820152606401610b01565b6040516301ffc9a760e01b8152633d817cff60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015613ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af891906153f0565b613b355760405162461bcd60e51b815260206004820152600e60248201526d496c6c6567616c204950726f787960901b6044820152606401610b01565b613b408484846147c8565b90506112ae565b600081815260018301602052604081205415156112ae565b60008181526020839052604081206003600182015460ff166003811115613b8857613b88614cbe565b03613ba35760408051848152602081018690522091506132b5565b6000600182015460ff166003811115613bbe57613bbe614cbe565b036136495760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b6044820152606401610b01565b60405163ca37fa8560e01b8152604460048201819052602482018590528101839052606481018290526000907361a74e6467B0eDd133Bf2fa08193Fc8B663D17509063ca37fa8590608401602060405180830381865af4158015613c63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190615700565b6001816007811115613c9b57613c9b614cbe565b03613cb9576040516334267bfb60e11b815260040160405180910390fd5b6002816007811115613ccd57613ccd614cbe565b03613ceb576040516343f871e760e11b815260040160405180910390fd5b6003816007811115613cff57613cff614cbe565b03613d1d57604051639afb7c5f60e01b815260040160405180910390fd5b6004816007811115613d3157613d31614cbe565b03613d4f576040516332314d6b60e11b815260040160405180910390fd5b6005816007811115613d6357613d63614cbe565b03613d8157604051633123155560e01b815260040160405180910390fd5b6006816007811115613d9557613d95614cbe565b03613db357604051631b210af760e21b815260040160405180910390fd5b6007816007811115613dc757613dc7614cbe565b03613de5576040516339f73ba360e11b815260040160405180910390fd5b60405162461bcd60e51b815260206004820152600b60248201526a2ab735b737bbb71022a92960a91b6044820152606401610b01565b50565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f63fdbed5f2909ec44e3becc51e9d29654ce1447747914e8a6ebc019e7f640b8b9181900360200190a350565b60008181526020839052604081206002600182015460ff166003811115613ebe57613ebe614cbe565b03613ed95760408051848152602081018690522091506132b5565b6000600182015460ff166003811115613ef457613ef4614cbe565b03613f345760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b6044820152606401610b01565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b6044820152606401610b01565b600081815260208390526040812081906002612d6b565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051602001613fbe9190615721565b604051602081830303815290604052805190602001206001604051602001613fe69190615721565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b604e5462010000900460ff166140955760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e67000000000000006044820152606401610b01565b60006140a2858783615580565b5060016140b0838583615580565b506001600160a01b0381163014614196576001600160a01b0381163b6140e85760405162461bcd60e51b8152600401610b01906153b2565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015614133573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415791906153f0565b6141915760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610b01565b6141e2565b6141a66331501c3960e01b6107f0565b6141e25760405162461bcd60e51b815260206004820152600d60248201526c139bdd0814dd5c1c1bdc9d1959609a1b6044820152606401610b01565b600280546001600160b01b0319166001600160a01b038316179055612e1533613e1e565b60608160000180548060200260200160405190810160405280929190818152602001828054801561425657602002820191906000526020600020905b815481526020019060010190808311614242575b50505050509050919050565b60006112ae61427460408501856154cc565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061431592508691506142bc90506020880188614efe565b6142cc6040890160208a016156a1565b6001600160401b0316604080516020808201959095526001600160a01b039390931683820152606080840192909252805180840390920182526080909201909152805191012090565b614829565b6040516bffffffffffffffffffffffff19606084901b1660208201526001600160e01b031982166034820152600090603801613327565b600181601381111561436557614365614cbe565b03614383576040516338bb798160e21b815260040160405180910390fd5b600281601381111561439757614397614cbe565b036143b557604051634f69231960e11b815260040160405180910390fd5b60038160138111156143c9576143c9614cbe565b036143e757604051637e33e43360e01b815260040160405180910390fd5b60048160138111156143fb576143fb614cbe565b0361441957604051630287b9e560e51b815260040160405180910390fd5b600581601381111561442d5761442d614cbe565b0361444b57604051633beb1f4d60e11b815260040160405180910390fd5b600681601381111561445f5761445f614cbe565b0361447d5760405163036c45ad60e51b815260040160405180910390fd5b600781601381111561449157614491614cbe565b036144af5760405163c0af595f60e01b815260040160405180910390fd5b60088160138111156144c3576144c3614cbe565b036144e15760405163249eeb8960e01b815260040160405180910390fd5b60098160138111156144f5576144f5614cbe565b03614513576040516311fb41e160e21b815260040160405180910390fd5b600a81601381111561452757614527614cbe565b0361454557604051637331e2bb60e01b815260040160405180910390fd5b600b81601381111561455957614559614cbe565b036145775760405163163099ab60e01b815260040160405180910390fd5b600c81601381111561458b5761458b614cbe565b036145a95760405163975a86e560e01b815260040160405180910390fd5b600d8160138111156145bd576145bd614cbe565b036145db57604051631140570360e21b815260040160405180910390fd5b600e8160138111156145ef576145ef614cbe565b0361460d57604051630622823b60e31b815260040160405180910390fd5b600f81601381111561462157614621614cbe565b0361463f57604051636d30058d60e11b815260040160405180910390fd5b601081601381111561465357614653614cbe565b03614671576040516304acbcf160e51b815260040160405180910390fd5b601181601381111561468557614685614cbe565b036146a357604051636effd2d560e01b815260040160405180910390fd5b60128160138111156146b7576146b7614cbe565b036146d457604051623f318960e21b815260040160405180910390fd5b60138160138111156146e8576146e8614cbe565b03613de557604051634bc7b56f60e11b815260040160405180910390fd5b600081815260446020526040812060010154819060ff16600281600381111561473157614731614cbe565b03614767576000614743604486613e95565b6002015460008181526045602052604090206001015460ff16969095509350505050565b600381600381111561477b5761477b614cbe565b0361478d576000614743604486613b5f565b50600093849350915050565b6000805160206157bd83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606147d38461489e565b6000835111806147e05750815b1561481357613b4084846040518060400160405280600b81526020016a10d85b1b0811985a5b195960aa1b8152506148e2565b6040805160008082526020820190925290611028565b600080614835836149b0565b90506000806148448387614a1d565b9092509050600081600481111561485d5761485d614cbe565b146110285760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c205369676e617475726560781b6044820152606401610b01565b6148a781614799565b6040516001600160a01b03821690309033907f8ee0f2bd29c0e6a975c3cc2e47cf2e01b5f23a9a8a02e0ed6a5a070269de3d2d90600090a450565b60606001600160a01b0384163b61493b5760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20436f6e7472616374204164647265737300000000000000006044820152606401610b01565b600080856001600160a01b0316856040516149569190615797565b600060405180830381855af49150503d8060008114614991576040519150601f19603f3d011682016040523d82523d6000602084013e614996565b606091505b50915091506149a6828286614a88565b9695505050505050565b6000610815306001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156149f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a1791906156e7565b83614ac1565b6000808251604103614a535760208301516040840151606085015160001a614a4787828585614ae8565b9450945050505061330b565b8251604003614a7c5760208301516040840151614a71868383614bd5565b93509350505061330b565b5060009050600261330b565b60608315614a975750816112ae565b825115614aa75782518084602001fd5b8160405162461bcd60e51b8152600401610b01919061520f565b60405161190160f01b60208201526022810183905260428101829052600090606201613327565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614b1f5750600090506003614bcc565b8460ff16601b14158015614b3757508460ff16601c14155b15614b485750600090506004614bcc565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614b9c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614bc557600060019250925050614bcc565b9150600090505b94509492505050565b6000806001600160ff1b03831681614bf260ff86901c601b6157a9565b9050614c0087828885614ae8565b935093505050935093915050565b508054614c1a9061526e565b6000825580601f10614c2a575050565b601f016020900490600052602060002090810190613e1b9190614c62565b5080546000825590600052602060002090810190613e1b91905b5b80821115614c775760008155600101614c63565b5090565b600060208284031215614c8d57600080fd5b81356001600160e01b0319811681146112ae57600080fd5b600060208284031215614cb757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60048110613e1b57613e1b614cbe565b614ced81614cd4565b9052565b60005b83811015614d0c578181015183820152602001614cf4565b50506000910152565b60008151808452614d2d816020860160208601614cf1565b601f01601f19169290920160200192915050565b60208152815160208201526020820151604082015260006040830151614d6d606084018261ffff169052565b50606083015161ffff81166080840152506080830151614d9060a0840182614ce4565b5060a0830151614da360c0840182614ce4565b5060c0830151614db660e0840182614ce4565b5060e0830151610100614dcb81850183614ce4565b84015161012084810152905061103d610140840182614d15565b60008083601f840112614df757600080fd5b5081356001600160401b03811115614e0e57600080fd5b60208301915083602082850101111561330b57600080fd5b60008060208385031215614e3957600080fd5b82356001600160401b03811115614e4f57600080fd5b614e5b85828601614de5565b90969095509350505050565b80356001600160a01b0381168114610ff857600080fd5b600080600080600060608688031215614e9657600080fd5b85356001600160401b0380821115614ead57600080fd5b614eb989838a01614de5565b90975095506020880135915080821115614ed257600080fd5b50614edf88828901614de5565b9094509250614ef2905060408701614e67565b90509295509295909350565b600060208284031215614f1057600080fd5b6112ae82614e67565b6020808252825182820181905260009190848201906040850190845b81811015614f5157835183529284019291840191600101614f35565b50909695505050505050565b60028110613e1b57613e1b614cbe565b60208101614f7a83614f5d565b91905290565b600060608284031215614f9257600080fd5b50919050565b60008083601f840112614faa57600080fd5b5081356001600160401b03811115614fc157600080fd5b6020830191508360208260061b850101111561330b57600080fd5b600080600060408486031215614ff157600080fd5b83356001600160401b038082111561500857600080fd5b61501487838801614f80565b9450602086013591508082111561502a57600080fd5b5061503786828701614f98565b9497909650939450505050565b60008083601f84011261505657600080fd5b5081356001600160401b0381111561506d57600080fd5b6020830191508360208260051b850101111561330b57600080fd5b60008060006040848603121561509d57600080fd5b83356001600160401b03808211156150b457600080fd5b6150c087838801614f80565b945060208601359150808211156150d657600080fd5b5061503786828701615044565b600080604083850312156150f657600080fd5b8235915061510660208401614e67565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b8015158114613e1b57600080fd5b8035610ff881615125565b60008060006060848603121561515357600080fd5b61515c84614e67565b925060208401356001600160401b038082111561517857600080fd5b818601915086601f83011261518c57600080fd5b81358181111561519e5761519e61510f565b604051601f8201601f19908116603f011681019083821181831017156151c6576151c661510f565b816040528281528960208487010111156151df57600080fd5b82602086016020830137600060208483010152809650505050505061520660408501615133565b90509250925092565b6020815260006112ae6020830184614d15565b6000806040838503121561523557600080fd5b50508035926020909101359150565b60028110613e1b57600080fd5b60006020828403121561526357600080fd5b81356112ae81615244565b600181811c9082168061528257607f821691505b602082108103614f9257634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b6020808252600c908201526b125b1b1959d85b0810d85b1b60a21b604082015260600190565b6020808252600c908201526b125b9d985b1a590810d85b1b60a21b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061533b6060830187896152fe565b828103602084015261534e8186886152fe565b91505061ffff831660408301529695505050505050565b60208082526008908201526714995a9958dd195960c21b604082015260600190565b602080825260119082015270496c6c6567616c20557064617461626c6560781b604082015260600190565b60208082526010908201526f125b1b1959d85b0810dbdb9d1c9858dd60821b604082015260600190565b6020810160148310614f7a57614f7a614cbe565b60006020828403121561540257600080fd5b81516112ae81615125565b634e487b7160e01b600052603260045260246000fd5b60048110613e1b57600080fd5b60006020828403121561544257600080fd5b81356112ae81615423565b60208101614f7a83614cd4565b634e487b7160e01b600052601160045260246000fd5b6000600182016154825761548261545a565b5060010190565b600182810b9082900b03617fff198112617fff821317156108155761081561545a565b6000823560be198336030181126154c257600080fd5b9190910192915050565b6000808335601e198436030181126154e357600080fd5b8301803591506001600160401b038211156154fd57600080fd5b60200191503681900382131561330b57600080fd5b60006020828403121561552457600080fd5b81358060020b81146112ae57600080fd5b601f82111561557b57600081815260208120601f850160051c8101602086101561555c5750805b601f850160051c820191505b81811015610ce757828155600101615568565b505050565b6001600160401b038311156155975761559761510f565b6155ab836155a5835461526e565b83615535565b6000601f8411600181146155df57600085156155c75750838201355b600019600387901b1c1916600186901b178355612e15565b600083815260209020601f19861690835b8281101561561057868501358255602094850194600190920191016155f0565b508682101561562d5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561565157600080fd5b813561ffff811681146112ae57600080fd5b60006020828403121561567557600080fd5b8151601481106112ae57600080fd5b60006020828403121561569657600080fd5b81516112ae81615244565b6000602082840312156156b357600080fd5b81356001600160401b03811681146112ae57600080fd5b63ffffffff8181168382160190808211156132b5576132b561545a565b6000602082840312156156f957600080fd5b5051919050565b60006020828403121561571257600080fd5b8151600881106112ae57600080fd5b600080835461572f8161526e565b60018281168015615747576001811461575c5761578b565b60ff198416875282151583028701945061578b565b8760005260208060002060005b858110156157825781548a820152908401908201615769565b50505082870194505b50929695505050505050565b600082516154c2818460208701614cf1565b808201808211156108155761081561545a56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212207123d03f8ca726e44a16496ad3bec7753a93498f3e56f88e6406a55a6b6daca464736f6c63430008130033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
  "deployedBytecode": "0x6080604052600436106102275760003560e01c8063756af45f11610122578063ba696695116100a5578063f696bbcc1161006c578063f696bbcc14610766578063f698da2514610786578063f708ceb01461079b578063f94a0adb146107bb578063fcc40178146107d057005b8063ba696695146106b2578063d9dc1f19146106d2578063e05e0a0f146106f2578063eb3a405814610712578063f0b15def1461073257005b8063a0a8e460116100e9578063a0a8e46014610620578063a304e35314610635578063ae7dd7c714610654578063ae9710cf14610674578063b4a0bdf31461069457005b8063756af45f1461057057806375d0c0dc146105905780637678922e146105a55780638d893608146105cc5780639b97b534146105ec57005b806346506345116101aa57806358dbc45d1161017157806358dbc45d146104a257806364d4c819146104cf57806369cd0ec21461050357806370dc241b146105235780637147855d1461054357005b806346506345146103f15780634888f482146104115780634bf0414d1461043957806352d1902d1461046d578063589a8d0b1461048257005b80631b452f4b116101ee5780631b452f4b146102f257806320747ceb14610334578063301c12801461036157806334109de21461039557806338d38c97146103c957005b806301ffc9a714610230578063025524b11461026557806304c16d5714610292578063077f224a146102b25780630e32cb86146102d257005b3661022e57005b005b34801561023c57600080fd5b5061025061024b366004614c7b565b6107f0565b60405190151581526020015b60405180910390f35b34801561027157600080fd5b50610285610280366004614ca5565b61081b565b60405161025c9190614d41565b34801561029e57600080fd5b506102506102ad366004614e26565b610a56565b3480156102be57600080fd5b5061022e6102cd366004614e7e565b610ab9565b3480156102de57600080fd5b506102506102ed366004614efe565b610cef565b3480156102fe57600080fd5b506103267f7bfb2abd6084c8ce20d7ff92c1620e7e7267603f0eac446b9176959d243306bc81565b60405190815260200161025c565b34801561034057600080fd5b5061035461034f366004614ca5565b610ffd565b60405161025c9190614f19565b34801561036d57600080fd5b506103267f541cf898e7c3085cbc6b7402ba06e7237285bc4bd5baa510e708e35537a71ffd81565b3480156103a157600080fd5b506103267f7aabe2571874f2a330ea11c8972d9cc3792d973efc6b36e3e29005861a34418881565b3480156103d557600080fd5b506103de611045565b60405161ffff909116815260200161025c565b3480156103fd57600080fd5b5061025061040c366004614ca5565b611059565b34801561041d57600080fd5b50600254600160a81b900460ff165b60405161025c9190614f6d565b34801561044557600080fd5b506103267f9027b951cbdf8eff67da583391d218a57a89ec1ebfcb1c66da188e8531804d5581565b34801561047957600080fd5b5061032661108a565b34801561048e57600080fd5b5061025061049d366004614fdc565b6110e7565b3480156104ae57600080fd5b506104b76112b5565b6040516001600160a01b03909116815260200161025c565b3480156104db57600080fd5b506103267f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b34801561050f57600080fd5b5061025061051e366004615088565b6112bf565b34801561052f57600080fd5b5061025061053e3660046150e3565b6118ca565b34801561054f57600080fd5b5061056361055e36600461513e565b611918565b60405161025c919061520f565b34801561057c57600080fd5b5061032661058b366004614efe565b611a6f565b34801561059c57600080fd5b50610563611b34565b3480156105b157600080fd5b5073__$ee86c02d9d6bfecb685b93ba48bb72f928$__6104b7565b3480156105d857600080fd5b506102506105e7366004615222565b611bc6565b3480156105f857600080fd5b506103267fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b881565b34801561062c57600080fd5b50610563611bff565b34801561064157600080fd5b50600254600160a01b900460ff1661042c565b34801561066057600080fd5b5061025061066f366004615088565b611c0e565b34801561068057600080fd5b5061025061068f366004614fdc565b611e25565b3480156106a057600080fd5b506002546001600160a01b03166104b7565b3480156106be57600080fd5b506102506106cd366004614fdc565b611f47565b3480156106de57600080fd5b506102506106ed366004614efe565b61213a565b3480156106fe57600080fd5b5061025061070d366004614fdc565b6122f0565b34801561071e57600080fd5b5061025061072d366004614fdc565b6126b7565b34801561073e57600080fd5b506103267ffc434588684348dd50856b075c47bed14245c1030aa04c32955af5549981462781565b34801561077257600080fd5b506102506107813660046150e3565b612863565b34801561079257600080fd5b506103266129bf565b3480156107a757600080fd5b506102506107b6366004615251565b6129c9565b3480156107c757600080fd5b506104b7612b73565b3480156107dc57600080fd5b506102506107eb366004615251565b612b7d565b60006001600160e01b03198216633af0e5e560e21b1480610815575061081582612d08565b92915050565b61086a6040805161012081018252600080825260208201819052918101829052606081018290529060808201908152602001600081526020016000815260200160008152602001606081525090565b600080610878604485612d58565b91509150806108dd57604080516101208101825260008082526020820181905291810182905260608101829052906080820190815260200160008152602001600081526020016000815260408051602081810190925260008152910152949350505050565b60408051610120810182526002840154815283546020820152600484015461ffff16918101919091526060810161091660068501612db5565b61ffff168152835460009081526044602090815260409091206001015491019060ff16600381111561094a5761094a614cbe565b8152600184015460209091019060ff16600381111561096b5761096b614cbe565b81526001840154602090910190610100900460ff16600381111561099157610991614cbe565b8152600184015460209091019062010000900460ff1660038111156109b8576109b8614cbe565b81526020018360030180546109cc9061526e565b80601f01602080910402602001604051908101604052809291908181526020018280546109f89061526e565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b505050505081525092505050919050565b60006003604460000160008585604051602001610a749291906152a2565b60408051601f198184030181529181528151602092830120835290820192909252016000206001015460ff166003811115610ab157610ab1614cbe565b149392505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b0a5760405162461bcd60e51b8152600401610b01906152b2565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b3c612dbf565b6001600160a01b031614610b625760405162461bcd60e51b8152600401610b01906152d8565b33610b6b612de0565b6001600160a01b031614610bb15760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610b01565b604e5462010000900460ff1615808015610bd35750604e54600161ffff909116105b80610bee5750303b158015610bee5750604e5461ffff166001145b610c3a5760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a6564000000006044820152606401610b01565b604e805461ffff191660011790558015610c6057604e805462ff00001916620100001790555b610c6d8686868686612e08565b610c75612dbf565b6001600160a01b031630336001600160a01b03167f247ab7b17ee489fa140c6666edc3822eefed2727610cd6e37192462b87244c6089898989610cbb604e5461ffff1690565b604051610ccc959493929190615327565b60405180910390a48015610ce757604e805462ff0000191690555b505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d395760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d6b612dbf565b6001600160a01b031614610d915760405162461bcd60e51b8152600401610b01906152d8565b6000600254600160a01b900460ff166001811115610db157610db1614cbe565b14610dce5760405162461bcd60e51b8152600401610b0190615365565b6001600254600160a81b900460ff166001811115610dee57610dee614cbe565b14610e0b5760405162461bcd60e51b8152600401610b0190615387565b6001600160a01b03821615801590610e2c57506001600160a01b0382163b15155b610e485760405162461bcd60e51b8152600401610b01906153b2565b6002546001600160a01b031615610ea7576000610e6b63071965c360e11b612e1c565b90506000816013811115610e8157610e81614cbe565b14610ea15780604051637f0911d160e01b8152600401610b0191906153dc565b50610ef6565b33610eb0612de0565b6001600160a01b031614610ef65760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610b01565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6591906153f0565b610f9f5760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610b01565b600280546001600160a01b0384166001600160a01b031990911681179091556040805191825251309133917f410bf468eebeeed60acaedb904afb2db7c0bb0131f7d14c3714d81b14fe8ed3c9181900360200190a35060015b919050565b606060008061100d604485612d58565b91509150806110315760408051600080825260208201909252905b50949350505050565b61103d82600601612ea7565b949350505050565b6000611054604e5461ffff1690565b905090565b6000600360008381526044602052604090206001015460ff16600381111561108357611083614cbe565b1492915050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110d45760405162461bcd60e51b8152600401610b01906152b2565b506000805160206157bd83398151915290565b60008080806110fd8763589a8d0b60e01b612eb2565b92509250925060005b858110156112a557600061113e8888848181106111255761112561540d565b60400291909101359050858763589a8d0b60e01b613114565b905060018888848181106111545761115461540d565b905060400201602001602081019061116c9190615430565b600381111561117d5761117d614cbe565b116111bd5760405162461bcd60e51b815260206004820152601060248201526f496c6c6567616c20416374697669747960801b6044820152606401610b01565b8787838181106111cf576111cf61540d565b90506040020160200160208101906111e79190615430565b60018201805461ff00191661010083600381111561120757611207614cbe565b021790555087878381811061121e5761121e61540d565b90506040020160000135836001600160a01b03167fea9ccbce19532fbbbb442919f1510230d08be4c0419b3f0c0390a8a7e4701ef48a8a868181106112655761126561540d565b905060400201602001602081019061127d9190615430565b60405161128a919061544d565b60405180910390a3508061129d81615470565b915050611106565b50600193505050505b9392505050565b6000611054612dbf565b600080806112d4866334e6876160e11b612eb2565b9093509150600090506112e86044846131df565b600381015490915060009061130a9087830b90600160c01b900460ff16615489565b60010b12156113535760405162461bcd60e51b8152602060048201526015602482015274125b1b1959d85b08149959da5cdd195c931a5b5a5d605a1b6044820152606401610b01565b60038101805460ff600160c01b80830482168990039091160260ff60c01b1990911617905560405160009081906113dd906113c1906020017f545950452e4c4956454c595f56455253452e4c4956454c595f545950455f4d4181526329aa22a960e11b602082015260240190565b60405160208183030381529060405280519060200120866132bc565b9150915060005b878110156118ba5760006114288a8a848181106114035761140361540d565b905060200281019061141591906154ac565b6114239060a08101906154cc565b613312565b90506000808281526044602052604090206001015460ff16600381111561145157611451614cbe565b1461148e5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e48115e1a5cdd609a1b6044820152606401610b01565b60018a8a848181106114a2576114a261540d565b90506020028101906114b491906154ac565b6114c5906080810190606001615430565b60038111156114d6576114d6614cbe565b118015611528575060008a8a848181106114f2576114f261540d565b905060200281019061150491906154ac565b6115159060a0810190608001615430565b600381111561152657611526614cbe565b115b6115745760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c2041637469766974792f416c7465726162696c6974790000006044820152606401610b01565b60006115a88b8b8581811061158b5761158b61540d565b905060200281019061159d91906154ac565b602001358587613345565b905060006115b76044846135e2565b60018101805460ff1916600317905590508b8b858181106115da576115da61540d565b90506020028101906115ec91906154ac565b6115fd906080810190606001615430565b60018201805461ff00191661010083600381111561161d5761161d614cbe565b02179055508b8b858181106116345761163461540d565b905060200281019061164691906154ac565b6116579060a0810190608001615430565b60018201805462ff000019166201000083600381111561167957611679614cbe565b02179055508b8b858181106116905761169061540d565b90506020028101906116a291906154ac565b3581558b8b858181106116b7576116b761540d565b90506020028101906116c991906154ac565b60200135600282015560008c8c868181106116e6576116e661540d565b90506020028101906116f891906154ac565b611709906060810190604001615512565b60020b1215611727576003870154600160981b900461ffff1661175c565b8b8b858181106117395761173961540d565b905060200281019061174b91906154ac565b61175c906060810190604001615512565b60048201805461ffff191661ffff929092169190911790558b8b858181106117865761178661540d565b905060200281019061179891906154ac565b6117a69060a08101906154cc565b60038301916117b6919083615580565b50600182015482546118189160ff16908e8e888181106117d8576117d861540d565b90506020028101906117ea91906154ac565b602001358f8f898181106118005761180061540d565b905060200281019061181291906154ac565b35613684565b81558b8b8581811061182c5761182c61540d565b905060200281019061183e91906154ac565b6020013583896001600160a01b03167fd347230059f90a0eb415cc5739ee258a455c52d28907f3cf3bb33af47eb3ba2f8f8f898181106118805761188061540d565b905060200281019061189291906154ac565b6040519035815260200160405180910390a450505080806118b290615470565b9150506113e4565b5060019998505050505050505050565b600080806118d9604486612d58565b91509150806118ed57600092505050610815565b600060058301816118fd876138b2565b81526020019081526020016000205414159250505092915050565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119625760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611994612dbf565b6001600160a01b0316146119ba5760405162461bcd60e51b8152600401610b01906152d8565b6000600254600160a01b900460ff1660018111156119da576119da614cbe565b146119f75760405162461bcd60e51b8152600401610b0190615365565b6001600254600160a81b900460ff166001811115611a1757611a17614cbe565b14611a345760405162461bcd60e51b8152600401610b0190615387565b6001600160a01b0384163b611a5b5760405162461bcd60e51b8152600401610b01906153b2565b611a64846138f1565b61103d84848461398f565b600080600254600160a01b900460ff166001811115611a9057611a90614cbe565b14611aad5760405162461bcd60e51b8152600401610b0190615365565b6000611abf63756af45f60e01b612e1c565b90506000816013811115611ad557611ad5614cbe565b14611af55780604051637f0911d160e01b8152600401610b0191906153dc565b60405147906001600160a01b038516904780156108fc02916000818181858888f19350505050158015611b2c573d6000803e3d6000fd5b509392505050565b606060008054611b439061526e565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6f9061526e565b8015611bbc5780601f10611b9157610100808354040283529160200191611bbc565b820191906000526020600020905b815481529060010190602001808311611b9f57829003601f168201915b5050505050905090565b60008080611bd5604486612d58565b9150915080611be957600092505050610815565b611bf66006830185613b47565b95945050505050565b606060018054611b439061526e565b6000808080611c248763ae7dd7c760e01b612eb2565b92509250925060005b858110156112a5576000611c63888884818110611c4c57611c4c61540d565b905060200201356044613b5f90919063ffffffff16565b8054909150600090611c76908688613bfb565b90506000816007811115611c8c57611c8c614cbe565b14611c9a57611c9a81613c87565b611ca682600601612db5565b15611ce45760405162461bcd60e51b815260206004820152600e60248201526d496c6c6567616c2052656d6f766560901b6044820152606401610b01565b6002820154600090815260456020526040902060018101546301000000900463ffffffff16611d485760405162461bcd60e51b815260206004820152601060248201526f125b1b195859db08149959995c9c995960821b6044820152606401610b01565b6001818101805460001963ffffffff6301000000808404821692909201160266ffffffff000000199091161790556000808555908401805462ffffff1916905560028401819055611d9d906003850190614c0e565b60048301805461ffff191690556006830160008181611dbc8282614c48565b50505050898985818110611dd257611dd261540d565b90506020020135856001600160a01b03167f8ec7ac0824b727a755715eb01cbe8166d65b7b7c39c1bd44aff31eb1b643fb1060405160405180910390a35050508080611e1d90615470565b915050611c2d565b6000808080611e3b8763ae9710cf60e01b612eb2565b92509250925060005b858110156112a5576000611e7c888884818110611e6357611e6361540d565b60400291909101359050858763ae9710cf60e01b613114565b6002810154600081815260456020526040902060018101549054929350611ec49260ff909116918b8b87818110611eb557611eb561540d565b90506040020160200135613684565b8155878783818110611ed857611ed861540d565b90506040020160200135888884818110611ef457611ef461540d565b90506040020160000135846001600160a01b03167fd407cb2fbf8a9249d1838b941f8492f7c348700eb49cba7f8d4bab5e6fd4c55360405160405180910390a45080611f3f81615470565b915050611e44565b6000808080611f5d8763ba69669560e01b612eb2565b92509250925060005b858110156112a5576000611f96888884818110611f8557611f8561540d565b604492604090910201359050613b5f565b8054909150600090611fa9908688613bfb565b90506000816007811115611fbf57611fbf614cbe565b14611fcd57611fcd81613c87565b6000898985818110611fe157611fe161540d565b9050604002016020016020810190611ff99190615430565b600381111561200a5761200a614cbe565b0361204e5760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20416c7465726162696c69747960601b6044820152606401610b01565b8888848181106120605761206061540d565b90506040020160200160208101906120789190615430565b60018301805462ff000019166201000083600381111561209a5761209a614cbe565b02179055508888848181106120b1576120b161540d565b90506040020160000135846001600160a01b03167f521942249a1b9e9e74b64de74b41bc597b22ebbee224405e9c7f398f15acd60a8b8b878181106120f8576120f861540d565b90506040020160200160208101906121109190615430565b60405161211d919061544d565b60405180910390a35050808061213290615470565b915050611f66565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036121845760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166121b6612dbf565b6001600160a01b0316146121dc5760405162461bcd60e51b8152600401610b01906152d8565b6000600254600160a01b900460ff1660018111156121fc576121fc614cbe565b146122195760405162461bcd60e51b8152600401610b0190615365565b6001600254600160a81b900460ff16600181111561223957612239614cbe565b146122565760405162461bcd60e51b8152600401610b0190615387565b600061226863d9dc1f1960e01b612e1c565b9050600081601381111561227e5761227e614cbe565b1461229e5780604051637f0911d160e01b8152600401610b0191906153dc565b6001600160a01b0383166122de5760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606401610b01565b6122e783613e1e565b50600192915050565b60008080806123068763e05e0a0f60e01b612eb2565b92509250925060008060005b878110156118ba57600061234a8a8a848181106123315761233161540d565b60400291909101359050878963e05e0a0f60e01b613114565b805460009081526044602052604090206001015490915060ff16600281600381111561237857612378614cbe565b036123b257815460009061238e90604490613e95565b6002015460008181526045602052604090206001015460ff16965094506124039050565b81546000906123c390604490613b5f565b60008981526005820160205260408120549192506123e2604483613e95565b6002015460008181526045602052604090206001015460ff16985096505050505b600061242b8c8c8681811061241a5761241a61540d565b905060400201602001358688613345565b6002840154600090815260456020526040812091925061244d60068601612db5565b111561259057600181015460ff16600581111561246c5761246c614cbe565b600183015460ff16600581111561248557612485614cbe565b116124c65760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c2053636f70655479706560781b6044820152606401610b01565b30633bc6460a8e8e888181106124de576124de61540d565b9050604002016020013586600201546040518363ffffffff1660e01b8152600401612513929190918252602082015260400190565b602060405180830381865afa158015612530573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255491906153f0565b6125905760405162461bcd60e51b815260206004820152600d60248201526c496c6c6567616c2053636f706560981b6044820152606401610b01565b60018101546301000000900463ffffffff166125e15760405162461bcd60e51b815260206004820152601060248201526f125b1b195859db08149959995c9c995960821b6044820152606401610b01565b60018101805460001963ffffffff6301000000808404821692909201160266ffffffff000000199091161790558c8c868181106126205761262061540d565b9050604002016020013584600201819055508c8c868181106126445761264461540d565b905060400201602001358d8d878181106126605761266061540d565b90506040020160000135896001600160a01b03167fc21cc81eb30a073f4a2d9f83cfe7c770b14b79e58da6a450ab052f127b308a8b60405160405180910390a45050505080806126af90615470565b915050612312565b60008080806126cd87631d67480b60e31b612eb2565b92509250925060005b858110156112a557600061270e8888848181106126f5576126f561540d565b604002919091013590508587631d67480b60e31b613114565b905061271c81600601612db5565b88888481811061272e5761272e61540d565b9050604002016020016020810190612746919061563f565b61ffff16116127875760405162461bcd60e51b815260206004820152600d60248201526c125b1b1959d85b08131a5b5a5d609a1b6044820152606401610b01565b8787838181106127995761279961540d565b90506040020160200160208101906127b1919061563f565b60048201805461ffff191661ffff929092169190911790558787838181106127db576127db61540d565b90506040020160000135836001600160a01b03167f5c6c687adedce80d5c216dde612b70b29da16daa5d5a65ed1cb846fd21b40dd98a8a868181106128225761282261540d565b905060400201602001602081019061283a919061563f565b60405161ffff909116815260200160405180910390a3508061285b81615470565b9150506126d6565b6000600360008481526044602052604090206001015460ff16600381111561288d5761288d614cbe565b1461289a57506000610815565b6000838152604460205260408082205480835290822060010154909160ff909116906128c5856138b2565b905060028260038111156128db576128db614cbe565b03612958576000806128ee604486613f72565b915091508061290557600095505050505050610815565b60008061292084600301546044612d5890919063ffffffff16565b9150915080612939576000975050505050505050610815565b5060009384526005016020525050604090205490911491506108159050565b600382600381111561296c5761296c614cbe565b036129b35760008061297f604486612d58565b915091508061299657600095505050505050610815565b506000918252600501602052604090205415159250610815915050565b50600095945050505050565b6000611054613f89565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612a135760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612a45612dbf565b6001600160a01b031614612a6b5760405162461bcd60e51b8152600401610b01906152d8565b6000612a7a604e5461ffff1690565b61ffff1611612ab65760405162461bcd60e51b81526020600482015260086024820152671393d5081253925560c21b6044820152606401610b01565b6000612ac8630f708ceb60e41b612e1c565b90506000816013811115612ade57612ade614cbe565b14612afe5780604051637f0911d160e01b8152600401610b0191906153dc565b6002805484919060ff60a01b1916600160a01b836001811115612b2357612b23614cbe565b021790555030336001600160a01b03167fc08ec585c25f1907baaab6f278c5994531a2e34c59935b3fcfe813067a3b487885604051612b629190614f6d565b60405180910390a350600192915050565b6000611054612de0565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612bc75760405162461bcd60e51b8152600401610b01906152b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612bf9612dbf565b6001600160a01b031614612c1f5760405162461bcd60e51b8152600401610b01906152d8565b6000600254600160a01b900460ff166001811115612c3f57612c3f614cbe565b14612c5c5760405162461bcd60e51b8152600401610b0190615365565b6000612c6e631f98802f60e31b612e1c565b90506000816013811115612c8457612c84614cbe565b14612ca45780604051637f0911d160e01b8152600401610b0191906153dc565b6002805484919060ff60a81b1916600160a81b836001811115612cc957612cc9614cbe565b021790555030336001600160a01b03167ff5912c5e436152157ed2b4a84bc313b4b1fe09a15b941f195d23c99a1b8c45ad85604051612b629190614f6d565b60006001600160e01b03198216633d817cff60e01b1480612d3957506001600160e01b031982166352d1902d60e01b145b8061081557506301ffc9a760e01b6001600160e01b0319831614610815565b6000818152602083905260408120819060035b600182015460ff166003811115612d8457612d84614cbe565b03612da357604080518581526020810187905220925060019150612dad565b6000199250600091505b509250929050565b6000610815825490565b60006000805160206157bd8339815191525b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612dd1565b612e15858585858561403d565b5050505050565b6002546040805163172cb29d60e11b81523060048201526001600160e01b03198416602482015233604482015290516000926001600160a01b031691632e59653a916064808301926020929190829003018187875af1158015612e83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190615663565b606061081582614206565b6000808080306001600160a01b031663a304e3536040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f199190615684565b6001811115612f2a57612f2a614cbe565b14612f475760405162461bcd60e51b8152600401610b0190615365565b600080612f5760408801886154cc565b90501115612feb5742612f7060408801602089016156a1565b6001600160401b031611612fba5760405162461bcd60e51b815260206004820152601160248201527045787069726564205369676e617475726560781b6044820152606401610b01565b612fe4867fdee69d384475c3656c17c592e94a2bbfd2a1998cce0c85f535569415a15863b8614262565b9050612fee565b50335b6001600160e01b031985166000908152604a60205260408120546001600160a01b03169061301c828861431a565b90506000613029846138b2565b604051634902a91960e11b8152600481018490526024810182905290915060009030906392055232906044016020604051808303816000875af1158015613074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130989190615663565b905060008160138111156130ae576130ae614cbe565b1461310257600e8160138111156130c7576130c7614cbe565b1480156130e457506001600160e01b0319891663589a8d0b60e01b145b156130f95750909550935090915061310d9050565b61310281614351565b509095509350909150505b9250925092565b600080613122604487613b5f565b90506002600182015462010000900460ff16600381111561314557613145614cbe565b10156131635760405162461bcd60e51b8152600401610b0190615387565b8054600090613173908787613bfb565b9050600081600781111561318957613189614cbe565b146131d55760078160078111156131a2576131a2614cbe565b1480156131bf57506001600160e01b0319841663589a8d0b60e01b145b156131cc5750905061103d565b6131d581613c87565b5095945050505050565b600081815260208390526040812060018082015460ff16600381111561320757613207614cbe565b036132225760408051848152602081018690522091506132b5565b6000600182015460ff16600381111561323d5761323d614cbe565b0361327a5760405162461bcd60e51b815260206004820152600d60248201526c13525108139bdd08119bdd5b99609a1b6044820152606401610b01565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081352510814db1bdd60821b6044820152606401610b01565b5092915050565b600080806132cb604486613b5f565b60008581526005820160205260408120549192506132ea604483613e95565b6002015460008181526045602052604090206001015460ff16955093505050505b9250929050565b600082826040516020016133279291906152a2565b60405160208183030381529060405280519060200120905092915050565b600083815260456020526040812081600182015460ff16600581111561336d5761336d614cbe565b036133a65760405162461bcd60e51b8152602060048201526009602482015268139bdd08119bdd5b9960ba1b6044820152606401610b01565b600180820154610100900460ff1660038111156133c5576133c5614cbe565b116134025760405162461bcd60e51b815260206004820152600d60248201526c14d8dbdc194811195b195d1959609a1b6044820152606401610b01565b600181810180546003906134249084906301000000900463ffffffff166156ca565b825463ffffffff9182166101009390930a928302919092021990911617905550600181015460ff16600581111561345d5761345d614cbe565b83600581111561346f5761346f614cbe565b10156134bd5760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c2053656e6465722053636f70655479706500000000000000006044820152606401610b01565b600181015460ff1660058111156134d6576134d6614cbe565b8360058111156134e8576134e8614cbe565b03613538578484146135335760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c2053656e6465722053636f706560601b6044820152606401610b01565b61103d565b604051631de3230560e11b815260048101859052602481018690523090633bc6460a90604401602060405180830381865afa15801561357b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359f91906153f0565b61103d5760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c2053656e6465722053636f706560601b6044820152606401610b01565b600081815260208390526040812081600182015460ff16600381111561360a5761360a614cbe565b148061362e57506003600182015460ff16600381111561362c5761362c614cbe565b145b156136495760408051848152602081018690522091506132b5565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b6044820152606401610b01565b600081156138a957600160008381526044602052604090206001015460ff1660038111156136b4576136b4614cbe565b116137015760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c2041646d696e204167656e74547970650000000000000000006044820152606401610b01565b60008061370d84614706565b9150915081600581111561372357613723614cbe565b87600581111561373557613735614cbe565b11156137835760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c2041646d696e2053636f7065547970650000000000000000006044820152606401610b01565b81600581111561379557613795614cbe565b8760058111156137a7576137a7614cbe565b036137f6578481146137f15760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2041646d696e2053636f706560681b6044820152606401610b01565b61389f565b604051631de3230560e11b815260048101829052602481018690523090633bc6460a90604401602060405180830381865afa158015613839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385d91906153f0565b61389f5760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2041646d696e2053636f706560681b6044820152606401610b01565b839250505061103d565b50919392505050565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b6138f9612dbf565b6001600160a01b0316816001600160a01b0316036139435760405162461bcd60e51b8152602060048201526007602482015266125b1b1959d85b60ca1b6044820152606401610b01565b6000613955637147855d60e01b612e1c565b9050600081601381111561396b5761396b614cbe565b1461398b5780604051637f0911d160e01b8152600401610b0191906153dc565b5050565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156139d9576139c484614799565b506040805160008152602081019091526112ae565b6000805160206157bd83398151915260001b846001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4d91906156e7565b14613a895760405162461bcd60e51b815260206004820152600c60248201526b496c6c6567616c205555505360a01b6044820152606401610b01565b6040516301ffc9a760e01b8152633d817cff60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015613ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af891906153f0565b613b355760405162461bcd60e51b815260206004820152600e60248201526d496c6c6567616c204950726f787960901b6044820152606401610b01565b613b408484846147c8565b90506112ae565b600081815260018301602052604081205415156112ae565b60008181526020839052604081206003600182015460ff166003811115613b8857613b88614cbe565b03613ba35760408051848152602081018690522091506132b5565b6000600182015460ff166003811115613bbe57613bbe614cbe565b036136495760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b6044820152606401610b01565b60405163ca37fa8560e01b81526044600482018190526024820185905281018390526064810182905260009073__$ee86c02d9d6bfecb685b93ba48bb72f928$__9063ca37fa8590608401602060405180830381865af4158015613c63573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190615700565b6001816007811115613c9b57613c9b614cbe565b03613cb9576040516334267bfb60e11b815260040160405180910390fd5b6002816007811115613ccd57613ccd614cbe565b03613ceb576040516343f871e760e11b815260040160405180910390fd5b6003816007811115613cff57613cff614cbe565b03613d1d57604051639afb7c5f60e01b815260040160405180910390fd5b6004816007811115613d3157613d31614cbe565b03613d4f576040516332314d6b60e11b815260040160405180910390fd5b6005816007811115613d6357613d63614cbe565b03613d8157604051633123155560e01b815260040160405180910390fd5b6006816007811115613d9557613d95614cbe565b03613db357604051631b210af760e21b815260040160405180910390fd5b6007816007811115613dc757613dc7614cbe565b03613de5576040516339f73ba360e11b815260040160405180910390fd5b60405162461bcd60e51b815260206004820152600b60248201526a2ab735b737bbb71022a92960a91b6044820152606401610b01565b50565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f63fdbed5f2909ec44e3becc51e9d29654ce1447747914e8a6ebc019e7f640b8b9181900360200190a350565b60008181526020839052604081206002600182015460ff166003811115613ebe57613ebe614cbe565b03613ed95760408051848152602081018690522091506132b5565b6000600182015460ff166003811115613ef457613ef4614cbe565b03613f345760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b6044820152606401610b01565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b6044820152606401610b01565b600081815260208390526040812081906002612d6b565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051602001613fbe9190615721565b604051602081830303815290604052805190602001206001604051602001613fe69190615721565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b604e5462010000900460ff166140955760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e67000000000000006044820152606401610b01565b60006140a2858783615580565b5060016140b0838583615580565b506001600160a01b0381163014614196576001600160a01b0381163b6140e85760405162461bcd60e51b8152600401610b01906153b2565b6040516301ffc9a760e01b81526331501c3960e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015614133573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415791906153f0565b6141915760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b6044820152606401610b01565b6141e2565b6141a66331501c3960e01b6107f0565b6141e25760405162461bcd60e51b815260206004820152600d60248201526c139bdd0814dd5c1c1bdc9d1959609a1b6044820152606401610b01565b600280546001600160b01b0319166001600160a01b038316179055612e1533613e1e565b60608160000180548060200260200160405190810160405280929190818152602001828054801561425657602002820191906000526020600020905b815481526020019060010190808311614242575b50505050509050919050565b60006112ae61427460408501856154cc565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061431592508691506142bc90506020880188614efe565b6142cc6040890160208a016156a1565b6001600160401b0316604080516020808201959095526001600160a01b039390931683820152606080840192909252805180840390920182526080909201909152805191012090565b614829565b6040516bffffffffffffffffffffffff19606084901b1660208201526001600160e01b031982166034820152600090603801613327565b600181601381111561436557614365614cbe565b03614383576040516338bb798160e21b815260040160405180910390fd5b600281601381111561439757614397614cbe565b036143b557604051634f69231960e11b815260040160405180910390fd5b60038160138111156143c9576143c9614cbe565b036143e757604051637e33e43360e01b815260040160405180910390fd5b60048160138111156143fb576143fb614cbe565b0361441957604051630287b9e560e51b815260040160405180910390fd5b600581601381111561442d5761442d614cbe565b0361444b57604051633beb1f4d60e11b815260040160405180910390fd5b600681601381111561445f5761445f614cbe565b0361447d5760405163036c45ad60e51b815260040160405180910390fd5b600781601381111561449157614491614cbe565b036144af5760405163c0af595f60e01b815260040160405180910390fd5b60088160138111156144c3576144c3614cbe565b036144e15760405163249eeb8960e01b815260040160405180910390fd5b60098160138111156144f5576144f5614cbe565b03614513576040516311fb41e160e21b815260040160405180910390fd5b600a81601381111561452757614527614cbe565b0361454557604051637331e2bb60e01b815260040160405180910390fd5b600b81601381111561455957614559614cbe565b036145775760405163163099ab60e01b815260040160405180910390fd5b600c81601381111561458b5761458b614cbe565b036145a95760405163975a86e560e01b815260040160405180910390fd5b600d8160138111156145bd576145bd614cbe565b036145db57604051631140570360e21b815260040160405180910390fd5b600e8160138111156145ef576145ef614cbe565b0361460d57604051630622823b60e31b815260040160405180910390fd5b600f81601381111561462157614621614cbe565b0361463f57604051636d30058d60e11b815260040160405180910390fd5b601081601381111561465357614653614cbe565b03614671576040516304acbcf160e51b815260040160405180910390fd5b601181601381111561468557614685614cbe565b036146a357604051636effd2d560e01b815260040160405180910390fd5b60128160138111156146b7576146b7614cbe565b036146d457604051623f318960e21b815260040160405180910390fd5b60138160138111156146e8576146e8614cbe565b03613de557604051634bc7b56f60e11b815260040160405180910390fd5b600081815260446020526040812060010154819060ff16600281600381111561473157614731614cbe565b03614767576000614743604486613e95565b6002015460008181526045602052604090206001015460ff16969095509350505050565b600381600381111561477b5761477b614cbe565b0361478d576000614743604486613b5f565b50600093849350915050565b6000805160206157bd83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606147d38461489e565b6000835111806147e05750815b1561481357613b4084846040518060400160405280600b81526020016a10d85b1b0811985a5b195960aa1b8152506148e2565b6040805160008082526020820190925290611028565b600080614835836149b0565b90506000806148448387614a1d565b9092509050600081600481111561485d5761485d614cbe565b146110285760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c205369676e617475726560781b6044820152606401610b01565b6148a781614799565b6040516001600160a01b03821690309033907f8ee0f2bd29c0e6a975c3cc2e47cf2e01b5f23a9a8a02e0ed6a5a070269de3d2d90600090a450565b60606001600160a01b0384163b61493b5760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20436f6e7472616374204164647265737300000000000000006044820152606401610b01565b600080856001600160a01b0316856040516149569190615797565b600060405180830381855af49150503d8060008114614991576040519150601f19603f3d011682016040523d82523d6000602084013e614996565b606091505b50915091506149a6828286614a88565b9695505050505050565b6000610815306001600160a01b031663f698da256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156149f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a1791906156e7565b83614ac1565b6000808251604103614a535760208301516040840151606085015160001a614a4787828585614ae8565b9450945050505061330b565b8251604003614a7c5760208301516040840151614a71868383614bd5565b93509350505061330b565b5060009050600261330b565b60608315614a975750816112ae565b825115614aa75782518084602001fd5b8160405162461bcd60e51b8152600401610b01919061520f565b60405161190160f01b60208201526022810183905260428101829052600090606201613327565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614b1f5750600090506003614bcc565b8460ff16601b14158015614b3757508460ff16601c14155b15614b485750600090506004614bcc565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614b9c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614bc557600060019250925050614bcc565b9150600090505b94509492505050565b6000806001600160ff1b03831681614bf260ff86901c601b6157a9565b9050614c0087828885614ae8565b935093505050935093915050565b508054614c1a9061526e565b6000825580601f10614c2a575050565b601f016020900490600052602060002090810190613e1b9190614c62565b5080546000825590600052602060002090810190613e1b91905b5b80821115614c775760008155600101614c63565b5090565b600060208284031215614c8d57600080fd5b81356001600160e01b0319811681146112ae57600080fd5b600060208284031215614cb757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60048110613e1b57613e1b614cbe565b614ced81614cd4565b9052565b60005b83811015614d0c578181015183820152602001614cf4565b50506000910152565b60008151808452614d2d816020860160208601614cf1565b601f01601f19169290920160200192915050565b60208152815160208201526020820151604082015260006040830151614d6d606084018261ffff169052565b50606083015161ffff81166080840152506080830151614d9060a0840182614ce4565b5060a0830151614da360c0840182614ce4565b5060c0830151614db660e0840182614ce4565b5060e0830151610100614dcb81850183614ce4565b84015161012084810152905061103d610140840182614d15565b60008083601f840112614df757600080fd5b5081356001600160401b03811115614e0e57600080fd5b60208301915083602082850101111561330b57600080fd5b60008060208385031215614e3957600080fd5b82356001600160401b03811115614e4f57600080fd5b614e5b85828601614de5565b90969095509350505050565b80356001600160a01b0381168114610ff857600080fd5b600080600080600060608688031215614e9657600080fd5b85356001600160401b0380821115614ead57600080fd5b614eb989838a01614de5565b90975095506020880135915080821115614ed257600080fd5b50614edf88828901614de5565b9094509250614ef2905060408701614e67565b90509295509295909350565b600060208284031215614f1057600080fd5b6112ae82614e67565b6020808252825182820181905260009190848201906040850190845b81811015614f5157835183529284019291840191600101614f35565b50909695505050505050565b60028110613e1b57613e1b614cbe565b60208101614f7a83614f5d565b91905290565b600060608284031215614f9257600080fd5b50919050565b60008083601f840112614faa57600080fd5b5081356001600160401b03811115614fc157600080fd5b6020830191508360208260061b850101111561330b57600080fd5b600080600060408486031215614ff157600080fd5b83356001600160401b038082111561500857600080fd5b61501487838801614f80565b9450602086013591508082111561502a57600080fd5b5061503786828701614f98565b9497909650939450505050565b60008083601f84011261505657600080fd5b5081356001600160401b0381111561506d57600080fd5b6020830191508360208260051b850101111561330b57600080fd5b60008060006040848603121561509d57600080fd5b83356001600160401b03808211156150b457600080fd5b6150c087838801614f80565b945060208601359150808211156150d657600080fd5b5061503786828701615044565b600080604083850312156150f657600080fd5b8235915061510660208401614e67565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b8015158114613e1b57600080fd5b8035610ff881615125565b60008060006060848603121561515357600080fd5b61515c84614e67565b925060208401356001600160401b038082111561517857600080fd5b818601915086601f83011261518c57600080fd5b81358181111561519e5761519e61510f565b604051601f8201601f19908116603f011681019083821181831017156151c6576151c661510f565b816040528281528960208487010111156151df57600080fd5b82602086016020830137600060208483010152809650505050505061520660408501615133565b90509250925092565b6020815260006112ae6020830184614d15565b6000806040838503121561523557600080fd5b50508035926020909101359150565b60028110613e1b57600080fd5b60006020828403121561526357600080fd5b81356112ae81615244565b600181811c9082168061528257607f821691505b602082108103614f9257634e487b7160e01b600052602260045260246000fd5b8183823760009101908152919050565b6020808252600c908201526b125b1b1959d85b0810d85b1b60a21b604082015260600190565b6020808252600c908201526b125b9d985b1a590810d85b1b60a21b604082015260600190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061533b6060830187896152fe565b828103602084015261534e8186886152fe565b91505061ffff831660408301529695505050505050565b60208082526008908201526714995a9958dd195960c21b604082015260600190565b602080825260119082015270496c6c6567616c20557064617461626c6560781b604082015260600190565b60208082526010908201526f125b1b1959d85b0810dbdb9d1c9858dd60821b604082015260600190565b6020810160148310614f7a57614f7a614cbe565b60006020828403121561540257600080fd5b81516112ae81615125565b634e487b7160e01b600052603260045260246000fd5b60048110613e1b57600080fd5b60006020828403121561544257600080fd5b81356112ae81615423565b60208101614f7a83614cd4565b634e487b7160e01b600052601160045260246000fd5b6000600182016154825761548261545a565b5060010190565b600182810b9082900b03617fff198112617fff821317156108155761081561545a565b6000823560be198336030181126154c257600080fd5b9190910192915050565b6000808335601e198436030181126154e357600080fd5b8301803591506001600160401b038211156154fd57600080fd5b60200191503681900382131561330b57600080fd5b60006020828403121561552457600080fd5b81358060020b81146112ae57600080fd5b601f82111561557b57600081815260208120601f850160051c8101602086101561555c5750805b601f850160051c820191505b81811015610ce757828155600101615568565b505050565b6001600160401b038311156155975761559761510f565b6155ab836155a5835461526e565b83615535565b6000601f8411600181146155df57600085156155c75750838201355b600019600387901b1c1916600186901b178355612e15565b600083815260209020601f19861690835b8281101561561057868501358255602094850194600190920191016155f0565b508682101561562d5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561565157600080fd5b813561ffff811681146112ae57600080fd5b60006020828403121561567557600080fd5b8151601481106112ae57600080fd5b60006020828403121561569657600080fd5b81516112ae81615244565b6000602082840312156156b357600080fd5b81356001600160401b03811681146112ae57600080fd5b63ffffffff8181168382160190808211156132b5576132b561545a565b6000602082840312156156f957600080fd5b5051919050565b60006020828403121561571257600080fd5b8151600881106112ae57600080fd5b600080835461572f8161526e565b60018281168015615747576001811461575c5761578b565b60ff198416875282151583028701945061578b565b8760005260208060002060005b858110156157825781548a820152908401908201615769565b50505082870194505b50929695505050505050565b600082516154c2818460208701614cf1565b808201808211156108155761081561545a56fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212207123d03f8ca726e44a16496ad3bec7753a93498f3e56f88e6406a55a6b6daca464736f6c63430008130033",
  "libraries": {
    "LACLCommons": "0x61a74e6467B0eDd133Bf2fa08193Fc8B663D1750"
  },
  "devdoc": {
    "author": "Sina Tadayon, https://github.com/SinaTadayon",
    "events": {
      "Initialized(address,address,address,string,string,uint16)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ProxyLocalAdminUpdated(address,address,address)": {
        "details": "Emitted when the admin account has changed."
      }
    },
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "ACL Type Manager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82229,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "_contractName",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 82231,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "_contractVersion",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 82233,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 82236,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "_sstat",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(ProxySafeModeStatus)82251"
      },
      {
        "astId": 82239,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "_ustat",
        "offset": 21,
        "slot": "2",
        "type": "t_enum(ProxyUpdatabilityStatus)82254"
      },
      {
        "astId": 82244,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "__reserved",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)64_storage"
      },
      {
        "astId": 10383,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "_firstInit",
        "offset": 0,
        "slot": "67",
        "type": "t_bool"
      },
      {
        "astId": 10386,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "_data",
        "offset": 0,
        "slot": "68",
        "type": "t_struct(DataCollection)10239_storage"
      },
      {
        "astId": 82432,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "78",
        "type": "t_uint16"
      },
      {
        "astId": 82435,
        "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
        "label": "_initializing",
        "offset": 2,
        "slot": "78",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)64_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[64]",
        "numberOfBytes": "2048"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(ActivityStatus)11721": {
        "encoding": "inplace",
        "label": "enum IACLCommons.ActivityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(AgentType)11716": {
        "encoding": "inplace",
        "label": "enum IACLCommons.AgentType",
        "numberOfBytes": "1"
      },
      "t_enum(AlterabilityStatus)11726": {
        "encoding": "inplace",
        "label": "enum IACLCommons.AlterabilityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PolicyType)11744": {
        "encoding": "inplace",
        "label": "enum IACLCommons.PolicyType",
        "numberOfBytes": "1"
      },
      "t_enum(ProxySafeModeStatus)82251": {
        "encoding": "inplace",
        "label": "enum IBaseProxy.ProxySafeModeStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ProxyUpdatabilityStatus)82254": {
        "encoding": "inplace",
        "label": "enum IBaseProxy.ProxyUpdatabilityStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ScopeType)11733": {
        "encoding": "inplace",
        "label": "enum IACLCommons.ScopeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(FacetEntity)11945_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IACLCommons.FacetEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(FacetEntity)11945_storage"
      },
      "t_mapping(t_address,t_struct(ProfileAccount)12018_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IACLCommons.ProfileAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileAccount)12018_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.BaseAgent)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseAgent)11756_storage"
      },
      "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.BaseScope)",
        "numberOfBytes": "32",
        "value": "t_struct(BaseScope)11770_storage"
      },
      "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.PolicyEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(PolicyEntity)11793_storage"
      },
      "t_mapping(t_bytes32,t_struct(ProfileEntity)12059_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IACLCommons.ProfileEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileEntity)12059_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)79783_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.AddressSet",
        "members": [
          {
            "astId": 79782,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)79482_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BaseAgent)11756_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.BaseAgent",
        "members": [
          {
            "astId": 11746,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11749,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "atype",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(AgentType)11716"
          },
          {
            "astId": 11752,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "acstat",
            "offset": 1,
            "slot": "1",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11755,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "alstat",
            "offset": 2,
            "slot": "1",
            "type": "t_enum(AlterabilityStatus)11726"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BaseScope)11770_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.BaseScope",
        "members": [
          {
            "astId": 11758,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11761,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "stype",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ScopeType)11733"
          },
          {
            "astId": 11764,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "acstat",
            "offset": 1,
            "slot": "1",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11767,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "alstat",
            "offset": 2,
            "slot": "1",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 11769,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "referredByAgent",
            "offset": 3,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)79676_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 79675,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)79482_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DataCollection)10239_storage": {
        "encoding": "inplace",
        "label": "struct ACLStorage.DataCollection",
        "members": [
          {
            "astId": 10202,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "agents",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)"
          },
          {
            "astId": 10207,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "scopes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)"
          },
          {
            "astId": 10212,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "policies",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)"
          },
          {
            "astId": 10216,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "rolePolicyMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 10221,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "profiles",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes32,t_struct(ProfileEntity)12059_storage)"
          },
          {
            "astId": 10226,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "profileAccounts",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(ProfileAccount)12018_storage)"
          },
          {
            "astId": 10230,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "selectors",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes4,t_address)"
          },
          {
            "astId": 10235,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "facets",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(FacetEntity)11945_storage)"
          },
          {
            "astId": 10238,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "facetSet",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)79783_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(FacetEntity)11945_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.FacetEntity",
        "members": [
          {
            "astId": 11944,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "subjectId",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PolicyEntity)11793_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.PolicyEntity",
        "members": [
          {
            "astId": 11772,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "adminId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 11774,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "scopeId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 11776,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 11778,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "roleLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 11780,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "policyCode",
            "offset": 2,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 11783,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "ptype",
            "offset": 3,
            "slot": "3",
            "type": "t_enum(PolicyType)11744"
          },
          {
            "astId": 11786,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "acstat",
            "offset": 4,
            "slot": "3",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 11789,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "alstat",
            "offset": 5,
            "slot": "3",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 11792,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "roles",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bytes32Set)79676_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ProfileAccount)12018_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileAccount",
        "members": [
          {
            "astId": 12017,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "profiles",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProfileEntity)12059_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileEntity",
        "members": [
          {
            "astId": 12023,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "agents",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(BaseAgent)11756_storage)"
          },
          {
            "astId": 12028,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "scopes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(BaseScope)11770_storage)"
          },
          {
            "astId": 12033,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "policies",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(PolicyEntity)11793_storage)"
          },
          {
            "astId": 12037,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "rolePolicyMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 12040,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "admins",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bytes32Set)79676_storage"
          },
          {
            "astId": 12042,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "adminId",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 12044,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "name",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 12046,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "owner",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 12049,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "acstat",
            "offset": 20,
            "slot": "8",
            "type": "t_enum(ActivityStatus)11721"
          },
          {
            "astId": 12052,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "alstat",
            "offset": 21,
            "slot": "8",
            "type": "t_enum(AlterabilityStatus)11726"
          },
          {
            "astId": 12055,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "registerLimits",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(ProfileRegisterLimit)11993_storage"
          },
          {
            "astId": 12058,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "limits",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(ProfileLimit)12014_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(ProfileLimit)12014_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileLimit",
        "members": [
          {
            "astId": 11995,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "profileCallLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11997,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "contextLimit",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11999,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "memberLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 12001,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "realmLimit",
            "offset": 11,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12003,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "domainLimit",
            "offset": 13,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12005,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "memberCallLimit",
            "offset": 15,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12007,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "typeRoleLimit",
            "offset": 17,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12009,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "typeLimit",
            "offset": 19,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12011,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "policyRoleLimit",
            "offset": 21,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 12013,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "functionLimit",
            "offset": 23,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProfileRegisterLimit)11993_storage": {
        "encoding": "inplace",
        "label": "struct IACLCommons.ProfileRegisterLimit",
        "members": [
          {
            "astId": 11978,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "memberRegisterLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11980,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "roleRegisterLimit",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11982,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "typeRegisterLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11984,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "functionRegisterLimit",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11986,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "contextRegisterLimit",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11988,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "realmRegisterLimit",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11990,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "domainRegisterLimit",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 11992,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "policyRegisterLimit",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)79482_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Set",
        "members": [
          {
            "astId": 79477,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 79481,
            "contract": "src/contracts/acl/agent/TypeManager.sol:TypeManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}