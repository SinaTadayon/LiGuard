{
  "address": "0x8e1CEFcD36D856492248B1D924cd46103a3f4080",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum IACL.AuthorizationStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "ACLActionForbidden",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "AssetERC20Called",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetManagerId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetSubjectId",
          "type": "address"
        }
      ],
      "name": "AssetInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IAssetEntity.AssetSafeModeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "AssetSafeModeUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "assetAccessControl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "accessControl",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "initVersion",
              "type": "uint16"
            },
            {
              "internalType": "enum IAssetEntity.AssetType",
              "name": "atype",
              "type": "uint8"
            },
            {
              "internalType": "enum IAssetEntity.AssetSafeModeStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IAssetEntity.AssetInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetInitVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "realmId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "adminId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "agentId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "subjectId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "erc20TokenId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "accessControlId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetManagerId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetContractId",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "contractName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contractVersion",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAssetEntity.AssetInitRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "assetInitialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetSafeMode",
      "outputs": [
        {
          "internalType": "enum IAssetEntity.AssetSafeModeStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAssetEntity.AssetSafeModeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "assetSetSafeMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetType",
      "outputs": [
        {
          "internalType": "enum IAssetEntity.AssetType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenApprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Extra.BatchTransferRequest[]",
          "name": "request",
          "type": "tuple[]"
        }
      ],
      "name": "tokenBatchTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Extra.BatchTransferFromRequest[]",
          "name": "request",
          "type": "tuple[]"
        }
      ],
      "name": "tokenBatchTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenDecreaseAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenIncreaseAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dest",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "claimAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Lock.LockTokenRequest[]",
          "name": "lockRequests",
          "type": "tuple[]"
        }
      ],
      "name": "tokenLock",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tokenTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x371186dd95c5dffd735c2849592edd7aab20e43ccab75858d9579d45cd6d0660",
  "receipt": {
    "to": null,
    "from": "0xCB93d383638cc7B174FE2139Dec8570521Bb8118",
    "contractAddress": "0x8e1CEFcD36D856492248B1D924cd46103a3f4080",
    "transactionIndex": 52,
    "gasUsed": "3121736",
    "logsBloom": "0x
    "blockHash": "0x4d14c73276ad658883ff17bd26cc594a15029c2eefd36047c38e57cde97e75a8",
    "transactionHash": "0x371186dd95c5dffd735c2849592edd7aab20e43ccab75858d9579d45cd6d0660",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 40020900,
        "transactionHash": "0x371186dd95c5dffd735c2849592edd7aab20e43ccab75858d9579d45cd6d0660",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cb93d383638cc7b174fe2139dec8570521bb8118",
          "0x00000000000000000000000040314efbc35bc0db441969bce451bf0167efded1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000015ce8fab01259c800000000000000000000000000000000000000000000000239a62b383af8be7d0000000000000000000000000000000000000000000000ee4eb645a01c780f3c0000000000000000000000000000000000000000000000023849423d8ae664b50000000000000000000000000000000000000000000000ee50132e9acc8a6904",
        "logIndex": 260,
        "blockHash": "0x4d14c73276ad658883ff17bd26cc594a15029c2eefd36047c38e57cde97e75a8"
      }
    ],
    "blockNumber": 40020900,
    "cumulativeGasUsed": "13592869",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3d37f12163392c6a812b5af749abec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum IACL.AuthorizationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ACLActionForbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"AssetERC20Called\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetManagerId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetSubjectId\",\"type\":\"address\"}],\"name\":\"AssetInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IAssetEntity.AssetSafeModeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"AssetSafeModeUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"assetAccessControl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"initVersion\",\"type\":\"uint16\"},{\"internalType\":\"enum IAssetEntity.AssetType\",\"name\":\"atype\",\"type\":\"uint8\"},{\"internalType\":\"enum IAssetEntity.AssetSafeModeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IAssetEntity.AssetInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetInitVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"realmId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"agentId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"subjectId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20TokenId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessControlId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetManagerId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContractId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractVersion\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetEntity.AssetInitRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"assetInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetSafeMode\",\"outputs\":[{\"internalType\":\"enum IAssetEntity.AssetSafeModeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAssetEntity.AssetSafeModeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"assetSetSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetType\",\"outputs\":[{\"internalType\":\"enum IAssetEntity.AssetType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Extra.BatchTransferRequest[]\",\"name\":\"request\",\"type\":\"tuple[]\"}],\"name\":\"tokenBatchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Extra.BatchTransferFromRequest[]\",\"name\":\"request\",\"type\":\"tuple[]\"}],\"name\":\"tokenBatchTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenDecreaseAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenIncreaseAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Lock.LockTokenRequest[]\",\"name\":\"lockRequests\",\"type\":\"tuple[]\"}],\"name\":\"tokenLock\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Sina Tadayon, https://github.com/SinaTadayon\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Asset ERC20 Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/token/asset/ERC20/AssetERC20.sol\":\"AssetERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/ACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Abstract Access Control List Storage Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract ACLStorage is BaseUUPSStorage, IACLCommons {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  struct DataCollection {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    mapping(bytes32 => ProfileEntity) profiles;\\n    mapping(address => ProfileAccount) profileAccounts;\\n    mapping(bytes4 => address) selectors;\\n    mapping(address => FacetEntity) facets;\\n    LEnumerableSet.AddressSet facetSet;\\n  }\\n\\n  bytes32 public constant CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"PredictContext(address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"MemberSignature(address account,uint256 expiredAt)\\\");\\n\\n  bytes32 public constant PROFILE_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileContext(string profile,address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfilePredictContext(string profile,address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileMemberSignature(string profile,address account,uint256 expiredAt)\\\");\\n\\n  // General Types ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SCOPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_MEMBER_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_TYPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_POLICY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_PROFILE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\"));\\n\\n  // Universe Scope ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_VERSE\\\"));\\n\\n  // General Profile Type\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n\\n  bool internal _firstInit;\\n  DataCollection internal _data;\\n  // Note: for next upgrade add new variables after this line\\n}\\n\",\"keccak256\":\"0x748ba9ee4ce4e5492afd3261bf61e8360b3f45ae3588218c1bbf90699df2065b\",\"license\":\"MIT\"},\"src/contracts/acl/IACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACL {\\n  enum AuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ACLUnauthorized();\\n  error ACLPolicyForbidden();\\n  error ACLCallForbidden();\\n  error ACLRoleScopeForbidden();\\n  error ACLMemberNotFound();\\n  error ACLRoleNotFound();\\n  error ACLTypeNotFound();\\n  error ACLFunctionNotFound();\\n  error ACLContextNotFound();\\n  error ACLRealmNotFound();\\n  error ACLDomainNotFound();\\n  error ACLMemberActivityForbidden();\\n  error ACLRoleActivityForbidden();\\n  error ACLTypeActivityForbidden();\\n  error ACLFunctionActivityForbidden();\\n  error ACLContextActivityForbidden();\\n  error ACLRealmActivityForbidden();\\n  error ACLDomainActivityForbidden();\\n  error ACLUniverseActivityForbidden();\\n\\n  error ACLActionForbidden(AuthorizationStatus);\\n\\n  enum AdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error AdminAccessNotPermitted();\\n  error AdminAccessPolicyForbidden();\\n  error AdminAccessRoleNotFound();\\n  error AdminAccessTypeNotFound();\\n  error AdminAccessFunctionNotFound();\\n  error AdminAccessRoleActivityForbidden();\\n  error AdminAccessTypeActivityForbidden();\\n\\n  error SetAdminForbidden(AdminAccessStatus);\\n\\n  function hasAccess(bytes32 functionId) external returns (AuthorizationStatus);\\n\\n  function hasMemberAccess(bytes32 functionId, bytes32 memberId) external returns (AuthorizationStatus);\\n\\n  function hasCSAccess(address contractId, bytes4 selector) external returns (AuthorizationStatus);\\n\\n  function hasAccountAccess(\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (AuthorizationStatus);\\n}\\n\",\"keccak256\":\"0x3b4bd5cd73079a4bcbc82fe3699b21fcc08fdafc964f978a9c540756302dbb2e\",\"license\":\"MIT\"},\"src/contracts/acl/IACLCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLCommons {\\n  enum AgentType {\\n    NONE,\\n    MEMBER,\\n    ROLE,\\n    TYPE\\n  }\\n\\n  enum ActivityStatus {\\n    NONE,\\n    DELETED,\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum AlterabilityStatus {\\n    NONE,\\n    DISABLED,\\n    UPDATABLE,\\n    UPGRADABLE\\n  }\\n\\n  enum ScopeType {\\n    NONE,\\n    FUNCTION,\\n    CONTEXT,\\n    REALM,\\n    DOMAIN,\\n    UNIVERSE\\n  }\\n\\n  enum ActionType {\\n    ADD,\\n    UPDATE,\\n    REMOVE\\n  }\\n\\n  enum PolicyType {\\n    UNLOCK, // 0\\n    SLOCK, // soft lock, 1 - 63\\n    MLOCK, // medium lock, 64 - 127\\n    RLOCK, // restrict lock, 128 - 191\\n    HLOCK, // hard lock, 192 - 254\\n    LOCK // 255\\n  }\\n\\n  struct BaseAgent {\\n    bytes32 adminId;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct BaseScope {\\n    bytes32 adminId;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    uint32 referredByAgent;\\n  }\\n\\n  struct PolicyEntity {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint8 policyCode;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FunctionEntity {\\n    BaseScope bs;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n  }\\n\\n  struct ContextEntity {\\n    BaseScope bs;\\n    bytes32 realmId;\\n    address contractId;\\n    uint8 functionLimit;\\n    LEnumerableSet.Bytes32Set functions;\\n  }\\n\\n  struct RealmEntity {\\n    BaseScope bs;\\n    bytes32 domainId;\\n    uint32 contextLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set contexts;\\n  }\\n\\n  struct DomainEntity {\\n    BaseScope bs;\\n    bytes32 universeId;\\n    uint16 realmLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set realms;\\n  }\\n\\n  struct UniverseEntity {\\n    BaseScope bs;\\n    uint16 domainLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set domains;\\n  }\\n\\n  struct GeneralLimit {\\n    uint24 memberLimit;\\n    uint16 memberRegisterLimit;\\n    uint16 contextRegisterLimit;\\n    uint16 functionRegisterLimit;\\n    uint16 profileRegisterLimit;\\n    uint16 contextLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 callLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint8 roleRegisterLimit;\\n    uint8 typeRegisterLimit;\\n    uint8 realmRegisterLimit;\\n    uint8 domainRegisterLimit;\\n    uint8 policyRegisterLimit;\\n    uint8 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct MemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    GeneralLimit limits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct MemberSignature {\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct RoleEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n  }\\n\\n  struct TypeEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    mapping(bytes32 => bytes32) members;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FacetEntity {\\n    address subjectId;\\n  }\\n\\n  struct UpdateActivityRequest {\\n    bytes32 id;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct UpdateAlterabilityRequest {\\n    bytes32 id;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct UpdateAdminRequest {\\n    bytes32 id;\\n    bytes32 adminId;\\n  }\\n\\n  // used in Policy / Role / Type\\n  struct UpdateScopeRequest {\\n    bytes32 id;\\n    bytes32 scopeId;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////\\n  // Profiles\\n\\n  struct ProfileMemberSignature {\\n    string profileName;\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct ProfileRegisterLimit {\\n    uint32 memberRegisterLimit;\\n    uint32 roleRegisterLimit;\\n    uint32 typeRegisterLimit;\\n    uint32 functionRegisterLimit;\\n    uint32 contextRegisterLimit;\\n    uint16 realmRegisterLimit;\\n    uint16 domainRegisterLimit;\\n    uint16 policyRegisterLimit;\\n  }\\n\\n  struct ProfileLimit {\\n    uint32 profileCallLimit;\\n    uint32 contextLimit;\\n    uint24 memberLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 memberCallLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint16 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ProfileAccount {\\n    bytes32[] profiles;\\n  }\\n\\n  struct ProfileEntity {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    LEnumerableSet.Bytes32Set admins;\\n    bytes32 adminId;\\n    string name;\\n    address owner;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileMemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    uint16 callLimit;\\n    uint16 typeLimit;\\n    ProfileRegisterLimit registerLimits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct ProfileUpdateActivityRequest {\\n    bytes32 entityId;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct ProfileUpdateAlterabilityRequest {\\n    bytes32 entityId;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct ProfileUpdateAdminRequest {\\n    bytes32 entityId;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateScopeRequest {\\n    bytes32 entityId;\\n    bytes32 scopeId;\\n  }\\n}\\n\",\"keccak256\":\"0x2269cec662cb8f25c0523b281f8f97bd9b5115ea80771c7d1e4083031f4a1c87\",\"license\":\"MIT\"},\"src/contracts/acl/IACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function getAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function getAnyType() external pure returns (bytes32);\\n\\n  // scope master type\\n  function getScopeMasterType() external pure returns (bytes32);\\n\\n  // type master type\\n  function getTypeMasterType() external pure returns (bytes32);\\n\\n  // member master type\\n  function getMemberMasterType() external pure returns (bytes32);\\n\\n  // system master type\\n  function getSystemMasterType() external pure returns (bytes32);\\n\\n  // lively master type\\n  function getLivelyMasterType() external pure returns (bytes32);\\n\\n  // Policy Master type\\n  function getPolicyMasterType() external pure returns (bytes32);\\n\\n  // Profile Master type\\n  function getProfileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function getUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function isAgentExist(bytes32 agentId) external view returns (bool);\\n\\n  function isScopeExist(bytes32 scopeId) external view returns (bool);\\n\\n  function getScopeBaseInfo(bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function getAgentBaseInfo(bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function isScopesCompatible(bytes32 destScopeId, bytes32 srcScopeId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x303b03b04f7fc7356cc4c88bf54e218e29ce9fb479b44310d0788fa176ecfc50\",\"license\":\"MIT\"},\"src/contracts/acl/agent/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Role Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IRoleManagement is IACLCommons {\\n  struct RoleRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    int32 memberLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  struct RoleGrantMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct RoleRevokeMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct RoleUpdateMemberLimitRequest {\\n    bytes32 roleId;\\n    uint24 memberLimit;\\n  }\\n\\n  struct RoleInfo {\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    bytes32 adminId;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed roleId,\\n    bytes32 indexed typeId,\\n    bytes32 adminId,\\n    bytes32 scopeId\\n  );\\n\\n  event RoleMemberDeleted(\\n    address indexed sender,\\n    bytes32 indexed roleId,\\n    bytes32 indexed memberId,\\n    bytes32 typeId,\\n    address account\\n  );\\n\\n  event RoleMemberGranted(address indexed sender, bytes32 indexed roleId, bytes32 indexed memberId, bytes32 typeId);\\n\\n  event RoleMemberRevoked(address indexed sender, bytes32 indexed roleId, bytes32 indexed memberId, bytes32 typeId);\\n\\n  event RoleMemberLimitUpdated(address indexed sender, bytes32 indexed roleId, uint24 memberLimit);\\n\\n  event RoleAdminUpdated(address indexed sender, bytes32 indexed roleId, bytes32 indexed adminId);\\n\\n  event RoleScopeUpdated(address indexed sender, bytes32 indexed roleId, bytes32 indexed scopeId);\\n\\n  event RoleActivityUpdated(address indexed sender, bytes32 indexed roleId, ActivityStatus acstat);\\n\\n  event RoleAlterabilityUpdated(address indexed sender, bytes32 indexed roleId, AlterabilityStatus alstat);\\n\\n  event RoleRemoved(address indexed sender, bytes32 indexed roleId);\\n\\n  function roleRegister(MemberSignature calldata memberSign, RoleRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleGrantMembers(MemberSignature calldata memberSign, RoleGrantMembersRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleRevokeMembers(MemberSignature calldata memberSign, RoleRevokeMembersRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateScope(MemberSignature calldata memberSign, UpdateScopeRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function roleUpdateMemberLimit(MemberSignature calldata memberSign, RoleUpdateMemberLimitRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function roleRemove(MemberSignature calldata memberSign, bytes32[] calldata roles) external returns (bool);\\n\\n  function roleCheckId(bytes32 roleId) external view returns (bool);\\n\\n  function roleCheckName(string calldata roleName) external view returns (bool);\\n\\n  function roleCheckAdmin(bytes32 roleId, address account) external view returns (bool);\\n\\n  function roleHasAccount(bytes32 roleId, address account) external view returns (bool);\\n\\n  function roleGetInfo(bytes32 roleId) external view returns (RoleInfo memory);\\n}\\n\",\"keccak256\":\"0xd577f997c4da278bcf299f28134d89a2807745820b182d7f4de0bcfa68ad262c\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACL {\\n  enum ProfileAuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    PROFILE_CALL_FORBIDDEN,\\n    MEMBER_CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN,\\n    PROFILE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileACLUnauthorized();\\n  error ProfileACLPolicyForbidden();\\n  error ProfileACLCallForbidden();\\n  error ProfileACLRoleScopeForbidden();\\n  error ProfileACLMemberCallForbidden();\\n  error ProfileACLMemberNotFound();\\n  error ProfileACLRoleNotFound();\\n  error ProfileACLTypeNotFound();\\n  error ProfileACLFunctionNotFound();\\n  error ProfileACLContextNotFound();\\n  error ProfileACLRealmNotFound();\\n  error ProfileACLDomainNotFound();\\n  error ProfileACLMemberActivityForbidden();\\n  error ProfileACLRoleActivityForbidden();\\n  error ProfileACLTypeActivityForbidden();\\n  error ProfileACLFunctionActivityForbidden();\\n  error ProfileACLContextActivityForbidden();\\n  error ProfileACLRealmActivityForbidden();\\n  error ProfileACLDomainActivityForbidden();\\n  error ProfileACLUniverseActivityForbidden();\\n  error ProfileACLProfileActivityForbidden();\\n\\n  enum ProfileAdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileAdminAccessNotPermitted();\\n  error ProfileAdminAccessPolicyForbidden();\\n  error ProfileAdminAccessRoleNotFound();\\n  error ProfileAdminAccessTypeNotFound();\\n  error ProfileAdminAccessFunctionNotFound();\\n  error ProfileAdminAccessRoleActivityForbidden();\\n  error ProfileAdminAccessTypeActivityForbidden();\\n\\n  error ProfileSetAdminForbidden(ProfileAdminAccessStatus);\\n\\n  function profileHasAccess(bytes32 profileId, bytes32 functionId) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasCSAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasAccountAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (ProfileAuthorizationStatus);\\n}\\n\",\"keccak256\":\"0xb3687f11a1d2d28b78e815657864fbe1ef4aeba750e8c9760b3d3f97e467efc2\",\"license\":\"MIT\"},\"src/contracts/acl/scope/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Context Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IContextManagement is IACLCommons {\\n  struct ContextRegisterRequest {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address contractId;\\n    address subject;\\n    address deployer;\\n    int16 functionLimit;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    bytes signature;\\n  }\\n\\n  struct ContextUpdateFunctionLimitRequest {\\n    bytes32 contextId;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ContextInfo {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    address contractId;\\n    uint8 functionCount;\\n    uint8 functionLimit;\\n    uint32 referredByAgent;\\n    AgentType adminType;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ContextRegistered(\\n    address indexed sender,\\n    bytes32 indexed contextId,\\n    address indexed contractId,\\n    bytes32 realmId,\\n    address deployer,\\n    address subject,\\n    bytes32 adminId\\n  );\\n\\n  event ContextAdminUpdated(address indexed sender, bytes32 indexed contextId, bytes32 indexed adminId);\\n\\n  event ContextActivityUpdated(address indexed sender, bytes32 indexed contextId, ActivityStatus acstat);\\n\\n  event ContextAlterabilityUpdated(address indexed sender, bytes32 indexed contextId, AlterabilityStatus alstat);\\n\\n  event ContextFunctionLimitUpdated(address indexed sender, bytes32 indexed contextId, uint8 functionLimit);\\n\\n  event ContextRemoved(address indexed sender, bytes32 indexed contextId, bool isSoftDelete);\\n\\n  function contextRegister(MemberSignature calldata memberSign, ContextRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function contextUpdateFunctionLimit(\\n    MemberSignature calldata memberSign,\\n    ContextUpdateFunctionLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function contextRemove(MemberSignature calldata memberSign, bytes32[] calldata contexts) external returns (bool);\\n\\n  function contextCheckId(bytes32 contextId) external view returns (bool);\\n\\n  function contextCheckAccount(address contractId) external view returns (bool);\\n\\n  function contextCheckAdmin(bytes32 contextId, address account) external view returns (bool);\\n\\n  function contextHasFunction(bytes32 contextId, bytes32 functionId) external view returns (bool);\\n\\n  function contextHasSelector(address contractId, bytes4 selector) external view returns (bool);\\n\\n  function contextGetFunctions(bytes32 contextId) external view returns (bytes32[] memory);\\n\\n  function contextGetInfo(bytes32 contextId) external view returns (ContextInfo memory);\\n}\\n\",\"keccak256\":\"0x3db7b4eaff9522c669111ec8e268f603b57da7b4c0846d3d6ffb74d9f9a07f08\",\"license\":\"MIT\"},\"src/contracts/acl/scope/IFunctionManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Function Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IFunctionManagement is IACLCommons {\\n  struct FunctionRegisterRequest {\\n    bytes signature;\\n    bytes32 realmId;\\n    bytes32 salt;\\n    string name;\\n    string version;\\n    address subject;\\n    address deployer;\\n    address contractId;\\n    FunctionRequest[] functions;\\n  }\\n\\n  struct FunctionRequest {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct FunctionUpdatePolicyRequest {\\n    bytes32 functionId;\\n    uint8 policyCode;\\n  }\\n\\n  struct FunctionUpdateAgentRequest {\\n    bytes32 functionId;\\n    bytes32 agentId;\\n  }\\n\\n  struct FunctionInfo {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint32 referredByAgent;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    AgentType adminType;\\n    AgentType agentType;\\n    uint8 policyCode;\\n  }\\n\\n  event FunctionRegistered(\\n    address indexed sender,\\n    bytes32 indexed contextId,\\n    bytes32 indexed functionId,\\n    bytes32 adminId,\\n    bytes32 agentId\\n  );\\n\\n  event FunctionAdminUpdated(address indexed sender, bytes32 indexed functionId, bytes32 indexed adminId);\\n\\n  event FunctionAgentUpdated(address indexed sender, bytes32 indexed functionId, bytes32 indexed agentId);\\n\\n  event FunctionActivityUpdated(address indexed sender, bytes32 indexed functionId, ActivityStatus acstat);\\n\\n  event FunctionAlterabilityUpdated(address indexed sender, bytes32 indexed functionId, AlterabilityStatus alstat);\\n\\n  event FunctionPolicyUpdated(address indexed sender, bytes32 indexed functionId, uint8 policyCode);\\n\\n  event FunctionRemoved(address indexed sender, bytes32 indexed functionId, bool isSoftDeleted);\\n\\n  function functionRegister(MemberSignature calldata memberSign, FunctionRegisterRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateAgent(MemberSignature calldata memberSign, FunctionUpdateAgentRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function functionUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function functionUpdatePolicyCode(\\n    MemberSignature calldata memberSign,\\n    FunctionUpdatePolicyRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function functionRemove(MemberSignature calldata memberSign, bytes32[] calldata functions) external returns (bool);\\n\\n  function functionCheckId(bytes32 functionId) external view returns (bool);\\n\\n  function functionCheckSelector(address contractId, bytes4 selector) external view returns (bool);\\n\\n  function functionCheckAdmin(bytes32 functionId, address account) external view returns (bool);\\n\\n  function functionCheckAgent(bytes32 functionId, address account) external view returns (bool);\\n\\n  function functionGetInfo(bytes32 functionId) external view returns (FunctionInfo memory);\\n}\\n\",\"keccak256\":\"0xf9cab043ca2218987527dc17343b3bb632a65ba9be0ab9e863c6c140d9d488b7\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  function isContract2(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-universe-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb46e5ff7d2a40ad64a6ca16bf560fef69391201577931c8c0b8395292014035e\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0xf6b56daea1f2692628dff63bd57ff8ad0bc38ecbc34887db37a8305162ce1394\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\n\\n/**\\n * @title Context Utils Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLUtils {\\n  function functionGenerateId(address contractId, bytes4 selector) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId, selector));\\n  }\\n\\n  function accountGenerateId(address account) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(account));\\n  }\\n\\n  function generateId(string calldata name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateId2(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateHash(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function getMemeberSignerAddress(IACLCommons.MemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateMemberSignMsgHash(msgTypeHash, memberSign.account, memberSign.expiredAt)\\n      );\\n  }\\n\\n  function getProfileMemeberSignerAddress(IACLCommons.ProfileMemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateProfileMemberSignMsgHash(\\n          msgTypeHash,\\n          generateId(memberSign.profileName),\\n          memberSign.account,\\n          memberSign.expiredAt\\n        )\\n      );\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) private view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(IProxy(address(this)).domainSeparator(), structHash);\\n  }\\n\\n  function _generateMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, account, expiredAt));\\n  }\\n\\n  function _generateProfileMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    bytes32 profileName,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, profileName, account, expiredAt));\\n  }\\n\\n  function getSignerAddress(bytes memory signature, bytes32 structHash) internal view returns (address) {\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal Signature\\\");\\n    return msgSigner;\\n  }\\n\\n  function generateAuthorizationError(IACL.AuthorizationStatus status) internal pure {\\n    if (status == IACL.AuthorizationStatus.UNAUTHORIZED) revert IACL.ACLUnauthorized();\\n    else if (status == IACL.AuthorizationStatus.POLICY_FORBIDDEN) revert IACL.ACLPolicyForbidden();\\n    else if (status == IACL.AuthorizationStatus.CALL_FORBIDDEN) revert IACL.ACLCallForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_SCOPE_FORBIDDEN) revert IACL.ACLRoleScopeForbidden();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_NOT_FOUND) revert IACL.ACLMemberNotFound();\\n    else if (status == IACL.AuthorizationStatus.ROLE_NOT_FOUND) revert IACL.ACLRoleNotFound();\\n    else if (status == IACL.AuthorizationStatus.TYPE_NOT_FOUND) revert IACL.ACLTypeNotFound();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_NOT_FOUND) revert IACL.ACLFunctionNotFound();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_NOT_FOUND) revert IACL.ACLContextNotFound();\\n    else if (status == IACL.AuthorizationStatus.REALM_NOT_FOUND) revert IACL.ACLRealmNotFound();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_NOT_FOUND) revert IACL.ACLDomainNotFound();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN) revert IACL.ACLMemberActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.ACLRoleActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.ACLTypeActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN) revert IACL.ACLFunctionActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN) revert IACL.ACLContextActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.REALM_ACTIVITY_FORBIDDEN) revert IACL.ACLRealmActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN) revert IACL.ACLDomainActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN) revert IACL.ACLUniverseActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAuthorizationError(IProfileACL.ProfileAuthorizationStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAuthorizationStatus.UNAUTHORIZED) revert IProfileACL.ProfileACLUnauthorized();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleScopeForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_NOT_FOUND)\\n      revert IProfileACL.ProfileACLMemberNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRoleNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLTypeNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileACLFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_NOT_FOUND)\\n      revert IProfileACL.ProfileACLContextNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRealmNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_NOT_FOUND)\\n      revert IProfileACL.ProfileACLDomainNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLTypeActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLFunctionActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLContextActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRealmActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLDomainActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLUniverseActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLProfileActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAdminAccessError(IProfileACL.ProfileAdminAccessStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED)\\n      revert IProfileACL.ProfileAdminAccessNotPermitted();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessRoleNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessTypeNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateAdminAccessError(IACL.AdminAccessStatus status) internal pure {\\n    if (status == IACL.AdminAccessStatus.NOT_PERMITTED) revert IACL.AdminAccessNotPermitted();\\n    else if (status == IACL.AdminAccessStatus.POLICY_FORBIDDEN) revert IACL.AdminAccessPolicyForbidden();\\n    else if (status == IACL.AdminAccessStatus.ROLE_NOT_FOUND) revert IACL.AdminAccessRoleNotFound();\\n    else if (status == IACL.AdminAccessStatus.TYPE_NOT_FOUND) revert IACL.AdminAccessTypeNotFound();\\n    else if (status == IACL.AdminAccessStatus.FUNCTION_NOT_FOUND) revert IACL.AdminAccessFunctionNotFound();\\n    else if (status == IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessRoleActivityForbidden();\\n    else if (status == IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x0a1ead86733fdae5c48faf98479dea608f2a5743722b7d458981c33ff13489c1\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0x75b905d070ebb72fa3358e262ab18166f6c6386c11171324f235058ce9185ca4\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe49098eb2019f9d9628a399f6a06ec310fe8a10785c369cc508c56df1f203dd0\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Storage Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSStorage is IBaseProxy {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  address internal immutable __self = address(this);\\n\\n  string internal _contractName;\\n  string internal _contractVersion;\\n  address internal _accessControlManager;\\n  ProxySafeModeStatus internal _sstat;\\n  ProxyUpdatabilityStatus internal _ustat;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x4ff079fd2fd1ad102d42e82a72bff6bb1ffb8f9ab29cec2dd8e970b892ea415e\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IBaseProxy {\\n  enum ProxySafeModeStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum ProxyUpdatabilityStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  event ProxyUpgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x4b2695303b3acb300ba472d17da71a16367191af571d325d43171503d7c92846\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event ProxyLocalAdminUpdated(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event ProxyAccessControlUpdated(address indexed sender, address indexed proxy, address acl);\\n\\n  event ProxySafeModeUpdated(address indexed sender, address indexed proxy, ProxySafeModeStatus sstat);\\n\\n  event ProxyUpdatabilityUpdated(address indexed sender, address indexed proxy, ProxyUpdatabilityStatus ustat);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external returns (bool);\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function setAccessControlManager(address acl) external returns (bool);\\n\\n  function withdrawBalance(address recepient) external returns (uint256);\\n\\n  function contractName() external view returns (string memory);\\n\\n  function contractVersion() external view returns (string memory);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus);\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xaadf51e846486cf9dc7387ad1dcac9a67e6a2d9354ce71694d79de783e1dea3b\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0x5603924c0330dcabd0b81d2b6a8113be8ad3ecbbfd0e75795a79221c21990f45\",\"license\":\"MIT\"},\"src/contracts/token/asset/ERC20/AssetERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IAssetERC20.sol\\\";\\nimport \\\"../IAssetEntity.sol\\\";\\nimport \\\"../IAssetManagerERC20.sol\\\";\\nimport \\\"../../lively/IERC20.sol\\\";\\nimport \\\"../../../proxy/Initializable.sol\\\";\\nimport \\\"../../../utils/Message.sol\\\";\\nimport \\\"../../../utils/ERC165.sol\\\";\\nimport \\\"../../../lib/cryptography/LECDSA.sol\\\";\\nimport \\\"../../../lib/LAddress.sol\\\";\\nimport \\\"../../../lib/acl/LACLUtils.sol\\\";\\nimport \\\"../../../acl/IACL.sol\\\";\\nimport \\\"../../../acl/IACLGenerals.sol\\\";\\nimport \\\"../../../acl/agent/IRoleManagement.sol\\\";\\nimport \\\"../../../acl/scope/IFunctionManagement.sol\\\";\\nimport \\\"../../../acl/scope/IContextManagement.sol\\\";\\n\\n/**\\n * @title Asset ERC20 Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ncontract AssetERC20 is Initializable, Message, ERC165, IAssetERC20, IAssetEntity {\\n  using LAddress for address;\\n\\n  address private _accessControlId;\\n  address private _erc20TokenId;\\n  string private _contractName;\\n  string private _contractVersion;\\n  AssetSafeModeStatus private _assetSafeModeStatus;\\n\\n  constructor() {\\n    _assetSafeModeStatus = AssetSafeModeStatus.ENABLED;\\n  }\\n\\n  function assetInitialize(AssetInitRequest calldata request) external initializer returns (bool) {\\n    if (!IERC165(request.erc20TokenId).supportsInterface(type(IERC20).interfaceId)) revert(\\\"Illegal ERC20Token\\\");\\n\\n    if (!IERC165(request.erc20TokenId).supportsInterface(type(IERC20Extra).interfaceId))\\n      revert(\\\"Illegal ERC20TokenExtra\\\");\\n\\n    if (!IERC165(request.erc20TokenId).supportsInterface(type(IERC20Lock).interfaceId))\\n      revert(\\\"Illegal ERC20TokenLock\\\");\\n\\n    if (!IERC165(request.accessControlId).supportsInterface(type(IACL).interfaceId)) revert(\\\"Illegal ACL\\\");\\n\\n    if (!IERC165(request.assetManagerId).supportsInterface(type(IAssetManagerERC20).interfaceId))\\n      revert(\\\"Illegal IAssetManagerERC20\\\");\\n\\n    _contractName = request.contractName;\\n    _contractVersion = request.contractVersion;\\n    _erc20TokenId = request.erc20TokenId;\\n    _accessControlId = request.accessControlId;\\n    _assetSafeModeStatus = AssetSafeModeStatus.DISABLED;\\n\\n    _createContext(request);\\n\\n    _createFunctions(request);\\n\\n    emit AssetInitialized(_msgSender(), address(this), request.erc20TokenId, request.assetManagerId, request.subjectId);\\n\\n    return true;\\n  }\\n\\n  function _createContext(AssetInitRequest calldata request) internal {\\n    IContextManagement.ContextRegisterRequest[]\\n      memory contextRequests = new IContextManagement.ContextRegisterRequest[](1);\\n    contextRequests[0].realmId = request.realmId;\\n    contextRequests[0].adminId = request.adminId;\\n    contextRequests[0].salt = request.salt;\\n    contextRequests[0].name = request.contractName;\\n    contextRequests[0].version = request.contractVersion;\\n    contextRequests[0].contractId = request.assetContractId;\\n    contextRequests[0].subject = request.subjectId;\\n    contextRequests[0].deployer = request.assetManagerId;\\n    contextRequests[0].functionLimit = 32;\\n    contextRequests[0].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    contextRequests[0].alstat = IACLCommons.AlterabilityStatus.UPGRADABLE;\\n    contextRequests[0].signature = request.signature;\\n\\n    IACLCommons.MemberSignature memory memberSignRequest = IACLCommons.MemberSignature({\\n      account: address(0),\\n      expiredAt: 0,\\n      signature: bytes(\\\"\\\")\\n    });\\n\\n    IContextManagement(_accessControlId).contextRegister(memberSignRequest, contextRequests);\\n  }\\n\\n  function _createFunctions(AssetInitRequest calldata request) internal {\\n    IFunctionManagement.FunctionRequest[] memory functionRequests = new IFunctionManagement.FunctionRequest[](10);\\n\\n    // assetSafeModeSet\\n    functionRequests[0].adminId = request.adminId;\\n    functionRequests[0].agentId = request.adminId;\\n    functionRequests[0].selector = IAssetEntity.assetSetSafeMode.selector;\\n    functionRequests[0].policyCode = 130;\\n    functionRequests[0].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[0].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    // tokenLock\\n    functionRequests[1].adminId = request.adminId;\\n    functionRequests[1].agentId = request.agentId;\\n    functionRequests[1].selector = IAssetERC20.tokenLock.selector;\\n    functionRequests[1].policyCode = 48;\\n    functionRequests[1].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[1].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    // tokenTransfer\\n    functionRequests[2].adminId = request.adminId;\\n    functionRequests[2].agentId = request.agentId;\\n    functionRequests[2].selector = IAssetERC20.tokenTransfer.selector;\\n    functionRequests[2].policyCode = 96;\\n    functionRequests[2].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[2].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    // tokenBatchTransfer\\n    functionRequests[3].adminId = request.adminId;\\n    functionRequests[3].agentId = request.agentId;\\n    functionRequests[3].selector = IAssetERC20.tokenBatchTransfer.selector;\\n    functionRequests[3].policyCode = 99;\\n    functionRequests[3].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[3].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    // tokenTransferFrom\\n    functionRequests[4].adminId = request.adminId;\\n    functionRequests[4].agentId = request.agentId;\\n    functionRequests[4].selector = IAssetERC20.tokenTransferFrom.selector;\\n    functionRequests[4].policyCode = 110;\\n    functionRequests[4].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[4].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    // tokenBatchTransferFrom\\n    functionRequests[5].adminId = request.adminId;\\n    functionRequests[5].agentId = request.agentId;\\n    functionRequests[5].selector = IAssetERC20.tokenBatchTransferFrom.selector;\\n    functionRequests[5].policyCode = 116;\\n    functionRequests[5].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[5].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    // tokenApprove\\n    functionRequests[6].adminId = request.adminId;\\n    functionRequests[6].agentId = request.agentId;\\n    functionRequests[6].selector = IAssetERC20.tokenApprove.selector;\\n    functionRequests[6].policyCode = 150;\\n    functionRequests[6].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[6].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    // tokenIncreaseAllowance\\n    functionRequests[7].adminId = request.adminId;\\n    functionRequests[7].agentId = request.agentId;\\n    functionRequests[7].selector = IAssetERC20.tokenIncreaseAllowance.selector;\\n    functionRequests[7].policyCode = 160;\\n    functionRequests[7].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[7].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    // tokenDecreaseAllowance\\n    functionRequests[8].adminId = request.adminId;\\n    functionRequests[8].agentId = request.agentId;\\n    functionRequests[8].selector = IAssetERC20.tokenDecreaseAllowance.selector;\\n    functionRequests[8].policyCode = 160;\\n    functionRequests[8].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[8].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    // withdrawBalance\\n    functionRequests[9].adminId = request.adminId;\\n    functionRequests[9].agentId = request.agentId;\\n    functionRequests[9].selector = this.withdrawBalance.selector;\\n    functionRequests[9].policyCode = 24;\\n    functionRequests[9].acstat = IACLCommons.ActivityStatus.ENABLED;\\n    functionRequests[9].alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n\\n    IFunctionManagement.FunctionRegisterRequest[] memory requests = new IFunctionManagement.FunctionRegisterRequest[](\\n      1\\n    );\\n    requests[0].signature = request.signature;\\n    requests[0].realmId = request.realmId;\\n    requests[0].salt = request.salt;\\n    requests[0].name = request.contractName;\\n    requests[0].version = request.contractVersion;\\n    requests[0].subject = request.subjectId;\\n    requests[0].deployer = request.assetManagerId;\\n    requests[0].contractId = address(0);\\n    requests[0].functions = functionRequests;\\n\\n    IACLCommons.MemberSignature memory memberSignRequest = IACLCommons.MemberSignature({\\n      account: address(0),\\n      expiredAt: 0,\\n      signature: bytes(\\\"\\\")\\n    });\\n\\n    IFunctionManagement(_accessControlId).functionRegister(memberSignRequest, requests);\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IAssetEntity).interfaceId ||\\n      interfaceId == type(IAssetERC20).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function tokenLock(IERC20Lock.LockTokenRequest[] calldata lockRequests) external returns (bytes32[] memory) {\\n    _policyInterceptor(this.tokenLock.selector);\\n    for (uint256 i = 0; i < lockRequests.length; i++) {\\n      require(lockRequests[i].source == address(this), \\\"Illegal Address\\\");\\n    }\\n\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenLock.selector);\\n    return IERC20Lock(_erc20TokenId).lockToken(lockRequests);\\n  }\\n\\n  function tokenTransfer(address to, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.tokenTransfer.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenTransfer.selector);\\n    return IERC20(_erc20TokenId).transfer(to, amount);\\n  }\\n\\n  function tokenBatchTransfer(IERC20Extra.BatchTransferRequest[] calldata request) external returns (bool) {\\n    _policyInterceptor(this.tokenBatchTransfer.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenBatchTransfer.selector);\\n    return IERC20Extra(_erc20TokenId).batchTransfer(request);\\n  }\\n\\n  function tokenTransferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool) {\\n    _policyInterceptor(this.tokenTransferFrom.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenTransferFrom.selector);\\n    return IERC20(_erc20TokenId).transferFrom(from, to, amount);\\n  }\\n\\n  function tokenBatchTransferFrom(IERC20Extra.BatchTransferFromRequest[] calldata request) external returns (bool) {\\n    _policyInterceptor(this.tokenBatchTransferFrom.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenBatchTransferFrom.selector);\\n    return IERC20Extra(_erc20TokenId).batchTransferFrom(request);\\n  }\\n\\n  function tokenApprove(address spender, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.tokenApprove.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenApprove.selector);\\n    return IERC20(_erc20TokenId).approve(spender, amount);\\n  }\\n\\n  function tokenIncreaseAllowance(address spender, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.tokenIncreaseAllowance.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenIncreaseAllowance.selector);\\n    return IERC20Extra(_erc20TokenId).increaseAllowance(spender, amount);\\n  }\\n\\n  function tokenDecreaseAllowance(address spender, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.tokenDecreaseAllowance.selector);\\n    emit AssetERC20Called(_msgSender(), address(this), this.tokenDecreaseAllowance.selector);\\n    return IERC20Extra(_erc20TokenId).decreaseAllowance(spender, amount);\\n  }\\n\\n  function assetSetSafeMode(AssetSafeModeStatus status) public override returns (bool) {\\n    IACL.AuthorizationStatus aclStatus = IACL(_accessControlId).hasAccountAccess(\\n      address(this),\\n      this.assetSetSafeMode.selector,\\n      _msgSender()\\n    );\\n    if (aclStatus != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(aclStatus);\\n    require(_getInitializedCount() > 0, \\\"NOT INIT\\\");\\n    _assetSafeModeStatus = status;\\n    emit AssetSafeModeUpdated(_msgSender(), address(this), status);\\n    return true;\\n  }\\n\\n  function withdrawBalance(address recepient) public {\\n    _policyInterceptor(this.withdrawBalance.selector);\\n    payable(recepient).transfer(address(this).balance);\\n  }\\n\\n  function assetSafeMode() external view returns (AssetSafeModeStatus) {\\n    return _assetSafeModeStatus;\\n  }\\n\\n  function assetType() external pure returns (AssetType) {\\n    return AssetType.ERC20;\\n  }\\n\\n  function assetToken() external view returns (address) {\\n    return _erc20TokenId;\\n  }\\n\\n  function assetName() external view returns (string memory) {\\n    return _contractName;\\n  }\\n\\n  function assetVersion() external view returns (string memory) {\\n    return _contractVersion;\\n  }\\n\\n  function assetAccessControl() external view returns (address) {\\n    return _accessControlId;\\n  }\\n\\n  function assetInitVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  function assetBalance() external view returns (uint256) {\\n    return IERC20(_erc20TokenId).balanceOf(address(this));\\n  }\\n\\n  function assetInfo() external view returns (AssetInfo memory) {\\n    return\\n      AssetInfo({\\n        balance: IERC20(_erc20TokenId).balanceOf(address(this)),\\n        name: _contractName,\\n        version: _contractVersion,\\n        token: _erc20TokenId,\\n        accessControl: _accessControlId,\\n        initVersion: _getInitializedCount(),\\n        atype: AssetType.ERC20,\\n        status: _assetSafeModeStatus\\n      });\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable {}\\n\\n  function balance() public view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  function _policyInterceptor(bytes4 funcSelector) private {\\n    require(_assetSafeModeStatus == AssetSafeModeStatus.DISABLED, \\\"Rejected\\\");\\n    IACL.AuthorizationStatus aclStatus = IACL(_accessControlId).hasAccountAccess(\\n      address(this),\\n      funcSelector,\\n      _msgSender()\\n    );\\n    if (aclStatus != IACL.AuthorizationStatus.PERMITTED) revert IACL.ACLActionForbidden(aclStatus);\\n  }\\n}\\n\",\"keccak256\":\"0xc694e7666e3ef3af1eebb9b9c8910d02266b04ef2f749b520b63fefcfc80aea5\",\"license\":\"MIT\"},\"src/contracts/token/asset/ERC20/IAssetERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../lively/IERC20Extra.sol\\\";\\nimport \\\"../../lively/IERC20Lock.sol\\\";\\n\\n/**\\n * @title Asset ERC20 Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IAssetERC20 {\\n  event AssetERC20Called(address indexed sender, address indexed assetId, bytes4 indexed functionSelector);\\n\\n  function tokenLock(IERC20Lock.LockTokenRequest[] calldata lockRequests) external returns (bytes32[] memory);\\n\\n  function tokenTransfer(address to, uint256 amount) external returns (bool);\\n\\n  function tokenBatchTransfer(IERC20Extra.BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function tokenTransferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function tokenBatchTransferFrom(IERC20Extra.BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function tokenApprove(address spender, uint256 amount) external returns (bool);\\n\\n  function tokenIncreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function tokenDecreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x1606b4bd6c2b34dbaca75c8cc5a7fb63e92f2823926f12a52d672ed338774b3f\",\"license\":\"MIT\"},\"src/contracts/token/asset/IAssetEntity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Asset Entity Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IAssetEntity {\\n  enum AssetSafeModeStatus {\\n    NONE,\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum AssetType {\\n    NONE,\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n  }\\n\\n  struct AssetInitRequest {\\n    bytes32 realmId;\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes32 salt;\\n    address subjectId;\\n    address erc20TokenId;\\n    address accessControlId;\\n    address assetManagerId;\\n    address assetContractId;\\n    string contractName;\\n    string contractVersion;\\n    bytes signature;\\n  }\\n\\n  struct AssetInfo {\\n    uint256 balance;\\n    string name;\\n    string version;\\n    address token;\\n    address accessControl;\\n    uint16 initVersion;\\n    AssetType atype;\\n    AssetSafeModeStatus status;\\n  }\\n\\n  event AssetInitialized(\\n    address indexed sender,\\n    address indexed assetId,\\n    address indexed tokenId,\\n    address assetManagerId,\\n    address assetSubjectId\\n  );\\n\\n  event AssetSafeModeUpdated(address indexed sender, address indexed assetId, AssetSafeModeStatus status);\\n\\n  function assetInitialize(AssetInitRequest calldata request) external returns (bool);\\n\\n  function assetSetSafeMode(AssetSafeModeStatus status) external returns (bool);\\n\\n  function assetSafeMode() external view returns (AssetSafeModeStatus);\\n\\n  function assetType() external view returns (AssetType);\\n\\n  function assetToken() external view returns (address);\\n\\n  function assetName() external view returns (string memory);\\n\\n  function assetVersion() external view returns (string memory);\\n\\n  function assetAccessControl() external view returns (address);\\n\\n  function assetInitVersion() external view returns (uint16);\\n\\n  function assetBalance() external view returns (uint256);\\n\\n  function assetInfo() external view returns (AssetInfo memory);\\n}\\n\",\"keccak256\":\"0x741d681fe8de7b1ac608f14342eb0afaa9676f8ba178e14e568db2097ae9514d\",\"license\":\"MIT\"},\"src/contracts/token/asset/IAssetManagerERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IAssetEntity.sol\\\";\\n\\n/**\\n * @title Asset Manager ERC20 Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IAssetManagerERC20 {\\n  struct AssetCreateRequest {\\n    bytes32 adminId;\\n    bytes32 agentId;\\n    bytes32 realmId;\\n    bytes32 salt;\\n    address tokenId;\\n    address assetId;\\n    string assetName;\\n    string assetVersion;\\n  }\\n\\n  struct AssetActionRequest {\\n    address tokenId;\\n    address assetId;\\n  }\\n\\n  struct AssetTokenActionRequest {\\n    address tokenId;\\n    address assetSubjectId;\\n    bytes assetSignature;\\n  }\\n\\n  struct AssetTokenSafeModeRequest {\\n    address tokenId;\\n    IAssetEntity.AssetSafeModeStatus status;\\n  }\\n\\n  struct TokenInfo {\\n    address assetSubjectId;\\n    address[] assets;\\n    bytes assetSignature;\\n  }\\n\\n  event TokenUpdated(address indexed sender, address indexed tokenId, address indexed assetSubjectId);\\n\\n  event TokenRegistered(\\n    address indexed sender,\\n    address indexed tokenId,\\n    address indexed assetSubjectId,\\n    string tokenName,\\n    string tokenSymbol\\n  );\\n\\n  event AssetCreated(address indexed sender, address indexed assetId, address indexed tokenId);\\n\\n  event AssetRegistered(address indexed sender, address indexed assetId, address indexed tokenId);\\n\\n  event AssetRemoved(address indexed sender, address indexed assetId, address indexed tokenId);\\n\\n  function createAsset(AssetCreateRequest[] calldata requests) external returns (bool);\\n\\n  function registerAsset(AssetActionRequest[] calldata requests) external returns (bool);\\n\\n  function removeAsset(AssetActionRequest[] calldata requests) external returns (bool);\\n\\n  function registerToken(AssetTokenActionRequest[] calldata requests) external returns (bool);\\n\\n  function updateToken(AssetTokenActionRequest[] calldata requests) external returns (bool);\\n\\n  function setSafeModeAssets(AssetTokenSafeModeRequest[] calldata requests) external returns (bool);\\n\\n  function getSafeModeAsset(address assetId) external view returns (IAssetEntity.AssetSafeModeStatus);\\n\\n  function getAllTokens() external view returns (address[] memory);\\n\\n  function getTokenInfo(address tokenId) external view returns (TokenInfo memory);\\n\\n  function isAssetExists(address assetId) external view returns (bool);\\n\\n  function isTokenExists(address tokenId) external view returns (bool);\\n\\n  function predictAddress(\\n    address implementation,\\n    bytes32 salt,\\n    address deployer\\n  ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xce43795ca45ae01d60dc46a3bf737d26ee82dec7437cf05f9ce0f7b4c33353a6\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ERC20 Token Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IERC20 {\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x263733c522826e43a3ca283e264365c50357f12d806ab185163c012142890898\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Extra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ERC20 Token Extra Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IERC20Extra {\\n  struct BatchTransferRequest {\\n    address to;\\n    uint256 amount;\\n  }\\n\\n  struct BatchTransferFromRequest {\\n    address from;\\n    address to;\\n    uint256 amount;\\n  }\\n\\n  struct TaxWhitelistUpdateRequest {\\n    address account;\\n    bool isDeleted;\\n  }\\n\\n  event ApprovalIncreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event ApprovalDecreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event TransferFrom(address indexed sender, address indexed from, address indexed to, uint256 amount);\\n\\n  event BatchTransfer(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTransferFrom(address indexed sender, uint256 totalAmount);\\n\\n  event TaxRateUpdated(address indexed sender, uint256 rate);\\n\\n  event TaxWhitelistUpdated(address indexed sender, address indexed account, bool isDeleted);\\n\\n  event Burn(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  event Mint(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  function increaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function decreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function burn(address account, uint256 amount) external returns (uint256);\\n\\n  function mint(address account, uint256 amount) external returns (uint256);\\n\\n  function batchTransfer(BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function batchTransferFrom(BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function updateTaxRate(uint256 taxRate) external returns (bool);\\n\\n  // function updateTaxWhitelist(address account, bool isDeleted) external returns (bool);\\n\\n  function updateTaxWhitelist(TaxWhitelistUpdateRequest[] calldata request) external returns (bool);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    bytes calldata signature\\n  ) external returns (bool);\\n\\n  function taxRate() external view returns (uint256);\\n\\n  function taxTreasury() external view returns (address);\\n\\n  function taxWhitelist() external view returns (address[] memory);\\n\\n  function nonce(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x16c99d17574e51329d990100a53104b81bd82db6e25e0d370ab2ae77bc23ad5b\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ERC20 Token Lock Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IERC20Lock {\\n  enum LockState {\\n    NONE,\\n    LOCKED,\\n    CLAIMED,\\n    UNLOCKED\\n  }\\n\\n  struct LockTokenRequest {\\n    address source;\\n    address dest;\\n    uint256 claimAt;\\n    uint256 amount;\\n  }\\n\\n  struct UnLockTokenRequest {\\n    bytes32 lockId;\\n    address account;\\n    string reason;\\n  }\\n\\n  struct LockInfo {\\n    uint256 amount;\\n    uint128 lockedAt;\\n    uint128 claimedAt;\\n    address source;\\n    LockState stat;\\n  }\\n\\n  event TokenLocked(\\n    bytes32 indexed id,\\n    address indexed sender,\\n    address indexed src,\\n    address account,\\n    uint256 claimAt,\\n    uint256 amount\\n  );\\n\\n  event TokenClaimed(bytes32 indexed id, address indexed sender, address indexed src, uint256 amount);\\n\\n  event TokenUnlocked(\\n    bytes32 indexed id,\\n    address indexed sender,\\n    address indexed account,\\n    address dest,\\n    uint256 amount,\\n    string reason\\n  );\\n\\n  function lockToken(LockTokenRequest[] calldata lockRequest) external returns (bytes32[] memory);\\n\\n  function unlockToken(UnLockTokenRequest[] calldata unlockRequest) external returns (uint256);\\n\\n  function claimToken(bytes32[] calldata lockIds) external returns (uint256);\\n\\n  function lockInfo(bytes32 lockId, address account) external view returns (LockInfo memory);\\n\\n  function totalBalanceOf(address account) external view returns (uint256);\\n\\n  function lockBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5ffdd8cad41daccfba39396ace4fe8fd984886f95fa4d4b4914fca9079bc778a\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xd4388084c83f15ac54be8d4e28a9d0f7be51c87efc357a33e7080e9769d5553a\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x95ac867088cd7cca6d583788b83e56e0c521c847aa9844f6184c14f5ce3ddf90\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Abstract Message Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x9fe52fdf93ebcdcbe224c4eba70bd3d8f6b4479fcc67d681b18070975d1ba970\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506004805460ff1916600217905561371a8061002d6000396000f3fe60806040526004361061012d5760003560e01c80639c7597b2116100a5578063b69ef8a81161006c578063b69ef8a814610373578063c66f245514610386578063c9230c5d1461039b578063cce6d801146103b0578063e9dbebbd146103dd578063fc524064146103fd57005b80639c7597b2146102bb5780639e00fcc2146102db578063a33b1229146102fe578063a40bee5014610323578063a52e8e601461034557005b80634cfb9949116100f45780634cfb9949146101fb5780635d8092c81461021b57806368cdafe61461023b578063756af45f1461025b578063961974ba1461027b5780639c42c5ec1461029b57005b806301ffc9a7146101365780630cd689f51461016b5780631083f7611461018b5780633c872e5f146101bd5780633fe3347a146101df57005b3661013457005b005b34801561014257600080fd5b50610156610151366004612af8565b61041d565b60405190151581526020015b60405180910390f35b34801561017757600080fd5b50610156610186366004612b3e565b61046f565b34801561019757600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610162565b3480156101c957600080fd5b506101d2610524565b6040516101629190612bae565b3480156101eb57600080fd5b5060016040516101629190612bf7565b34801561020757600080fd5b5060045460ff166040516101629190612c1a565b34801561022757600080fd5b50610156610236366004612c28565b6105b6565b34801561024757600080fd5b50610156610256366004612b3e565b610bb4565b34801561026757600080fd5b50610134610276366004612c64565b610c23565b34801561028757600080fd5b50610156610296366004612c7f565b610c6c565b3480156102a757600080fd5b506101566102b6366004612cbb565b610d29565b3480156102c757600080fd5b506101566102d6366004612d30565b610d91565b3480156102e757600080fd5b5060005460405161ffff9091168152602001610162565b34801561030a57600080fd5b50600054630100000090046001600160a01b03166101a5565b34801561032f57600080fd5b50610338610eff565b6040516101629190612d51565b34801561035157600080fd5b50610365610360366004612b3e565b611147565b604051908152602001610162565b34801561037f57600080fd5b5047610365565b34801561039257600080fd5b506103656111f5565b3480156103a757600080fd5b506101d2611262565b3480156103bc57600080fd5b506103d06103cb366004612e05565b611271565b6040516101629190612e68565b3480156103e957600080fd5b506101566103f8366004612eac565b6113af565b34801561040957600080fd5b50610365610418366004612b3e565b611417565b60006001600160e01b03198216630225567160e21b148061044e57506001600160e01b031982166312016afd60e01b145b8061046957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610481630cd689f560e01b611486565b604051630cd689f560e01b90309033906000805160206136c583398151915290600090a460015460405163095ea7b360e01b81526001600160a01b038581166004830152602482018590529091169063095ea7b3906044015b6020604051808303816000875af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190612f0f565b9392505050565b60606003805461053390612f31565b80601f016020809104026020016040519081016040528092919081815260200182805461055f90612f31565b80156105ac5780601f10610581576101008083540402835291602001916105ac565b820191906000526020600020905b81548152906001019060200180831161058f57829003601f168201915b5050505050905090565b6000805462010000900460ff16158080156105d95750600054600161ffff909116105b806105f45750303b1580156105f4575060005461ffff166001145b6106455760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a65640000000060448201526064015b60405180910390fd5b6000805461ffff19166001179055801561066b576000805462ff00001916620100001790555b61067b60c0840160a08501612c64565b6001600160a01b03166301ffc9a7634a17459160e11b6040518263ffffffff1660e01b81526004016106ad9190612f65565b602060405180830381865afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ee9190612f0f565b61072f5760405162461bcd60e51b815260206004820152601260248201527124b63632b3b0b61022a92199182a37b5b2b760711b604482015260640161063c565b61073f60c0840160a08501612c64565b6001600160a01b03166301ffc9a76362fdb5fb60e11b6040518263ffffffff1660e01b81526004016107719190612f65565b602060405180830381865afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190612f0f565b6107fe5760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204552433230546f6b656e4578747261000000000000000000604482015260640161063c565b61080e60c0840160a08501612c64565b6001600160a01b03166301ffc9a7632169b68d60e01b6040518263ffffffff1660e01b81526004016108409190612f65565b602060405180830381865afa15801561085d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108819190612f0f565b6108c65760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c204552433230546f6b656e4c6f636b60501b604482015260640161063c565b6108d660e0840160c08501612c64565b6001600160a01b03166301ffc9a76331501c3960e01b6040518263ffffffff1660e01b81526004016109089190612f65565b602060405180830381865afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190612f0f565b6109835760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b604482015260640161063c565b610994610100840160e08501612c64565b6001600160a01b03166301ffc9a7631929a3e160e31b6040518263ffffffff1660e01b81526004016109c69190612f65565b602060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190612f0f565b610a535760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204941737365744d616e616765724552433230000000000000604482015260640161063c565b610a61610120840184612f7a565b600291610a6f91908361302d565b50610a7e610140840184612f7a565b600391610a8c91908361302d565b50610a9d60c0840160a08501612c64565b600180546001600160a01b0319166001600160a01b0392909216919091179055610acd60e0840160c08501612c64565b600080546001600160a01b03929092166301000000026301000000600160b81b03199092169190911790556004805460ff19166001179055610b0e8361158a565b610b17836119f3565b610b2760c0840160a08501612c64565b6001600160a01b031630337f7738a5bc2a6dc8d01c6b4bd210d00e752c9781719e21d69a9f11a47f80b964b2610b64610100880160e08901612c64565b610b7460a0890160808a01612c64565b604080516001600160a01b0393841681529290911660208301520160405180910390a4600191508015610bae576000805462ff0000191690555b50919050565b6000610bc6633466d7f360e11b611486565b604051633466d7f360e11b90309033906000805160206136c583398151915290600090a460015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016104da565b610c3363756af45f60e01b611486565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610c68573d6000803e3d6000fd5b5050565b6000610c7e634b0cba5d60e11b611486565b604051634b0cba5d60e11b90309033906000805160206136c583398151915290600090a46001546040516323b872dd60e01b81526001600160a01b038681166004830152858116602483015260448201859052909116906323b872dd906064016020604051808303816000875af1158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190612f0f565b949350505050565b6000610d3b632710b17b60e21b611486565b604051632710b17b60e21b90309033906000805160206136c583398151915290600090a460015460405163038d251d60e31b81526001600160a01b0390911690631c6928e8906104da90869086906004016130ed565b6000805460405163172cb29d60e11b81528291630100000090046001600160a01b031690632e59653a90610dd4903090634e3acbd960e11b903390600401613159565b6020604051808303816000875af1158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190613186565b90506000816013811115610e2d57610e2d612bc1565b14610e4d5780604051637f0911d160e01b815260040161063c91906131a7565b60005461ffff16610e8b5760405162461bcd60e51b81526020600482015260086024820152671393d5081253925560c21b604482015260640161063c565b6004805484919060ff19166001836002811115610eaa57610eaa612bc1565b021790555030336001600160a01b03167f28f96d72c32e5791a0cb87cd75ccd24d30671b1044c06512ab88be89b053b8ca85604051610ee99190612c1a565b60405180910390a350600192915050565b905090565b610f47604080516101008101825260008082526060602083018190529282018390529181018290526080810182905260a081018290529060c082019081526020016000905290565b604080516101008101918290526001546370a0823160e01b909252306101048201529081906001600160a01b03166370a082316101248301602060405180830381865afa158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc091906131bb565b815260200160028054610fd290612f31565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffe90612f31565b801561104b5780601f106110205761010080835404028352916020019161104b565b820191906000526020600020905b81548152906001019060200180831161102e57829003601f168201915b505050505081526020016003805461106290612f31565b80601f016020809104026020016040519081016040528092919081815260200182805461108e90612f31565b80156110db5780601f106110b0576101008083540402835291602001916110db565b820191906000526020600020905b8154815290600101906020018083116110be57829003601f168201915b50505091835250506001546001600160a01b0390811660208301526000546301000000900416604082015260600161111660005461ffff1690565b61ffff1681526020016001815260045460209091019060ff16600281111561114057611140612bc1565b9052919050565b6000611159630529747360e51b611486565b604051630529747360e51b90309033906000805160206136c583398151915290600090a460015460405163a457c2d760e01b81526001600160a01b038581166004830152602482018590529091169063a457c2d7906044015b6020604051808303816000875af11580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d91906131bb565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561123e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efa91906131bb565b60606002805461053390612f31565b606061128363cce6d80160e01b611486565b60005b8281101561131157308484838181106112a1576112a16131d4565b6112b79260206080909202019081019150612c64565b6001600160a01b0316146112ff5760405162461bcd60e51b815260206004820152600f60248201526e496c6c6567616c204164647265737360881b604482015260640161063c565b80611309816131ea565b915050611286565b5060405163cce6d80160e01b90309033906000805160206136c583398151915290600090a46001546040516374bb18e760e01b81526001600160a01b03909116906374bb18e7906113689086908690600401613211565b6000604051808303816000875af1158015611387573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051d919081019061327a565b60006113c163e9dbebbd60e01b611486565b60405163e9dbebbd60e01b90309033906000805160206136c583398151915290600090a4600154604051631f54aa5560e31b81526001600160a01b039091169063faa552a8906104da9086908690600401613338565b6000611429633f14901960e21b611486565b604051633f14901960e21b90309033906000805160206136c583398151915290600090a4600154604051633950935160e01b81526001600160a01b03858116600483015260248201859052909116906339509351906044016111b2565b600160045460ff16600281111561149f5761149f612bc1565b146114d75760405162461bcd60e51b815260206004820152600860248201526714995a9958dd195960c21b604482015260640161063c565b60008054630100000090046001600160a01b0316632e59653a3084336040518463ffffffff1660e01b815260040161151193929190613159565b6020604051808303816000875af1158015611530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115549190613186565b9050600081601381111561156a5761156a612bc1565b14610c685780604051637f0911d160e01b815260040161063c91906131a7565b604080516001808252818301909252600091816020015b61160660408051610180810182526000808252602082018190529181018290526060808201819052608082015260a0810182905260c0810182905260e08101829052610100810182905290610120820190815260200160008152602001606081525090565b8152602001906001900390816115a1579050509050816000013581600081518110611633576116336131d4565b6020026020010151600001818152505081602001358160008151811061165b5761165b6131d4565b60200260200101516020018181525050816060013581600081518110611683576116836131d4565b6020908102919091010151604001526116a0610120830183612f7a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508551869450909250151590506116e8576116e86131d4565b602090810291909101015160600152611705610140830183612f7a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525085518694509092501515905061174d5761174d6131d4565b60209081029190910101516080015261176e61012083016101008401612c64565b81600081518110611781576117816131d4565b60209081029190910101516001600160a01b0390911660a0918201526117ac90830160808401612c64565b816000815181106117bf576117bf6131d4565b60209081029190910101516001600160a01b0390911660c0909101526117ec610100830160e08401612c64565b816000815181106117ff576117ff6131d4565b602002602001015160e001906001600160a01b031690816001600160a01b031681525050602081600081518110611838576118386131d4565b6020026020010151610100019060010b908160010b81525050600381600081518110611866576118666131d4565b60200260200101516101200190600381111561188457611884612bc1565b9081600381111561189757611897612bc1565b815250506003816000815181106118b0576118b06131d4565b6020026020010151610140019060038111156118ce576118ce612bc1565b908160038111156118e1576118e1612bc1565b9052506118f2610160830183612f7a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525085518694509092501515905061193a5761193a6131d4565b6020908102919091018101516101600191909152604080516060810182526000808252818401819052825193840183528084528183019390935291549051630830abaf60e31b815263010000009091046001600160a01b0316906341855d78906119aa90849086906004016133bd565b6020604051808303816000875af11580156119c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ed9190612f0f565b50505050565b60408051600a8082526101608201909252600091816020015b611a446040805160c0810182526000808252602082018190529181018290526060810182905290608082019081526020016000905290565b815260200190600190039081611a0c579050509050816020013581600081518110611a7157611a716131d4565b60200260200101516000018181525050816020013581600081518110611a9957611a996131d4565b60200260200101516020018181525050639c7597b260e01b81600081518110611ac457611ac46131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050608281600081518110611aff57611aff6131d4565b60200260200101516060019060ff16908160ff1681525050600381600081518110611b2c57611b2c6131d4565b6020026020010151608001906003811115611b4957611b49612bc1565b90816003811115611b5c57611b5c612bc1565b81525050600281600081518110611b7557611b756131d4565b602002602001015160a001906003811115611b9257611b92612bc1565b90816003811115611ba557611ba5612bc1565b81525050816020013581600181518110611bc157611bc16131d4565b60200260200101516000018181525050816040013581600181518110611be957611be96131d4565b6020026020010151602001818152505063cce6d80160e01b81600181518110611c1457611c146131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050603081600181518110611c4f57611c4f6131d4565b60200260200101516060019060ff16908160ff1681525050600381600181518110611c7c57611c7c6131d4565b6020026020010151608001906003811115611c9957611c99612bc1565b90816003811115611cac57611cac612bc1565b81525050600281600181518110611cc557611cc56131d4565b602002602001015160a001906003811115611ce257611ce2612bc1565b90816003811115611cf557611cf5612bc1565b81525050816020013581600281518110611d1157611d116131d4565b60200260200101516000018181525050816040013581600281518110611d3957611d396131d4565b602002602001015160200181815250506368cdafe660e01b81600281518110611d6457611d646131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050606081600281518110611d9f57611d9f6131d4565b60200260200101516060019060ff16908160ff1681525050600381600281518110611dcc57611dcc6131d4565b6020026020010151608001906003811115611de957611de9612bc1565b90816003811115611dfc57611dfc612bc1565b81525050600281600281518110611e1557611e156131d4565b602002602001015160a001906003811115611e3257611e32612bc1565b90816003811115611e4557611e45612bc1565b81525050816020013581600381518110611e6157611e616131d4565b60200260200101516000018181525050816040013581600381518110611e8957611e896131d4565b6020026020010151602001818152505063e9dbebbd60e01b81600381518110611eb457611eb46131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050606381600381518110611eef57611eef6131d4565b60200260200101516060019060ff16908160ff1681525050600381600381518110611f1c57611f1c6131d4565b6020026020010151608001906003811115611f3957611f39612bc1565b90816003811115611f4c57611f4c612bc1565b81525050600281600381518110611f6557611f656131d4565b602002602001015160a001906003811115611f8257611f82612bc1565b90816003811115611f9557611f95612bc1565b81525050816020013581600481518110611fb157611fb16131d4565b60200260200101516000018181525050816040013581600481518110611fd957611fd96131d4565b6020026020010151602001818152505063961974ba60e01b81600481518110612004576120046131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050606e8160048151811061203f5761203f6131d4565b60200260200101516060019060ff16908160ff168152505060038160048151811061206c5761206c6131d4565b602002602001015160800190600381111561208957612089612bc1565b9081600381111561209c5761209c612bc1565b815250506002816004815181106120b5576120b56131d4565b602002602001015160a0019060038111156120d2576120d2612bc1565b908160038111156120e5576120e5612bc1565b81525050816020013581600581518110612101576121016131d4565b60200260200101516000018181525050816040013581600581518110612129576121296131d4565b60200260200101516020018181525050639c42c5ec60e01b81600581518110612154576121546131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b0319168152505060748160058151811061218f5761218f6131d4565b60200260200101516060019060ff16908160ff16815250506003816005815181106121bc576121bc6131d4565b60200260200101516080019060038111156121d9576121d9612bc1565b908160038111156121ec576121ec612bc1565b81525050600281600581518110612205576122056131d4565b602002602001015160a00190600381111561222257612222612bc1565b9081600381111561223557612235612bc1565b81525050816020013581600681518110612251576122516131d4565b60200260200101516000018181525050816040013581600681518110612279576122796131d4565b60200260200101516020018181525050630cd689f560e01b816006815181106122a4576122a46131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b031916815250506096816006815181106122df576122df6131d4565b60200260200101516060019060ff16908160ff168152505060038160068151811061230c5761230c6131d4565b602002602001015160800190600381111561232957612329612bc1565b9081600381111561233c5761233c612bc1565b81525050600281600681518110612355576123556131d4565b602002602001015160a00190600381111561237257612372612bc1565b9081600381111561238557612385612bc1565b815250508160200135816007815181106123a1576123a16131d4565b602002602001015160000181815250508160400135816007815181106123c9576123c96131d4565b6020026020010151602001818152505063fc52406460e01b816007815181106123f4576123f46131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b0319168152505060a08160078151811061242f5761242f6131d4565b60200260200101516060019060ff16908160ff168152505060038160078151811061245c5761245c6131d4565b602002602001015160800190600381111561247957612479612bc1565b9081600381111561248c5761248c612bc1565b815250506002816007815181106124a5576124a56131d4565b602002602001015160a0019060038111156124c2576124c2612bc1565b908160038111156124d5576124d5612bc1565b815250508160200135816008815181106124f1576124f16131d4565b60200260200101516000018181525050816040013581600881518110612519576125196131d4565b6020026020010151602001818152505063a52e8e6060e01b81600881518110612544576125446131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b0319168152505060a08160088151811061257f5761257f6131d4565b60200260200101516060019060ff16908160ff16815250506003816008815181106125ac576125ac6131d4565b60200260200101516080019060038111156125c9576125c9612bc1565b908160038111156125dc576125dc612bc1565b815250506002816008815181106125f5576125f56131d4565b602002602001015160a00190600381111561261257612612612bc1565b9081600381111561262557612625612bc1565b81525050816020013581600981518110612641576126416131d4565b60200260200101516000018181525050816040013581600981518110612669576126696131d4565b6020026020010151602001818152505063756af45f60e01b81600981518110612694576126946131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b031916815250506018816009815181106126cf576126cf6131d4565b60200260200101516060019060ff16908160ff16815250506003816009815181106126fc576126fc6131d4565b602002602001015160800190600381111561271957612719612bc1565b9081600381111561272c5761272c612bc1565b81525050600281600981518110612745576127456131d4565b602002602001015160a00190600381111561276257612762612bc1565b9081600381111561277557612775612bc1565b905250604080516001808252818301909252600091816020015b60408051610120810182526060808252600060208084018290529383018190528183018290526080830182905260a0830181905260c0830181905260e0830152610100820152825260001990920191018161278f5790505090506127f7610160840184612f7a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525085518694509092501515905061283f5761283f6131d4565b602002602001015160000181905250826000013581600081518110612866576128666131d4565b6020026020010151602001818152505082606001358160008151811061288e5761288e6131d4565b6020908102919091010151604001526128ab610120840184612f7a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508551869450909250151590506128f3576128f36131d4565b602090810291909101015160600152612910610140840184612f7a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250855186945090925015159050612958576129586131d4565b60200260200101516080018190525082608001602081019061297a9190612c64565b8160008151811061298d5761298d6131d4565b60209081029190910101516001600160a01b0390911660a0909101526129ba610100840160e08501612c64565b816000815181106129cd576129cd6131d4565b602002602001015160c001906001600160a01b031690816001600160a01b031681525050600081600081518110612a0657612a066131d4565b602002602001015160e001906001600160a01b031690816001600160a01b0316815250508181600081518110612a3e57612a3e6131d4565b602090810291909101810151610100019190915260408051606081018252600080825281840181905282519384018352808452818301939093529154905163bd63781360e01b815263010000009091046001600160a01b03169063bd63781390612aae90849086906004016135a8565b6020604051808303816000875af1158015612acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af19190612f0f565b5050505050565b600060208284031215612b0a57600080fd5b81356001600160e01b03198116811461051d57600080fd5b80356001600160a01b0381168114612b3957600080fd5b919050565b60008060408385031215612b5157600080fd5b612b5a83612b22565b946020939093013593505050565b6000815180845260005b81811015612b8e57602081850181015186830182015201612b72565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061051d6020830184612b68565b634e487b7160e01b600052602160045260246000fd5b60048110612be757612be7612bc1565b50565b612bf381612bd7565b9052565b60208101612c0483612bd7565b91905290565b60038110612bf357612bf3612bc1565b602081016104698284612c0a565b600060208284031215612c3a57600080fd5b813567ffffffffffffffff811115612c5157600080fd5b8201610180818503121561051d57600080fd5b600060208284031215612c7657600080fd5b61051d82612b22565b600080600060608486031215612c9457600080fd5b612c9d84612b22565b9250612cab60208501612b22565b9150604084013590509250925092565b60008060208385031215612cce57600080fd5b823567ffffffffffffffff80821115612ce657600080fd5b818501915085601f830112612cfa57600080fd5b813581811115612d0957600080fd5b866020606083028501011115612d1e57600080fd5b60209290920196919550909350505050565b600060208284031215612d4257600080fd5b81356003811061051d57600080fd5b602081528151602082015260006020830151610100806040850152612d7a610120850183612b68565b91506040850151601f19858403016060860152612d978382612b68565b92505060018060a01b0360608601511660808501526080850151612dc660a08601826001600160a01b03169052565b5060a085015161ffff811660c08601525060c0850151612de960e0860182612bea565b5060e0850151612dfb82860182612c0a565b5090949350505050565b60008060208385031215612e1857600080fd5b823567ffffffffffffffff80821115612e3057600080fd5b818501915085601f830112612e4457600080fd5b813581811115612e5357600080fd5b8660208260071b8501011115612d1e57600080fd5b6020808252825182820181905260009190848201906040850190845b81811015612ea057835183529284019291840191600101612e84565b50909695505050505050565b60008060208385031215612ebf57600080fd5b823567ffffffffffffffff80821115612ed757600080fd5b818501915085601f830112612eeb57600080fd5b813581811115612efa57600080fd5b8660208260061b8501011115612d1e57600080fd5b600060208284031215612f2157600080fd5b8151801515811461051d57600080fd5b600181811c90821680612f4557607f821691505b602082108103610bae57634e487b7160e01b600052602260045260246000fd5b6001600160e01b031991909116815260200190565b6000808335601e19843603018112612f9157600080fd5b83018035915067ffffffffffffffff821115612fac57600080fd5b602001915036819003821315612fc157600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b601f82111561302857600081815260208120601f850160051c810160208610156130055750805b601f850160051c820191505b8181101561302457828155600101613011565b5050505b505050565b67ffffffffffffffff83111561304557613045612fc8565b613059836130538354612f31565b83612fde565b6000601f84116001811461308d57600085156130755750838201355b600019600387901b1c1916600186901b178355612af1565b600083815260209020601f19861690835b828110156130be578685013582556020948501946001909201910161309e565b50868210156130db5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6020808252818101839052600090604080840186845b8781101561314c576001600160a01b038061311d84612b22565b1684528061312c878501612b22565b168487015250818401358484015260609283019290910190600101613103565b5090979650505050505050565b6001600160a01b0393841681526001600160e01b0319929092166020830152909116604082015260600190565b60006020828403121561319857600080fd5b81516014811061051d57600080fd5b6020810160148310612c0457612c04612bc1565b6000602082840312156131cd57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161320a57634e487b7160e01b600052601160045260246000fd5b5060010190565b6020808252818101839052600090604080840186845b8781101561314c576001600160a01b038061324184612b22565b16845280613250878501612b22565b16848701525081840135848401526060808301359084015260809283019290910190600101613227565b6000602080838503121561328d57600080fd5b825167ffffffffffffffff808211156132a557600080fd5b818501915085601f8301126132b957600080fd5b8151818111156132cb576132cb612fc8565b8060051b604051601f19603f830116810181811085821117156132f0576132f0612fc8565b60405291825284820192508381018501918883111561330e57600080fd5b938501935b8285101561332c57845184529385019392850192613313565b98975050505050505050565b6020808252818101839052600090604080840186845b8781101561314c576001600160a01b0361336783612b22565b1683528185013585840152918301919083019060010161334e565b60018060a01b03815116825267ffffffffffffffff60208201511660208301526000604082015160606040850152610d216060850182612b68565b600060408083526133d081840186613382565b6020848203818601528186518084528284019150828160051b85010183890160005b8381101561350a57601f198784030185528151610180815185528782015188860152898201518a860152606080830151828288015261343383880182612b68565b925050506080808301518683038288015261344e8382612b68565b9250505060a08083015161346c828801826001600160a01b03169052565b505060c0828101516001600160a01b03811687830152505060e0828101516001600160a01b038116878301525050610100808301516134af8288018260010b9052565b5050610120808301516134c482880182612bea565b5050610140808301516134d982880182612bea565b505061016080830151925085820381870152506134f68183612b68565b9688019694505050908501906001016133f2565b50909a9950505050505050505050565b600081518084526020808501945080840160005b8381101561359d5781518051885283810151848901526040808201516001600160e01b0319169089015260608082015160ff169089015260808082015161357481612bd7565b9089015260a0908101519061358882612bd7565b88015260c0909601959082019060010161352e565b509495945050505050565b600060408083526135bb81840186613382565b6020848203818601528186518084528284019150828160051b85010183890160005b8381101561350a57601f198784030185528151610120815181865261360482870182612b68565b9150508782015188860152898201518a8601526060808301518683038288015261362e8382612b68565b92505050608080830151868303828801526136498382612b68565b9250505060a080830151613667828801826001600160a01b03169052565b505060c0828101516001600160a01b03811687830152505060e0828101516001600160a01b03811687830152505061010080830151925085820381870152506136b0818361351a565b9688019694505050908501906001016135dd56fe33c2ad0e769b5a5e7f07ab57ff61ae195b76839fc48d116ffe8dc881334fa213a2646970667358221220fab52ad3e5408fe894900d8b27133fa860a4e4394d06f7062f4d857b0a1bbaf064736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061012d5760003560e01c80639c7597b2116100a5578063b69ef8a81161006c578063b69ef8a814610373578063c66f245514610386578063c9230c5d1461039b578063cce6d801146103b0578063e9dbebbd146103dd578063fc524064146103fd57005b80639c7597b2146102bb5780639e00fcc2146102db578063a33b1229146102fe578063a40bee5014610323578063a52e8e601461034557005b80634cfb9949116100f45780634cfb9949146101fb5780635d8092c81461021b57806368cdafe61461023b578063756af45f1461025b578063961974ba1461027b5780639c42c5ec1461029b57005b806301ffc9a7146101365780630cd689f51461016b5780631083f7611461018b5780633c872e5f146101bd5780633fe3347a146101df57005b3661013457005b005b34801561014257600080fd5b50610156610151366004612af8565b61041d565b60405190151581526020015b60405180910390f35b34801561017757600080fd5b50610156610186366004612b3e565b61046f565b34801561019757600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610162565b3480156101c957600080fd5b506101d2610524565b6040516101629190612bae565b3480156101eb57600080fd5b5060016040516101629190612bf7565b34801561020757600080fd5b5060045460ff166040516101629190612c1a565b34801561022757600080fd5b50610156610236366004612c28565b6105b6565b34801561024757600080fd5b50610156610256366004612b3e565b610bb4565b34801561026757600080fd5b50610134610276366004612c64565b610c23565b34801561028757600080fd5b50610156610296366004612c7f565b610c6c565b3480156102a757600080fd5b506101566102b6366004612cbb565b610d29565b3480156102c757600080fd5b506101566102d6366004612d30565b610d91565b3480156102e757600080fd5b5060005460405161ffff9091168152602001610162565b34801561030a57600080fd5b50600054630100000090046001600160a01b03166101a5565b34801561032f57600080fd5b50610338610eff565b6040516101629190612d51565b34801561035157600080fd5b50610365610360366004612b3e565b611147565b604051908152602001610162565b34801561037f57600080fd5b5047610365565b34801561039257600080fd5b506103656111f5565b3480156103a757600080fd5b506101d2611262565b3480156103bc57600080fd5b506103d06103cb366004612e05565b611271565b6040516101629190612e68565b3480156103e957600080fd5b506101566103f8366004612eac565b6113af565b34801561040957600080fd5b50610365610418366004612b3e565b611417565b60006001600160e01b03198216630225567160e21b148061044e57506001600160e01b031982166312016afd60e01b145b8061046957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610481630cd689f560e01b611486565b604051630cd689f560e01b90309033906000805160206136c583398151915290600090a460015460405163095ea7b360e01b81526001600160a01b038581166004830152602482018590529091169063095ea7b3906044015b6020604051808303816000875af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190612f0f565b9392505050565b60606003805461053390612f31565b80601f016020809104026020016040519081016040528092919081815260200182805461055f90612f31565b80156105ac5780601f10610581576101008083540402835291602001916105ac565b820191906000526020600020905b81548152906001019060200180831161058f57829003601f168201915b5050505050905090565b6000805462010000900460ff16158080156105d95750600054600161ffff909116105b806105f45750303b1580156105f4575060005461ffff166001145b6106455760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a65640000000060448201526064015b60405180910390fd5b6000805461ffff19166001179055801561066b576000805462ff00001916620100001790555b61067b60c0840160a08501612c64565b6001600160a01b03166301ffc9a7634a17459160e11b6040518263ffffffff1660e01b81526004016106ad9190612f65565b602060405180830381865afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ee9190612f0f565b61072f5760405162461bcd60e51b815260206004820152601260248201527124b63632b3b0b61022a92199182a37b5b2b760711b604482015260640161063c565b61073f60c0840160a08501612c64565b6001600160a01b03166301ffc9a76362fdb5fb60e11b6040518263ffffffff1660e01b81526004016107719190612f65565b602060405180830381865afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190612f0f565b6107fe5760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204552433230546f6b656e4578747261000000000000000000604482015260640161063c565b61080e60c0840160a08501612c64565b6001600160a01b03166301ffc9a7632169b68d60e01b6040518263ffffffff1660e01b81526004016108409190612f65565b602060405180830381865afa15801561085d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108819190612f0f565b6108c65760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c204552433230546f6b656e4c6f636b60501b604482015260640161063c565b6108d660e0840160c08501612c64565b6001600160a01b03166301ffc9a76331501c3960e01b6040518263ffffffff1660e01b81526004016109089190612f65565b602060405180830381865afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190612f0f565b6109835760405162461bcd60e51b815260206004820152600b60248201526a125b1b1959d85b081050d360aa1b604482015260640161063c565b610994610100840160e08501612c64565b6001600160a01b03166301ffc9a7631929a3e160e31b6040518263ffffffff1660e01b81526004016109c69190612f65565b602060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190612f0f565b610a535760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204941737365744d616e616765724552433230000000000000604482015260640161063c565b610a61610120840184612f7a565b600291610a6f91908361302d565b50610a7e610140840184612f7a565b600391610a8c91908361302d565b50610a9d60c0840160a08501612c64565b600180546001600160a01b0319166001600160a01b0392909216919091179055610acd60e0840160c08501612c64565b600080546001600160a01b03929092166301000000026301000000600160b81b03199092169190911790556004805460ff19166001179055610b0e8361158a565b610b17836119f3565b610b2760c0840160a08501612c64565b6001600160a01b031630337f7738a5bc2a6dc8d01c6b4bd210d00e752c9781719e21d69a9f11a47f80b964b2610b64610100880160e08901612c64565b610b7460a0890160808a01612c64565b604080516001600160a01b0393841681529290911660208301520160405180910390a4600191508015610bae576000805462ff0000191690555b50919050565b6000610bc6633466d7f360e11b611486565b604051633466d7f360e11b90309033906000805160206136c583398151915290600090a460015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016104da565b610c3363756af45f60e01b611486565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610c68573d6000803e3d6000fd5b5050565b6000610c7e634b0cba5d60e11b611486565b604051634b0cba5d60e11b90309033906000805160206136c583398151915290600090a46001546040516323b872dd60e01b81526001600160a01b038681166004830152858116602483015260448201859052909116906323b872dd906064016020604051808303816000875af1158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190612f0f565b949350505050565b6000610d3b632710b17b60e21b611486565b604051632710b17b60e21b90309033906000805160206136c583398151915290600090a460015460405163038d251d60e31b81526001600160a01b0390911690631c6928e8906104da90869086906004016130ed565b6000805460405163172cb29d60e11b81528291630100000090046001600160a01b031690632e59653a90610dd4903090634e3acbd960e11b903390600401613159565b6020604051808303816000875af1158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190613186565b90506000816013811115610e2d57610e2d612bc1565b14610e4d5780604051637f0911d160e01b815260040161063c91906131a7565b60005461ffff16610e8b5760405162461bcd60e51b81526020600482015260086024820152671393d5081253925560c21b604482015260640161063c565b6004805484919060ff19166001836002811115610eaa57610eaa612bc1565b021790555030336001600160a01b03167f28f96d72c32e5791a0cb87cd75ccd24d30671b1044c06512ab88be89b053b8ca85604051610ee99190612c1a565b60405180910390a350600192915050565b905090565b610f47604080516101008101825260008082526060602083018190529282018390529181018290526080810182905260a081018290529060c082019081526020016000905290565b604080516101008101918290526001546370a0823160e01b909252306101048201529081906001600160a01b03166370a082316101248301602060405180830381865afa158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc091906131bb565b815260200160028054610fd290612f31565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffe90612f31565b801561104b5780601f106110205761010080835404028352916020019161104b565b820191906000526020600020905b81548152906001019060200180831161102e57829003601f168201915b505050505081526020016003805461106290612f31565b80601f016020809104026020016040519081016040528092919081815260200182805461108e90612f31565b80156110db5780601f106110b0576101008083540402835291602001916110db565b820191906000526020600020905b8154815290600101906020018083116110be57829003601f168201915b50505091835250506001546001600160a01b0390811660208301526000546301000000900416604082015260600161111660005461ffff1690565b61ffff1681526020016001815260045460209091019060ff16600281111561114057611140612bc1565b9052919050565b6000611159630529747360e51b611486565b604051630529747360e51b90309033906000805160206136c583398151915290600090a460015460405163a457c2d760e01b81526001600160a01b038581166004830152602482018590529091169063a457c2d7906044015b6020604051808303816000875af11580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d91906131bb565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561123e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efa91906131bb565b60606002805461053390612f31565b606061128363cce6d80160e01b611486565b60005b8281101561131157308484838181106112a1576112a16131d4565b6112b79260206080909202019081019150612c64565b6001600160a01b0316146112ff5760405162461bcd60e51b815260206004820152600f60248201526e496c6c6567616c204164647265737360881b604482015260640161063c565b80611309816131ea565b915050611286565b5060405163cce6d80160e01b90309033906000805160206136c583398151915290600090a46001546040516374bb18e760e01b81526001600160a01b03909116906374bb18e7906113689086908690600401613211565b6000604051808303816000875af1158015611387573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051d919081019061327a565b60006113c163e9dbebbd60e01b611486565b60405163e9dbebbd60e01b90309033906000805160206136c583398151915290600090a4600154604051631f54aa5560e31b81526001600160a01b039091169063faa552a8906104da9086908690600401613338565b6000611429633f14901960e21b611486565b604051633f14901960e21b90309033906000805160206136c583398151915290600090a4600154604051633950935160e01b81526001600160a01b03858116600483015260248201859052909116906339509351906044016111b2565b600160045460ff16600281111561149f5761149f612bc1565b146114d75760405162461bcd60e51b815260206004820152600860248201526714995a9958dd195960c21b604482015260640161063c565b60008054630100000090046001600160a01b0316632e59653a3084336040518463ffffffff1660e01b815260040161151193929190613159565b6020604051808303816000875af1158015611530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115549190613186565b9050600081601381111561156a5761156a612bc1565b14610c685780604051637f0911d160e01b815260040161063c91906131a7565b604080516001808252818301909252600091816020015b61160660408051610180810182526000808252602082018190529181018290526060808201819052608082015260a0810182905260c0810182905260e08101829052610100810182905290610120820190815260200160008152602001606081525090565b8152602001906001900390816115a1579050509050816000013581600081518110611633576116336131d4565b6020026020010151600001818152505081602001358160008151811061165b5761165b6131d4565b60200260200101516020018181525050816060013581600081518110611683576116836131d4565b6020908102919091010151604001526116a0610120830183612f7a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508551869450909250151590506116e8576116e86131d4565b602090810291909101015160600152611705610140830183612f7a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525085518694509092501515905061174d5761174d6131d4565b60209081029190910101516080015261176e61012083016101008401612c64565b81600081518110611781576117816131d4565b60209081029190910101516001600160a01b0390911660a0918201526117ac90830160808401612c64565b816000815181106117bf576117bf6131d4565b60209081029190910101516001600160a01b0390911660c0909101526117ec610100830160e08401612c64565b816000815181106117ff576117ff6131d4565b602002602001015160e001906001600160a01b031690816001600160a01b031681525050602081600081518110611838576118386131d4565b6020026020010151610100019060010b908160010b81525050600381600081518110611866576118666131d4565b60200260200101516101200190600381111561188457611884612bc1565b9081600381111561189757611897612bc1565b815250506003816000815181106118b0576118b06131d4565b6020026020010151610140019060038111156118ce576118ce612bc1565b908160038111156118e1576118e1612bc1565b9052506118f2610160830183612f7a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525085518694509092501515905061193a5761193a6131d4565b6020908102919091018101516101600191909152604080516060810182526000808252818401819052825193840183528084528183019390935291549051630830abaf60e31b815263010000009091046001600160a01b0316906341855d78906119aa90849086906004016133bd565b6020604051808303816000875af11580156119c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ed9190612f0f565b50505050565b60408051600a8082526101608201909252600091816020015b611a446040805160c0810182526000808252602082018190529181018290526060810182905290608082019081526020016000905290565b815260200190600190039081611a0c579050509050816020013581600081518110611a7157611a716131d4565b60200260200101516000018181525050816020013581600081518110611a9957611a996131d4565b60200260200101516020018181525050639c7597b260e01b81600081518110611ac457611ac46131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050608281600081518110611aff57611aff6131d4565b60200260200101516060019060ff16908160ff1681525050600381600081518110611b2c57611b2c6131d4565b6020026020010151608001906003811115611b4957611b49612bc1565b90816003811115611b5c57611b5c612bc1565b81525050600281600081518110611b7557611b756131d4565b602002602001015160a001906003811115611b9257611b92612bc1565b90816003811115611ba557611ba5612bc1565b81525050816020013581600181518110611bc157611bc16131d4565b60200260200101516000018181525050816040013581600181518110611be957611be96131d4565b6020026020010151602001818152505063cce6d80160e01b81600181518110611c1457611c146131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050603081600181518110611c4f57611c4f6131d4565b60200260200101516060019060ff16908160ff1681525050600381600181518110611c7c57611c7c6131d4565b6020026020010151608001906003811115611c9957611c99612bc1565b90816003811115611cac57611cac612bc1565b81525050600281600181518110611cc557611cc56131d4565b602002602001015160a001906003811115611ce257611ce2612bc1565b90816003811115611cf557611cf5612bc1565b81525050816020013581600281518110611d1157611d116131d4565b60200260200101516000018181525050816040013581600281518110611d3957611d396131d4565b602002602001015160200181815250506368cdafe660e01b81600281518110611d6457611d646131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050606081600281518110611d9f57611d9f6131d4565b60200260200101516060019060ff16908160ff1681525050600381600281518110611dcc57611dcc6131d4565b6020026020010151608001906003811115611de957611de9612bc1565b90816003811115611dfc57611dfc612bc1565b81525050600281600281518110611e1557611e156131d4565b602002602001015160a001906003811115611e3257611e32612bc1565b90816003811115611e4557611e45612bc1565b81525050816020013581600381518110611e6157611e616131d4565b60200260200101516000018181525050816040013581600381518110611e8957611e896131d4565b6020026020010151602001818152505063e9dbebbd60e01b81600381518110611eb457611eb46131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050606381600381518110611eef57611eef6131d4565b60200260200101516060019060ff16908160ff1681525050600381600381518110611f1c57611f1c6131d4565b6020026020010151608001906003811115611f3957611f39612bc1565b90816003811115611f4c57611f4c612bc1565b81525050600281600381518110611f6557611f656131d4565b602002602001015160a001906003811115611f8257611f82612bc1565b90816003811115611f9557611f95612bc1565b81525050816020013581600481518110611fb157611fb16131d4565b60200260200101516000018181525050816040013581600481518110611fd957611fd96131d4565b6020026020010151602001818152505063961974ba60e01b81600481518110612004576120046131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b03191681525050606e8160048151811061203f5761203f6131d4565b60200260200101516060019060ff16908160ff168152505060038160048151811061206c5761206c6131d4565b602002602001015160800190600381111561208957612089612bc1565b9081600381111561209c5761209c612bc1565b815250506002816004815181106120b5576120b56131d4565b602002602001015160a0019060038111156120d2576120d2612bc1565b908160038111156120e5576120e5612bc1565b81525050816020013581600581518110612101576121016131d4565b60200260200101516000018181525050816040013581600581518110612129576121296131d4565b60200260200101516020018181525050639c42c5ec60e01b81600581518110612154576121546131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b0319168152505060748160058151811061218f5761218f6131d4565b60200260200101516060019060ff16908160ff16815250506003816005815181106121bc576121bc6131d4565b60200260200101516080019060038111156121d9576121d9612bc1565b908160038111156121ec576121ec612bc1565b81525050600281600581518110612205576122056131d4565b602002602001015160a00190600381111561222257612222612bc1565b9081600381111561223557612235612bc1565b81525050816020013581600681518110612251576122516131d4565b60200260200101516000018181525050816040013581600681518110612279576122796131d4565b60200260200101516020018181525050630cd689f560e01b816006815181106122a4576122a46131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b031916815250506096816006815181106122df576122df6131d4565b60200260200101516060019060ff16908160ff168152505060038160068151811061230c5761230c6131d4565b602002602001015160800190600381111561232957612329612bc1565b9081600381111561233c5761233c612bc1565b81525050600281600681518110612355576123556131d4565b602002602001015160a00190600381111561237257612372612bc1565b9081600381111561238557612385612bc1565b815250508160200135816007815181106123a1576123a16131d4565b602002602001015160000181815250508160400135816007815181106123c9576123c96131d4565b6020026020010151602001818152505063fc52406460e01b816007815181106123f4576123f46131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b0319168152505060a08160078151811061242f5761242f6131d4565b60200260200101516060019060ff16908160ff168152505060038160078151811061245c5761245c6131d4565b602002602001015160800190600381111561247957612479612bc1565b9081600381111561248c5761248c612bc1565b815250506002816007815181106124a5576124a56131d4565b602002602001015160a0019060038111156124c2576124c2612bc1565b908160038111156124d5576124d5612bc1565b815250508160200135816008815181106124f1576124f16131d4565b60200260200101516000018181525050816040013581600881518110612519576125196131d4565b6020026020010151602001818152505063a52e8e6060e01b81600881518110612544576125446131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b0319168152505060a08160088151811061257f5761257f6131d4565b60200260200101516060019060ff16908160ff16815250506003816008815181106125ac576125ac6131d4565b60200260200101516080019060038111156125c9576125c9612bc1565b908160038111156125dc576125dc612bc1565b815250506002816008815181106125f5576125f56131d4565b602002602001015160a00190600381111561261257612612612bc1565b9081600381111561262557612625612bc1565b81525050816020013581600981518110612641576126416131d4565b60200260200101516000018181525050816040013581600981518110612669576126696131d4565b6020026020010151602001818152505063756af45f60e01b81600981518110612694576126946131d4565b6020026020010151604001906001600160e01b03191690816001600160e01b031916815250506018816009815181106126cf576126cf6131d4565b60200260200101516060019060ff16908160ff16815250506003816009815181106126fc576126fc6131d4565b602002602001015160800190600381111561271957612719612bc1565b9081600381111561272c5761272c612bc1565b81525050600281600981518110612745576127456131d4565b602002602001015160a00190600381111561276257612762612bc1565b9081600381111561277557612775612bc1565b905250604080516001808252818301909252600091816020015b60408051610120810182526060808252600060208084018290529383018190528183018290526080830182905260a0830181905260c0830181905260e0830152610100820152825260001990920191018161278f5790505090506127f7610160840184612f7a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525085518694509092501515905061283f5761283f6131d4565b602002602001015160000181905250826000013581600081518110612866576128666131d4565b6020026020010151602001818152505082606001358160008151811061288e5761288e6131d4565b6020908102919091010151604001526128ab610120840184612f7a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508551869450909250151590506128f3576128f36131d4565b602090810291909101015160600152612910610140840184612f7a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250855186945090925015159050612958576129586131d4565b60200260200101516080018190525082608001602081019061297a9190612c64565b8160008151811061298d5761298d6131d4565b60209081029190910101516001600160a01b0390911660a0909101526129ba610100840160e08501612c64565b816000815181106129cd576129cd6131d4565b602002602001015160c001906001600160a01b031690816001600160a01b031681525050600081600081518110612a0657612a066131d4565b602002602001015160e001906001600160a01b031690816001600160a01b0316815250508181600081518110612a3e57612a3e6131d4565b602090810291909101810151610100019190915260408051606081018252600080825281840181905282519384018352808452818301939093529154905163bd63781360e01b815263010000009091046001600160a01b03169063bd63781390612aae90849086906004016135a8565b6020604051808303816000875af1158015612acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af19190612f0f565b5050505050565b600060208284031215612b0a57600080fd5b81356001600160e01b03198116811461051d57600080fd5b80356001600160a01b0381168114612b3957600080fd5b919050565b60008060408385031215612b5157600080fd5b612b5a83612b22565b946020939093013593505050565b6000815180845260005b81811015612b8e57602081850181015186830182015201612b72565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061051d6020830184612b68565b634e487b7160e01b600052602160045260246000fd5b60048110612be757612be7612bc1565b50565b612bf381612bd7565b9052565b60208101612c0483612bd7565b91905290565b60038110612bf357612bf3612bc1565b602081016104698284612c0a565b600060208284031215612c3a57600080fd5b813567ffffffffffffffff811115612c5157600080fd5b8201610180818503121561051d57600080fd5b600060208284031215612c7657600080fd5b61051d82612b22565b600080600060608486031215612c9457600080fd5b612c9d84612b22565b9250612cab60208501612b22565b9150604084013590509250925092565b60008060208385031215612cce57600080fd5b823567ffffffffffffffff80821115612ce657600080fd5b818501915085601f830112612cfa57600080fd5b813581811115612d0957600080fd5b866020606083028501011115612d1e57600080fd5b60209290920196919550909350505050565b600060208284031215612d4257600080fd5b81356003811061051d57600080fd5b602081528151602082015260006020830151610100806040850152612d7a610120850183612b68565b91506040850151601f19858403016060860152612d978382612b68565b92505060018060a01b0360608601511660808501526080850151612dc660a08601826001600160a01b03169052565b5060a085015161ffff811660c08601525060c0850151612de960e0860182612bea565b5060e0850151612dfb82860182612c0a565b5090949350505050565b60008060208385031215612e1857600080fd5b823567ffffffffffffffff80821115612e3057600080fd5b818501915085601f830112612e4457600080fd5b813581811115612e5357600080fd5b8660208260071b8501011115612d1e57600080fd5b6020808252825182820181905260009190848201906040850190845b81811015612ea057835183529284019291840191600101612e84565b50909695505050505050565b60008060208385031215612ebf57600080fd5b823567ffffffffffffffff80821115612ed757600080fd5b818501915085601f830112612eeb57600080fd5b813581811115612efa57600080fd5b8660208260061b8501011115612d1e57600080fd5b600060208284031215612f2157600080fd5b8151801515811461051d57600080fd5b600181811c90821680612f4557607f821691505b602082108103610bae57634e487b7160e01b600052602260045260246000fd5b6001600160e01b031991909116815260200190565b6000808335601e19843603018112612f9157600080fd5b83018035915067ffffffffffffffff821115612fac57600080fd5b602001915036819003821315612fc157600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b601f82111561302857600081815260208120601f850160051c810160208610156130055750805b601f850160051c820191505b8181101561302457828155600101613011565b5050505b505050565b67ffffffffffffffff83111561304557613045612fc8565b613059836130538354612f31565b83612fde565b6000601f84116001811461308d57600085156130755750838201355b600019600387901b1c1916600186901b178355612af1565b600083815260209020601f19861690835b828110156130be578685013582556020948501946001909201910161309e565b50868210156130db5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6020808252818101839052600090604080840186845b8781101561314c576001600160a01b038061311d84612b22565b1684528061312c878501612b22565b168487015250818401358484015260609283019290910190600101613103565b5090979650505050505050565b6001600160a01b0393841681526001600160e01b0319929092166020830152909116604082015260600190565b60006020828403121561319857600080fd5b81516014811061051d57600080fd5b6020810160148310612c0457612c04612bc1565b6000602082840312156131cd57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161320a57634e487b7160e01b600052601160045260246000fd5b5060010190565b6020808252818101839052600090604080840186845b8781101561314c576001600160a01b038061324184612b22565b16845280613250878501612b22565b16848701525081840135848401526060808301359084015260809283019290910190600101613227565b6000602080838503121561328d57600080fd5b825167ffffffffffffffff808211156132a557600080fd5b818501915085601f8301126132b957600080fd5b8151818111156132cb576132cb612fc8565b8060051b604051601f19603f830116810181811085821117156132f0576132f0612fc8565b60405291825284820192508381018501918883111561330e57600080fd5b938501935b8285101561332c57845184529385019392850192613313565b98975050505050505050565b6020808252818101839052600090604080840186845b8781101561314c576001600160a01b0361336783612b22565b1683528185013585840152918301919083019060010161334e565b60018060a01b03815116825267ffffffffffffffff60208201511660208301526000604082015160606040850152610d216060850182612b68565b600060408083526133d081840186613382565b6020848203818601528186518084528284019150828160051b85010183890160005b8381101561350a57601f198784030185528151610180815185528782015188860152898201518a860152606080830151828288015261343383880182612b68565b925050506080808301518683038288015261344e8382612b68565b9250505060a08083015161346c828801826001600160a01b03169052565b505060c0828101516001600160a01b03811687830152505060e0828101516001600160a01b038116878301525050610100808301516134af8288018260010b9052565b5050610120808301516134c482880182612bea565b5050610140808301516134d982880182612bea565b505061016080830151925085820381870152506134f68183612b68565b9688019694505050908501906001016133f2565b50909a9950505050505050505050565b600081518084526020808501945080840160005b8381101561359d5781518051885283810151848901526040808201516001600160e01b0319169089015260608082015160ff169089015260808082015161357481612bd7565b9089015260a0908101519061358882612bd7565b88015260c0909601959082019060010161352e565b509495945050505050565b600060408083526135bb81840186613382565b6020848203818601528186518084528284019150828160051b85010183890160005b8381101561350a57601f198784030185528151610120815181865261360482870182612b68565b9150508782015188860152898201518a8601526060808301518683038288015261362e8382612b68565b92505050608080830151868303828801526136498382612b68565b9250505060a080830151613667828801826001600160a01b03169052565b505060c0828101516001600160a01b03811687830152505060e0828101516001600160a01b03811687830152505061010080830151925085820381870152506136b0818361351a565b9688019694505050908501906001016135dd56fe33c2ad0e769b5a5e7f07ab57ff61ae195b76839fc48d116ffe8dc881334fa213a2646970667358221220fab52ad3e5408fe894900d8b27133fa860a4e4394d06f7062f4d857b0a1bbaf064736f6c63430008130033",
  "devdoc": {
    "author": "Sina Tadayon, https://github.com/SinaTadayon",
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "Asset ERC20 Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82432,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 82435,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_initializing",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 87548,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_accessControlId",
        "offset": 3,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 87550,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_erc20TokenId",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 87552,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_contractName",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 87554,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_contractVersion",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 87557,
        "contract": "src/contracts/token/asset/ERC20/AssetERC20.sol:AssetERC20",
        "label": "_assetSafeModeStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(AssetSafeModeStatus)89181"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(AssetSafeModeStatus)89181": {
        "encoding": "inplace",
        "label": "enum IAssetEntity.AssetSafeModeStatus",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}