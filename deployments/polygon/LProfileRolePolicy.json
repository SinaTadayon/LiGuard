{
  "address": "0x4c04D51D698642673212B77aB5D7e652FB119097",
  "abi": [
    {
      "inputs": [],
      "name": "ProfileAdminAccessFunctionNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessNotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessPolicyForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessRoleActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessRoleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessTypeActivityForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfileAdminAccessTypeNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LIB_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIB_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_ANY_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_ANONYMOUS_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_VERSE_ANY_TYPE_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "policyCode",
          "type": "uint8"
        }
      ],
      "name": "profileGetPolicyType",
      "outputs": [
        {
          "internalType": "enum IACLCommons.PolicyType",
          "name": "",
          "type": "IACLCommons.PolicyType"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2448658edf653e75c986e4de8983555cae05e2cf9736e7b0f11ee0a3d966154b",
  "receipt": {
    "to": null,
    "from": "0xCB93d383638cc7B174FE2139Dec8570521Bb8118",
    "contractAddress": "0x4c04D51D698642673212B77aB5D7e652FB119097",
    "transactionIndex": 64,
    "gasUsed": "3677144",
    "logsBloom": "0x
    "blockHash": "0x95d0ed20646adc498822350479183795451fb8e283396895fb5f35507963c780",
    "transactionHash": "0x2448658edf653e75c986e4de8983555cae05e2cf9736e7b0f11ee0a3d966154b",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 40018245,
        "transactionHash": "0x2448658edf653e75c986e4de8983555cae05e2cf9736e7b0f11ee0a3d966154b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cb93d383638cc7b174fe2139dec8570521bb8118",
          "0x000000000000000000000000ef46d5fe753c988606e6f703260d816af53b03eb"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010f2a03a236a92800000000000000000000000000000000000000000000000324832bda0306b9150000000000000000000000000000000000000000000001f355bfd59cc39d822a000000000000000000000000000000000000000000000003237401d660d00fed0000000000000000000000000000000000000000000001f356ceffa065d42b52",
        "logIndex": 241,
        "blockHash": "0x95d0ed20646adc498822350479183795451fb8e283396895fb5f35507963c780"
      }
    ],
    "blockNumber": 40018245,
    "cumulativeGasUsed": "15337437",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bf3d37f12163392c6a812b5af749abec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ProfileAdminAccessFunctionNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessNotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessPolicyForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessRoleActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessRoleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessTypeActivityForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileAdminAccessTypeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LIB_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIB_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_ANY_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_ANONYMOUS_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_VERSE_ANY_TYPE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"policyCode\",\"type\":\"uint8\"}],\"name\":\"profileGetPolicyType\",\"outputs\":[{\"internalType\":\"enum IACLCommons.PolicyType\",\"name\":\"\",\"type\":\"IACLCommons.PolicyType\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sina Tadayon, https://github.com/SinaTadayon\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Profile Commons Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/lib/acl/LProfileRolePolicy.sol\":\"LProfileRolePolicy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/ACLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IACLCommons.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Abstract Access Control List Storage Contract\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract ACLStorage is BaseUUPSStorage, IACLCommons {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  struct DataCollection {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    mapping(bytes32 => ProfileEntity) profiles;\\n    mapping(address => ProfileAccount) profileAccounts;\\n    mapping(bytes4 => address) selectors;\\n    mapping(address => FacetEntity) facets;\\n    LEnumerableSet.AddressSet facetSet;\\n  }\\n\\n  bytes32 public constant CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"PredictContext(address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"MemberSignature(address account,uint256 expiredAt)\\\");\\n\\n  bytes32 public constant PROFILE_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileContext(string profile,address contractId,string name,string version,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfilePredictContext(string profile,address deployer,address subject,string realm)\\\");\\n\\n  bytes32 public constant PROFILE_MEMBER_SIGNATURE_MESSAGE_TYPEHASH =\\n    keccak256(\\\"ProfileMemberSignature(string profile,address account,uint256 expiredAt)\\\");\\n\\n  // General Types ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_SCOPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_SCOPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_MEMBER_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_MEMBER_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_TYPE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_TYPE_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_POLICY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_POLICY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_VERSE_PROFILE_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_PROFILE_MASTER\\\"));\\n\\n  // Universe Scope ID\\n  bytes32 internal constant _LIVELY_VERSE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_VERSE\\\"));\\n\\n  // General Profile Type\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 internal constant _LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n\\n  bool internal _firstInit;\\n  DataCollection internal _data;\\n  // Note: for next upgrade add new variables after this line\\n}\\n\",\"keccak256\":\"0x748ba9ee4ce4e5492afd3261bf61e8360b3f45ae3588218c1bbf90699df2065b\",\"license\":\"MIT\"},\"src/contracts/acl/IACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACL {\\n  enum AuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ACLUnauthorized();\\n  error ACLPolicyForbidden();\\n  error ACLCallForbidden();\\n  error ACLRoleScopeForbidden();\\n  error ACLMemberNotFound();\\n  error ACLRoleNotFound();\\n  error ACLTypeNotFound();\\n  error ACLFunctionNotFound();\\n  error ACLContextNotFound();\\n  error ACLRealmNotFound();\\n  error ACLDomainNotFound();\\n  error ACLMemberActivityForbidden();\\n  error ACLRoleActivityForbidden();\\n  error ACLTypeActivityForbidden();\\n  error ACLFunctionActivityForbidden();\\n  error ACLContextActivityForbidden();\\n  error ACLRealmActivityForbidden();\\n  error ACLDomainActivityForbidden();\\n  error ACLUniverseActivityForbidden();\\n\\n  error ACLActionForbidden(AuthorizationStatus);\\n\\n  enum AdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error AdminAccessNotPermitted();\\n  error AdminAccessPolicyForbidden();\\n  error AdminAccessRoleNotFound();\\n  error AdminAccessTypeNotFound();\\n  error AdminAccessFunctionNotFound();\\n  error AdminAccessRoleActivityForbidden();\\n  error AdminAccessTypeActivityForbidden();\\n\\n  error SetAdminForbidden(AdminAccessStatus);\\n\\n  function hasAccess(bytes32 functionId) external returns (AuthorizationStatus);\\n\\n  function hasMemberAccess(bytes32 functionId, bytes32 memberId) external returns (AuthorizationStatus);\\n\\n  function hasCSAccess(address contractId, bytes4 selector) external returns (AuthorizationStatus);\\n\\n  function hasAccountAccess(\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (AuthorizationStatus);\\n}\\n\",\"keccak256\":\"0x3b4bd5cd73079a4bcbc82fe3699b21fcc08fdafc964f978a9c540756302dbb2e\",\"license\":\"MIT\"},\"src/contracts/acl/IACLCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IACLCommons {\\n  enum AgentType {\\n    NONE,\\n    MEMBER,\\n    ROLE,\\n    TYPE\\n  }\\n\\n  enum ActivityStatus {\\n    NONE,\\n    DELETED,\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum AlterabilityStatus {\\n    NONE,\\n    DISABLED,\\n    UPDATABLE,\\n    UPGRADABLE\\n  }\\n\\n  enum ScopeType {\\n    NONE,\\n    FUNCTION,\\n    CONTEXT,\\n    REALM,\\n    DOMAIN,\\n    UNIVERSE\\n  }\\n\\n  enum ActionType {\\n    ADD,\\n    UPDATE,\\n    REMOVE\\n  }\\n\\n  enum PolicyType {\\n    UNLOCK, // 0\\n    SLOCK, // soft lock, 1 - 63\\n    MLOCK, // medium lock, 64 - 127\\n    RLOCK, // restrict lock, 128 - 191\\n    HLOCK, // hard lock, 192 - 254\\n    LOCK // 255\\n  }\\n\\n  struct BaseAgent {\\n    bytes32 adminId;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct BaseScope {\\n    bytes32 adminId;\\n    ScopeType stype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    uint32 referredByAgent;\\n  }\\n\\n  struct PolicyEntity {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint8 policyCode;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FunctionEntity {\\n    BaseScope bs;\\n    bytes32 agentId;\\n    bytes32 contextId;\\n    bytes4 selector;\\n    uint8 policyCode;\\n  }\\n\\n  struct ContextEntity {\\n    BaseScope bs;\\n    bytes32 realmId;\\n    address contractId;\\n    uint8 functionLimit;\\n    LEnumerableSet.Bytes32Set functions;\\n  }\\n\\n  struct RealmEntity {\\n    BaseScope bs;\\n    bytes32 domainId;\\n    uint32 contextLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set contexts;\\n  }\\n\\n  struct DomainEntity {\\n    BaseScope bs;\\n    bytes32 universeId;\\n    uint16 realmLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set realms;\\n  }\\n\\n  struct UniverseEntity {\\n    BaseScope bs;\\n    uint16 domainLimit;\\n    string name;\\n    LEnumerableSet.Bytes32Set domains;\\n  }\\n\\n  struct GeneralLimit {\\n    uint24 memberLimit;\\n    uint16 memberRegisterLimit;\\n    uint16 contextRegisterLimit;\\n    uint16 functionRegisterLimit;\\n    uint16 profileRegisterLimit;\\n    uint16 contextLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 callLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint8 roleRegisterLimit;\\n    uint8 typeRegisterLimit;\\n    uint8 realmRegisterLimit;\\n    uint8 domainRegisterLimit;\\n    uint8 policyRegisterLimit;\\n    uint8 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct MemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    GeneralLimit limits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct MemberSignature {\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct RoleEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n  }\\n\\n  struct TypeEntity {\\n    BaseAgent ba;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    mapping(bytes32 => bytes32) members;\\n    LEnumerableSet.Bytes32Set roles;\\n  }\\n\\n  struct FacetEntity {\\n    address subjectId;\\n  }\\n\\n  struct UpdateActivityRequest {\\n    bytes32 id;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct UpdateAlterabilityRequest {\\n    bytes32 id;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct UpdateAdminRequest {\\n    bytes32 id;\\n    bytes32 adminId;\\n  }\\n\\n  // used in Policy / Role / Type\\n  struct UpdateScopeRequest {\\n    bytes32 id;\\n    bytes32 scopeId;\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////\\n  // Profiles\\n\\n  struct ProfileMemberSignature {\\n    string profileName;\\n    address account;\\n    uint64 expiredAt;\\n    bytes signature;\\n  }\\n\\n  struct ProfileRegisterLimit {\\n    uint32 memberRegisterLimit;\\n    uint32 roleRegisterLimit;\\n    uint32 typeRegisterLimit;\\n    uint32 functionRegisterLimit;\\n    uint32 contextRegisterLimit;\\n    uint16 realmRegisterLimit;\\n    uint16 domainRegisterLimit;\\n    uint16 policyRegisterLimit;\\n  }\\n\\n  struct ProfileLimit {\\n    uint32 profileCallLimit;\\n    uint32 contextLimit;\\n    uint24 memberLimit;\\n    uint16 realmLimit;\\n    uint16 domainLimit;\\n    uint16 memberCallLimit;\\n    uint16 typeRoleLimit;\\n    uint16 typeLimit;\\n    uint16 policyRoleLimit;\\n    uint8 functionLimit;\\n  }\\n\\n  struct ProfileAccount {\\n    bytes32[] profiles;\\n  }\\n\\n  struct ProfileEntity {\\n    mapping(bytes32 => BaseAgent) agents;\\n    mapping(bytes32 => BaseScope) scopes;\\n    mapping(bytes32 => PolicyEntity) policies;\\n    mapping(bytes32 => bytes32) rolePolicyMap;\\n    LEnumerableSet.Bytes32Set admins;\\n    bytes32 adminId;\\n    string name;\\n    address owner;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileMemberEntity {\\n    BaseAgent ba;\\n    address account;\\n    uint16 callLimit;\\n    uint16 typeLimit;\\n    ProfileRegisterLimit registerLimits;\\n    LEnumerableSet.Bytes32Set types;\\n  }\\n\\n  struct ProfileUpdateActivityRequest {\\n    bytes32 entityId;\\n    ActivityStatus acstat;\\n  }\\n\\n  struct ProfileUpdateAlterabilityRequest {\\n    bytes32 entityId;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  struct ProfileUpdateAdminRequest {\\n    bytes32 entityId;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateScopeRequest {\\n    bytes32 entityId;\\n    bytes32 scopeId;\\n  }\\n}\\n\",\"keccak256\":\"0x2269cec662cb8f25c0523b281f8f97bd9b5115ea80771c7d1e4083031f4a1c87\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Access Control Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACL {\\n  enum ProfileAuthorizationStatus {\\n    PERMITTED,\\n    UNAUTHORIZED,\\n    POLICY_FORBIDDEN,\\n    PROFILE_CALL_FORBIDDEN,\\n    MEMBER_CALL_FORBIDDEN,\\n    ROLE_SCOPE_FORBIDDEN,\\n    MEMBER_NOT_FOUND,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    CONTEXT_NOT_FOUND,\\n    REALM_NOT_FOUND,\\n    DOMAIN_NOT_FOUND,\\n    MEMBER_ACTIVITY_FORBIDDEN,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN,\\n    FUNCTION_ACTIVITY_FORBIDDEN,\\n    CONTEXT_ACTIVITY_FORBIDDEN,\\n    REALM_ACTIVITY_FORBIDDEN,\\n    DOMAIN_ACTIVITY_FORBIDDEN,\\n    UNIVERSE_ACTIVITY_FORBIDDEN,\\n    PROFILE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileACLUnauthorized();\\n  error ProfileACLPolicyForbidden();\\n  error ProfileACLCallForbidden();\\n  error ProfileACLRoleScopeForbidden();\\n  error ProfileACLMemberCallForbidden();\\n  error ProfileACLMemberNotFound();\\n  error ProfileACLRoleNotFound();\\n  error ProfileACLTypeNotFound();\\n  error ProfileACLFunctionNotFound();\\n  error ProfileACLContextNotFound();\\n  error ProfileACLRealmNotFound();\\n  error ProfileACLDomainNotFound();\\n  error ProfileACLMemberActivityForbidden();\\n  error ProfileACLRoleActivityForbidden();\\n  error ProfileACLTypeActivityForbidden();\\n  error ProfileACLFunctionActivityForbidden();\\n  error ProfileACLContextActivityForbidden();\\n  error ProfileACLRealmActivityForbidden();\\n  error ProfileACLDomainActivityForbidden();\\n  error ProfileACLUniverseActivityForbidden();\\n  error ProfileACLProfileActivityForbidden();\\n\\n  enum ProfileAdminAccessStatus {\\n    PERMITTED,\\n    NOT_PERMITTED,\\n    POLICY_FORBIDDEN,\\n    ROLE_NOT_FOUND,\\n    TYPE_NOT_FOUND,\\n    FUNCTION_NOT_FOUND,\\n    ROLE_ACTIVITY_FORBIDDEN,\\n    TYPE_ACTIVITY_FORBIDDEN\\n  }\\n\\n  error ProfileAdminAccessNotPermitted();\\n  error ProfileAdminAccessPolicyForbidden();\\n  error ProfileAdminAccessRoleNotFound();\\n  error ProfileAdminAccessTypeNotFound();\\n  error ProfileAdminAccessFunctionNotFound();\\n  error ProfileAdminAccessRoleActivityForbidden();\\n  error ProfileAdminAccessTypeActivityForbidden();\\n\\n  error ProfileSetAdminForbidden(ProfileAdminAccessStatus);\\n\\n  function profileHasAccess(bytes32 profileId, bytes32 functionId) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasMemberAccess(\\n    bytes32 profileId,\\n    bytes32 functionId,\\n    bytes32 memberId\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasCSAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector\\n  ) external returns (ProfileAuthorizationStatus);\\n\\n  function profileHasAccountAccess(\\n    bytes32 profileId,\\n    address contractId,\\n    bytes4 selector,\\n    address accountId\\n  ) external returns (ProfileAuthorizationStatus);\\n}\\n\",\"keccak256\":\"0xb3687f11a1d2d28b78e815657864fbe1ef4aeba750e8c9760b3d3f97e467efc2\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileACLGenerals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Access Control General Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileACLGenerals is IACLCommons {\\n  // Anonymouse type\\n  function profileAnonymousType() external pure returns (bytes32);\\n\\n  // Any type\\n  function profileAnyType() external pure returns (bytes32);\\n\\n  // system master type\\n  function profileSystemMasterType() external pure returns (bytes32);\\n\\n  // profile master type\\n  function profileMasterType() external pure returns (bytes32);\\n\\n  // Universe Scope\\n  function profileUniverseScope() external pure returns (bytes32);\\n\\n  // general\\n  function profileIsAgentExist(bytes32 profileId, bytes32 agentId) external view returns (bool);\\n\\n  function profileIsScopeExist(bytes32 profileId, bytes32 scopeId) external view returns (bool);\\n\\n  function profileScopeBaseInfo(bytes32 profileId, bytes32 scopeId) external view returns (BaseScope memory);\\n\\n  function profileAgentBaseInfo(bytes32 profileId, bytes32 agentId) external view returns (BaseAgent memory);\\n\\n  function profileIsScopesCompatible(\\n    bytes32 profileId,\\n    bytes32 destScopeId,\\n    bytes32 srcScopeId\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5eeaa7ce1f5f26662cf0368f1c9b415214f37f1659c3a2defccedf0d1943760f\",\"license\":\"MIT\"},\"src/contracts/acl/profile/IProfileManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileManagement is IACLCommons {\\n  struct ProfileRegisterRequest {\\n    string name;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    address profileOwner;\\n    address profileSystemAdmin;\\n    bytes32 adminId;\\n  }\\n\\n  struct ProfileUpdateOwnerAccountRequest {\\n    bytes32 profileId;\\n    address newOwner;\\n  }\\n\\n  struct ProfileUpdateLimitsRequest {\\n    bytes32 profileId;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n  }\\n\\n  struct ProfileInfo {\\n    string name;\\n    bytes32 adminId;\\n    address owner;\\n    ProfileRegisterLimit registerLimits;\\n    ProfileLimit limits;\\n    AgentType adminType;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfileRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed profileOwner,\\n    address profileSystemAdmin,\\n    bytes32 adminId,\\n    ProfileRegisterLimit registerlimits,\\n    ProfileLimit limits\\n  );\\n\\n  event ProfileAdminUpdated(address indexed sender, bytes32 indexed profileId, bytes32 indexed adminId);\\n\\n  event ProfileActivityUpdated(address indexed sender, bytes32 indexed profileId, ActivityStatus acstat);\\n\\n  event ProfileAlterabilityUpdated(address indexed sender, bytes32 indexed profileId, AlterabilityStatus alstat);\\n\\n  event ProfileLimitsUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    ProfileLimit limit,\\n    ProfileRegisterLimit registerLimit\\n  );\\n\\n  event ProfileOwnerAccountUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    address indexed owner,\\n    address newOwner\\n  );\\n\\n  function profileRegister(MemberSignature calldata memberSign, ProfileRegisterRequest[] calldata request)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateLimits(MemberSignature calldata memberSign, ProfileUpdateLimitsRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateOwnerAccount(\\n    MemberSignature calldata memberSign,\\n    ProfileUpdateOwnerAccountRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateActivityStatus(MemberSignature calldata memberSign, UpdateActivityRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileUpdateAlterabilityStatus(\\n    MemberSignature calldata memberSign,\\n    UpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileUpdateAdmin(MemberSignature calldata memberSign, UpdateAdminRequest[] calldata requests)\\n    external\\n    returns (bool);\\n\\n  function profileCheckId(bytes32 profileId) external view returns (bool);\\n\\n  function profileCheckName(string calldata name) external view returns (bool);\\n\\n  function profileCheckOwner(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckProfileSystemAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileCheckAdmin(bytes32 profileId, address account) external view returns (bool);\\n\\n  function profileGetProfileAccount(address account) external view returns (bytes32[] memory);\\n\\n  function profileGetAdmins(bytes32 profileId) external view returns (bytes32[] memory);\\n\\n  function profileGetInfo(bytes32 profileId) external view returns (ProfileInfo memory);\\n}\\n\",\"keccak256\":\"0x32153a5a19ef691b56e8987b82b455e024cfc24c42393955d12d43e0c148d6fc\",\"license\":\"MIT\"},\"src/contracts/acl/profile/agent/IProfileRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Role Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProfileRoleManagement is IACLCommons {\\n  struct ProfileRoleRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    string name;\\n    int32 memberLimit;\\n  }\\n\\n  struct ProfileRoleGrantMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct ProfileRoleRevokeMembersRequest {\\n    bytes32 roleId;\\n    bytes32[] members;\\n  }\\n\\n  struct ProfileRoleUpdateMemberLimitRequest {\\n    bytes32 roleId;\\n    uint24 memberLimit;\\n  }\\n\\n  struct ProfileRoleInfo {\\n    bytes32 scopeId;\\n    bytes32 typeId;\\n    bytes32 adminId;\\n    uint24 memberLimit;\\n    uint24 memberCount;\\n    AgentType adminType;\\n    AgentType atype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n    string name;\\n  }\\n\\n  event ProfileRoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 typeId,\\n    bytes32 adminId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfileRoleMemberDeleted(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed memberId,\\n    bytes32 roleId,\\n    bytes32 typeId,\\n    address account\\n  );\\n\\n  event ProfileRoleMemberGranted(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 memberId,\\n    bytes32 typeId\\n  );\\n\\n  event ProfileRoleMemberRevoked(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 memberId,\\n    bytes32 typeId\\n  );\\n\\n  event ProfileRoleMemberLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    uint24 memberLimit\\n  );\\n\\n  event ProfileRoleAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfileRoleScopeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfileRoleActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfileRoleAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed roleId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfileRoleRemoved(address indexed sender, bytes32 indexed profileId, bytes32 indexed roleId);\\n\\n  function profileRoleRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleGrantMembers(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleGrantMembersRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleRevokeMembers(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleRevokeMembersRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateScope(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateScopeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleUpdateMemberLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileRoleUpdateMemberLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profileRoleRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata roles)\\n    external\\n    returns (bool);\\n\\n  function profileRoleCheckId(bytes32 profileId, bytes32 roleId) external view returns (bool);\\n\\n  function profileRoleCheckName(bytes32 profileId, string calldata roleName) external view returns (bool);\\n\\n  function profileRoleCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileRoleHasAccount(\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profileRoleGetInfo(bytes32 profileId, bytes32 roleId) external view returns (ProfileRoleInfo memory);\\n}\\n\",\"keccak256\":\"0xc3257ac97de5fe7b1223711664d58bb79e0e7bf8c16a96eba61e1ca6c31ed465\",\"license\":\"MIT\"},\"src/contracts/acl/profile/policy/IProfilePolicyManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../IACLCommons.sol\\\";\\n\\n/**\\n * @title Profile Policy Management Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\n\\ninterface IProfilePolicyManagement is IACLCommons {\\n  struct ProfilePolicyRegisterRequest {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    int24 roleLimit;\\n    uint8 policyCode;\\n    string name;\\n  }\\n\\n  struct ProfilePolicyAddRolesRequest {\\n    bytes32 policyId;\\n    bytes32[] roles;\\n  }\\n\\n  struct ProfilePolicyRemoveRolesRequest {\\n    bytes32 policyId;\\n    bytes32[] roles;\\n  }\\n\\n  struct ProfilePolicyUpdateCodeRequest {\\n    bytes32 policyId;\\n    uint8 policyCode;\\n  }\\n\\n  struct ProfilePolicyUpdateRoleLimitRequest {\\n    bytes32 policyId;\\n    uint16 roleLimit;\\n  }\\n\\n  struct ProfilePolicyInfo {\\n    bytes32 adminId;\\n    bytes32 scopeId;\\n    string name;\\n    uint16 roleLimit;\\n    uint16 roleCount;\\n    uint8 policyCode;\\n    AgentType adminType;\\n    ScopeType scopeType;\\n    PolicyType ptype;\\n    ActivityStatus acstat;\\n    AlterabilityStatus alstat;\\n  }\\n\\n  event ProfilePolicyRegistered(\\n    address indexed sender,\\n    bytes32 indexed profileId,\\n    bytes32 indexed policyId,\\n    bytes32 scopeId,\\n    bytes32 adminId,\\n    uint8 policyCode\\n  );\\n\\n  event ProfilePolicyRoleAdded(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 roleId\\n  );\\n\\n  event ProfilePolicyRoleRemoved(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 roleId\\n  );\\n\\n  event ProfilePolicyActivityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    ActivityStatus acstat\\n  );\\n\\n  event ProfilePolicyAlterabilityUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    AlterabilityStatus alstat\\n  );\\n\\n  event ProfilePolicyCodeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    uint8 policyCode,\\n    PolicyType ptype\\n  );\\n\\n  event ProfilePolicyRoleLimitUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    uint16 roleLimit\\n  );\\n\\n  event ProfilePolicyAdminUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 adminId\\n  );\\n\\n  event ProfilePolicyScopeUpdated(\\n    address indexed sender,\\n    bytes32 indexed profieId,\\n    bytes32 indexed policyId,\\n    bytes32 scopeId\\n  );\\n\\n  event ProfilePolicyRemoved(address indexed sender, bytes32 indexed profieId, bytes32 indexed policyId);\\n\\n  function profilePolicyRegister(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyRegisterRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyAddRoles(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyAddRolesRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyRemoveRoles(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyRemoveRolesRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateCodes(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyUpdateCodeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateAdmin(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAdminRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateScope(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateScopeRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateActivityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateActivityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateAlterabilityStatus(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfileUpdateAlterabilityRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyUpdateRoleLimit(\\n    ProfileMemberSignature calldata memberSign,\\n    ProfilePolicyUpdateRoleLimitRequest[] calldata requests\\n  ) external returns (bool);\\n\\n  function profilePolicyRemove(ProfileMemberSignature calldata memberSign, bytes32[] calldata policies)\\n    external\\n    returns (bool);\\n\\n  function profilePolicyCheckId(bytes32 profileId, bytes32 policyId) external view returns (bool);\\n\\n  function profilePolicyCheckName(bytes32 profileId, string calldata policyName) external view returns (bool);\\n\\n  function profilePolicyCheckAdmin(\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    address account\\n  ) external view returns (bool);\\n\\n  function profilePolicyCheckRole(bytes32 profileId, bytes32 roleId) external view returns (bool);\\n\\n  function profilePolicyCheckAccess(\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profilePolicyCheckRoleAccess(\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    bytes32 functionId\\n  ) external view returns (bool);\\n\\n  function profilePolicyHasRole(\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    bytes32 roleId\\n  ) external view returns (bool);\\n\\n  function profilePolicyGetInfoByRole(bytes32 profileId, bytes32 roleId)\\n    external\\n    view\\n    returns (ProfilePolicyInfo memory);\\n\\n  function profilePolicyGetInfo(bytes32 profileId, bytes32 policyId) external view returns (ProfilePolicyInfo memory);\\n\\n  function profilePolicyGetRoles(bytes32 profileId, bytes32 policyId) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x9d51bfe8539cc15c01407605d10c5c2656d932b56f8e208683746a17f6051a5e\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0xf6b56daea1f2692628dff63bd57ff8ad0bc38ecbc34887db37a8305162ce1394\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LACLUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IACL.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\n\\n/**\\n * @title Context Utils Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LACLUtils {\\n  function functionGenerateId(address contractId, bytes4 selector) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId, selector));\\n  }\\n\\n  function accountGenerateId(address account) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(account));\\n  }\\n\\n  function generateId(string calldata name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateId2(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function generateHash(string memory name) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function getMemeberSignerAddress(IACLCommons.MemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateMemberSignMsgHash(msgTypeHash, memberSign.account, memberSign.expiredAt)\\n      );\\n  }\\n\\n  function getProfileMemeberSignerAddress(IACLCommons.ProfileMemberSignature calldata memberSign, bytes32 msgTypeHash)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return\\n      getSignerAddress(\\n        memberSign.signature,\\n        _generateProfileMemberSignMsgHash(\\n          msgTypeHash,\\n          generateId(memberSign.profileName),\\n          memberSign.account,\\n          memberSign.expiredAt\\n        )\\n      );\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) private view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(IProxy(address(this)).domainSeparator(), structHash);\\n  }\\n\\n  function _generateMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, account, expiredAt));\\n  }\\n\\n  function _generateProfileMemberSignMsgHash(\\n    bytes32 msgTypeHash,\\n    bytes32 profileName,\\n    address account,\\n    uint256 expiredAt\\n  ) private pure returns (bytes32) {\\n    return keccak256(abi.encode(msgTypeHash, profileName, account, expiredAt));\\n  }\\n\\n  function getSignerAddress(bytes memory signature, bytes32 structHash) internal view returns (address) {\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal Signature\\\");\\n    return msgSigner;\\n  }\\n\\n  function generateAuthorizationError(IACL.AuthorizationStatus status) internal pure {\\n    if (status == IACL.AuthorizationStatus.UNAUTHORIZED) revert IACL.ACLUnauthorized();\\n    else if (status == IACL.AuthorizationStatus.POLICY_FORBIDDEN) revert IACL.ACLPolicyForbidden();\\n    else if (status == IACL.AuthorizationStatus.CALL_FORBIDDEN) revert IACL.ACLCallForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_SCOPE_FORBIDDEN) revert IACL.ACLRoleScopeForbidden();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_NOT_FOUND) revert IACL.ACLMemberNotFound();\\n    else if (status == IACL.AuthorizationStatus.ROLE_NOT_FOUND) revert IACL.ACLRoleNotFound();\\n    else if (status == IACL.AuthorizationStatus.TYPE_NOT_FOUND) revert IACL.ACLTypeNotFound();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_NOT_FOUND) revert IACL.ACLFunctionNotFound();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_NOT_FOUND) revert IACL.ACLContextNotFound();\\n    else if (status == IACL.AuthorizationStatus.REALM_NOT_FOUND) revert IACL.ACLRealmNotFound();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_NOT_FOUND) revert IACL.ACLDomainNotFound();\\n    else if (status == IACL.AuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN) revert IACL.ACLMemberActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.ACLRoleActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.ACLTypeActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN) revert IACL.ACLFunctionActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN) revert IACL.ACLContextActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.REALM_ACTIVITY_FORBIDDEN) revert IACL.ACLRealmActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN) revert IACL.ACLDomainActivityForbidden();\\n    else if (status == IACL.AuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN) revert IACL.ACLUniverseActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAuthorizationError(IProfileACL.ProfileAuthorizationStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAuthorizationStatus.UNAUTHORIZED) revert IProfileACL.ProfileACLUnauthorized();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_CALL_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberCallForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_SCOPE_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleScopeForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_NOT_FOUND)\\n      revert IProfileACL.ProfileACLMemberNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRoleNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileACLTypeNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileACLFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_NOT_FOUND)\\n      revert IProfileACL.ProfileACLContextNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_NOT_FOUND)\\n      revert IProfileACL.ProfileACLRealmNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_NOT_FOUND)\\n      revert IProfileACL.ProfileACLDomainNotFound();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.MEMBER_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLMemberActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLTypeActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.FUNCTION_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLFunctionActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.CONTEXT_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLContextActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.REALM_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLRealmActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.DOMAIN_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLDomainActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.UNIVERSE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLUniverseActivityForbidden();\\n    else if (status == IProfileACL.ProfileAuthorizationStatus.PROFILE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileACLProfileActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateProfileAdminAccessError(IProfileACL.ProfileAdminAccessStatus status) internal pure {\\n    if (status == IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED)\\n      revert IProfileACL.ProfileAdminAccessNotPermitted();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessPolicyForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessRoleNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessTypeNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.FUNCTION_NOT_FOUND)\\n      revert IProfileACL.ProfileAdminAccessFunctionNotFound();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessRoleActivityForbidden();\\n    else if (status == IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN)\\n      revert IProfileACL.ProfileAdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n\\n  function generateAdminAccessError(IACL.AdminAccessStatus status) internal pure {\\n    if (status == IACL.AdminAccessStatus.NOT_PERMITTED) revert IACL.AdminAccessNotPermitted();\\n    else if (status == IACL.AdminAccessStatus.POLICY_FORBIDDEN) revert IACL.AdminAccessPolicyForbidden();\\n    else if (status == IACL.AdminAccessStatus.ROLE_NOT_FOUND) revert IACL.AdminAccessRoleNotFound();\\n    else if (status == IACL.AdminAccessStatus.TYPE_NOT_FOUND) revert IACL.AdminAccessTypeNotFound();\\n    else if (status == IACL.AdminAccessStatus.FUNCTION_NOT_FOUND) revert IACL.AdminAccessFunctionNotFound();\\n    else if (status == IACL.AdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessRoleActivityForbidden();\\n    else if (status == IACL.AdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN) revert IACL.AdminAccessTypeActivityForbidden();\\n    else revert(\\\"Unknown ERR\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x0a1ead86733fdae5c48faf98479dea608f2a5743722b7d458981c33ff13489c1\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LProfileRolePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./LACLUtils.sol\\\";\\nimport \\\"./LProfileStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/profile/IProfileACLGenerals.sol\\\";\\nimport \\\"../../acl/profile/IProfileManagement.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../proxy/IERC1822.sol\\\";\\nimport \\\"../../utils/IERC165.sol\\\";\\nimport \\\"../../acl/profile/IProfileACL.sol\\\";\\nimport \\\"../../acl/profile/agent/IProfileRoleManagement.sol\\\";\\nimport \\\"../../acl/profile/policy/IProfilePolicyManagement.sol\\\";\\n\\n/**\\n * @title Profile Commons Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LProfileRolePolicy {\\n  using LProfileStorage for IACLCommons.ProfileEntity;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  string public constant LIB_NAME = \\\"LProfileRolePolicy\\\";\\n  string public constant LIB_VERSION = \\\"3.0.0\\\";\\n\\n  bytes32 public constant LIVELY_VERSE_ANONYMOUS_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANONYMOUS\\\"));\\n  bytes32 public constant LIVELY_VERSE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_VERSE.LIVELY_ANY\\\"));\\n\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID =\\n    keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER\\\"));\\n  bytes32 public constant LIVELY_PROFILE_ANY_TYPE_ID = keccak256(abi.encodePacked(\\\"TYPE.LIVELY_PROFILE.LIVELY_ANY\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_UNIVERSE_SCOPE_ID =\\n    keccak256(abi.encodePacked(\\\"UNIVERSE.LIVELY_PROFILE\\\"));\\n  bytes32 public constant LIVELY_PROFILE_LIVELY_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_MASTER_ADMIN\\\"));\\n  bytes32 public constant LIVELY_PROFILE_SYSTEM_MASTER_ADMIN_ROLE_ID =\\n    keccak256(abi.encodePacked(\\\"ROLE.LIVELY_PROFILE.LIVELY_SYSTEM_MASTER_ADMIN\\\"));\\n\\n  function profileCheckAdminAccess(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 adminId,\\n    bytes32 senderId\\n  ) external view returns (IProfileACL.ProfileAdminAccessStatus) {\\n    return _doProfileCheckAdminAccess(profileEntity, functionEntity, adminId, senderId);\\n  }\\n\\n  function profileAgentGetScopeInfo(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    external\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    return _doAgentGetScopeInfo(profileEntity, agentId);\\n  }\\n\\n  function profileCheckMemberForRoleRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    uint16 requestLength,\\n    bytes32 senderId\\n  ) external {\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(profileMemberEntity.registerLimits.roleRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Member RoleRegisterLimit\\\"\\n      );\\n      require(\\n        int32(profileEntity.registerLimits.roleRegisterLimit) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile RoleRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.roleRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.roleRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileCheckMemberForPolicyRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    uint16 requestLength,\\n    bytes32 senderId\\n  ) external {\\n    // check profile and type limitations and update it\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity = profileEntity.profileMemberReadSlot(senderId);\\n    require(profileMemberEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Member Updatable\\\");\\n    require(profileEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Profile Updatable\\\");\\n    unchecked {\\n      require(\\n        int32(uint32(profileMemberEntity.registerLimits.policyRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Member PolicyRegisterLimit\\\"\\n      );\\n      require(\\n        int32(uint32(profileEntity.registerLimits.policyRegisterLimit)) - int16(requestLength) >= 0,\\n        \\\"Illegal Profile PolicyRegisterLimit\\\"\\n      );\\n      profileMemberEntity.registerLimits.policyRegisterLimit -= requestLength;\\n      profileEntity.registerLimits.policyRegisterLimit -= requestLength;\\n    }\\n  }\\n\\n  function profileRoleRegister(\\n    IProfileRoleManagement.ProfileRoleRegisterRequest calldata request,\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 profileId,\\n    bytes32 senderId\\n  ) external returns (bytes32, bytes32) {\\n    bytes32 newRoleId = LACLUtils.generateId(request.name);\\n    require(profileEntity.agents[newRoleId].atype == IACLCommons.AgentType.NONE, \\\"Already Exist\\\");\\n    require(\\n      request.typeId != LIVELY_VERSE_ANONYMOUS_TYPE_ID && request.typeId != LIVELY_PROFILE_ANY_TYPE_ID,\\n      \\\"Illegal Type\\\"\\n    );\\n\\n    // check type\\n    IACLCommons.TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(request.typeId);\\n    require(typeEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Type Updatable\\\");\\n    require(typeEntity.roles.length() < typeEntity.roleLimit, \\\"Illegal Register\\\");\\n\\n    {\\n      // check access\\n      IProfileACL.ProfileAdminAccessStatus status = _doProfileCheckAdminAccess(\\n        profileEntity,\\n        functionEntity,\\n        typeEntity.ba.adminId,\\n        senderId\\n      );\\n      if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n    }\\n\\n    // check and get requested scope type\\n    IACLCommons.ScopeType requestScopeType = _doProfileRoleCheckRequestScope(\\n      profileEntity,\\n      request.scopeId,\\n      typeEntity.scopeId,\\n      profileId\\n    );\\n\\n    // add role to type\\n    typeEntity.roles.add(newRoleId);\\n\\n    // create role entity\\n    IACLCommons.RoleEntity storage newRole = profileEntity.profileRoleWriteSlot(newRoleId);\\n    newRole.ba.atype = IACLCommons.AgentType.ROLE;\\n    newRole.ba.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    newRole.ba.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    newRole.name = request.name;\\n    newRole.scopeId = request.scopeId;\\n    newRole.memberLimit = request.memberLimit >= 0\\n      ? uint24(uint32(request.memberLimit))\\n      : profileEntity.limits.memberLimit;\\n    newRole.typeId = request.typeId;\\n    newRole.ba.adminId = _doProfileGetRoleAdmin(\\n      profileEntity,\\n      requestScopeType,\\n      typeEntity.ba.adminId,\\n      request.scopeId,\\n      request.adminId,\\n      profileId\\n    );\\n\\n    return (newRoleId, newRole.ba.adminId);\\n  }\\n\\n  function profilePolicyRegister(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfilePolicyManagement.ProfilePolicyRegisterRequest calldata request,\\n    bytes32 profileId,\\n    IACLCommons.ScopeType senderScopeType,\\n    bytes32 senderScopeId\\n  ) external returns (bytes32) {\\n    bytes32 newPolicyId = LACLUtils.generateId(request.name);\\n    require(profileEntity.policies[newPolicyId].acstat == IACLCommons.ActivityStatus.NONE, \\\"Already Exist\\\");\\n\\n    // // checking requested type scope\\n    IACLCommons.BaseScope storage requestedScope = _doProfilePolicyCheckRequestScope(\\n      profileEntity,\\n      request.scopeId,\\n      senderScopeId,\\n      senderScopeType,\\n      profileId\\n    );\\n\\n    // create policy entity\\n    IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[newPolicyId];\\n    policyEntity.ptype = _doProfileGetPolicyType(request.policyCode);\\n    policyEntity.policyCode = request.policyCode;\\n    policyEntity.acstat = IACLCommons.ActivityStatus.ENABLED;\\n    policyEntity.alstat = IACLCommons.AlterabilityStatus.UPDATABLE;\\n    policyEntity.name = request.name;\\n    policyEntity.scopeId = request.scopeId;\\n    policyEntity.roleLimit = request.roleLimit >= 0\\n      ? uint16(uint24(request.roleLimit))\\n      : profileEntity.limits.policyRoleLimit;\\n    policyEntity.adminId = _doProfileGetPolicyAdmin(\\n      profileEntity,\\n      requestedScope.stype,\\n      requestedScope.adminId,\\n      request.scopeId,\\n      request.adminId,\\n      profileId\\n    );\\n    return newPolicyId;\\n  }\\n\\n  function profileGetPolicyAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.ScopeType requestScopeType,\\n    bytes32 requestScopeAdmin,\\n    bytes32 scopeId,\\n    bytes32 adminId,\\n    bytes32 profileId\\n  ) external view returns (bytes32 policyAdminId) {\\n    return _doProfileGetPolicyAdmin(profileEntity, requestScopeType, requestScopeAdmin, scopeId, adminId, profileId);\\n  }\\n\\n  function profilePolicyUpdateScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfilePolicyManagement.ProfileUpdateScopeRequest calldata request,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 profileId,\\n    bytes32 senderId\\n  ) external {\\n    IACLCommons.ScopeType senderScopeType;\\n    bytes32 senderScopeId;\\n    IACLCommons.PolicyEntity storage policyEntity = _doProfileGetPolicyAndCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      request.entityId,\\n      senderId\\n    );\\n\\n    IACLCommons.AgentType adminAgentType = profileEntity.agents[policyEntity.adminId].atype;\\n    if (adminAgentType == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(policyEntity.adminId);\\n      senderScopeId = roleEntity.scopeId;\\n      senderScopeType = profileEntity.scopes[roleEntity.scopeId].stype;\\n    } else {\\n      IACLCommons.TypeEntity storage agentType = profileEntity.profileTypeReadSlot(policyEntity.adminId);\\n      bytes32 memberRoleId = agentType.members[senderId];\\n      IACLCommons.RoleEntity storage memberAgentRole = profileEntity.profileRoleReadSlot(memberRoleId);\\n      senderScopeType = profileEntity.scopes[memberAgentRole.scopeId].stype;\\n      senderScopeId = memberAgentRole.scopeId;\\n    }\\n\\n    IACLCommons.BaseScope storage requestScope = _doProfilePolicyCheckRequestScope(\\n      profileEntity,\\n      request.scopeId,\\n      senderScopeId,\\n      senderScopeType,\\n      profileId\\n    );\\n    IACLCommons.BaseScope storage currentScope = profileEntity.scopes[policyEntity.scopeId];\\n    if (policyEntity.roles.length() > 0) {\\n      require(requestScope.stype > currentScope.stype, \\\"Illegal ScopeType\\\");\\n      require(\\n        IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, request.scopeId, policyEntity.scopeId),\\n        \\\"Illegal Scope\\\"\\n      );\\n    }\\n\\n    require(currentScope.referredByAgent > 0, \\\"Illeagl Referred\\\");\\n    unchecked {\\n      currentScope.referredByAgent -= 1;\\n    }\\n\\n    policyEntity.scopeId = request.scopeId;\\n  }\\n\\n  function profilePolicyAddRoles(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.PolicyEntity storage policyEntity,\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    bytes32 roleId,\\n    IACLCommons.ScopeType policyScopeType\\n  ) external {\\n    require(profileEntity.rolePolicyMap[roleId] == bytes32(0), \\\"Already Exist\\\");\\n    require(policyEntity.adminId != roleId, \\\"Illegal Role\\\");\\n    require(policyEntity.roleLimit > policyEntity.roles.length(), \\\"Illegal Limit\\\");\\n    IACLCommons.RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(roleId);\\n\\n    IACLCommons.ScopeType roleScopeType = profileEntity.scopes[roleEntity.scopeId].stype;\\n    require(roleScopeType <= policyScopeType, \\\"Illegal Role ScopeType\\\");\\n    if (roleScopeType == policyScopeType) {\\n      require(roleEntity.scopeId == policyEntity.scopeId, \\\"Illegal Role Scope\\\");\\n    } else {\\n      require(\\n        IProfileACLGenerals(address(this)).profileIsScopesCompatible(\\n          profileId,\\n          policyEntity.scopeId,\\n          roleEntity.scopeId\\n        ),\\n        \\\"Illegal Role Scope\\\"\\n      );\\n    }\\n\\n    profileEntity.rolePolicyMap[roleId] = policyId;\\n    policyEntity.roles.add(roleId);\\n  }\\n\\n  function profilePolicyCheckAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    bytes32 policyId,\\n    address account\\n  ) external view returns (bool) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    if (profileEntity.acstat == IACLCommons.ActivityStatus.NONE) return false;\\n\\n    IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[policyId];\\n    if (policyEntity.adminId == bytes32(0)) return false;\\n\\n    bytes32 policyAdminId = policyEntity.adminId;\\n    IACLCommons.AgentType agentType = profileEntity.agents[policyAdminId].atype;\\n    bytes32 memberId = LACLUtils.accountGenerateId(account);\\n\\n    if (agentType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(policyAdminId);\\n      if (!result) return false;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(\\n        roleEntity.typeId\\n      );\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] == policyAdminId;\\n    } else if (agentType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(policyAdminId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] != bytes32(0);\\n    }\\n    return true;\\n  }\\n\\n  function profilePolicyGetInfo(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    bytes32 policyId\\n  ) external view returns (IProfilePolicyManagement.ProfilePolicyInfo memory) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    if (\\n      profileEntity.policies[policyId].acstat == IACLCommons.ActivityStatus.NONE ||\\n      profileEntity.acstat == IACLCommons.ActivityStatus.NONE\\n    ) {\\n      return\\n        IProfilePolicyManagement.ProfilePolicyInfo({\\n          adminId: bytes32(0),\\n          scopeId: bytes32(0),\\n          name: \\\"\\\",\\n          roleLimit: 0,\\n          roleCount: 0,\\n          policyCode: 0,\\n          adminType: IACLCommons.AgentType.NONE,\\n          scopeType: IACLCommons.ScopeType.NONE,\\n          ptype: IACLCommons.PolicyType.UNLOCK,\\n          acstat: IACLCommons.ActivityStatus.NONE,\\n          alstat: IACLCommons.AlterabilityStatus.NONE\\n        });\\n    }\\n\\n    return\\n      IProfilePolicyManagement.ProfilePolicyInfo({\\n        adminId: profileEntity.policies[policyId].adminId,\\n        scopeId: profileEntity.policies[policyId].scopeId,\\n        name: profileEntity.policies[policyId].name,\\n        roleLimit: profileEntity.policies[policyId].roleLimit,\\n        roleCount: uint16(profileEntity.policies[policyId].roles.length()),\\n        policyCode: profileEntity.policies[policyId].policyCode,\\n        adminType: profileEntity.agents[profileEntity.policies[policyId].adminId].atype,\\n        scopeType: profileEntity.scopes[profileEntity.policies[policyId].scopeId].stype,\\n        ptype: profileEntity.policies[policyId].ptype,\\n        acstat: profileEntity.policies[policyId].acstat,\\n        alstat: profileEntity.policies[policyId].alstat\\n      });\\n  }\\n\\n  function profilePolicyUpdateAlterabilityStatus(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IProfilePolicyManagement.ProfileUpdateAlterabilityRequest calldata request,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 senderId\\n  ) external {\\n    IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[request.entityId];\\n    require(policyEntity.adminId != bytes32(0), \\\"Not Found\\\");\\n    IProfileACL.ProfileAdminAccessStatus status = _doProfileCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      policyEntity.adminId,\\n      senderId\\n    );\\n    if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n    require(request.alstat != IACLCommons.AlterabilityStatus.NONE, \\\"Illegal Alterability\\\");\\n    policyEntity.alstat = request.alstat;\\n  }\\n\\n  function profileGetPolicyType(uint8 policyCode) external pure returns (IACLCommons.PolicyType) {\\n    return _doProfileGetPolicyType(policyCode);\\n  }\\n\\n  function profileRoleGetInfo(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    bytes32 roleId\\n  ) external view returns (IProfileRoleManagement.ProfileRoleInfo memory) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    (IACLCommons.RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(roleId);\\n    if (!result || profileEntity.acstat == IACLCommons.ActivityStatus.NONE) {\\n      return\\n        IProfileRoleManagement.ProfileRoleInfo({\\n          scopeId: bytes32(0),\\n          typeId: bytes32(0),\\n          adminId: bytes32(0),\\n          memberLimit: 0,\\n          memberCount: 0,\\n          adminType: IACLCommons.AgentType.NONE,\\n          atype: IACLCommons.AgentType.NONE,\\n          acstat: IACLCommons.ActivityStatus.NONE,\\n          alstat: IACLCommons.AlterabilityStatus.NONE,\\n          name: \\\"\\\"\\n        });\\n    }\\n    return\\n      IProfileRoleManagement.ProfileRoleInfo({\\n        scopeId: roleEntity.scopeId,\\n        typeId: roleEntity.typeId,\\n        adminId: roleEntity.ba.adminId,\\n        memberLimit: roleEntity.memberLimit,\\n        memberCount: roleEntity.memberCount,\\n        adminType: profileEntity.agents[roleEntity.ba.adminId].atype,\\n        atype: roleEntity.ba.atype,\\n        acstat: roleEntity.ba.acstat,\\n        alstat: roleEntity.ba.alstat,\\n        name: roleEntity.name\\n      });\\n  }\\n\\n  function profileRoleHasAccount(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    address account\\n  ) external view returns (bool) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    if (profileEntity.acstat == IACLCommons.ActivityStatus.NONE) return false;\\n    bytes32 memberId = LACLUtils.accountGenerateId(account);\\n\\n    (IACLCommons.RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(roleId);\\n    if (!result) return false;\\n\\n    (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(roleEntity.typeId);\\n    if (!result1) return false;\\n\\n    return typeEntity.members[memberId] != bytes32(0);\\n  }\\n\\n  function profileRoleCheckAdmin(\\n    ACLStorage.DataCollection storage data,\\n    bytes32 profileId,\\n    bytes32 roleId,\\n    address account\\n  ) external view returns (bool) {\\n    IACLCommons.ProfileEntity storage profileEntity = data.profiles[profileId];\\n    if (profileEntity.acstat == IACLCommons.ActivityStatus.NONE) return false;\\n    if (profileEntity.agents[roleId].atype != IACLCommons.AgentType.ROLE) return false;\\n\\n    bytes32 roleAdminId = profileEntity.agents[roleId].adminId;\\n    IACLCommons.AgentType adminAgenType = profileEntity.agents[roleAdminId].atype;\\n    bytes32 memberId = LACLUtils.accountGenerateId(account);\\n\\n    if (adminAgenType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(roleAdminId);\\n      if (!result) return false;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(\\n        roleEntity.typeId\\n      );\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] == roleAdminId;\\n    } else if (adminAgenType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(roleAdminId);\\n      if (!result1) return false;\\n\\n      return typeEntity.members[memberId] != bytes32(0);\\n    }\\n\\n    return false;\\n  }\\n\\n  function profileRoleUpdateScope(\\n    IProfileRoleManagement.ProfileUpdateScopeRequest calldata request,\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 profileId,\\n    bytes32 senderId\\n  ) external returns (bool) {\\n    IACLCommons.RoleEntity storage roleEntity = _doProfileGetRoleEntityAndCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      request.entityId,\\n      senderId\\n    );\\n    IACLCommons.TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(roleEntity.typeId);\\n    _doProfileRoleCheckRequestScope(profileEntity, request.scopeId, typeEntity.scopeId, profileId);\\n    IACLCommons.BaseScope storage oldScope = profileEntity.scopes[roleEntity.scopeId];\\n    require(oldScope.referredByAgent > 0, \\\"Illeagl Referred\\\");\\n    unchecked {\\n      oldScope.referredByAgent -= 1;\\n    }\\n    roleEntity.scopeId = request.scopeId;\\n\\n    return true;\\n  }\\n\\n  function profileGetRoleEntityAndCheckAdminAccess(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 roleId,\\n    bytes32 senderId\\n  ) external view returns (IACLCommons.RoleEntity storage) {\\n    return _doProfileGetRoleEntityAndCheckAdminAccess(profileEntity, functionEntity, roleId, senderId);\\n  }\\n\\n  function updateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity,\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    bool isRevoke\\n  ) external {\\n    return _updateProfileAccount(data, profileMemberEntity, profileId, typeId, isRevoke);\\n  }\\n\\n  function profileGetRoleAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.ScopeType requestScopeType,\\n    bytes32 requestScopeAdmin,\\n    bytes32 scopeId,\\n    bytes32 adminId,\\n    bytes32 profileId\\n  ) external view returns (bytes32 roleAdminId) {\\n    return _doProfileGetRoleAdmin(profileEntity, requestScopeType, requestScopeAdmin, scopeId, adminId, profileId);\\n  }\\n\\n  function _doProfileGetPolicyAndCheckAdminAccess(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 policyId,\\n    bytes32 memberId\\n  ) private view returns (IACLCommons.PolicyEntity storage) {\\n    IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[policyId];\\n    require(policyEntity.adminId != bytes32(0), \\\"Not Found\\\");\\n    require(policyEntity.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Updatable\\\");\\n    IProfileACL.ProfileAdminAccessStatus status = _doProfileCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      policyEntity.adminId,\\n      memberId\\n    );\\n    if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n    return policyEntity;\\n  }\\n\\n  function _doProfileGetPolicyAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.ScopeType requestScopeType,\\n    bytes32 requestScopeAdmin,\\n    bytes32 scopeId,\\n    bytes32 adminId,\\n    bytes32 profileId\\n  ) private view returns (bytes32 policyAdminId) {\\n    // checking requested type admin\\n    if (adminId != bytes32(0)) {\\n      require(profileEntity.agents[adminId].atype == IACLCommons.AgentType.ROLE, \\\"Illegal Admin AgentType\\\");\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doAgentGetScopeInfo(\\n        profileEntity,\\n        adminId\\n      );\\n      require(requestScopeType <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (requestScopeType == requestAdminScopeType) {\\n        require(requestAdminScopeId == scopeId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(\\n          IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, requestAdminScopeId, scopeId),\\n          \\\"Illegal Admin Scope\\\"\\n        );\\n      }\\n      policyAdminId = adminId;\\n    } else {\\n      policyAdminId = requestScopeAdmin;\\n    }\\n  }\\n\\n  function _doProfileGetPolicyType(uint8 policyCode) private pure returns (IACLCommons.PolicyType) {\\n    if (policyCode == 0) {\\n      return IACLCommons.PolicyType.UNLOCK;\\n    } else if (policyCode <= 63) {\\n      return IACLCommons.PolicyType.SLOCK;\\n    } else if (policyCode <= 127) {\\n      return IACLCommons.PolicyType.MLOCK;\\n    } else if (policyCode <= 191) {\\n      return IACLCommons.PolicyType.RLOCK;\\n    } else if (policyCode <= 254) {\\n      return IACLCommons.PolicyType.HLOCK;\\n    } else {\\n      return IACLCommons.PolicyType.LOCK;\\n    }\\n  }\\n\\n  function _doProfileGetRoleEntityAndCheckAdminAccess(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 roleId,\\n    bytes32 senderId\\n  ) private view returns (IACLCommons.RoleEntity storage) {\\n    IACLCommons.RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(roleId);\\n    require(roleEntity.ba.alstat >= IACLCommons.AlterabilityStatus.UPDATABLE, \\\"Illegal Updatable\\\");\\n\\n    // check access admin role\\n    IProfileACL.ProfileAdminAccessStatus status = _doProfileCheckAdminAccess(\\n      profileEntity,\\n      functionEntity,\\n      roleEntity.ba.adminId,\\n      senderId\\n    );\\n    if (status != IProfileACL.ProfileAdminAccessStatus.PERMITTED) LACLUtils.generateProfileAdminAccessError(status);\\n    return roleEntity;\\n  }\\n\\n  function _updateProfileAccount(\\n    ACLStorage.DataCollection storage data,\\n    IACLCommons.ProfileMemberEntity storage profileMemberEntity,\\n    bytes32 profileId,\\n    bytes32 typeId,\\n    bool isRevoke\\n  ) private {\\n    IACLCommons.ProfileAccount storage profileAccount = data.profileAccounts[profileMemberEntity.account];\\n    require(profileAccount.profiles.length > 0, \\\"ProfileAccount Not Found\\\");\\n    bool findFlag = false;\\n    for (uint256 i = 0; i < profileAccount.profiles.length; i++) {\\n      if (profileAccount.profiles[i] == profileId) {\\n        findFlag = true;\\n        if (!isRevoke) {\\n          if (\\n            (profileMemberEntity.types.contains(LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID) ||\\n              profileMemberEntity.types.contains(LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID)) &&\\n            (typeId == LIVELY_PROFILE_LIVELY_MASTER_TYPE_ID || typeId == LIVELY_PROFILE_SYSTEM_MASTER_TYPE_ID)\\n          ) {\\n            revert(\\\"Illegal GrantMemberType\\\");\\n          }\\n        } else {\\n          if (profileAccount.profiles.length > 1) {\\n            if (i < profileAccount.profiles.length - 1)\\n              profileAccount.profiles[i] = profileAccount.profiles[profileAccount.profiles.length - 1];\\n            profileAccount.profiles.pop();\\n          } else {\\n            profileAccount.profiles.pop();\\n            delete profileAccount.profiles;\\n          }\\n        }\\n        break;\\n      }\\n    }\\n\\n    require(findFlag, \\\"Illegal ProfileAccount\\\");\\n  }\\n\\n  function _doProfileGetRoleAdmin(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.ScopeType requestScopeType,\\n    bytes32 requestScopeAdmin,\\n    bytes32 scopeId,\\n    bytes32 adminId,\\n    bytes32 profileId\\n  ) private view returns (bytes32 roleAdminId) {\\n    // checking requested type admin\\n    if (adminId != bytes32(0)) {\\n      require(profileEntity.agents[adminId].atype > IACLCommons.AgentType.MEMBER, \\\"Illegal Admin AgentType\\\");\\n      (IACLCommons.ScopeType requestAdminScopeType, bytes32 requestAdminScopeId) = _doAgentGetScopeInfo(\\n        profileEntity,\\n        adminId\\n      );\\n      require(requestScopeType <= requestAdminScopeType, \\\"Illegal Admin ScopeType\\\");\\n      if (requestScopeType == requestAdminScopeType) {\\n        require(requestAdminScopeId == scopeId, \\\"Illegal Admin Scope\\\");\\n      } else {\\n        require(\\n          IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, requestAdminScopeId, scopeId),\\n          \\\"Illegal Admin Scope\\\"\\n        );\\n      }\\n      roleAdminId = adminId;\\n    } else {\\n      roleAdminId = requestScopeAdmin;\\n    }\\n  }\\n\\n  function _doProfileRoleCheckRequestScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 requestScopeId,\\n    bytes32 typeScopeId,\\n    bytes32 profileId\\n  ) private returns (IACLCommons.ScopeType) {\\n    // checking requested role scope\\n    IACLCommons.BaseScope storage requestScope = profileEntity.scopes[requestScopeId];\\n    require(requestScope.stype != IACLCommons.ScopeType.NONE, \\\"Scope Not Found\\\");\\n    require(requestScope.acstat > IACLCommons.ActivityStatus.DELETED, \\\"Scope Deleted\\\");\\n\\n    // increase referred count to target scope\\n    requestScope.referredByAgent += 1;\\n\\n    // checking requested role type scope with role scope\\n    IACLCommons.ScopeType typeScopeType = profileEntity.scopes[typeScopeId].stype;\\n    require(typeScopeType >= requestScope.stype, \\\"Illegal ScopeType\\\");\\n    if (typeScopeType == requestScope.stype) {\\n      require(typeScopeId == requestScopeId, \\\"Illegal Scope\\\");\\n    } else {\\n      require(\\n        IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, typeScopeId, requestScopeId),\\n        \\\"Illegal Scope\\\"\\n      );\\n    }\\n\\n    return requestScope.stype;\\n  }\\n\\n  function _doProfilePolicyCheckRequestScope(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    bytes32 requestScopeId,\\n    bytes32 senderScopeId,\\n    IACLCommons.ScopeType senderScopeType,\\n    bytes32 profileId\\n  ) private returns (IACLCommons.BaseScope storage) {\\n    // checking requested type scope\\n    IACLCommons.BaseScope storage requestScope = profileEntity.scopes[requestScopeId];\\n    require(requestScope.stype != IACLCommons.ScopeType.NONE, \\\"Scope Not Found\\\");\\n    require(requestScope.acstat > IACLCommons.ActivityStatus.DELETED, \\\"Deleted\\\");\\n\\n    // increase referred count to target scope\\n    requestScope.referredByAgent += 1;\\n\\n    require(requestScope.stype <= senderScopeType, \\\"Illegal ScopeType\\\");\\n    if (requestScope.stype == senderScopeType) {\\n      require(requestScopeId == senderScopeId, \\\"Illegal Scope\\\");\\n    } else {\\n      require(\\n        IProfileACLGenerals(address(this)).profileIsScopesCompatible(profileId, senderScopeId, requestScopeId),\\n        \\\"Illegal Scope\\\"\\n      );\\n    }\\n\\n    return requestScope;\\n  }\\n\\n  function _doProfileCheckAdminAccess(\\n    IACLCommons.ProfileEntity storage profileEntity,\\n    IACLCommons.FunctionEntity storage functionEntity,\\n    bytes32 adminId,\\n    bytes32 senderId\\n  ) private view returns (IProfileACL.ProfileAdminAccessStatus) {\\n    // owners always access to all entities to modify those\\n    if (profileEntity.admins.contains(senderId)) return IProfileACL.ProfileAdminAccessStatus.PERMITTED;\\n\\n    IACLCommons.AgentType adminAgentType = profileEntity.agents[adminId].atype;\\n    if (adminAgentType == IACLCommons.AgentType.ROLE) {\\n      (IACLCommons.RoleEntity storage roleEntity, bool result) = profileEntity.profileRoleTryReadSlot(adminId);\\n      if (!result) return IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(\\n        roleEntity.typeId\\n      );\\n      if (!result1) return IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      if (typeEntity.members[senderId] != adminId) return IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[adminId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IProfileACL.ProfileAdminAccessStatus.PERMITTED;\\n    } else if (adminAgentType == IACLCommons.AgentType.TYPE) {\\n      (IACLCommons.TypeEntity storage typeEntity, bool result1) = profileEntity.profileTypeTryReadSlot(adminId);\\n      if (!result1) return IProfileACL.ProfileAdminAccessStatus.TYPE_NOT_FOUND;\\n      if (typeEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.TYPE_ACTIVITY_FORBIDDEN;\\n\\n      bytes32 roleId = typeEntity.members[senderId];\\n      (IACLCommons.RoleEntity storage roleEntity, bool result2) = profileEntity.profileRoleTryReadSlot(roleId);\\n      if (!result2) return IProfileACL.ProfileAdminAccessStatus.ROLE_NOT_FOUND;\\n      if (roleEntity.ba.acstat != IACLCommons.ActivityStatus.ENABLED)\\n        return IProfileACL.ProfileAdminAccessStatus.ROLE_ACTIVITY_FORBIDDEN;\\n\\n      IACLCommons.PolicyEntity storage policyEntity = profileEntity.policies[profileEntity.rolePolicyMap[roleId]];\\n      if (\\n        policyEntity.acstat == IACLCommons.ActivityStatus.ENABLED &&\\n        policyEntity.policyCode >= functionEntity.policyCode\\n      ) return IProfileACL.ProfileAdminAccessStatus.POLICY_FORBIDDEN;\\n\\n      return IProfileACL.ProfileAdminAccessStatus.PERMITTED;\\n    }\\n\\n    return IProfileACL.ProfileAdminAccessStatus.NOT_PERMITTED;\\n  }\\n\\n  function _doAgentGetScopeInfo(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    private\\n    view\\n    returns (IACLCommons.ScopeType, bytes32)\\n  {\\n    IACLCommons.AgentType atype = profileEntity.agents[agentId].atype;\\n    if (atype == IACLCommons.AgentType.ROLE) {\\n      IACLCommons.RoleEntity storage roleEntity = profileEntity.profileRoleReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = profileEntity.scopes[roleEntity.scopeId];\\n      return (baseScope.stype, roleEntity.scopeId);\\n    } else if (atype == IACLCommons.AgentType.TYPE) {\\n      IACLCommons.TypeEntity storage typeEntity = profileEntity.profileTypeReadSlot(agentId);\\n      IACLCommons.BaseScope storage baseScope = profileEntity.scopes[typeEntity.scopeId];\\n      return (baseScope.stype, typeEntity.scopeId);\\n    }\\n\\n    return (IACLCommons.ScopeType.NONE, bytes32(0));\\n  }\\n}\\n\",\"keccak256\":\"0x75543cec7cb6206290d4e948e67554c6b57c82c194275d17e1f13f950309a067\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../acl/IACLCommons.sol\\\";\\nimport \\\"../../acl/ACLStorage.sol\\\";\\n\\n/**\\n * @title ACL Storage Library\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nlibrary LProfileStorage {\\n  function profileUniverseReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"GID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl GID Slot\\\");\\n    }\\n  }\\n\\n  function profileUniverseWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.UniverseEntity storage ge)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.UNIVERSE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ge.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal GID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"FID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileFunctionWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal FID Slot\\\");\\n    }\\n  }\\n\\n  function profileFunctionTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.FunctionEntity storage fe, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.FUNCTION) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        fe.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (fe, result);\\n    }\\n    assembly {\\n      fe.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"CID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileContextWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal CID Slot\\\");\\n    }\\n  }\\n\\n  function profileContextTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.ContextEntity storage ce, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.CONTEXT) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        ce.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (ce, result);\\n    }\\n    assembly {\\n      ce.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"RID Not Found\\\");\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRealmWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illeagl RID Slot\\\");\\n    }\\n  }\\n\\n  function profileRealmTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.RealmEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.REALM) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (bs.stype == IACLCommons.ScopeType.NONE) {\\n      revert(\\\"DID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileDomainWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal DID Slot\\\");\\n    }\\n  }\\n\\n  function profileDomainTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 scopeId)\\n    internal\\n    view\\n    returns (IACLCommons.DomainEntity storage de, bool result)\\n  {\\n    IACLCommons.BaseScope storage bs = profileEntity.scopes[scopeId];\\n    if (bs.stype == IACLCommons.ScopeType.NONE || bs.stype == IACLCommons.ScopeType.DOMAIN) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), scopeId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 1))\\n        de.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (de, result);\\n    }\\n    assembly {\\n      de.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"MID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileMemberWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal MID Slot\\\");\\n    }\\n  }\\n\\n  function profileMemberTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.ProfileMemberEntity storage me, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.MEMBER) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        me.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (me, result);\\n    }\\n    assembly {\\n      me.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"RoleId Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        re.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileRoleWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n    } else {\\n      revert(\\\"Illegal RoleId Slot\\\");\\n    }\\n  }\\n\\n  function profileRoleTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.RoleEntity storage re, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.ROLE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        let slot := keccak256(ptr, 0x40)\\n        re.slot := slot\\n      }\\n      result = true;\\n      return (re, result);\\n    }\\n    assembly {\\n      re.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else if (ba.atype == IACLCommons.AgentType.NONE) {\\n      revert(\\\"TID Not Found\\\");\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryReadSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n\\n  function profileTypeWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n    } else {\\n      revert(\\\"Illegal TID Slot\\\");\\n    }\\n  }\\n\\n  function profileTypeTryWriteSlot(IACLCommons.ProfileEntity storage profileEntity, bytes32 agentId)\\n    internal\\n    view\\n    returns (IACLCommons.TypeEntity storage te, bool result)\\n  {\\n    IACLCommons.BaseAgent storage ba = profileEntity.agents[agentId];\\n    if (ba.atype == IACLCommons.AgentType.NONE || ba.atype == IACLCommons.AgentType.TYPE) {\\n      assembly {\\n        let ptr := mload(0x40)\\n        mstore(add(ptr, 0x00), agentId)\\n        mstore(add(ptr, 0x20), add(profileEntity.slot, 0))\\n        te.slot := keccak256(ptr, 0x40)\\n      }\\n      result = true;\\n      return (te, result);\\n    }\\n    assembly {\\n      te.slot := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    }\\n    result = false;\\n  }\\n}\\n\",\"keccak256\":\"0xe95300b9bb0c9fa78648108acf843bd0609e08a60b03b61a79f271f5fcb46b91\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0x75b905d070ebb72fa3358e262ab18166f6c6386c11171324f235058ce9185ca4\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe49098eb2019f9d9628a399f6a06ec310fe8a10785c369cc508c56df1f203dd0\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Abstract Base UUPS Storage Contract\\n * @author OpenZeppelin, Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\nabstract contract BaseUUPSStorage is IBaseProxy {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  address internal immutable __self = address(this);\\n\\n  string internal _contractName;\\n  string internal _contractVersion;\\n  address internal _accessControlManager;\\n  ProxySafeModeStatus internal _sstat;\\n  ProxyUpdatabilityStatus internal _ustat;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x4ff079fd2fd1ad102d42e82a72bff6bb1ffb8f9ab29cec2dd8e970b892ea415e\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IBaseProxy {\\n  enum ProxySafeModeStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  enum ProxyUpdatabilityStatus {\\n    DISABLED,\\n    ENABLED\\n  }\\n\\n  event ProxyUpgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x4b2695303b3acb300ba472d17da71a16367191af571d325d43171503d7c92846\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x98571e9bc4231bb67b3c8b339c052fa968e56b0bef3e35f5d82c391335336ae8\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v3.0.0)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\n/**\\n * @title Base Proxy Interface\\n * @author Sina Tadayon, https://github.com/SinaTadayon\\n * @dev\\n *\\n */\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event ProxyLocalAdminUpdated(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event ProxyAccessControlUpdated(address indexed sender, address indexed proxy, address acl);\\n\\n  event ProxySafeModeUpdated(address indexed sender, address indexed proxy, ProxySafeModeStatus sstat);\\n\\n  event ProxyUpdatabilityUpdated(address indexed sender, address indexed proxy, ProxyUpdatabilityStatus ustat);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeModeStatus(ProxySafeModeStatus sstat) external returns (bool);\\n\\n  function setUpdatabilityStatus(ProxyUpdatabilityStatus ustat) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function setAccessControlManager(address acl) external returns (bool);\\n\\n  function withdrawBalance(address recepient) external returns (uint256);\\n\\n  function contractName() external view returns (string memory);\\n\\n  function contractVersion() external view returns (string memory);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function safeModeStatus() external view returns (ProxySafeModeStatus);\\n\\n  function updatabilityStatus() external view returns (ProxyUpdatabilityStatus);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xaadf51e846486cf9dc7387ad1dcac9a67e6a2d9354ce71694d79de783e1dea3b\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// LivelyVerse Contracts (last updated v2.0.1)\\n// Author: OpenZeppelin\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x95ac867088cd7cca6d583788b83e56e0c521c847aa9844f6184c14f5ce3ddf90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101e45760003560e01c80636a7ca2531161010e578063bbfee8b6116100ac578063c7a497801161007b578063c7a497801461047b578063cb8946581461049b578063d58bf397146104d0578063e5eba2b1146104f057600080fd5b8063bbfee8b614610402578063bec947511461040a578063c4f1f59c1461043b578063c75603551461045b57600080fd5b80639b3362c9116100e85780639b3362c91461039a5780639cb39939146103a2578063a998fe44146103c2578063b856fc46146103e257600080fd5b80636a7ca253146103545780638216e94c1461037457806390250c841461038757600080fd5b80633ab3ab881161018657806358c910c11161015557806358c910c114610304578063593dc0201461030c5780635993230c146103145780635fbcdb4b1461033457600080fd5b80633ab3ab88146102c15780634a6439e6146102c957806350051542146102d15780635371da62146102e457600080fd5b80632466209b116101c25780632466209b14610254578063273f2682146102855780632a8cc5e3146102a6578063339b5c14146102b957600080fd5b8063045bc595146101e95780630d2185c51461020f5780631ac1f05814610231575b600080fd5b6101fc6101f7366004613736565b6104f8565b6040519081526020015b60405180910390f35b81801561021b57600080fd5b5061022f61022a366004613768565b610511565b005b61024461023f3660046137a7565b610738565b6040519015158152602001610206565b610278604051806040016040528060058152602001640332e302e360dc1b81525081565b604051610206919061383a565b61029861029336600461384d565b6108d9565b6040516102069291906138a2565b6101fc6102b43660046138c8565b6108f2565b6101fc61090f565b6101fc61096b565b6101fc61099c565b6101fc6102df3660046138c8565b6109cd565b8180156102f057600080fd5b5061022f6102ff366004613924565b6109dd565b6101fc6109f1565b6101fc610a00565b81801561032057600080fd5b5061022f61032f366004613768565b610a31565b610347610342366004613736565b610c59565b6040516102069190613971565b81801561036057600080fd5b5061022f61036f3660046139a3565b610c67565b6102446103823660046137a7565b610ee8565b6102446103953660046137a7565b61106f565b6101fc611130565b8180156103ae57600080fd5b5061022f6103bd3660046139ea565b61117a565b8180156103ce57600080fd5b506101fc6103dd366004613a4d565b61142d565b6103f56103f0366004613ab6565b6115fa565b6040516102069190613af2565b6101fc61188c565b610278604051806040016040528060128152602001714c50726f66696c65526f6c65506f6c69637960701b81525081565b61044e610449366004613ba3565b61189b565b6040516102069190613bc6565b81801561046757600080fd5b5061022f610476366004613bd3565b6118ac565b81801561048757600080fd5b50610244610496366004613c0f565b6119d7565b8180156104a757600080fd5b506104bb6104b6366004613c52565b611ac8565b60408051928352602083019190915201610206565b6104e36104de366004613ab6565b611de8565b6040516102069190613caf565b6101fc612166565b600061050685858585612175565b90505b949350505050565b600061051d848361222a565b90506002600182015462010000900460ff1660038111156105405761054061386f565b101561058e5760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c204d656d62657220557064617461626c6560401b60448201526064015b60405180910390fd5b60026008850154600160a81b900460ff1660038111156105b0576105b061386f565b10156105fa5760405162461bcd60e51b8152602060048201526019602482015278496c6c6567616c2050726f66696c6520557064617461626c6560381b6044820152606401610585565b60008360010b8260030160000160049054906101000a900463ffffffff160360030b121561066a5760405162461bcd60e51b815260206004820181905260248201527f496c6c6567616c204d656d62657220526f6c6552656769737465724c696d69746044820152606401610585565b60008360010b8560090160000160049054906101000a900463ffffffff160360030b12156106e45760405162461bcd60e51b815260206004820152602160248201527f496c6c6567616c2050726f66696c6520526f6c6552656769737465724c696d696044820152601d60fa1b6064820152608401610585565b600301805461ffff90931663ffffffff600160201b80860482168390038216810267ffffffff0000000019968716179093556009909501805483810487169290920390951690910292169190911790915550565b60008381526004850160205260408120816008820154600160a01b900460ff1660038111156107695761076961386f565b03610778576000915050610509565b600260008581526020839052604090206001015460ff1660038111156107a0576107a061386f565b146107af576000915050610509565b6000848152602082905260408082205480835290822060010154909160ff909116906107da86612307565b905060028260038111156107f0576107f061386f565b0361086e576000806108028686612346565b915091508061081a5760009650505050505050610509565b6000806108348460030154896123a090919063ffffffff16565b915091508061084e57600098505050505050505050610509565b506000938452600501602052505060409020549091149250610509915050565b60038260038111156108825761088261386f565b036108ca5760008061089486866123a0565b91509150806108ac5760009650505050505050610509565b50600091825260050160205260409020541515935061050992505050565b50600098975050505050505050565b6000806108e684846123b7565b915091505b9250929050565b600061090287878787878761244c565b90505b9695505050505050565b604051602001610952907f524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f4d41535445815266292fa0a226a4a760c91b602082015260270190565b6040516020818303038152906040528051906020012081565b6040517f554e4956455253452e4c4956454c595f50524f46494c450000000000000000006020820152603701610952565b6040517f545950452e4c4956454c595f56455253452e4c4956454c595f414e59000000006020820152603c01610952565b600061090287878787878761267e565b6109ea85858585856126f5565b5050505050565b60405160200161095290613d83565b6040517f545950452e4c4956454c595f50524f46494c452e4c4956454c595f414e5900006020820152603e01610952565b6000610a3d848361222a565b90506002600182015462010000900460ff166003811115610a6057610a6061386f565b1015610aa95760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c204d656d62657220557064617461626c6560401b6044820152606401610585565b60026008850154600160a81b900460ff166003811115610acb57610acb61386f565b1015610b155760405162461bcd60e51b8152602060048201526019602482015278496c6c6567616c2050726f66696c6520557064617461626c6560381b6044820152606401610585565b60008360010b8260030160000160189054906101000a900461ffff1661ffff160360030b1215610b925760405162461bcd60e51b815260206004820152602260248201527f496c6c6567616c204d656d62657220506f6c69637952656769737465724c696d6044820152611a5d60f21b6064820152608401610585565b60008360010b8560090160000160189054906101000a900461ffff1661ffff160360030b1215610c105760405162461bcd60e51b815260206004820152602360248201527f496c6c6567616c2050726f66696c6520506f6c69637952656769737465724c696044820152621b5a5d60ea1b6064820152608401610585565b600301805461ffff600160c01b80830482168690038216810261ffff60c01b19938416179093556009909501805483810487169590950390951690910292169190911790915550565b6000610506858585856129ce565b60008080610c788887893587612cf5565b8054600090815260208a9052604090206001015490915060ff166002816003811115610ca657610ca661386f565b03610ce1578154600090610cbb908b90612db7565b6002015460008181526001808d016020526040909120015460ff1695509350610d329050565b8154600090610cf1908b90612e94565b6000878152600582016020526040812054919250610d0f8c83612db7565b6002015460008181526001808f016020526040909120015460ff16975095505050505b6000610d458a8a6020013586888b612f6b565b6001848101546000908152908c0160205260408120919250610d6960048601613191565b1115610e5157600181015460ff166005811115610d8857610d8861386f565b600183015460ff166005811115610da157610da161386f565b11610dbe5760405162461bcd60e51b815260040161058590613db7565b6001840154604051639c194e0560e01b8152600481018a905260208c0135602482015260448101919091523090639c194e0590606401602060405180830381865afa158015610e11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e359190613de2565b610e515760405162461bcd60e51b815260040161058590613dff565b60018101546301000000900463ffffffff16610ea25760405162461bcd60e51b815260206004820152601060248201526f125b1b195859db08149959995c9c995960821b6044820152606401610585565b6001908101805460001963ffffffff6301000000808404821692909201160266ffffffff0000001990911617905560209099013592909801919091555050505050505050565b60008381526004850160205260408120816008820154600160a01b900460ff166003811115610f1957610f1961386f565b03610f28576000915050610509565b600084815260028201602052604090208054610f4957600092505050610509565b805460008181526020849052604081206001015460ff1690610f6a87612307565b90506002826003811115610f8057610f8061386f565b0361100157600080610f928786612346565b9150915080610fab576000975050505050505050610509565b600080610fc584600301548a6123a090919063ffffffff16565b9150915080610fe05760009950505050505050505050610509565b50600093845260050160205250506040902054909114935061050992505050565b60038260038111156110155761101561386f565b0361105f5760008061102787866123a0565b9150915080611040576000975050505050505050610509565b5060009182526005016020526040902054151594506105099350505050565b5060019998505050505050505050565b60008381526004850160205260408120816008820154600160a01b900460ff1660038111156110a0576110a061386f565b036110af576000915050610509565b60006110ba84612307565b90506000806110c98488612346565b91509150806110df576000945050505050610509565b6000806110f98460030154876123a090919063ffffffff16565b91509150806111115760009650505050505050610509565b5060009384526005016020525050604090205415159695505050505050565b604051602001610952907f524f4c452e4c4956454c595f50524f46494c452e4c4956454c595f535953544581526d26afa6a0a9aa22a92fa0a226a4a760911b6020820152602e0190565b6000828152600387016020526040902054156111a85760405162461bcd60e51b815260040161058590613e26565b84548290036111e85760405162461bcd60e51b815260206004820152600c60248201526b496c6c6567616c20526f6c6560a01b6044820152606401610585565b6111f485600401613191565b600386015461ffff161161123a5760405162461bcd60e51b815260206004820152600d60248201526c125b1b1959d85b08131a5b5a5d609a1b6044820152606401610585565b60006112468784612db7565b600281015460009081526001808a016020526040909120015490915060ff168260058111156112775761127761386f565b8160058111156112895761128961386f565b11156112d05760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c20526f6c652053636f70655479706560501b6044820152606401610585565b8260058111156112e2576112e261386f565b8160058111156112f4576112f461386f565b0361134a5786600101548260020154146113455760405162461bcd60e51b8152602060048201526012602482015271496c6c6567616c20526f6c652053636f706560701b6044820152606401610585565b611402565b60018701546002830154604051639c194e0560e01b815260048101899052602481019290925260448201523090639c194e0590606401602060405180830381865afa15801561139d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c19190613de2565b6114025760405162461bcd60e51b8152602060048201526012602482015271496c6c6567616c20526f6c652053636f706560701b6044820152606401610585565b60008481526003890160205260409020859055611422600488018561319b565b505050505050505050565b6000806114456114406080880188613e4d565b6131a7565b90506000808281526002890160205260409020600390810154600160201b900460ff16908111156114785761147861386f565b146114955760405162461bcd60e51b815260040161058590613e26565b60006114a888886020013586888a612f6b565b600083815260028a01602052604090209091506114d36114ce60808a0160608b01613ba3565b6131da565b60038201805463ff000000191663010000008360058111156114f7576114f761386f565b021790555061150c6080890160608a01613ba3565b60038201805460ff92909216620100000264ff00000000191664ff00ff000019909216919091176403000000001765ff000000000019166502000000000017905561155a6080890189613e4d565b600283019161156a919083613f2d565b5060208801356001820155600061158760608a0160408b01613fed565b60020b12156115a557600a890154600160a81b900461ffff166115b5565b6115b56060890160408a01613fed565b60038201805461ffff191661ffff92909216919091179055600182015482546115ed918b9160ff9091169060208c01358c358c61244c565b9055509695505050505050565b611650604080516101408101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152602001600081526020016000815260200160008152602001606081525090565b60008381526004850160205260408120908061166c8386612346565b9150915080158061169c575060006008840154600160a01b900460ff16600381111561169a5761169a61386f565b145b1561170957604080516101408101825260008082526020820181905291810182905260608101829052608081018290529060a08201908152602001600081526020016000815260200160008152602001604051806020016040528060008152508152509350505050611885565b6040805161014081018252600284015481526003808501546020808401919091528554838501819052600587015462ffffff808216606087015263010000009091041660808501526000908152908790529290922060010154909160a083019160ff169081111561177c5761177c61386f565b8152600184015460209091019060ff16600381111561179d5761179d61386f565b81526001840154602090910190610100900460ff1660038111156117c3576117c361386f565b8152600184015460209091019062010000900460ff1660038111156117ea576117ea61386f565b81526020018360040180546117fe90613eaa565b80601f016020809104026020016040519081016040528092919081815260200182805461182a90613eaa565b80156118775780601f1061184c57610100808354040283529160200191611877565b820191906000526020600020905b81548152906001019060200180831161185a57829003601f168201915b505050505081525093505050505b9392505050565b60405160200161095290614010565b60006118a6826131da565b92915050565b82356000908152600285016020526040902080546118f85760405162461bcd60e51b8152602060048201526009602482015268139bdd08119bdd5b9960ba1b6044820152606401610585565b600061190a86858460000154866129ce565b905060008160078111156119205761192061386f565b1461192e5761192e81613248565b6000611940604087016020880161404a565b60038111156119515761195161386f565b036119955760405162461bcd60e51b8152602060048201526014602482015273496c6c6567616c20416c7465726162696c69747960601b6044820152606401610585565b6119a5604086016020870161404a565b8260030160056101000a81548160ff021916908360038111156119ca576119ca61386f565b0217905550505050505050565b6000806119e78686893586612175565b90506000611a02826003015488612e9490919063ffffffff16565b9050611a188789602001358360020154886133df565b506002820154600090815260018881016020526040909120908101546301000000900463ffffffff16611a805760405162461bcd60e51b815260206004820152601060248201526f125b1b195859db08149959995c9c995960821b6044820152606401610585565b6001908101805460001963ffffffff6301000000808404821692909201160266ffffffff00000019909116179055602089013560029093019290925550905095945050505050565b60008080611adc61144060608a018a613e4d565b90506000808281526020899052604090206001015460ff166003811115611b0557611b0561386f565b14611b225760405162461bcd60e51b815260040161058590613e26565b604051602001611b3190613d83565b60405160208183030381529060405280519060200120886040013514158015611b9f57506040517f545950452e4c4956454c595f50524f46494c452e4c4956454c595f414e5900006020820152603e0160405160208183030381529060405280519060200120886040013514155b611bda5760405162461bcd60e51b815260206004820152600c60248201526b496c6c6567616c205479706560a01b6044820152606401610585565b6000611bea8860408b0135612e94565b90506002600182015462010000900460ff166003811115611c0d57611c0d61386f565b1015611c545760405162461bcd60e51b8152602060048201526016602482015275496c6c6567616c205479706520557064617461626c6560501b6044820152606401610585565b600481015461ffff16611c6960068301613191565b10611ca95760405162461bcd60e51b815260206004820152601060248201526f24b63632b3b0b6102932b3b4b9ba32b960811b6044820152606401610585565b6000611cbe89898460000160000154896129ce565b90506000816007811115611cd457611cd461386f565b14611ce257611ce281613248565b506000611cf9898b6020013584600201548a6133df565b9050611d08600683018461319b565b506000611d158a85613636565b60018101805462ffffff1916620203021790559050611d3760608c018c613e4d565b6004830191611d47919083613f2d565b5060208b013560028201556000611d6460a08d0160808e0161406b565b60030b1215611d8857600a8a015468010000000000000000900462ffffff16611d98565b611d9860a08c0160808d0161406b565b60058201805462ffffff191662ffffff9290921691909117905560408b013560038201558254611dd3908b90849060208f01358f358d61267e565b90819055929a92995091975050505050505050565b611e45604080516101608101825260008082526020820181905260609282018390529181018290526080810182905260a081018290529060c082019081526020016000815260200160008152602001600081526020016000905290565b600083815260048501602052604081209060008481526002830160205260409020600390810154600160201b900460ff1690811115611e8657611e8661386f565b1480611eb1575060006008820154600160a01b900460ff166003811115611eaf57611eaf61386f565b145b15611f21576040805161016081018252600080825260208083018290528351908101845281815292820192909252606081018290526080810182905260a081018290529060c082019081526020016000815260200160008152602001600081526020016000815250915050611885565b60408051610160810182526000858152600280850160208181528584208054865260018101548287015293899052520180549192830191611f6190613eaa565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8d90613eaa565b8015611fda5780601f10611faf57610100808354040283529160200191611fda565b820191906000526020600020905b815481529060010190602001808311611fbd57829003601f168201915b505050918352505060008581526002840160208181526040808420600381015461ffff1683870152938990529190529091019061201990600401613191565b61ffff1681526000858152600284016020908152604080832060038082015460ff62010000909104811685880152915485529287905292819020600101549301929091169081111561206d5761206d61386f565b8152600085815260028401602090815260408083206001908101548452808701835292209091015491019060ff1660058111156120ac576120ac61386f565b815260008581526002840160209081526040909120600301549101906301000000900460ff1660058111156120e3576120e361386f565b815260200182600201600086815260200190815260200160002060030160049054906101000a900460ff16600381111561211f5761211f61386f565b815260200182600201600086815260200190815260200160002060030160059054906101000a900460ff16600381111561215b5761215b61386f565b905295945050505050565b6040516020016109529061408e565b6000806121828685612db7565b90506002600182015462010000900460ff1660038111156121a5576121a561386f565b10156121e75760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c20557064617461626c6560781b6044820152606401610585565b60006121fc87878460000160000154876129ce565b905060008160078111156122125761221261386f565b146122205761222081613248565b5095945050505050565b600081815260208390526040812060018082015460ff1660038111156122525761225261386f565b0361226d576040805184815260208101869052209150612300565b6000600182015460ff1660038111156122885761228861386f565b036122c55760405162461bcd60e51b815260206004820152600d60248201526c13525108139bdd08119bdd5b99609a1b6044820152606401610585565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081352510814db1bdd60821b6044820152606401610585565b5092915050565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b6000818152602083905260408120819060025b600182015460ff1660038111156123725761237261386f565b03612391575050604080518381526020810185905220905060016108eb565b50600019946000945092505050565b600081815260208390526040812081906003612359565b600081815260208390526040812060010154819060ff1660028160038111156123e2576123e261386f565b0361241a5760006123f38686612db7565b60020154600081815260018089016020526040909120015460ff16945092506108eb915050565b600381600381111561242e5761242e61386f565b0361243f5760006123f38686612e94565b5060009485945092505050565b6000821561267357600260008481526020899052604090206001015460ff16600381111561247c5761247c61386f565b146124c35760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b6044820152606401610585565b6000806124d089866123b7565b915091508160058111156124e6576124e661386f565b8860058111156124f8576124f861386f565b11156125465760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c2041646d696e2053636f7065547970650000000000000000006044820152606401610585565b8160058111156125585761255861386f565b88600581111561256a5761256a61386f565b036125b9578581146125b45760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2041646d696e2053636f706560681b6044820152606401610585565b612669565b604051639c194e0560e01b81526004810185905260248101829052604481018790523090639c194e0590606401602060405180830381865afa158015612603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126279190613de2565b6126695760405162461bcd60e51b8152602060048201526013602482015272496c6c6567616c2041646d696e2053636f706560681b6044820152606401610585565b8492505050610905565b509295945050505050565b6000821561267357600160008481526020899052604090206001015460ff1660038111156126ae576126ae61386f565b116124c35760405162461bcd60e51b8152602060048201526017602482015276496c6c6567616c2041646d696e204167656e745479706560481b6044820152606401610585565b60028401546001600160a01b03166000908152600586016020526040902080546127615760405162461bcd60e51b815260206004820152601860248201527f50726f66696c654163636f756e74204e6f7420466f756e6400000000000000006044820152606401610585565b6000805b825481101561297e5785836000018281548110612784576127846140c1565b90600052602060002001540361296c57600191508361289d576127d76040516020016127af9061408e565b604051602081830303815290604052805190602001208860040161369d90919063ffffffff16565b806127ef57506127ef6040516020016127af90614010565b801561284b57506040516020016128059061408e565b6040516020818303038152906040528051906020012085148061284b575060405160200161283290614010565b6040516020818303038152906040528051906020012085145b156128985760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204772616e744d656d626572547970650000000000000000006044820152606401610585565b61297e565b8254600110156129355782546128b5906001906140ed565b81101561290957825483906128cc906001906140ed565b815481106128dc576128dc6140c1565b90600052602060002001548360000182815481106128fc576128fc6140c1565b6000918252602090912001555b825483908061291a5761291a614100565b6001900381819060005260206000200160009055905561297e565b825483908061294657612946614100565b600190038181906000526020600020016000905590558260000160006128989190613704565b8061297681614116565b915050612765565b50806129c55760405162461bcd60e51b8152602060048201526016602482015275125b1b1959d85b08141c9bd99a5b195058d8dbdd5b9d60521b6044820152606401610585565b50505050505050565b60006129dd600486018361369d565b156129ea57506000610509565b60008381526020869052604090206001015460ff166002816003811115612a1357612a1361386f565b03612b8357600080612a258887612346565b9150915080612a3a5760039350505050610509565b60036001830154610100900460ff166003811115612a5a57612a5a61386f565b14612a6b5760069350505050610509565b600080612a8584600301548b6123a090919063ffffffff16565b9150915080612a9c57600495505050505050610509565b60036001830154610100900460ff166003811115612abc57612abc61386f565b14612acf57600795505050505050610509565b60008781526005830160205260409020548814612af457600195505050505050610509565b60008881526003808c016020908152604080842054845260028e0190915290912090600382810154600160201b900460ff1690811115612b3657612b3661386f565b148015612b60575060048a01546003820154600160201b90910460ff908116620100009092041610155b15612b745760029650505050505050610509565b60009650505050505050610509565b6003816003811115612b9757612b9761386f565b03612ce957600080612ba988876123a0565b9150915080612bbe5760049350505050610509565b60036001830154610100900460ff166003811115612bde57612bde61386f565b14612bef5760079350505050610509565b60008581526005830160205260408120549080612c0c8b84612346565b9150915080612c245760039650505050505050610509565b60036001830154610100900460ff166003811115612c4457612c4461386f565b14612c585760069650505050505050610509565b60008381526003808d016020908152604080842054845260028f0190915290912090600382810154600160201b900460ff1690811115612c9a57612c9a61386f565b148015612cc4575060048b01546003820154600160201b90910460ff908116620100009092041610155b15612cd9576002975050505050505050610509565b6000975050505050505050610509565b50600195945050505050565b600082815260028501602052604081208054612d3f5760405162461bcd60e51b8152602060048201526009602482015268139bdd08119bdd5b9960ba1b6044820152606401610585565b600260038281015465010000000000900460ff1690811115612d6357612d6361386f565b1015612da55760405162461bcd60e51b8152602060048201526011602482015270496c6c6567616c20557064617461626c6560781b6044820152606401610585565b60006121fc87878460000154876129ce565b60008181526020839052604081206002600182015460ff166003811115612de057612de061386f565b03612dfb576040805184815260208101869052209150612300565b6000600182015460ff166003811115612e1657612e1661386f565b03612e565760405162461bcd60e51b815260206004820152601060248201526f149bdb19525908139bdd08119bdd5b9960821b6044820152606401610585565b60405162461bcd60e51b8152602060048201526013602482015272125b1b1959d85b08149bdb1952590814db1bdd606a1b6044820152606401610585565b60008181526020839052604081206003600182015460ff166003811115612ebd57612ebd61386f565b03612ed8576040805184815260208101869052209150612300565b6000600182015460ff166003811115612ef357612ef361386f565b03612f305760405162461bcd60e51b815260206004820152600d60248201526c15125108139bdd08119bdd5b99609a1b6044820152606401610585565b60405162461bcd60e51b815260206004820152601060248201526f125b1b1959d85b081512510814db1bdd60821b6044820152606401610585565b6000848152600186016020526040812081600182015460ff166005811115612f9557612f9561386f565b03612fd45760405162461bcd60e51b815260206004820152600f60248201526e14d8dbdc1948139bdd08119bdd5b99608a1b6044820152606401610585565b600180820154610100900460ff166003811115612ff357612ff361386f565b1161302a5760405162461bcd60e51b815260206004820152600760248201526611195b195d195960ca1b6044820152606401610585565b6001818101805460039061304c9084906301000000900463ffffffff1661412f565b92506101000a81548163ffffffff021916908363ffffffff16021790555083600581111561307c5761307c61386f565b600182015460ff1660058111156130955761309561386f565b11156130b35760405162461bcd60e51b815260040161058590613db7565b8360058111156130c5576130c561386f565b600182015460ff1660058111156130de576130de61386f565b03613107578486146131025760405162461bcd60e51b815260040161058590613dff565b610905565b604051639c194e0560e01b81526004810184905260248101869052604481018790523090639c194e0590606401602060405180830381865afa158015613151573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131759190613de2565b6109055760405162461bcd60e51b815260040161058590613dff565b60006118a6825490565b600061188583836136b5565b600082826040516020016131bc92919061414c565b60405160208183030381529060405280519060200120905092915050565b60008160ff166000036131ef57506000919050565b603f8260ff161161320257506001919050565b607f8260ff161161321557506002919050565b60bf8260ff161161322857506003919050565b60fe8260ff161161323b57506004919050565b506005919050565b919050565b600181600781111561325c5761325c61386f565b0361327a5760405163e15df99b60e01b815260040160405180910390fd5b600281600781111561328e5761328e61386f565b036132ac5760405163c38331b560e01b815260040160405180910390fd5b60038160078111156132c0576132c061386f565b036132de5760405163dab65f4760e01b815260040160405180910390fd5b60048160078111156132f2576132f261386f565b0361331057604051633f4b20a160e11b815260040160405180910390fd5b60058160078111156133245761332461386f565b03613342576040516308fa537360e01b815260040160405180910390fd5b60068160078111156133565761335661386f565b036133745760405163ae0903a160e01b815260040160405180910390fd5b60078160078111156133885761338861386f565b036133a65760405163d59825eb60e01b815260040160405180910390fd5b60405162461bcd60e51b815260206004820152600b60248201526a2ab735b737bbb71022a92960a91b6044820152606401610585565b50565b6000838152600185016020526040812081600182015460ff1660058111156134095761340961386f565b036134485760405162461bcd60e51b815260206004820152600f60248201526e14d8dbdc1948139bdd08119bdd5b99608a1b6044820152606401610585565b600180820154610100900460ff1660038111156134675761346761386f565b116134a45760405162461bcd60e51b815260206004820152600d60248201526c14d8dbdc194811195b195d1959609a1b6044820152606401610585565b600181810180546003906134c69084906301000000900463ffffffff1661412f565b825463ffffffff9182166101009390930a9283029190920219909116179055506000848152600187810160205260409091208101549082015460ff918216911660058111156135175761351761386f565b8160058111156135295761352961386f565b10156135475760405162461bcd60e51b815260040161058590613db7565b600182015460ff1660058111156135605761356061386f565b8160058111156135725761357261386f565b0361359b578585146135965760405162461bcd60e51b815260040161058590613dff565b613625565b604051639c194e0560e01b81526004810185905260248101869052604481018790523090639c194e0590606401602060405180830381865afa1580156135e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136099190613de2565b6136255760405162461bcd60e51b815260040161058590613dff565b506001015460ff1695945050505050565b600081815260208390526040812081600182015460ff16600381111561365e5761365e61386f565b148061368257506002600182015460ff1660038111156136805761368061386f565b145b15612e56576040805184815260208101869052209150612300565b60008181526001830160205260408120541515611885565b60008181526001830160205260408120546136fc575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556118a6565b5060006118a6565b50805460008255906000526020600020908101906133dc91905b80821115613732576000815560010161371e565b5090565b6000806000806080858703121561374c57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561377d57600080fd5b83359250602084013561ffff8116811461379657600080fd5b929592945050506040919091013590565b600080600080608085870312156137bd57600080fd5b84359350602085013592506040850135915060608501356001600160a01b03811681146137e957600080fd5b939692955090935050565b6000815180845260005b8181101561381a576020818501810151868301820152016137fe565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061188560208301846137f4565b6000806040838503121561386057600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b600681106133dc576133dc61386f565b61389e81613885565b9052565b604081016138af84613885565b9281526020015290565b80356006811061324357600080fd5b60008060008060008060c087890312156138e157600080fd5b863595506138f1602088016138b9565b95989597505050506040840135936060810135936080820135935060a0909101359150565b80151581146133dc57600080fd5b600080600080600060a0868803121561393c57600080fd5b85359450602086013593506040860135925060608601359150608086013561396381613916565b809150509295509295909350565b60208101600883106139855761398561386f565b91905290565b60006040828403121561399d57600080fd5b50919050565b600080600080600060c086880312156139bb57600080fd5b853594506139cc876020880161398b565b949794965050505060608301359260808101359260a0909101359150565b60008060008060008060c08789031215613a0357600080fd5b8635955060208701359450604087013593506060870135925060808701359150613a2f60a088016138b9565b90509295509295509295565b600060a0828403121561399d57600080fd5b600080600080600060a08688031215613a6557600080fd5b85359450602086013567ffffffffffffffff811115613a8357600080fd5b613a8f88828901613a3b565b94505060408601359250613aa5606087016138b9565b949793965091946080013592915050565b600080600060608486031215613acb57600080fd5b505081359360208301359350604090920135919050565b6004811061389e5761389e61386f565b6020815281516020820152602082015160408201526040820151606082015260006060830151613b29608084018262ffffff169052565b50608083015162ffffff811660a08401525060a0830151613b4d60c0840182613ae2565b5060c0830151613b6060e0840182613ae2565b5060e0830151610100613b7581850183613ae2565b8401519050610120613b8984820183613ae2565b8401516101408481015290506105096101608401826137f4565b600060208284031215613bb557600080fd5b813560ff8116811461188557600080fd5b6020810161398583613885565b60008060008060a08587031215613be957600080fd5b84359350613bfa866020870161398b565b93969395505050506060820135916080013590565b600080600080600060c08688031215613c2757600080fd5b613c31878761398b565b97604087013597506060870135966080810135965060a00135945092505050565b600080600080600060a08688031215613c6a57600080fd5b853567ffffffffffffffff811115613c8157600080fd5b613c8d88828901613a3b565b9860208801359850604088013597606081013597506080013595509350505050565b60208152815160208201526020820151604082015260006040830151610160806060850152613ce26101808501836137f4565b91506060850151613cf9608086018261ffff169052565b50608085015161ffff811660a08601525060a085015160ff811660c08601525060c0850151613d2b60e0860182613ae2565b5060e0850151610100613d4081870183613895565b8601519050610120613d5486820183613895565b8601519050610140613d6886820183613ae2565b8601519050613d7985830182613ae2565b5090949350505050565b7f545950452e4c4956454c595f56455253452e4c4956454c595f414e4f4e594d4f815261555360f01b602082015260220190565b602080825260119082015270496c6c6567616c2053636f70655479706560781b604082015260600190565b600060208284031215613df457600080fd5b815161188581613916565b6020808252600d908201526c496c6c6567616c2053636f706560981b604082015260600190565b6020808252600d908201526c105b1c9958591e48115e1a5cdd609a1b604082015260600190565b6000808335601e19843603018112613e6457600080fd5b83018035915067ffffffffffffffff821115613e7f57600080fd5b6020019150368190038213156108eb57600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c90821680613ebe57607f821691505b60208210810361399d57634e487b7160e01b600052602260045260246000fd5b601f821115613f2857600081815260208120601f850160051c81016020861015613f055750805b601f850160051c820191505b81811015613f2457828155600101613f11565b5050505b505050565b67ffffffffffffffff831115613f4557613f45613e94565b613f5983613f538354613eaa565b83613ede565b6000601f841160018114613f8d5760008515613f755750838201355b600019600387901b1c1916600186901b1783556109ea565b600083815260209020601f19861690835b82811015613fbe5786850135825560209485019460019092019101613f9e565b5086821015613fdb5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600060208284031215613fff57600080fd5b81358060020b811461188557600080fd5b7f545950452e4c4956454c595f50524f46494c452e4c4956454c595f535953544581526726afa6a0a9aa22a960c11b602082015260280190565b60006020828403121561405c57600080fd5b81356004811061188557600080fd5b60006020828403121561407d57600080fd5b81358060030b811461188557600080fd5b7f545950452e4c4956454c595f50524f46494c452e4c4956454c595f4d415354458152602960f91b602082015260210190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156118a6576118a66140d7565b634e487b7160e01b600052603160045260246000fd5b600060018201614128576141286140d7565b5060010190565b63ffffffff818116838216019080821115612300576123006140d7565b818382376000910190815291905056fea26469706673582212209e4e756e8de6e39cebca136aba9af21fa63fc60bbf34279161ac20232b3cd3ae64736f6c63430008130033",
  "devdoc": {
    "author": "Sina Tadayon, https://github.com/SinaTadayon",
    "kind": "dev",
    "methods": {},
    "title": "Profile Commons Library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}