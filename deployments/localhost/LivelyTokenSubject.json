{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ApprovalDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ApprovalIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "BatchTokenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "BatchTokenLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "BatchTokenUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "BatchTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "BatchTransferFrom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "initCount",
          "type": "uint16"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "LocalAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "PausedAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SafeModeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "TaxRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDeleted",
          "type": "bool"
        }
      ],
      "name": "TaxWhitelistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "TokenUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferFrom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "UnpausedAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "UpgradeStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "lockIds",
          "type": "bytes32[]"
        }
      ],
      "name": "batchClaimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dest",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Lock.LockTokenRequest[]",
          "name": "lockRequest",
          "type": "tuple[]"
        }
      ],
      "name": "batchLockToken",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Extra.BatchTransferRequest[]",
          "name": "request",
          "type": "tuple[]"
        }
      ],
      "name": "batchTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Extra.BatchTransferFromRequest[]",
          "name": "request",
          "type": "tuple[]"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "lockId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "internalType": "struct IERC20Lock.UnLockTokenRequest[]",
          "name": "unlockRequest",
          "type": "tuple[]"
        }
      ],
      "name": "batchUnlockToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isDeleted",
              "type": "bool"
            }
          ],
          "internalType": "struct IERC20Extra.BatchUpdateTaxWhitelistRequest[]",
          "name": "request",
          "type": "tuple[]"
        }
      ],
      "name": "batchUpdateTaxWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "lockId",
          "type": "bytes32"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractContext",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRealm",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "domainName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "domainVersion",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "domainRealm",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "taxRateValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "accessControlManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taxTreasuryAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetManager",
              "type": "address"
            }
          ],
          "internalType": "struct LivelyToken.InitRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPausedAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSafeMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgradable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lockBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "lockId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lockInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dest",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20Lock.LockTokenRequest",
          "name": "lockRequest",
          "type": "tuple"
        }
      ],
      "name": "lockToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausedAccounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "permit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLocalAdmin",
          "type": "address"
        }
      ],
      "name": "setLocalAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setSafeMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setUpgradeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "totalBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "lockId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "internalType": "struct IERC20Lock.UnLockTokenRequest",
          "name": "unlockRequest",
          "type": "tuple"
        }
      ],
      "name": "unlockToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "updateTaxRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDeleted",
          "type": "bool"
        }
      ],
      "name": "updateTaxWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "forceCall",
          "type": "bool"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x05cf773776229bdb6d56a5088b22c46a43d42dbd6e227191737e9728ae3741ee",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "4716979",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc7bcd599c03c2629d441647ab5122f82f9db9d9c1b50d8fce41031f60d62c495",
    "transactionHash": "0x05cf773776229bdb6d56a5088b22c46a43d42dbd6e227191737e9728ae3741ee",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "4716979",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3e2301e7d344110cf0a11d061271faa8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApprovalDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApprovalIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"BatchTokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"BatchTokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"BatchTokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"BatchTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"BatchTransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"initCount\",\"type\":\"uint16\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"LocalAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PausedAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SafeModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TaxRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDeleted\",\"type\":\"bool\"}],\"name\":\"TaxWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"UnpausedAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpgradeStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"lockIds\",\"type\":\"bytes32[]\"}],\"name\":\"batchClaimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Lock.LockTokenRequest[]\",\"name\":\"lockRequest\",\"type\":\"tuple[]\"}],\"name\":\"batchLockToken\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Extra.BatchTransferRequest[]\",\"name\":\"request\",\"type\":\"tuple[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Extra.BatchTransferFromRequest[]\",\"name\":\"request\",\"type\":\"tuple[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lockId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"internalType\":\"struct IERC20Lock.UnLockTokenRequest[]\",\"name\":\"unlockRequest\",\"type\":\"tuple[]\"}],\"name\":\"batchUnlockToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeleted\",\"type\":\"bool\"}],\"internalType\":\"struct IERC20Extra.BatchUpdateTaxWhitelistRequest[]\",\"name\":\"request\",\"type\":\"tuple[]\"}],\"name\":\"batchUpdateTaxWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lockId\",\"type\":\"bytes32\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractContext\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRealm\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"domainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainVersion\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainRealm\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"taxRateValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"accessControlManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"}],\"internalType\":\"struct LivelyToken.InitRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPausedAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"lockId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20Lock.LockTokenRequest\",\"name\":\"lockRequest\",\"type\":\"tuple\"}],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLocalAdmin\",\"type\":\"address\"}],\"name\":\"setLocalAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setUpgradeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lockId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"internalType\":\"struct IERC20Lock.UnLockTokenRequest\",\"name\":\"unlockRequest\",\"type\":\"tuple\"}],\"name\":\"unlockToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateTaxRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeleted\",\"type\":\"bool\"}],\"name\":\"updateTaxWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forceCall\",\"type\":\"bool\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/token/lively/LivelyToken.sol\":\"LivelyToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/contracts/acl/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IAccessControl {\\n  /**\\n   * @dev Function called by apps to check ACL\\n   * @return boolean indicating whether the ACL allows\\n   */\\n  function hasAccess(\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool);\\n\\n  function isLivelySystemAdmin(address account) external view returns (bool);\\n\\n  function isLivelyAdmin(address account) external view returns (bool);\\n\\n  function isLivelyAssetManager(address account) external view returns (bool);\\n\\n  function isLivelyDao(address account) external view returns (bool);\\n\\n  function isLivelyDaoExecutor(address account) external view returns (bool);\\n\\n  function isLivelyGeneralGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyGeneralRealm(bytes32 context) external view returns (bool);\\n\\n  function isContextSafeMode(bytes32 context) external view returns (bool);\\n\\n  function isContextUpgradable(bytes32 context) external view returns (bool);\\n\\n  function isContextExists(bytes32 context) external view returns (bool);\\n\\n  function isContextFunctionExists(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextFunctionEnabled(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextEnabled(bytes32 context) external view returns (bool);\\n\\n  function isGroupExists(bytes32 group) external view returns (bool);\\n\\n  function isGroupEnabled(bytes32 group) external view returns (bool);\\n\\n  function isRoleExists(bytes32 role) external view returns (bool);\\n\\n  function isRoleEnabled(bytes32 role) external view returns (bool);\\n\\n  function isRealmExists(bytes32 realm) external view returns (bool);\\n\\n  function isRealmEnabled(bytes32 realm) external view returns (bool);\\n\\n  function isRealmUpgradable(bytes32 realm) external view returns (bool);\\n\\n  function livelyGeneralRealmRole() external pure returns (bytes32);\\n\\n  function livelyGeneralGroupRole() external pure returns (bytes32);\\n\\n  function livelySystemAdminRole() external pure returns (bytes32);\\n\\n  function livelyAdminRole() external pure returns (bytes32);\\n\\n  function livelyAssetManagerRole() external pure returns (bytes32);\\n\\n  function livelyDaoRole() external pure returns (bytes32);\\n\\n  function livelyDaoExecutorRole() external pure returns (bytes32);\\n\\n  function livelyAnonymousRole() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb3fc27e8b00531a5455535b9b8cf710db82ae40a56597cda4573a74656a55d59\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address smca;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address smca;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed scma, address indexed sender, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed scma, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0xdb803c78806f81203f8d0b121aa12ab2fdd43c6174ede12ce9b2ad1dcff881cc\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7d59bfa264a24f3f8c59d3eefe74c0f3081234bfdc9f181888ce028a900fb572\",\"license\":\"MIT\"},\"src/contracts/lib/LContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the context\\n */\\nlibrary LContextUtils {\\n  function generateCtx(address contractAddress) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractAddress));\\n  }\\n}\\n\",\"keccak256\":\"0xae0cd5e3563156b9bc14d8c54282f80c6cefd446800a6e8c83e19faee286f966\",\"license\":\"MIT\"},\"src/contracts/lib/LCounters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary LCounters {\\n  struct Counter {\\n    // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n    // this feature: see https://github.com/ethereum/solidity/issues/4637\\n    uint256 _value; // default: 0\\n  }\\n\\n  function current(Counter storage counter) internal view returns (uint256) {\\n    return counter._value;\\n  }\\n\\n  function increment(Counter storage counter) internal {\\n    unchecked {\\n      counter._value += 1;\\n    }\\n  }\\n\\n  function decrement(Counter storage counter) internal {\\n    uint256 value = counter._value;\\n    require(value > 0, \\\"Counter: decrement overflow\\\");\\n    unchecked {\\n      counter._value = value - 1;\\n    }\\n  }\\n\\n  function reset(Counter storage counter) internal {\\n    counter._value = 0;\\n  }\\n}\\n\",\"keccak256\":\"0xeef9e26e7d56959d8c7fb31767daafed6e5f24c00f20abe365a34c5c23a31fc1\",\"license\":\"MIT\"},\"src/contracts/lib/LStorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary LStorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x00c12bb8adba5ac60c7cebcb2fced78d2abbf5a2b7f1378f7f0381e1c7b0c0ac\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0xb174a9429701d72e43a0880a9f2351dd9e695afa130c433c210db4d47ffce425\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0x1ad8278bc0ca7b38d455518d056d498e3b01fccb105fe2cda15762c984427dd3\",\"license\":\"MIT\"},\"src/contracts/lib/math/LBasisPointsMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./LSafeMath.sol\\\";\\n\\nlibrary LBasisPointsMath {\\n  using LSafeMath for uint256;\\n\\n  uint256 private constant _BASIS_POINTS = 10000;\\n\\n  function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n    return amt.mul(bp).div(_BASIS_POINTS);\\n  }\\n\\n  function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n    require(bp > 0, \\\"Illegal Divide Zero\\\");\\n    return amt.mul(_BASIS_POINTS).div(bp);\\n  }\\n\\n  function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n    if (amt == 0) return 0;\\n    if (bp == 0) return amt;\\n    return amt.add(mulBP(amt, bp));\\n  }\\n\\n  function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n    if (amt == 0) return 0;\\n    if (bp == 0) return amt;\\n    return amt.sub(mulBP(amt, bp));\\n  }\\n}\\n\",\"keccak256\":\"0xdadef3b3fe96e6fffa949e1c7b86edb76d20bb81f5d6ace3f02e8f13a8c93eb8\",\"license\":\"UNLICENSED\"},\"src/contracts/lib/math/LSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary LSafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      uint256 c = a + b;\\n      if (c < a) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b > a) return (false, 0);\\n      return (true, a - b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n      // benefit is lost if 'b' is also tested.\\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n      if (a == 0) return (true, 0);\\n      uint256 c = a * b;\\n      if (c / a != b) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a / b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a % b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a + b;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - b;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a * b;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers, reverting on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a / b;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * reverting when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a % b;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {trySub}.\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      require(b <= a, errorMessage);\\n      return a - b;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      require(b > 0, errorMessage);\\n      return a / b;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * reverting with custom message when dividing by zero.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryMod}.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      require(b > 0, errorMessage);\\n      return a % b;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x425a73caa6bd10a2c4b3d9e6e7e8b52521eacfb1c94625ce47473b3a45192242\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x7f3959e011b05bae8c06ee1a9baedcea7be69895988327147b80ab1d07feb524\",\"license\":\"MIT\"},\"src/contracts/lib/token/LTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../../token/lively/IERC20.sol\\\";\\nimport \\\"../../token/lively/IERC20Extra.sol\\\";\\nimport \\\"../../token/lively/IERC20Pause.sol\\\";\\nimport \\\"../../token/lively/IERC20Lock.sol\\\";\\nimport \\\"../../token/lively/LivelyStorage.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/IAccessControl.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LTokenERC20 {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LTokenERC20\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  function createRequestContext(\\n    bytes32 domainName,\\n    bytes32 domainVersion,\\n    bytes32 realm\\n  )\\n    external\\n    view\\n    returns (IContextManagement.RequestContext memory, IContextManagement.RequestRegisterContext[] memory)\\n  {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](5);\\n    rrc[0].role = IAccessControl(IProxy(address(this)).accessControlManager()).livelyAnonymousRole();\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](10);\\n    rrc[0].funcSelectors[0] = IERC20.transfer.selector;\\n    rrc[0].funcSelectors[1] = IERC20.transferFrom.selector;\\n    rrc[0].funcSelectors[2] = IERC20.approve.selector;\\n    rrc[0].funcSelectors[3] = IERC20Extra.batchTransfer.selector;\\n    rrc[0].funcSelectors[4] = IERC20Extra.batchTransferFrom.selector;\\n    rrc[0].funcSelectors[5] = IERC20Extra.permit.selector;\\n    rrc[0].funcSelectors[6] = IERC20Extra.increaseAllowance.selector;\\n    rrc[0].funcSelectors[7] = IERC20Extra.decreaseAllowance.selector;\\n    rrc[0].funcSelectors[8] = IERC20Lock.claimToken.selector;\\n    rrc[0].funcSelectors[9] = IERC20Lock.batchClaimToken.selector;\\n\\n    rrc[1].role = IAccessControl(IProxy(address(this)).accessControlManager()).livelyAdminRole();\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](11);\\n    rrc[1].funcSelectors[0] = IProxy.setUpgradeStatus.selector;\\n    rrc[1].funcSelectors[1] = IERC20Extra.burn.selector;\\n    rrc[1].funcSelectors[2] = IERC20Extra.mint.selector;\\n    rrc[1].funcSelectors[3] = IERC20Extra.updateTaxRate.selector;\\n    rrc[1].funcSelectors[4] = IERC20Extra.updateTaxWhitelist.selector;   \\n    rrc[1].funcSelectors[5] = IERC20Extra.batchUpdateTaxWhitelist.selector;\\n    rrc[1].funcSelectors[6] = IERC20Pause.pause.selector;\\n    rrc[1].funcSelectors[7] = IERC20Pause.unpause.selector;\\n    rrc[1].funcSelectors[8] = IERC20Pause.pauseAll.selector;\\n    rrc[1].funcSelectors[9] = IERC20Pause.unpauseAll.selector;\\n    rrc[1].funcSelectors[10] = bytes4(keccak256(\\\"withdrawBalance(address)\\\"));\\n\\n    rrc[2].role = IAccessControl(IProxy(address(this)).accessControlManager()).livelySystemAdminRole();\\n    rrc[2].isEnabled = true;\\n    rrc[2].funcSelectors = new bytes4[](3);\\n    rrc[2].funcSelectors[0] = IProxy.setLocalAdmin.selector;\\n    rrc[2].funcSelectors[1] = IProxy.setSafeMode.selector;\\n    rrc[2].funcSelectors[2] = IProxy.upgradeTo.selector;\\n\\n    rrc[3].role = IAccessControl(IProxy(address(this)).accessControlManager()).livelyAssetManagerRole();\\n    rrc[3].isEnabled = true;\\n    rrc[3].funcSelectors = new bytes4[](2);\\n    rrc[3].funcSelectors[0] = IERC20Lock.lockToken.selector;  \\n    rrc[3].funcSelectors[1] = IERC20Lock.batchLockToken.selector;  \\n    \\n    rrc[4].role = IAccessControl(IProxy(address(this)).accessControlManager()).livelyDaoExecutorRole();\\n    rrc[4].isEnabled = true;\\n    rrc[4].funcSelectors = new bytes4[](2);\\n    rrc[4].funcSelectors[0] = IERC20Lock.unlockToken.selector;\\n    rrc[4].funcSelectors[1] = IERC20Lock.batchUnlockToken.selector;\\n\\n    IContextManagement.RequestContext memory rc = IContextManagement.RequestContext({\\n      name: domainName,\\n      version: domainVersion,\\n      realm: realm,\\n      smca: address(this),\\n      status: true\\n    });\\n\\n    return (rc, rrc);\\n  }\\n\\n  function lockToken(LivelyStorage.DataCollection storage data, IERC20Lock.LockTokenRequest memory lockRequest) external returns(bytes32) {\\n    require(lockRequest.source != address(0), \\\"Invalid Source Address\\\");\\n    require(lockRequest.dest != address(0), \\\"Invalid Destination Address\\\");\\n    require(lockRequest.source != lockRequest.dest, \\\"Illegal Destination Address\\\");\\n    require(lockRequest.timestamp > block.timestamp + 1 days, \\\"Illegal Timestamp\\\");\\n    require(lockRequest.amount > 0, \\\"Illegal amount\\\");\\n\\n    bytes32 lockId = keccak256(abi.encodePacked(lockRequest.source, lockRequest.dest, lockRequest.timestamp, lockRequest.amount));\\n    // console.log(\\\"lock Id, source: %s, dest: %s, timestamp: %s, \\\",lockRequest.source, lockRequest.dest, lockRequest.timestamp);\\n    // console.logBytes32(lockId);\\n\\n    require(data.locks[lockRequest.dest][lockId].source == address(0), \\\"Lock Already Exists\\\");\\n    \\n    uint256 srcBalance = data.accounts[lockRequest.source].balance;\\n    require(srcBalance >= lockRequest.amount, \\\"Insufficient Account Balance\\\");\\n    unchecked {\\n      data.accounts[lockRequest.source].balance = srcBalance - lockRequest.amount;\\n    }\\n    data.accounts[lockRequest.dest].lockBalance += lockRequest.amount;\\n\\n    LivelyStorage.AssetLock storage assetLock = data.locks[lockRequest.dest][lockId];\\n    assetLock.lockedAt = uint128(block.timestamp);\\n    assetLock.claimedAt = uint128(lockRequest.timestamp);\\n    assetLock.source = lockRequest.source;\\n    assetLock.amount = lockRequest.amount;\\n    assetLock.status = LivelyStorage.LockState.LOCKED;\\n    return lockId;\\n  }\\n\\n  function claimToken(LivelyStorage.DataCollection storage data, bytes32 lockId) external returns(uint256) {\\n    require(lockId != bytes32(0), \\\"Invalid Lock Id\\\");\\n    require(data.locks[msg.sender][lockId].source != address(0), \\\"Lock Not Found\\\");\\n    require(data.locks[msg.sender][lockId].claimedAt < uint128(block.timestamp), \\\"Illegal Claim Lock\\\");\\n\\n    uint256 lockAmount = data.locks[msg.sender][lockId].amount;\\n    uint256 lockBalance = data.accounts[msg.sender].lockBalance;\\n    require(lockBalance >= lockAmount, \\\"Insufficient Account Lock Balance\\\");\\n    unchecked {\\n      data.accounts[msg.sender].lockBalance = lockBalance - lockAmount;\\n    }\\n    data.accounts[msg.sender].balance += lockAmount;\\n    data.locks[msg.sender][lockId].status = LivelyStorage.LockState.CLAIMED;\\n    return lockAmount;\\n  }  \\n\\n  function unlockToken(LivelyStorage.DataCollection storage data, IERC20Lock.UnLockTokenRequest calldata unlockRequest) external returns (address, uint256) {\\n    require(unlockRequest.lockId != bytes32(0), \\\"Invalid Lock Id\\\");\\n    require(data.locks[unlockRequest.account][unlockRequest.lockId].source != address(0), \\\"Lock Not Found\\\");\\n    require(data.locks[unlockRequest.account][unlockRequest.lockId].status == LivelyStorage.LockState.LOCKED, \\\"Invalid Lock State\\\");\\n\\n    uint256 lockAmount = data.locks[unlockRequest.account][unlockRequest.lockId].amount;\\n    uint256 lockBalance = data.accounts[unlockRequest.account].lockBalance;\\n    address srcAccount = data.locks[unlockRequest.account][unlockRequest.lockId].source;    \\n    require(lockBalance >= lockAmount, \\\"Insufficient Account Lock Balance\\\");\\n    unchecked {\\n      data.accounts[unlockRequest.account].lockBalance = lockBalance - lockAmount;\\n    }\\n    data.accounts[srcAccount].balance += lockAmount;\\n    data.locks[unlockRequest.account][unlockRequest.lockId].status = LivelyStorage.LockState.UNLOCKED;\\n    return (srcAccount,lockAmount);\\n  }\\n\\n  function transfer(LivelyStorage.DataCollection storage data, address src, address dest, uint256 amount) external {\\n    require(src != address(0), \\\"Invalid Source Address\\\");\\n    require(dest != address(0), \\\"Invalid Destination Address\\\");\\n    require(src != dest, \\\"Illegal Self Transfer\\\");\\n    require(amount > 0, \\\"Invalid Transfer Amount\\\");\\n\\n    uint256 srcBalance = data.accounts[src].balance;\\n    require(srcBalance >= amount, \\\"Insufficient Account Balance\\\");\\n    unchecked {\\n      data.accounts[src].balance = srcBalance - amount;\\n    }\\n    data.accounts[dest].balance += amount;\\n  }\\n\\n  function updateTaxWhitelist(LivelyStorage.DataCollection storage data, address account, bool isDeleted) external returns (bool){\\n    require(account != address(0), \\\"Invalid Account Address\\\");\\n    if (isDeleted) {\\n      require(data.taxWhitelist.contains(account), \\\"Account Not Found\\\");\\n      data.taxWhitelist.remove(account);\\n    } else {\\n      require(!data.taxWhitelist.contains(account), \\\"Account Already Exists\\\");\\n      data.taxWhitelist.add(account);\\n    }\\n\\n    return true;\\n  }\\n  \\n\\n}\\n\",\"keccak256\":\"0x6ab1e51dffd647965f253403bcefd844dc1c58a1942620d13987e13d1e86540a\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract BaseProxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overridden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x3edfd0233aac5bde241e0bf49843e0621fde4768650f1758c85581657778e8ff\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./IERC1822.sol\\\";\\nimport \\\"./IProxy.sol\\\";\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"./BaseUUPSStorage.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"../lib/LAddress.sol\\\";\\nimport \\\"../lib/LStorageSlot.sol\\\";\\nimport \\\"../acl/IAccessControl.sol\\\";\\nimport \\\"../acl/IContextManagement.sol\\\";\\nimport \\\"../utils/Message.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"../lib/LContextUtils.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n\\n * An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\n\\nabstract contract BaseUUPSProxy is\\n  BaseUUPSStorage,\\n  BaseProxy,\\n  Initializable,\\n  IProxy,\\n  IERC1822Proxiable,\\n  Message,\\n  ERC165\\n{\\n  /**\\n   * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n   * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n   * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n   * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n   * fail.\\n   */\\n  modifier onlyProxy() {\\n    require(address(this) != __self, \\\"Illegal Contract Call\\\");\\n    require(_implementation() == __self, \\\"Proxy Called Invalid\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyLocalAdmin() {\\n    require(_getLocalAdmin() == _msgSender(), \\\"Caller Not Authorized\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n   * callable on the implementing contract but not through proxies.\\n   */\\n  modifier notDelegated() {\\n    require(address(this) == __self, \\\"Illegal Contract Delegatecall\\\");\\n    _;\\n  }\\n\\n  modifier safeModeCheck() {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    _;\\n  }\\n\\n  modifier aclCheck(bytes4 selector) {\\n    require(_hasPermission(selector), \\\"Access Denied\\\");\\n    _;\\n  }\\n\\n  function _hasPermission(bytes4 selector) internal returns (bool) {\\n    if (address(this) == _accessControlManager) {\\n      bytes memory data = abi.encodeWithSelector(\\n        IAccessControl.hasAccess.selector,\\n        LContextUtils.generateCtx(address(this)),\\n        _msgSender(),\\n        selector\\n      );\\n      bytes memory returndata = LAddress.functionDelegateCall(_implementation(), data, \\\"Delegatecall hasAccess Failed\\\");\\n      return uint8(returndata[returndata.length - 1]) == 1;\\n    } else {\\n      return\\n        IAccessControl(_accessControlManager).hasAccess(\\n          LContextUtils.generateCtx(address(this)),\\n          _msgSender(),\\n          selector\\n        );\\n    }\\n  }\\n\\n  function _isRealmUpgradable() internal returns (bool) {\\n    if (address(this) == _accessControlManager) {\\n      bytes memory data = abi.encodeWithSelector(IAccessControl.isRealmUpgradable.selector, _domainRealm);\\n      bytes memory returndata = LAddress.functionDelegateCall(\\n        _implementation(),\\n        data,\\n        \\\"Delegatecall isRealmUpgradable Failed\\\"\\n      );\\n      return uint8(returndata[returndata.length - 1]) == 1;\\n    } else {\\n      return IAccessControl(_accessControlManager).isRealmUpgradable(_domainRealm);\\n    }\\n  }\\n\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n   */\\n\\n  constructor() {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n    // set contract Admin (implementation contract)\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = _msgSender();\\n\\n    // set _isUpgradable and _isSafeMode of contact\\n    _isUpgradable = false;\\n    _isSafeMode = true;\\n  }\\n\\n  function __BASE_UUPS_init(\\n    string calldata domainName,\\n    string calldata domainVersion,\\n    bytes32 domainRealm,\\n    address accessControl\\n  ) internal {\\n    __BASE_UUPS_init_unchained(domainName, domainVersion, domainRealm, accessControl);\\n  }\\n\\n  function __BASE_UUPS_init_unchained(\\n    string calldata domainName,\\n    string calldata domainVersion,\\n    bytes32 domainRealm,\\n    address accessControl\\n  ) internal onlyInitializing {\\n    _domainName = keccak256(abi.encodePacked(domainName));\\n    _domainVersion = keccak256(abi.encodePacked(domainVersion));\\n    _domainRealm = domainRealm;\\n    if (accessControl == address(0)) {\\n      _accessControlManager = address(this);\\n    } else {\\n      try IERC165(accessControl).supportsInterface(type(IAccessControl).interfaceId) returns (bool isSupported) {\\n        require(isSupported, \\\"Invalid AccessControlManager\\\");\\n      } catch {\\n        revert(\\\"Illegal AccessControlManager\\\");\\n      }\\n      _accessControlManager = accessControl;\\n    }\\n    _isUpgradable = false;\\n    _isSafeMode = false;\\n    _setLocalAdmin(_msgSender());\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IProxy).interfaceId ||\\n      interfaceId == type(IERC1822Proxiable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation() internal view override returns (address) {\\n    return LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    require(LAddress.isContract(newImplementation), \\\"Illegal Contract Address\\\");\\n    LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(msg.sender, address(this), newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      return LAddress.functionDelegateCall(newImplementation, data, \\\"Delegatecall Failed\\\");\\n    }\\n    return new bytes(0);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCallUUPS(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\n    if (LStorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n      _setImplementation(newImplementation);\\n      return new bytes(0);\\n    } else {\\n      try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n        require(slot == _IMPLEMENTATION_SLOT, \\\"Invalid UUPS Contract\\\");\\n      } catch {\\n        revert(\\\"Illegal UUPS Contract\\\");\\n      }\\n\\n      try IERC165(newImplementation).supportsInterface(type(IProxy).interfaceId) returns (bool isSupported) {\\n        require(isSupported, \\\"Invalid IProxy Contract\\\");\\n      } catch {\\n        revert(\\\"Illegal IProxy Contract\\\");\\n      }\\n\\n      return _upgradeToAndCall(newImplementation, data, forceCall);\\n    }\\n  }\\n\\n  /**\\n   * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n   * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n   */\\n  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n    return _IMPLEMENTATION_SLOT;\\n  }\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external virtual onlyProxy returns (bytes memory) {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_isUpgradable, \\\"Upgrade Call Rejected\\\");\\n    _authorizeUpgrade(newImplementation);\\n    return _upgradeToAndCallUUPS(newImplementation, data, forceCall);\\n  }\\n\\n  /**\\n   * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n   * {upgradeTo} and {upgradeToAndCall}.\\n   *\\n   * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n   *\\n   * ```solidity\\n   * function _authorizeUpgrade(address) internal override onlyOwner {}\\n   * ```\\n   */\\n  function _authorizeUpgrade(address newImplementation) internal virtual {\\n    require(newImplementation != _implementation(), \\\"Illegal New Implementation\\\");\\n    require(_hasPermission(this.upgradeTo.selector), \\\"Upgrade Context Forbidden\\\");\\n  }\\n\\n  function localAdmin() external view returns (address) {\\n    return _getLocalAdmin();\\n  }\\n\\n  function setLocalAdmin(address newLocalAdmin) external onlyProxy returns (bool) {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_hasPermission(this.setLocalAdmin.selector), \\\"SetLocalAdmin Forbidden\\\");\\n    require(newLocalAdmin != address(0), \\\"Address Invalid\\\");\\n    _setLocalAdmin(newLocalAdmin);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n   */\\n  function _getLocalAdmin() internal view returns (address) {\\n    return LStorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setLocalAdmin(address newAdmin) internal {\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    emit LocalAdminChanged(_msgSender(), address(this), newAdmin);\\n  }\\n\\n  // In each upgrade the initialize requirement must be changed\\n  function setSafeMode(bool status) external onlyProxy returns (bool) {\\n    require(_getInitializedCount() > 0, \\\"Contract Not Initialized\\\");\\n    require(_hasPermission(this.setSafeMode.selector), \\\"SetSafeMode Forbidden\\\");\\n    _isSafeMode = status;\\n    emit SafeModeChanged(_msgSender(), address(this), _domainRealm, status);\\n    return status;\\n  }\\n\\n  function setUpgradeStatus(bool status) external onlyProxy returns (bool) {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_hasPermission(this.setUpgradeStatus.selector), \\\"SetUpgradeStatus Forbidden\\\");\\n    require(_isRealmUpgradable(), \\\"Realm Upgrade Forbidden\\\");\\n    _isUpgradable = status;\\n    emit UpgradeStatusChanged(_msgSender(), address(this), _domainRealm, status);\\n    return status;\\n  }\\n\\n  function contractName() external view returns (bytes32) {\\n    return _domainName;\\n  }\\n\\n  function contractVersion() external view returns (bytes32) {\\n    return _domainVersion;\\n  }\\n\\n  function contractRealm() external view returns (bytes32) {\\n    return _domainRealm;\\n  }\\n\\n  function contractContext() external view returns (bytes32) {\\n    return LContextUtils.generateCtx(address(this));\\n  }\\n\\n  function accessControlManager() external view returns (address) {\\n    return _accessControlManager;\\n  }\\n\\n  function subjectAddress() external view returns (address) {\\n    return _implementation();\\n  }\\n\\n  function isSafeMode() external view returns (bool) {\\n    return _isSafeMode;\\n  }\\n\\n  function isUpgradable() external view returns (bool) {\\n    return _isUpgradable;\\n  }\\n\\n  function domainSeparator() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return keccak256(abi.encode(_TYPE_HASH, _domainName, _domainVersion, block.chainid, address(this)));\\n  }\\n\\n  function initVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  function initStatus() external view returns (bool) {\\n    return _isInitializing();\\n  }\\n\\n  function withdrawBalance(address recepient) public {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_hasPermission(this.withdrawBalance.selector), \\\"Withdraw Balance Forbidden\\\");\\n    payable(recepient).transfer(address(this).balance);\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable override {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable override {}\\n}\\n\",\"keccak256\":\"0xa6e2ccc286ee794829d094b1b206b9211a7ce2f6f279d559f42da5a125a5af8a\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n */\\n\\nabstract contract BaseUUPSStorage {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 internal constant _TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n  address internal immutable __self = address(this);\\n  address internal _accessControlManager;\\n  bytes32 internal _domainName;\\n  bytes32 internal _domainVersion;\\n  bytes32 internal _domainRealm;\\n  bool internal _isSafeMode;\\n  bool internal _isUpgradable;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __gap;\\n}\\n\",\"keccak256\":\"0xc964e08c3277d878d99b02e6be1946266da008cd201b07152a84e1b78e6f1206\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IBaseProxy {\\n  event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x93a2f34af9672a421f1d4d46ed4955e078cc9f966d2e7ab7c18724207d306c9c\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x52ff537da18dfa18e65daeb7597fc021a1950d2ad99201d398a4f6609f97aa50\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event LocalAdminChanged(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event SafeModeChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  event UpgradeStatusChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeMode(bool status) external returns (bool);\\n\\n  function setUpgradeStatus(bool status) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function contractName() external view returns (bytes32);\\n\\n  function contractVersion() external view returns (bytes32);\\n\\n  function contractRealm() external view returns (bytes32);\\n\\n  function contractContext() external view returns (bytes32);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function isSafeMode() external view returns (bool);\\n\\n  function isUpgradable() external view returns (bool);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n\\n  function initStatus() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc7c04fb816627028a1f82615cbaa6aef6c5051204d57ebe92036d8ae6d2feb15\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0xd9fbde935172757ed5c989aec2decfeef6aa5b6b77b7041e928a73aa86fa099c\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  event Transfer(address indexed sender, address indexed recipient, uint256 amount);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address source,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa916a45842ccea0f2f0953e897d5dc1b6d677a35dbde4a5695afb3c6cb7b8e81\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Extra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IERC20Extra {\\n  event ApprovalIncreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event ApprovalDecreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event TransferFrom(address indexed sender, address indexed from, address indexed to, uint256 amount);\\n\\n  event BatchTransfer(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTransferFrom(address indexed sender, uint256 totalAmount);\\n\\n  event TaxRateUpdated(address indexed sender, uint256 rate);\\n\\n  event TaxWhitelistUpdated(address indexed sender, address indexed account, bool isDeleted);\\n\\n  event Burn(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  event Mint(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  struct BatchTransferRequest {\\n    address recipient;\\n    uint256 amount;\\n  }\\n\\n  struct BatchTransferFromRequest {\\n    address source;\\n    address recipient;\\n    uint256 amount;\\n  }\\n\\n  struct BatchUpdateTaxWhitelistRequest {\\n    address account;\\n    bool isDeleted;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 value) external returns (uint256);\\n\\n  function decreaseAllowance(address spender, uint256 value) external returns (uint256);\\n\\n  function burn(address account, uint256 amount) external returns (uint256);\\n\\n  function mint(address account, uint256 amount) external returns (uint256);\\n\\n  function batchTransfer(BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function batchTransferFrom(BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function updateTaxRate(uint256 taxRate) external returns (bool);\\n\\n  function updateTaxWhitelist(address account, bool isDeleted) external returns (bool);\\n\\n  function batchUpdateTaxWhitelist(BatchUpdateTaxWhitelistRequest[] calldata request) external;\\n\\n  function taxRate() external view returns (uint256);\\n\\n  function taxTreasury() external view returns (address);\\n\\n  function taxWhitelist() external view returns (address[] memory);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    bytes calldata signature\\n  ) external returns (bool);\\n\\n  function nonce(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e9ee8fe5fc2d7c04e09f65db0166acc49466f6481603e58dd116cc4dd054315\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IERC20Lock {\\n\\n  struct LockTokenRequest {\\n    address source;\\n    address dest;\\n    uint256 timestamp;\\n    uint256 amount;\\n  }\\n\\n  struct UnLockTokenRequest {\\n    bytes32 lockId;\\n    address account;\\n    string reason;\\n  }\\n\\n  event TokenLocked(bytes32 indexed id, address indexed sender, address indexed src, address account, uint256 timestamp, uint256 amount);\\n\\n  event TokenClaimed(bytes32 indexed id, address indexed sender, address indexed src, uint256 amount);\\n\\n  event TokenUnlocked(bytes32 indexed id, address indexed sender, address indexed account, address dest, uint256 amount, string reason);\\n\\n  event BatchTokenClaimed(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTokenUnlocked(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTokenLocked(address indexed sender, uint256 totalAmount);\\n\\n  function lockToken(LockTokenRequest calldata lockRequest) external returns (bytes32);\\n\\n  function batchLockToken(LockTokenRequest[] calldata lockRequest) external returns (bytes32[] memory);\\n\\n  function unlockToken(UnLockTokenRequest calldata unlockRequest) external returns (uint256);\\n\\n  function batchUnlockToken(UnLockTokenRequest[] calldata unlockRequest) external returns (uint256);\\n\\n  function claimToken(bytes32 lockId) external returns (uint256);\\n\\n  function batchClaimToken(bytes32[] calldata lockIds) external returns (uint256);\\n\\n  function lockInfo(bytes32 lockId, address account) external view returns (uint256, uint128, uint128, address, uint8);\\n\\n  function totalBalanceOf(address account) external view returns (uint256);\\n\\n  function lockBalanceOf(address account) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0xec4b6f9b2753c6482ef207c6395f5df55b774e237da497d8116d7b8ab821a99f\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Pause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IERC20Pause {\\n  event Paused(address indexed sender, address indexed account);\\n\\n  event Unpaused(address indexed sender, address indexed account);\\n\\n  event PausedAll(address indexed sender);\\n\\n  event UnpausedAll(address indexed sender);\\n\\n  function pause(address account) external;\\n\\n  function unpause(address account) external;\\n\\n  function pauseAll() external;\\n\\n  function unpauseAll() external;\\n\\n  function isPaused(address account) external view returns (bool);\\n\\n  function isPausedAll() external view returns (bool);\\n\\n  function pausedAccounts() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6cbecef9a3aaed4eb021baac9eb689e72c6b89534aab3fbee6a150f0996f3c34\",\"license\":\"MIT\"},\"src/contracts/token/lively/LivelyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../../lib/LCounters.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\n\\nabstract contract LivelyStorage is BaseUUPSStorage {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LCounters for LCounters.Counter;\\n\\n  enum LockState {\\n    NONE,\\n    LOCKED,\\n    CLAIMED,\\n    UNLOCKED\\n  }\\n\\n  struct AccountInfo {\\n    uint256 balance;\\n    uint256 lockBalance;\\n    LCounters.Counter nonce;\\n  }\\n\\n  struct AssetLock {\\n    uint256 amount;\\n    uint128 lockedAt;\\n    uint128 claimedAt;\\n    address source;\\n    LockState status;    \\n  }\\n\\n  struct DataCollection {\\n    mapping(address => AccountInfo) accounts;\\n    mapping(address => mapping(address => uint256)) allowances;\\n    mapping(address => mapping(bytes32 => AssetLock)) locks;\\n    LEnumerableSet.AddressSet pausedList;\\n    LEnumerableSet.AddressSet taxWhitelist;\\n  }\\n\\n  bytes32 internal constant _PERMIT_TYPEHASH =\\n    keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint256 internal _totalSupply;\\n  uint256 internal _taxRate;\\n  address internal _taxTreasury;\\n  bool internal _isPaused;\\n\\n  DataCollection internal _data;\\n\\n}\\n\",\"keccak256\":\"0xe1d1e8a18475c46fb6d4ad2c6e8cd6df0edc97bd0d8717064be49dea44e70335\",\"license\":\"MIT\"},\"src/contracts/token/lively/LivelyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Extra.sol\\\";\\nimport \\\"./IERC20Pause.sol\\\";\\nimport \\\"./IERC20Lock.sol\\\";\\nimport \\\"./LivelyStorage.sol\\\";\\nimport \\\"../../proxy/BaseUUPSProxy.sol\\\";\\nimport \\\"../../lib/token/LTokenERC20.sol\\\";\\nimport \\\"../../lib/cryptography/LECDSA.sol\\\";\\nimport \\\"../../lib/LCounters.sol\\\";\\nimport \\\"../../lib/math/LBasisPointsMath.sol\\\";\\nimport \\\"../../lib/math/LSafeMath.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../../acl/IContextManagement.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract LivelyToken is LivelyStorage, BaseUUPSProxy, IERC20, IERC20Extra, IERC20Pause, IERC20Lock {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LCounters for LCounters.Counter;\\n  using LBasisPointsMath for uint256;\\n  using LSafeMath for uint256;\\n\\n  struct InitRequest {\\n    string domainName;\\n    string domainVersion;\\n    string domainRealm;\\n    bytes signature;\\n    uint256 taxRateValue;\\n    uint256 totalSupplyAmount;\\n    address accessControlManager;\\n    address taxTreasuryAddress;\\n    address assetManager;\\n  }\\n\\n  constructor() {}\\n\\n  function lockToken(LockTokenRequest calldata lockRequest) external returns (bytes32) {\\n    _policyInterceptor(this.lockToken.selector, lockRequest.source, true, true);\\n    return _lockToken(lockRequest);\\n  }\\n\\n  function batchLockToken(LockTokenRequest[] calldata lockRequest) external returns (bytes32[] memory) {\\n    _policyInterceptor(this.batchLockToken.selector, address(0), true, false);\\n    uint totalAmount = 0;\\n    bytes32[] memory lockIds = new bytes32[](lockRequest.length);\\n    for (uint i = 0; i < lockRequest.length; i++) {\\n      require(!_data.pausedList.contains(lockRequest[i].source), \\\"ERC20Pause: Account Suspended\\\");\\n      lockIds[i] = _lockToken(lockRequest[i]);\\n      totalAmount += lockRequest[i].amount;\\n    }\\n\\n    emit BatchTokenLocked(_msgSender(), totalAmount);\\n    return lockIds;\\n  }\\n\\n  function claimToken(bytes32 lockId) external returns (uint256) {\\n    _policyInterceptor(this.claimToken.selector, _msgSender(), true, true);\\n      return _claimToken(lockId);\\n  }\\n\\n  function batchClaimToken(bytes32[] calldata lockIds) external returns (uint256) {    \\n    _policyInterceptor(this.batchClaimToken.selector, _msgSender(), true, true);\\n    uint totalAmount = 0;\\n    for (uint i = 0; i < lockIds.length; i++) {\\n      totalAmount += _claimToken(lockIds[i]);\\n    }\\n\\n    emit BatchTokenClaimed(_msgSender(), totalAmount);\\n    return totalAmount;\\n  }\\n\\n  function unlockToken(UnLockTokenRequest calldata unlockRequest) external returns (uint256) {\\n    _policyInterceptor(this.unlockToken.selector, unlockRequest.account, true, true);\\n    return _unlockToken(unlockRequest);\\n  }\\n\\n  function batchUnlockToken(UnLockTokenRequest[] calldata unlockRequest) external returns (uint256) {\\n    _policyInterceptor(this.batchUnlockToken.selector, address(0), true, false);\\n    uint totalAmount = 0;\\n    for (uint i = 0; i < unlockRequest.length; i++) {\\n      require(!_data.pausedList.contains(unlockRequest[i].account), \\\"ERC20Pause: Account Suspended\\\");\\n      totalAmount += _unlockToken(unlockRequest[i]);\\n    }\\n\\n    emit BatchTokenUnlocked(_msgSender(), totalAmount);\\n    return totalAmount;\\n  }\\n\\n  function pause(address account) external {\\n    _policyInterceptor(this.pause.selector, address(0), false, false);\\n    require(account != address(0), \\\"Invalid Account Address\\\");\\n    require(!_data.pausedList.contains(account), \\\"Account Already Paused\\\");\\n    _data.pausedList.add(account);\\n    emit Paused(_msgSender(), account);\\n  }\\n\\n  function unpause(address account) external {\\n    _policyInterceptor(this.unpause.selector, address(0), false, false);\\n    require(account != address(0), \\\"Invalid Account Address\\\");\\n    require(_data.pausedList.contains(account), \\\"Account Not Found\\\");\\n    _data.pausedList.remove(account);\\n    emit Unpaused(_msgSender(), account);\\n  }\\n\\n  function pauseAll() external {\\n    _policyInterceptor(this.pauseAll.selector, address(0), false, false);\\n    _isPaused = true;\\n    emit PausedAll(_msgSender());\\n  }\\n\\n  function unpauseAll() external {\\n    _policyInterceptor(this.unpauseAll.selector, address(0), false, false);\\n    _isPaused = false;\\n    emit UnpausedAll(_msgSender());\\n  }\\n\\n  function updateTaxRate(uint256 rate) external returns (bool) {\\n    _policyInterceptor(this.updateTaxRate.selector, address(0), false, false);\\n    _taxRate = rate;\\n    emit TaxRateUpdated(_msgSender(), rate);\\n    return true;\\n  }\\n\\n  function batchUpdateTaxWhitelist(BatchUpdateTaxWhitelistRequest[] calldata request) external {\\n    _policyInterceptor(this.batchUpdateTaxWhitelist.selector, address(0), false, false);\\n    for (uint256 i = 0; i < request.length; i++) {\\n      _updateTaxWhitelist(request[i].account, request[i].isDeleted);\\n    }\\n  }\\n\\n  function updateTaxWhitelist(address account, bool isDeleted) external returns (bool) {\\n    _policyInterceptor(this.updateTaxWhitelist.selector, address(0), false, false);\\n    return _updateTaxWhitelist(account, isDeleted);\\n  }\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.transfer.selector, _msgSender(), true, true);\\n    if (_taxRate > 0 && !_data.taxWhitelist.contains(_msgSender())) {\\n      _taxTransfer(_msgSender(), recipient, amount);\\n    } else {\\n      _transfer(_msgSender(), recipient, amount);\\n    }\\n    return true;\\n  }\\n\\n  function transferFrom(address source, address recipient, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.transferFrom.selector, source, true, true);\\n    return _transferFrom(source, recipient, amount);\\n  }\\n\\n  function batchTransfer(BatchTransferRequest[] calldata request) external returns (bool) {\\n    _policyInterceptor(this.batchTransfer.selector, _msgSender(), true, true);\\n    uint256 totalAmount = 0;\\n    for (uint256 i = 0; i < request.length; i++) {\\n      totalAmount += request[i].amount;\\n      _transfer(_msgSender(), request[i].recipient, request[i].amount);\\n    }\\n\\n    emit BatchTransfer(_msgSender(), totalAmount);\\n    return true;\\n  }\\n\\n  function batchTransferFrom(BatchTransferFromRequest[] calldata request) external returns (bool) {    \\n    _policyInterceptor(this.batchTransferFrom.selector, address(0), true, false);\\n    uint256 totalAmount = 0;\\n    for (uint256 i = 0; i < request.length; i++) {\\n      require(!_data.pausedList.contains(request[i].source), \\\"ERC20Pause: Account Suspended\\\");\\n      totalAmount += request[i].amount;\\n      _transferFrom(request[i].source, request[i].recipient, request[i].amount);\\n    }\\n\\n    emit BatchTransferFrom(_msgSender(), totalAmount);\\n    return true;\\n  }\\n\\n  function approve(address spender, uint256 amount) external returns (bool) {\\n    _policyInterceptor(this.approve.selector, _msgSender(), true, true);\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.increaseAllowance.selector, _msgSender(), true, true);\\n    address owner = _msgSender();\\n    uint256 currentAllowance = _allowance(owner, spender) + amount;\\n    _approve(owner, spender, currentAllowance);\\n    emit ApprovalIncreased(owner, spender, amount);\\n    return currentAllowance;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.decreaseAllowance.selector, _msgSender(), true, true);\\n    address owner = _msgSender();\\n    _spendAllowance(owner, spender, amount);\\n    emit ApprovalDecreased(owner, spender, amount);\\n    return _allowance(owner, spender);\\n  }\\n\\n   function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    bytes calldata signature\\n  ) external returns (bool) {\\n    _policyInterceptor(this.permit.selector, owner, true, true);\\n    require(block.timestamp <= deadline, \\\"Permit Deadline Expired\\\");\\n    bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n    bytes32 hash = LECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    address signer = LECDSA.recover(hash, signature);\\n\\n    // console.log(\\\"singer address: %s, nonce: %d\\\", signer, this.nonce(owner));\\n\\n    require(signer == owner, \\\"Illegal ECDASA Signature\\\");\\n\\n    _approve(owner, spender, value);\\n    return true;\\n  }\\n\\n  function mint(address account, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.mint.selector, account, true, true);\\n    return _mint(account, amount);\\n  }\\n\\n  function burn(address account, uint256 amount) external returns (uint256) {\\n    _policyInterceptor(this.burn.selector, account, true, true);\\n    require(account != address(0), \\\"Invalid Account Address\\\");\\n    uint256 accountBalance = _data.accounts[account].balance;\\n    require(accountBalance >= amount, \\\"Insufficient Account Balance\\\");\\n    unchecked {\\n      _data.accounts[account].balance = accountBalance - amount;\\n    }\\n    _totalSupply -= amount;\\n    emit Burn(_msgSender(), account, amount, _totalSupply);\\n    return _totalSupply;\\n  }\\n\\n  function name() external view returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() external view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function totalSupply() external view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) external view returns (uint256) {\\n    return _data.accounts[account].balance;\\n  }\\n\\n  function totalBalanceOf(address account) external view returns (uint256) {\\n    return _data.accounts[account].lockBalance + _data.accounts[account].balance;\\n  }\\n\\n  function lockBalanceOf(address account) external view returns (uint256) {\\n    return _data.accounts[account].lockBalance;\\n  }\\n\\n  function allowance(address owner, address spender) external view returns (uint256) {\\n    return _allowance(owner, spender);\\n  }\\n\\n  function taxRate() external view returns (uint256) {\\n    return _taxRate;\\n  }\\n\\n  function taxTreasury() external view returns (address) {\\n    return _taxTreasury;\\n  }\\n\\n  function taxWhitelist() external view returns (address[] memory) {\\n    return _data.taxWhitelist.values();\\n  }\\n\\n  function nonce(address owner) external view returns (uint256) {\\n    return _data.accounts[owner].nonce.current();\\n  }\\n\\n  function isPaused(address account) external view returns (bool) {\\n    return account != address(0) && _data.pausedList.contains(account);\\n  }\\n\\n  function isPausedAll() external view returns (bool) {\\n    return _isPaused;\\n  }\\n\\n  function pausedAccounts() external view returns (address[] memory) {\\n    return _data.pausedList.values();\\n  }\\n\\n  function lockInfo(bytes32 lockId, address account) external view returns (uint256, uint128, uint128, address, uint8) {\\n    AssetLock storage lock = _data.locks[account][lockId];\\n    return (lock.amount, lock.lockedAt, lock.claimedAt, lock.source, uint8(lock.status));\\n  }\\n\\n  function decimals() external pure returns (uint8) {\\n    return 18;\\n  }\\n\\n  function initialize(InitRequest calldata request) public onlyProxy onlyLocalAdmin initializer {\\n    bytes32 realm = keccak256(abi.encodePacked(request.domainRealm));\\n    __BASE_UUPS_init(request.domainName, request.domainVersion, realm, request.accessControlManager);\\n\\n    _name = \\\"LIVELY\\\";\\n    _symbol = \\\"LVL\\\";\\n    _taxRate = request.taxRateValue;\\n    _taxTreasury = request.taxTreasuryAddress;\\n    _mint(request.assetManager, request.totalSupplyAmount);\\n    _initContext(request.domainName, request.domainVersion, realm, request.signature);\\n  }\\n\\n  // TODO complete it\\n  function distributeToken() public view onlyProxy onlyLocalAdmin safeModeCheck returns (bool) {\\n    require(_getInitializedCount() == 1, \\\"Token Already Distributed\\\");\\n    return true;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {  \\n    return\\n      interfaceId == type(IERC20).interfaceId ||\\n      interfaceId == type(IERC20Extra).interfaceId ||\\n      interfaceId == type(IERC20Pause).interfaceId ||\\n      interfaceId == type(IERC20Lock).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function _initContext(\\n    string calldata domainName,\\n    string calldata domainVersion,\\n    bytes32 realm,\\n    bytes calldata signature\\n  ) internal {\\n    (IContextManagement.RequestContext memory rc, IContextManagement.RequestRegisterContext[] memory rrc) = LTokenERC20\\n      .createRequestContext(_domainName, _domainVersion, _domainRealm);\\n\\n    IContextManagement(_accessControlManager).registerContext(signature, rc, rrc);\\n\\n    emit Initialized(\\n      _msgSender(),\\n      address(this),\\n      _implementation(),\\n      domainName,\\n      domainVersion,\\n      realm,\\n      _getInitializedCount()\\n    );\\n  }\\n\\n  function _updateTaxWhitelist(address account, bool isDeleted) internal returns (bool){\\n    emit TaxWhitelistUpdated(_msgSender(), account, isDeleted);\\n    return LTokenERC20.updateTaxWhitelist(_data, account, isDeleted);\\n  }\\n\\n  function _mint(address account, uint256 amount) internal returns (uint256) {\\n    require(account != address(0), \\\"Invalid Account Address\\\");\\n    _totalSupply += amount;\\n    _data.accounts[account].balance += amount;\\n    emit Mint(_msgSender(), account, amount, _totalSupply);\\n    return _totalSupply;\\n  }\\n\\n  function _transfer(address src, address dest, uint256 amount) internal {\\n    LTokenERC20.transfer(_data, src, dest, amount);\\n    emit Transfer(src, dest, amount);\\n  }\\n\\n  function _taxTransfer(\\n    address source,\\n    address recipient,\\n    uint256 amount\\n  ) internal {\\n    uint256 tax = amount.mulBP(_taxRate);\\n    uint256 tokensToTransfer = amount.sub(tax, \\\"Insufficient Transfer Amount\\\");\\n\\n    _transfer(source, _taxTreasury, tax);\\n    _transfer(source, recipient, tokensToTransfer);\\n  }\\n\\n  function _transferFrom(\\n    address source,\\n    address recipient,\\n    uint256 amount\\n  ) internal returns (bool) {\\n    address spender = _msgSender();\\n    if (_taxRate > 0 && !_data.taxWhitelist.contains(_msgSender())) {\\n      _taxTransfer(source, recipient, amount);\\n    } else {\\n      _transfer(source, recipient, amount);\\n    }\\n\\n    _spendAllowance(source, spender, amount);    \\n    emit TransferFrom(spender, source, recipient, amount);\\n    return true;\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal {\\n    require(owner != address(0), \\\"Invalid Owner Address\\\");\\n    require(spender != address(0), \\\"Invalid Spender Address\\\");\\n\\n    _data.allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _spendAllowance(address owner, address spender, uint256 amount) internal {\\n    uint256 currentAllowance = _allowance(owner, spender);\\n    require(currentAllowance >= amount, \\\"Insufficient Account Allowance\\\");\\n    unchecked {\\n      _approve(owner, spender, currentAllowance - amount);\\n    }\\n  }\\n\\n  function _useNonce(address owner) internal returns (uint256 current) {\\n    LCounters.Counter storage localNonce = _data.accounts[owner].nonce;\\n    current = localNonce.current();\\n    localNonce.increment();\\n  }\\n\\n  function _lockToken(LockTokenRequest calldata lockRequest) internal returns (bytes32) {\\n    bytes32 lockId = LTokenERC20.lockToken(_data, lockRequest);  \\n    emit TokenLocked(lockId, _msgSender(), lockRequest.source, lockRequest.dest, lockRequest.timestamp, lockRequest.amount);\\n    return lockId;\\n  }\\n\\n  function _claimToken(bytes32 lockId) internal returns (uint256) {\\n    uint lockAmount = LTokenERC20.claimToken(_data, lockId);\\n    emit TokenClaimed(lockId, _msgSender(), _data.locks[_msgSender()][lockId].source, lockAmount);\\n    return lockAmount;\\n  }\\n\\n  function _unlockToken(UnLockTokenRequest calldata unlockRequest) internal returns (uint256) {\\n    (address srcAccount, uint lockAmount) = LTokenERC20.unlockToken(_data, unlockRequest);\\n    emit TokenUnlocked(unlockRequest.lockId, _msgSender(), unlockRequest.account, srcAccount, lockAmount, unlockRequest.reason);\\n    return lockAmount;\\n  }\\n\\n  function _policyInterceptor(bytes4 funcSelector, address account, bool isCheckingTokenPaused, bool isCheckingAccountPaused) private safeModeCheck aclCheck(funcSelector) {\\n    if(isCheckingTokenPaused) {\\n      require(!_isPaused, \\\"ERC20Pause: Call Rejected\\\");\\n    }\\n\\n    if (isCheckingAccountPaused) {\\n      require(!_data.pausedList.contains(account), \\\"ERC20Pause: Account Suspended\\\");\\n    }\\n  }\\n\\n  function _allowance(address owner, address spender) internal view returns (uint256) {\\n    return _data.allowances[owner][spender];\\n  }\\n}\\n\",\"keccak256\":\"0xbebe8c04758db3892cb4d7d6a70e529c91208bcc1a8b5f8aef6a7f1652587cc5\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x9b1c7fe54c596987fdd4d30a40d2deb9b1b84eea1e670f1ceba024e659e1b724\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3132fe87425509b784af9b03bb882bbe8dcc883bc41fc74655dea1629f7ace3e\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xddb448c18fbc0631d5d2bb8bf010e598e6b33a669fd2992cdae1c0183f77f90e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200004360017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6200011f565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc1462000074576200007462000145565b620000a160017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61046200011f565b6000805160206200555483398151915214620000c157620000c162000145565b33620000ea6000805160206200555483398151915260001b6200011c60201b620027331760201c565b80546001600160a01b0319166001600160a01b03929092169190911790556004805461ffff191660011790556200015b565b90565b6000828210156200014057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b608051615389620001cb60003960008181610ecc01528181610f0c01528181611046015281816110860152818161140a0152818161144a015281816115de0152818161161e015281816117d2015281816119fb01528181611a3b0152818161249901526124d901526153896000f3fe60806040526004361061036b5760003560e01c8063756af45f116101c4578063a0a8e460116100f6578063d3e024b81161009a578063f698da251161006c578063f698da2514610a92578063f94a0adb14610aa7578063faa552a814610abc578063fdb92ec414610adc57005b8063d3e024b814610a28578063d9dc1f1914610a3d578063dd62ed3e14610a5d578063de843a9414610a7d57005b8063a5bfa9a9116100d3578063a5bfa9a9146109b2578063a9059cbb146109d2578063b4a0bdf3146109f2578063be22465d14610a1057005b8063a0a8e4601461095e578063a0e6adf114610973578063a457c2d71461099257005b80638a2ddd03116101685780639a7e18731161013a5780639a7e1873146108d15780639b5f356e146108fe5780639dc29fac1461091e5780639fd5a6cf1461093e57005b80638a2ddd03146108295780638a92ab151461083e5780638bfc07ed1461085c57806395d89b41146108bc57005b8063771a3a1d116101a1578063771a3a1d146107bd5780637bf60ff4146107d25780637d35f355146107f4578063870666cb1461081457005b8063756af45f1461076857806375d0c0dc1461078857806376a67a511461079d57005b806344b7e5f21161029d57806358dbc45d116102415780636b839492116102135780636b839492146106d257806370a08231146106f257806370ae92d2146107285780637147855d1461074857005b806358dbc45d14610652578063595c6a671461067f5780635b14f1831461069457806360fefdec146106b457005b80634b0ee02a1161027a5780634b0ee02a146105e057806352d1902d146106005780635479d9401461061557806357b001f91461063257005b806344b7e5f21461058057806346a634d4146105a057806348e6be1c146105c057005b80631c6928e81161030f57806337674a2b116102e157806337674a2b146104f857806338d38c9714610518578063395093511461054057806340c10f191461056057005b80631c6928e81461048757806323b872dd146104a7578063313ce567146104c757806334273637146104e357005b806310e776ed1161034857806310e776ed146103eb5780631455a1c81461043257806317fdcc8e1461045257806318160ddd1461047257005b806301ffc9a71461037457806306fdde03146103a9578063095ea7b3146103cb57005b3661037257005b005b34801561038057600080fd5b5061039461038f366004614381565b610afc565b60405190151581526020015b60405180910390f35b3480156103b557600080fd5b506103be610b77565b6040516103a091906143f6565b3480156103d757600080fd5b506103946103e636600461441e565b610c09565b3480156103f757600080fd5b5061042461040636600461444a565b6001600160a01b03166000908152604a602052604090206001015490565b6040519081526020016103a0565b34801561043e57600080fd5b5061042461044d3660046144ab565b610c34565b34801561045e57600080fd5b5061039461046d3660046144ec565b610cd0565b34801561047e57600080fd5b50604754610424565b34801561049357600080fd5b506103946104a2366004614505565b610d27565b3480156104b357600080fd5b506103946104c2366004614579565b610e95565b3480156104d357600080fd5b50604051601281526020016103a0565b3480156104ef57600080fd5b50610394610ec0565b34801561050457600080fd5b506103726105133660046145ba565b61103c565b34801561052457600080fd5b5061052d61133d565b60405161ffff90911681526020016103a0565b34801561054c57600080fd5b5061042461055b36600461441e565b611351565b34801561056c57600080fd5b5061042461057b36600461441e565b6113de565b34801561058c57600080fd5b5061039461059b36600461460e565b6113fe565b3480156105ac57600080fd5b506103946105bb36600461462b565b6115b3565b3480156105cc57600080fd5b506103946105db36600461460e565b6115d2565b3480156105ec57600080fd5b506104246105fb36600461444a565b61179b565b34801561060c57600080fd5b506104246117c5565b34801561062157600080fd5b50600454610100900460ff16610394565b34801561063e57600080fd5b5061037261064d36600461444a565b611852565b34801561065e57600080fd5b5061066761191c565b6040516001600160a01b0390911681526020016103a0565b34801561068b57600080fd5b50610372611926565b3480156106a057600080fd5b506103946106af36600461444a565b61198b565b3480156106c057600080fd5b5060515462010000900460ff16610394565b3480156106de57600080fd5b506104246106ed366004614664565b6119ab565b3480156106fe57600080fd5b5061042461070d36600461444a565b6001600160a01b03166000908152604a602052604090205490565b34801561073457600080fd5b5061042461074336600461444a565b6119ce565b34801561075457600080fd5b506103be6107633660046146e4565b6119ef565b34801561077457600080fd5b5061037261078336600461444a565b611b17565b34801561079457600080fd5b50600154610424565b3480156107a957600080fd5b506103726107b836600461444a565b611bcb565b3480156107c957600080fd5b50604854610424565b3480156107de57600080fd5b506107e7611c9b565b6040516103a0919061479b565b34801561080057600080fd5b5061037261080f36600461482c565b611ca7565b34801561082057600080fd5b50610424611d38565b34801561083557600080fd5b50610372611d43565b34801561084a57600080fd5b506049546001600160a01b0316610667565b34801561086857600080fd5b5061087c610877366004614861565b611d91565b604080519586526001600160801b03948516602087015292909316918401919091526001600160a01b0316606083015260ff16608082015260a0016103a0565b3480156108c857600080fd5b506103be611e16565b3480156108dd57600080fd5b506108f16108ec366004614886565b611e25565b6040516103a091906148e8565b34801561090a57600080fd5b506104246109193660046144ab565b611f8d565b34801561092a57600080fd5b5061042461093936600461441e565b612081565b34801561094a57600080fd5b50610394610959366004614920565b6121af565b34801561096a57600080fd5b50600254610424565b34801561097f57600080fd5b50604954600160a01b900460ff16610394565b34801561099e57600080fd5b506104246109ad36600461441e565b6123a4565b3480156109be57600080fd5b506104246109cd3660046144ec565b612422565b3480156109de57600080fd5b506103946109ed36600461441e565b61243e565b3480156109fe57600080fd5b506000546001600160a01b0316610667565b348015610a1c57600080fd5b5060045460ff16610394565b348015610a3457600080fd5b50600354610424565b348015610a4957600080fd5b50610394610a5836600461444a565b61248d565b348015610a6957600080fd5b50610424610a783660046149c9565b612607565b348015610a8957600080fd5b506107e7612613565b348015610a9e57600080fd5b5061042461261f565b348015610ab357600080fd5b50610667612629565b348015610ac857600080fd5b50610394610ad736600461482c565b612633565b348015610ae857600080fd5b50610424610af73660046149f7565b61270d565b60006001600160e01b03198216634a17459160e11b1480610b2d57506001600160e01b0319821663e3a31a9d60e01b145b80610b4857506001600160e01b03198216636b88d51560e11b145b80610b6257506001600160e01b03198216627b720760e91b145b80610b715750610b7182612736565b92915050565b606060458054610b8690614a31565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb290614a31565b8015610bff5780601f10610bd457610100808354040283529160200191610bff565b820191906000526020600020905b815481529060010190602001808311610be257829003601f168201915b5050505050905090565b6000610c2063095ea7b360e01b335b600180612786565b610c2b338484612884565b50600192915050565b6000610c4763028ab43960e31b33610c18565b6000805b83811015610c9257610c74858583818110610c6857610c68614a65565b9050602002013561298a565b610c7e9083614a91565b915080610c8a81614aa9565b915050610c4b565b5060405181815233907ff816ce3b3a52bd5c96a6ac9d4404d206f4e9d482ffa303afbf0dbeea2957f59a906020015b60405180910390a29392505050565b6000610ce5630bfee64760e11b828080612786565b604882905560405182815233907fb7902185ac0a79231c8be85f0ee0d94806d95d785d216824a078279f5d5bfbae9060200160405180910390a2506001919050565b6000610d3d63038d251d60e31b82600181612786565b6000805b83811015610e5457610d7c858583818110610d5e57610d5e614a65565b610d74926020606090920201908101915061444a565b604d90612a71565b15610da25760405162461bcd60e51b8152600401610d9990614ac2565b60405180910390fd5b848482818110610db457610db4614a65565b9050606002016040013582610dc99190614a91565b9150610e41858583818110610de057610de0614a65565b610df6926020606090920201908101915061444a565b868684818110610e0857610e08614a65565b9050606002016020016020810190610e20919061444a565b878785818110610e3257610e32614a65565b90506060020160400135612a93565b5080610e4c81614aa9565b915050610d41565b5060405181815233907f208fdf04989d654cc491d69be8eb64992c7b7407e34a6ac73e7c0361d0591eff906020015b60405180910390a25060019392505050565b6000610eab6323b872dd60e01b85600180612786565b610eb6848484612a93565b90505b9392505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610f0a5760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f3c612b3c565b6001600160a01b031614610f625760405162461bcd60e51b8152600401610d9990614b28565b33610f6b612b5d565b6001600160a01b031614610fb95760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c88139bdd08105d5d1a1bdc9a5e9959605a1b6044820152606401610d99565b60045460ff1615610fdc5760405162461bcd60e51b8152600401610d9990614b56565b60515461ffff1661ffff166001146110365760405162461bcd60e51b815260206004820152601960248201527f546f6b656e20416c7265616479204469737472696275746564000000000000006044820152606401610d99565b50600190565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110845760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110b6612b3c565b6001600160a01b0316146110dc5760405162461bcd60e51b8152600401610d9990614b28565b336110e5612b5d565b6001600160a01b0316146111335760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c88139bdd08105d5d1a1bdc9a5e9959605a1b6044820152606401610d99565b60515462010000900460ff16158080156111555750605154600161ffff909116105b806111705750303b158015611170575060515461ffff166001145b6111bc5760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a6564000000006044820152606401610d99565b6051805461ffff1916600117905580156111e2576051805462ff00001916620100001790555b60006111f16040840184614b8d565b604051602001611202929190614bd3565b60408051601f198184030181529190528051602090910120905061124c6112298480614b8d565b6112366020870187614b8d565b8561124760e08a0160c08b0161444a565b612b85565b6040805180820190915260068152654c4956454c5960d01b60208201526045906112769082614c29565b5060408051808201909152600381526213159360ea1b602082015260469061129e9082614c29565b5060808301356048556112b8610100840160e0850161444a565b604980546001600160a01b0319166001600160a01b03929092169190911790556112f76112ed6101208501610100860161444a565b8460a00135612b9b565b506113256113058480614b8d565b6113126020870187614b8d565b8561132060608a018a614b8d565b612c5b565b508015611339576051805462ff0000191690555b5050565b600061134c60515461ffff1690565b905090565b6000611364633950935160e01b33610c18565b336000836113728387612de1565b61137c9190614a91565b9050611389828683612884565b846001600160a01b0316826001600160a01b03167f865ea570c20f0fe0ae579ec567fa79d57a683390554593dc070ea0dcd5f466fb866040516113ce91815260200190565b60405180910390a3949350505050565b60006113f46340c10f1960e01b84600180612786565b610eb98383612b9b565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114485760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661147a612b3c565b6001600160a01b0316146114a05760405162461bcd60e51b8152600401610d9990614b28565b60006114af60515461ffff1690565b61ffff16116115005760405162461bcd60e51b815260206004820152601860248201527f436f6e7472616374204e6f7420496e697469616c697a656400000000000000006044820152606401610d99565b61151063225bf2f960e11b612e0c565b6115545760405162461bcd60e51b815260206004820152601560248201527429b2ba29b0b332a6b7b232902337b93134b23232b760591b6044820152606401610d99565b6004805460ff191683151517905560035430336001600160a01b03167fdd452a31d2e164a1ea436c084842c27d24ae2548a575a869f71b05a4ed16243f856040516115a3911515815260200190565b60405180910390a450805b919050565b60006115c86311a98d3560e21b828080612786565b610eb98383612f73565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361161c5760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661164e612b3c565b6001600160a01b0316146116745760405162461bcd60e51b8152600401610d9990614b28565b60045460ff16156116975760405162461bcd60e51b8152600401610d9990614b56565b6116a7631239af8760e21b612e0c565b6116f35760405162461bcd60e51b815260206004820152601a60248201527f5365745570677261646553746174757320466f7262696464656e0000000000006044820152606401610d99565b6116fb61304f565b6117475760405162461bcd60e51b815260206004820152601760248201527f5265616c6d205570677261646520466f7262696464656e0000000000000000006044820152606401610d99565b6004805461ff0019166101008415150217905560035430336001600160a01b03167fe9f97ad94c2ba252dcfc525e004f608ac5cb886955d8fc87d9e0ee070a698c56856040516115a3911515815260200190565b6001600160a01b0381166000908152604a602052604081208054600190910154610b719190614a91565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461183f5760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c20436f6e74726163742044656c656761746563616c6c0000006044820152606401610d99565b5060008051602061533483398151915290565b6118666357b001f960e01b60008080612786565b6001600160a01b03811661188c5760405162461bcd60e51b8152600401610d9990614ce8565b611897604d82612a71565b6118d75760405162461bcd60e51b81526020600482015260116024820152701058d8dbdd5b9d08139bdd08119bdd5b99607a1b6044820152606401610d99565b6118e2604d8261318b565b506040516001600160a01b0382169033907f3d072963433794eb417a69355df67d08bbd73d5076ef653d6863861161d60af390600090a350565b600061134c612b3c565b61193a63595c6a6760e01b60008080612786565b6049805460ff60a01b1916600160a01b1790556119543390565b6001600160a01b03167ff1005168aea1429fe9559d51ef6caa33e6426890864e2e6e41e5d54baa7be79f60405160405180910390a2565b60006001600160a01b03821615801590610b715750610b71604d83612a71565b60006119c56335c1ca4960e11b610c18602085018561444a565b610b71826131a0565b6001600160a01b0381166000908152604a6020526040812060020154610b71565b60606001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611a395760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a6b612b3c565b6001600160a01b031614611a915760405162461bcd60e51b8152600401610d9990614b28565b60045460ff1615611ab45760405162461bcd60e51b8152600401610d9990614b56565b600454610100900460ff16611b035760405162461bcd60e51b8152602060048201526015602482015274155c19dc9859194810d85b1b0814995a9958dd1959605a1b6044820152606401610d99565b611b0c84613296565b610eb684848461335d565b60045460ff1615611b3a5760405162461bcd60e51b8152600401610d9990614b56565b611b4a63756af45f60e01b612e0c565b611b965760405162461bcd60e51b815260206004820152601a60248201527f57697468647261772042616c616e636520466f7262696464656e0000000000006044820152606401610d99565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015611339573d6000803e3d6000fd5b611bdf6376a67a5160e01b60008080612786565b6001600160a01b038116611c055760405162461bcd60e51b8152600401610d9990614ce8565b611c10604d82612a71565b15611c565760405162461bcd60e51b81526020600482015260166024820152751058d8dbdd5b9d08105b1c9958591e4814185d5cd95960521b6044820152606401610d99565b611c61604d826135ae565b506040516001600160a01b0382169033907f3dd4f37ca5eaf6c357698a52c806820426d7c9a26adb0991c3bebb09cf23352a90600090a350565b606061134c604f6135c3565b611cbb637d35f35560e01b60008080612786565b60005b81811015611d3357611d20838383818110611cdb57611cdb614a65565b611cf1926020604090920201908101915061444a565b848484818110611d0357611d03614a65565b9050604002016020016020810190611d1b919061460e565b612f73565b5080611d2b81614aa9565b915050611cbe565b505050565b600061134c306135d0565b611d57638a2ddd0360e01b60008080612786565b6049805460ff60a01b1916905560405133907f3c1fb1fd79ee84e55a8fe78554c432ef36ea033a9245ce4b650bd824a12554d390600090a2565b6001600160a01b038181166000908152604c60209081526040808320868452909152812080546001820154600283015493948594859485948594919390926001600160801b0380841693600160801b90041691811690600160a01b900460ff166003811115611e0257611e02614d1f565b939c929b5090995097509095509350505050565b606060468054610b8690614a31565b6060611e3c639a7e187360e01b6000600181612786565b600080836001600160401b03811115611e5757611e57614676565b604051908082528060200260200182016040528015611e80578160200160208202803683370190505b50905060005b84811015611f4f57611eb9868683818110611ea357611ea3614a65565b610d74926020608090920201908101915061444a565b15611ed65760405162461bcd60e51b8152600401610d9990614ac2565b611ef6868683818110611eeb57611eeb614a65565b9050608002016131a0565b828281518110611f0857611f08614a65565b602002602001018181525050858582818110611f2657611f26614a65565b9050608002016060013583611f3b9190614a91565b925080611f4781614aa9565b915050611e86565b5060405182815233907f8e04d4df873aa900cbe3c4b51af80c003e2a72b8dfd36a6a2e54fdadbf4d11279060200160405180910390a2949350505050565b6000611fa3634daf9ab760e11b82600181612786565b6000805b8381101561204e57611fe7858583818110611fc457611fc4614a65565b9050602002810190611fd69190614d35565b610d7490604081019060200161444a565b156120045760405162461bcd60e51b8152600401610d9990614ac2565b61203085858381811061201957612019614a65565b905060200281019061202b9190614d35565b61360f565b61203a9083614a91565b91508061204681614aa9565b915050611fa7565b5060405181815233907f358ca32fb65dbe46a9aec67304b927cf0c3eaf896217f853f9a93fef2e92072390602001610cc1565b6000612097632770a7eb60e21b84600180612786565b6001600160a01b0383166120bd5760405162461bcd60e51b8152600401610d9990614ce8565b6001600160a01b0383166000908152604a6020526040902054828110156121265760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74204163636f756e742042616c616e6365000000006044820152606401610d99565b6001600160a01b0384166000908152604a60205260408120848303905560478054859290612155908490614d55565b90915550506047546040805185815260208101929092526001600160a01b0386169133917f5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2910160405180910390a3505060475492915050565b60006121c5639fd5a6cf60e01b88600180612786565b834211156122155760405162461bcd60e51b815260206004820152601760248201527f5065726d697420446561646c696e6520457870697265640000000000000000006044820152606401610d99565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886122448c6136fe565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006122e26122a1613729565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b905060006123268287878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061379292505050565b9050896001600160a01b0316816001600160a01b0316146123895760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20454344415341205369676e617475726500000000000000006044820152606401610d99565b6123948a8a8a612884565b5060019998505050505050505050565b60006123b763a457c2d760e01b33610c18565b336123c38185856137b6565b836001600160a01b0316816001600160a01b03167f2d6189480d1bb13da7c0ed0063fe94af3c19eed814940db43733c4198d00a7428560405161240891815260200190565b60405180910390a361241a8185612de1565b949350505050565b600061243563a5bfa9a960e01b33610c18565b610b718261298a565b600061245163a9059cbb60e01b33610c18565b600060485411801561246d575061246b335b604f90612a71565b155b156124825761247d338484613827565b610c2b565b610c2b3384846138ae565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036124d75760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612509612b3c565b6001600160a01b03161461252f5760405162461bcd60e51b8152600401610d9990614b28565b60045460ff16156125525760405162461bcd60e51b8152600401610d9990614b56565b61256263d9dc1f1960e01b612e0c565b6125ae5760405162461bcd60e51b815260206004820152601760248201527f5365744c6f63616c41646d696e20466f7262696464656e0000000000000000006044820152606401610d99565b6001600160a01b0382166125f65760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b6044820152606401610d99565b6125ff82613974565b506001919050565b6000610eb98383612de1565b606061134c604d6135c3565b600061134c613729565b600061134c612b5d565b6000612646631f54aa5560e31b33610c18565b6000805b838110156126da5784848281811061266457612664614a65565b90506040020160200135826126799190614a91565b91506126c83386868481811061269157612691614a65565b6126a7926020604090920201908101915061444a565b8787858181106126b9576126b9614a65565b905060400201602001356138ae565b806126d281614aa9565b91505061264a565b5060405181815233907f6f8b319642e67cd1f14d773b5289e2e9bc1afce60945a4705b94c4c2ce0d347e90602001610e83565b600061272a633f6e4bb160e21b610c18604085016020860161444a565b610b718261360f565b90565b60006001600160e01b0319821663748be05360e01b148061276757506001600160e01b031982166352d1902d60e01b145b80610b7157506301ffc9a760e01b6001600160e01b0319831614610b71565b60045460ff16156127a95760405162461bcd60e51b8152600401610d9990614b56565b836127b381612e0c565b6127ef5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610d99565b821561284f57604954600160a01b900460ff161561284f5760405162461bcd60e51b815260206004820152601960248201527f455243323050617573653a2043616c6c2052656a6563746564000000000000006044820152606401610d99565b811561287d57612860604d85612a71565b1561287d5760405162461bcd60e51b8152600401610d9990614ac2565b5050505050565b6001600160a01b0383166128d25760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964204f776e6572204164647265737360581b6044820152606401610d99565b6001600160a01b0382166129285760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964205370656e64657220416464726573730000000000000000006044820152606401610d99565b6001600160a01b038381166000818152604b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60405163f7d6b5af60e01b8152604a600482015260248101829052600090819073a513E6E4b8f2a923D98304ec87F64353C4D5C8539063f7d6b5af90604401602060405180830381865af41580156129e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0a9190614d6c565b336000818152604c602090815260408083208884528252918290206002015491518481529394506001600160a01b039091169286917f2a0eb8ca138e1b0c7a85d2f8f43d0f3fe72c27b59c53365fdce897e3e6f3271891015b60405180910390a492915050565b6001600160a01b03811660009081526001830160205260408120541515610eb9565b604854600090339015801590612aaf5750612aad33612463565b155b15612ac457612abf858585613827565b612acf565b612acf8585856138ae565b612ada8582856137b6565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f5f7542858008eeb041631f30e6109ae94b83a58e9a58261dd2c42c508850f93986604051612b2991815260200190565b60405180910390a4506001949350505050565b60006000805160206153348339815191525b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612b4e565b612b938686868686866139eb565b505050505050565b60006001600160a01b038316612bc35760405162461bcd60e51b8152600401610d9990614ce8565b8160476000828254612bd59190614a91565b90915550506001600160a01b0383166000908152604a602052604081208054849290612c02908490614a91565b90915550506047546040805184815260208101929092526001600160a01b0385169133917f2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee910160405180910390a35060475492915050565b6001546002546003546040516397ca328d60e01b8152600481019390935260248301919091526044820152600090819073a513E6E4b8f2a923D98304ec87F64353C4D5C853906397ca328d90606401600060405180830381865af4158015612cc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cef9190810190614ef4565b6000546040516378efa4ed60e11b81529294509092506001600160a01b03169063f1df49da90612d29908790879087908790600401614fd9565b6020604051808303816000875af1158015612d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6c9190614d6c565b50612d75612b3c565b6001600160a01b031630336001600160a01b03167ff851a1e85477b818fc72ad517ea622cc316f10f67d61c9e740adc151a8b413948c8c8c8c8c612dbc60515461ffff1690565b604051612dce969594939291906150e5565b60405180910390a4505050505050505050565b6001600160a01b039182166000908152604b6020908152604080832093909416825291909152205490565b600080546001600160a01b03163003612ef85760006363d59cf360e11b612e32306135d0565b3385604051602401612e469392919061512a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506000612ec3612e87612b3c565b836040518060400160405280601d81526020017f44656c656761746563616c6c20686173416363657373204661696c6564000000815250613bf6565b90508060018251612ed49190614d55565b81518110612ee457612ee4614a65565b60209101015160f81c600114949350505050565b6000546001600160a01b031663c7ab39e6612f12306135d0565b33856040518463ffffffff1660e01b8152600401612f329392919061512a565b602060405180830381865afa158015612f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b719190615153565b60006001600160a01b038316336001600160a01b03167f85766eb39b0ac39ad7e8afbf36233d9adb1af81136bbea1f94cacd4b2e272c6984604051612fbc911515815260200190565b60405180910390a3604051634572e0c160e01b8152604a60048201526001600160a01b0384166024820152821515604482015273a513E6E4b8f2a923D98304ec87F64353C4D5C85390634572e0c190606401602060405180830381865af415801561302b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb99190615153565b600080546001600160a01b0316300361311557600063e25d75f060e01b60035460405160240161308191815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905060006130e16130c2612b3c565b8360405180606001604052806025815260200161530f60259139613bf6565b905080600182516130f29190614d55565b8151811061310257613102614a65565b60209101015160f81c6001149392505050565b600054600354604051630e25d75f60e41b81526001600160a01b039092169163e25d75f09161314a9160040190815260200190565b602060405180830381865afa158015613167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190615153565b6000610eb9836001600160a01b038416613cbf565b60008073a513E6E4b8f2a923D98304ec87F64353C4D5C8536310e1fc40604a856040518363ffffffff1660e01b81526004016131dd929190615170565b602060405180830381865af41580156131fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321e9190614d6c565b905061322d602084018461444a565b6001600160a01b031633827f8c6c9f95afe4c944c9f81d2965f0a9a0c021ce66ac4020dd8b25953a971f9148613269604088016020890161444a565b604080516001600160a01b0390921682528089013560208301526060808a01359183019190915201612a63565b61329e612b3c565b6001600160a01b0316816001600160a01b0316036132fe5760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204e657720496d706c656d656e746174696f6e0000000000006044820152606401610d99565b61330e637147855d60e01b612e0c565b61335a5760405162461bcd60e51b815260206004820152601960248201527f5570677261646520436f6e7465787420466f7262696464656e000000000000006044820152606401610d99565b50565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156133a75761339284613db2565b50604080516000815260208101909152610eb9565b836001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613401575060408051601f3d908101601f191682019092526133fe91810190614d6c565b60015b6134455760405162461bcd60e51b8152602060048201526015602482015274125b1b1959d85b0815555414c810dbdb9d1c9858dd605a1b6044820152606401610d99565b600080516020615334833981519152811461349a5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a590815555414c810dbdb9d1c9858dd605a1b6044820152606401610d99565b506040516301ffc9a760e01b815263748be05360e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa925050508015613502575060408051601f3d908101601f191682019092526134ff91810190615153565b60015b61354e5760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204950726f787920436f6e74726163740000000000000000006044820152606401610d99565b8061359b5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204950726f787920436f6e74726163740000000000000000006044820152606401610d99565b506135a7848484613e33565b9050610eb9565b6000610eb9836001600160a01b038416613e9d565b60606000610eb983613eec565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b600080600073a513E6E4b8f2a923D98304ec87F64353C4D5C85363f1c3afef604a866040518363ffffffff1660e01b815260040161364e9291906151c8565b6040805180830381865af415801561366a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061368e919061524f565b90925090506136a3604085016020860161444a565b6001600160a01b03163385357f571ab3cb94eb114c4b41e4f4bbbe9625a6c546920db08ddea52bd3ec7cb5858685856136df60408b018b614b8d565b6040516136ef949392919061527d565b60405180910390a49392505050565b6001600160a01b0381166000908152604a602052604090206002018054600181018255905b50919050565b600154600254604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60008060006137a18585613f48565b915091506137ae81613fb6565b509392505050565b60006137c28484612de1565b9050818110156138145760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e74204163636f756e7420416c6c6f77616e636500006044820152606401610d99565b6138218484848403612884565b50505050565b600061383e6048548361416c90919063ffffffff16565b9050600061388c826040518060400160405280601c81526020017f496e73756666696369656e74205472616e7366657220416d6f756e7400000000815250856141849092919063ffffffff16565b6049549091506138a79086906001600160a01b0316846138ae565b61287d8585835b604051633de90db360e01b8152604a60048201526001600160a01b038085166024830152831660448201526064810182905273a513E6E4b8f2a923D98304ec87F64353C4D5C85390633de90db39060840160006040518083038186803b15801561391757600080fd5b505af415801561392b573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161297d91815260200190565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f54ab0d18de7958786ba1ad85966d59baa2b395455f0530dcdcfd732e6af539e29181900360200190a350565b60515462010000900460ff16613a435760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e67000000000000006044820152606401610d99565b8585604051602001613a56929190614bd3565b60408051601f19818403018152908290528051602091820120600155613a80918691869101614bd3565b60408051601f19818403018152919052805160209091012060025560038290556001600160a01b038116613ac557600080546001600160a01b03191630179055613be2565b6040516301ffc9a760e01b81526301fe701d60e21b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa925050508015613b2c575060408051601f3d908101601f19168201909252613b2991810190615153565b60015b613b785760405162461bcd60e51b815260206004820152601c60248201527f496c6c6567616c20416363657373436f6e74726f6c4d616e61676572000000006044820152606401610d99565b80613bc55760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420416363657373436f6e74726f6c4d616e61676572000000006044820152606401610d99565b50600080546001600160a01b0319166001600160a01b0383161790555b6004805461ffff19169055612b9333613974565b60606001600160a01b0384163b613c4a5760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b6044820152606401610d99565b600080856001600160a01b031685604051613c6591906152a5565b600060405180830381855af49150503d8060008114613ca0576040519150601f19603f3d011682016040523d82523d6000602084013e613ca5565b606091505b5091509150613cb58282866141b0565b9695505050505050565b60008181526001830160205260408120548015613da8576000613ce3600183614d55565b8554909150600090613cf790600190614d55565b9050818114613d5c576000866000018281548110613d1757613d17614a65565b9060005260206000200154905080876000018481548110613d3a57613d3a614a65565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613d6d57613d6d6152b7565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b71565b6000915050610b71565b6001600160a01b0381163b613e045760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b6044820152606401610d99565b60008051602061533483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060613e3e846141e9565b600083511180613e4b5750815b15613e86576135a784846040518060400160405280601381526020017211195b1959d85d1958d85b1b0811985a5b1959606a1b815250613bf6565b505060408051600081526020810190915292915050565b6000818152600183016020526040812054613ee457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b71565b506000610b71565b606081600001805480602002602001604051908101604052809291908181526020018280548015613f3c57602002820191906000526020600020905b815481526020019060010190808311613f28575b50505050509050919050565b6000808251604103613f7e5760208301516040840151606085015160001a613f728782858561422d565b94509450505050613faf565b8251604003613fa75760208301516040840151613f9c86838361431a565b935093505050613faf565b506000905060025b9250929050565b6000816004811115613fca57613fca614d1f565b03613fd25750565b6001816004811115613fe657613fe6614d1f565b036140335760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610d99565b600281600481111561404757614047614d1f565b036140945760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610d99565b60038160048111156140a8576140a8614d1f565b036141005760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610d99565b600481600481111561411457614114614d1f565b0361335a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610d99565b6000610eb961271061417e8585614353565b9061435f565b600081848411156141a85760405162461bcd60e51b8152600401610d9991906143f6565b505050900390565b606083156141bf575081610eb9565b8251156141cf5782518084602001fd5b8160405162461bcd60e51b8152600401610d9991906143f6565b6141f281613db2565b6040516001600160a01b03821690309033907f354bd4b6eb65d64e6c79c53fa4f983a5e6bec4824ce4627c71be0b2722f4917e90600090a450565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156142645750600090506003614311565b8460ff16601b1415801561427c57508460ff16601c14155b1561428d5750600090506004614311565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156142e1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661430a57600060019250925050614311565b9150600090505b94509492505050565b6000806001600160ff1b0383168161433760ff86901c601b614a91565b90506143458782888561422d565b935093505050935093915050565b6000610eb982846152cd565b6000610eb982846152ec565b6001600160e01b03198116811461335a57600080fd5b60006020828403121561439357600080fd5b8135610eb98161436b565b60005b838110156143b95781810151838201526020016143a1565b838111156138215750506000910152565b600081518084526143e281602086016020860161439e565b601f01601f19169290920160200192915050565b602081526000610eb960208301846143ca565b6001600160a01b038116811461335a57600080fd5b6000806040838503121561443157600080fd5b823561443c81614409565b946020939093013593505050565b60006020828403121561445c57600080fd5b8135610eb981614409565b60008083601f84011261447957600080fd5b5081356001600160401b0381111561449057600080fd5b6020830191508360208260051b8501011115613faf57600080fd5b600080602083850312156144be57600080fd5b82356001600160401b038111156144d457600080fd5b6144e085828601614467565b90969095509350505050565b6000602082840312156144fe57600080fd5b5035919050565b6000806020838503121561451857600080fd5b82356001600160401b038082111561452f57600080fd5b818501915085601f83011261454357600080fd5b81358181111561455257600080fd5b86602060608302850101111561456757600080fd5b60209290920196919550909350505050565b60008060006060848603121561458e57600080fd5b833561459981614409565b925060208401356145a981614409565b929592945050506040919091013590565b6000602082840312156145cc57600080fd5b81356001600160401b038111156145e257600080fd5b82016101208185031215610eb957600080fd5b801515811461335a57600080fd5b80356115ae816145f5565b60006020828403121561462057600080fd5b8135610eb9816145f5565b6000806040838503121561463e57600080fd5b823561464981614409565b91506020830135614659816145f5565b809150509250929050565b60006080828403121561372357600080fd5b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156146ae576146ae614676565b60405290565b604051601f8201601f191681016001600160401b03811182821017156146dc576146dc614676565b604052919050565b6000806000606084860312156146f957600080fd5b833561470481614409565b92506020848101356001600160401b038082111561472157600080fd5b818701915087601f83011261473557600080fd5b81358181111561474757614747614676565b614759601f8201601f191685016146b4565b9150808252888482850101111561476f57600080fd5b808484018584013760008482840101525080945050505061479260408501614603565b90509250925092565b6020808252825182820181905260009190848201906040850190845b818110156147dc5783516001600160a01b0316835292840192918401916001016147b7565b50909695505050505050565b60008083601f8401126147fa57600080fd5b5081356001600160401b0381111561481157600080fd5b6020830191508360208260061b8501011115613faf57600080fd5b6000806020838503121561483f57600080fd5b82356001600160401b0381111561485557600080fd5b6144e0858286016147e8565b6000806040838503121561487457600080fd5b82359150602083013561465981614409565b6000806020838503121561489957600080fd5b82356001600160401b03808211156148b057600080fd5b818501915085601f8301126148c457600080fd5b8135818111156148d357600080fd5b8660208260071b850101111561456757600080fd5b6020808252825182820181905260009190848201906040850190845b818110156147dc57835183529284019291840191600101614904565b60008060008060008060a0878903121561493957600080fd5b863561494481614409565b9550602087013561495481614409565b9450604087013593506060870135925060808701356001600160401b038082111561497e57600080fd5b818901915089601f83011261499257600080fd5b8135818111156149a157600080fd5b8a60208285010111156149b357600080fd5b6020830194508093505050509295509295509295565b600080604083850312156149dc57600080fd5b82356149e781614409565b9150602083013561465981614409565b600060208284031215614a0957600080fd5b81356001600160401b03811115614a1f57600080fd5b820160608185031215610eb957600080fd5b600181811c90821680614a4557607f821691505b60208210810361372357634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614aa457614aa4614a7b565b500190565b600060018201614abb57614abb614a7b565b5060010190565b6020808252601d908201527f455243323050617573653a204163636f756e742053757370656e646564000000604082015260600190565b602080825260159082015274125b1b1959d85b0810dbdb9d1c9858dd0810d85b1b605a1b604082015260600190565b602080825260149082015273141c9bde1e4810d85b1b195908125b9d985b1a5960621b604082015260600190565b60208082526017908201527f536166654d6f64653a2043616c6c2052656a6563746564000000000000000000604082015260600190565b6000808335601e19843603018112614ba457600080fd5b8301803591506001600160401b03821115614bbe57600080fd5b602001915036819003821315613faf57600080fd5b8183823760009101908152919050565b601f821115611d3357600081815260208120601f850160051c81016020861015614c0a5750805b601f850160051c820191505b81811015612b9357828155600101614c16565b81516001600160401b03811115614c4257614c42614676565b614c5681614c508454614a31565b84614be3565b602080601f831160018114614c8b5760008415614c735750858301515b600019600386901b1c1916600185901b178555612b93565b600085815260208120601f198616915b82811015614cba57888601518255948401946001909101908401614c9b565b5085821015614cd85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526017908201527f496e76616c6964204163636f756e742041646472657373000000000000000000604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60008235605e19833603018112614d4b57600080fd5b9190910192915050565b600082821015614d6757614d67614a7b565b500390565b600060208284031215614d7e57600080fd5b5051919050565b80516115ae816145f5565b60006001600160401b03821115614da957614da9614676565b5060051b60200190565b600082601f830112614dc457600080fd5b81516020614dd9614dd483614d90565b6146b4565b82815260059290921b84018101918181019086841115614df857600080fd5b8286015b84811015614ee95780516001600160401b0380821115614e1c5760008081fd5b908801906060828b03601f1901811315614e365760008081fd5b614e3e61468c565b87840151815260408085015184811115614e585760008081fd5b85019350603f84018d13614e6c5760008081fd5b88840151614e7c614dd482614d90565b81815260059190911b85018201908a8101908f831115614e9c5760008081fd5b958301955b82871015614ec3578651614eb48161436b565b8252958b0195908b0190614ea1565b848c015250614ed59050858401614d85565b908201528652505050918301918301614dfc565b509695505050505050565b60008082840360c0811215614f0857600080fd5b60a0811215614f1657600080fd5b5060405160a081016001600160401b038282108183111715614f3a57614f3a614676565b8160405285518352602086015160208401526040860151604084015260608601519150614f6682614409565b81606084015260808601519150614f7c826145f5565b6080830182905260a086015192945080831115614f9857600080fd5b5050614fa685828601614db3565b9150509250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e081526000614fed60e083018688614fb0565b6020855181850152808601516040818187015280880151915060608281880152808901519250608060018060a01b03841681890152808a0151151560a089015287860360c089015285935088518087528587019450858160051b880101868b016000805b848110156150d0578a8403601f190189528251805185528a8101518b86018990528051898701819052908c01908490898801905b808310156150af5783516001600160e01b0319168252928e019260019290920191908e0190615085565b50928b01511515968b019690965250988a0198935091890191600101615051565b50919f9e505050505050505050505050505050565b6080815260006150f960808301888a614fb0565b828103602084015261510c818789614fb0565b91505083604083015261ffff83166060830152979650505050505050565b9283526001600160a01b039190911660208301526001600160e01b031916604082015260600190565b60006020828403121561516557600080fd5b8151610eb9816145f5565b82815260a08101823561518281614409565b6001600160a01b03908116602084810191909152840135906151a382614409565b8082166040850152505060408301356060830152606083013560808301529392505050565b8281526040602082015281356040820152600060208301356151e981614409565b6001600160a01b03166060830152604083013536849003601e1901811261520f57600080fd5b83016020810190356001600160401b0381111561522b57600080fd5b80360382131561523a57600080fd5b60606080850152613cb560a085018284614fb0565b6000806040838503121561526257600080fd5b825161526d81614409565b6020939093015192949293505050565b60018060a01b0385168152836020820152606060408201526000613cb5606083018486614fb0565b60008251614d4b81846020870161439e565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156152e7576152e7614a7b565b500290565b60008261530957634e487b7160e01b600052601260045260246000fd5b50049056fe44656c656761746563616c6c2069735265616c6d55706772616461626c65204661696c6564360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220d9c76295704d0a4d2d0e45f0c636a72e2c2816230388b66d617c81dacb60372464736f6c634300080f0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
  "deployedBytecode": "0x60806040526004361061036b5760003560e01c8063756af45f116101c4578063a0a8e460116100f6578063d3e024b81161009a578063f698da251161006c578063f698da2514610a92578063f94a0adb14610aa7578063faa552a814610abc578063fdb92ec414610adc57005b8063d3e024b814610a28578063d9dc1f1914610a3d578063dd62ed3e14610a5d578063de843a9414610a7d57005b8063a5bfa9a9116100d3578063a5bfa9a9146109b2578063a9059cbb146109d2578063b4a0bdf3146109f2578063be22465d14610a1057005b8063a0a8e4601461095e578063a0e6adf114610973578063a457c2d71461099257005b80638a2ddd03116101685780639a7e18731161013a5780639a7e1873146108d15780639b5f356e146108fe5780639dc29fac1461091e5780639fd5a6cf1461093e57005b80638a2ddd03146108295780638a92ab151461083e5780638bfc07ed1461085c57806395d89b41146108bc57005b8063771a3a1d116101a1578063771a3a1d146107bd5780637bf60ff4146107d25780637d35f355146107f4578063870666cb1461081457005b8063756af45f1461076857806375d0c0dc1461078857806376a67a511461079d57005b806344b7e5f21161029d57806358dbc45d116102415780636b839492116102135780636b839492146106d257806370a08231146106f257806370ae92d2146107285780637147855d1461074857005b806358dbc45d14610652578063595c6a671461067f5780635b14f1831461069457806360fefdec146106b457005b80634b0ee02a1161027a5780634b0ee02a146105e057806352d1902d146106005780635479d9401461061557806357b001f91461063257005b806344b7e5f21461058057806346a634d4146105a057806348e6be1c146105c057005b80631c6928e81161030f57806337674a2b116102e157806337674a2b146104f857806338d38c9714610518578063395093511461054057806340c10f191461056057005b80631c6928e81461048757806323b872dd146104a7578063313ce567146104c757806334273637146104e357005b806310e776ed1161034857806310e776ed146103eb5780631455a1c81461043257806317fdcc8e1461045257806318160ddd1461047257005b806301ffc9a71461037457806306fdde03146103a9578063095ea7b3146103cb57005b3661037257005b005b34801561038057600080fd5b5061039461038f366004614381565b610afc565b60405190151581526020015b60405180910390f35b3480156103b557600080fd5b506103be610b77565b6040516103a091906143f6565b3480156103d757600080fd5b506103946103e636600461441e565b610c09565b3480156103f757600080fd5b5061042461040636600461444a565b6001600160a01b03166000908152604a602052604090206001015490565b6040519081526020016103a0565b34801561043e57600080fd5b5061042461044d3660046144ab565b610c34565b34801561045e57600080fd5b5061039461046d3660046144ec565b610cd0565b34801561047e57600080fd5b50604754610424565b34801561049357600080fd5b506103946104a2366004614505565b610d27565b3480156104b357600080fd5b506103946104c2366004614579565b610e95565b3480156104d357600080fd5b50604051601281526020016103a0565b3480156104ef57600080fd5b50610394610ec0565b34801561050457600080fd5b506103726105133660046145ba565b61103c565b34801561052457600080fd5b5061052d61133d565b60405161ffff90911681526020016103a0565b34801561054c57600080fd5b5061042461055b36600461441e565b611351565b34801561056c57600080fd5b5061042461057b36600461441e565b6113de565b34801561058c57600080fd5b5061039461059b36600461460e565b6113fe565b3480156105ac57600080fd5b506103946105bb36600461462b565b6115b3565b3480156105cc57600080fd5b506103946105db36600461460e565b6115d2565b3480156105ec57600080fd5b506104246105fb36600461444a565b61179b565b34801561060c57600080fd5b506104246117c5565b34801561062157600080fd5b50600454610100900460ff16610394565b34801561063e57600080fd5b5061037261064d36600461444a565b611852565b34801561065e57600080fd5b5061066761191c565b6040516001600160a01b0390911681526020016103a0565b34801561068b57600080fd5b50610372611926565b3480156106a057600080fd5b506103946106af36600461444a565b61198b565b3480156106c057600080fd5b5060515462010000900460ff16610394565b3480156106de57600080fd5b506104246106ed366004614664565b6119ab565b3480156106fe57600080fd5b5061042461070d36600461444a565b6001600160a01b03166000908152604a602052604090205490565b34801561073457600080fd5b5061042461074336600461444a565b6119ce565b34801561075457600080fd5b506103be6107633660046146e4565b6119ef565b34801561077457600080fd5b5061037261078336600461444a565b611b17565b34801561079457600080fd5b50600154610424565b3480156107a957600080fd5b506103726107b836600461444a565b611bcb565b3480156107c957600080fd5b50604854610424565b3480156107de57600080fd5b506107e7611c9b565b6040516103a0919061479b565b34801561080057600080fd5b5061037261080f36600461482c565b611ca7565b34801561082057600080fd5b50610424611d38565b34801561083557600080fd5b50610372611d43565b34801561084a57600080fd5b506049546001600160a01b0316610667565b34801561086857600080fd5b5061087c610877366004614861565b611d91565b604080519586526001600160801b03948516602087015292909316918401919091526001600160a01b0316606083015260ff16608082015260a0016103a0565b3480156108c857600080fd5b506103be611e16565b3480156108dd57600080fd5b506108f16108ec366004614886565b611e25565b6040516103a091906148e8565b34801561090a57600080fd5b506104246109193660046144ab565b611f8d565b34801561092a57600080fd5b5061042461093936600461441e565b612081565b34801561094a57600080fd5b50610394610959366004614920565b6121af565b34801561096a57600080fd5b50600254610424565b34801561097f57600080fd5b50604954600160a01b900460ff16610394565b34801561099e57600080fd5b506104246109ad36600461441e565b6123a4565b3480156109be57600080fd5b506104246109cd3660046144ec565b612422565b3480156109de57600080fd5b506103946109ed36600461441e565b61243e565b3480156109fe57600080fd5b506000546001600160a01b0316610667565b348015610a1c57600080fd5b5060045460ff16610394565b348015610a3457600080fd5b50600354610424565b348015610a4957600080fd5b50610394610a5836600461444a565b61248d565b348015610a6957600080fd5b50610424610a783660046149c9565b612607565b348015610a8957600080fd5b506107e7612613565b348015610a9e57600080fd5b5061042461261f565b348015610ab357600080fd5b50610667612629565b348015610ac857600080fd5b50610394610ad736600461482c565b612633565b348015610ae857600080fd5b50610424610af73660046149f7565b61270d565b60006001600160e01b03198216634a17459160e11b1480610b2d57506001600160e01b0319821663e3a31a9d60e01b145b80610b4857506001600160e01b03198216636b88d51560e11b145b80610b6257506001600160e01b03198216627b720760e91b145b80610b715750610b7182612736565b92915050565b606060458054610b8690614a31565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb290614a31565b8015610bff5780601f10610bd457610100808354040283529160200191610bff565b820191906000526020600020905b815481529060010190602001808311610be257829003601f168201915b5050505050905090565b6000610c2063095ea7b360e01b335b600180612786565b610c2b338484612884565b50600192915050565b6000610c4763028ab43960e31b33610c18565b6000805b83811015610c9257610c74858583818110610c6857610c68614a65565b9050602002013561298a565b610c7e9083614a91565b915080610c8a81614aa9565b915050610c4b565b5060405181815233907ff816ce3b3a52bd5c96a6ac9d4404d206f4e9d482ffa303afbf0dbeea2957f59a906020015b60405180910390a29392505050565b6000610ce5630bfee64760e11b828080612786565b604882905560405182815233907fb7902185ac0a79231c8be85f0ee0d94806d95d785d216824a078279f5d5bfbae9060200160405180910390a2506001919050565b6000610d3d63038d251d60e31b82600181612786565b6000805b83811015610e5457610d7c858583818110610d5e57610d5e614a65565b610d74926020606090920201908101915061444a565b604d90612a71565b15610da25760405162461bcd60e51b8152600401610d9990614ac2565b60405180910390fd5b848482818110610db457610db4614a65565b9050606002016040013582610dc99190614a91565b9150610e41858583818110610de057610de0614a65565b610df6926020606090920201908101915061444a565b868684818110610e0857610e08614a65565b9050606002016020016020810190610e20919061444a565b878785818110610e3257610e32614a65565b90506060020160400135612a93565b5080610e4c81614aa9565b915050610d41565b5060405181815233907f208fdf04989d654cc491d69be8eb64992c7b7407e34a6ac73e7c0361d0591eff906020015b60405180910390a25060019392505050565b6000610eab6323b872dd60e01b85600180612786565b610eb6848484612a93565b90505b9392505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610f0a5760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f3c612b3c565b6001600160a01b031614610f625760405162461bcd60e51b8152600401610d9990614b28565b33610f6b612b5d565b6001600160a01b031614610fb95760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c88139bdd08105d5d1a1bdc9a5e9959605a1b6044820152606401610d99565b60045460ff1615610fdc5760405162461bcd60e51b8152600401610d9990614b56565b60515461ffff1661ffff166001146110365760405162461bcd60e51b815260206004820152601960248201527f546f6b656e20416c7265616479204469737472696275746564000000000000006044820152606401610d99565b50600190565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110845760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110b6612b3c565b6001600160a01b0316146110dc5760405162461bcd60e51b8152600401610d9990614b28565b336110e5612b5d565b6001600160a01b0316146111335760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c88139bdd08105d5d1a1bdc9a5e9959605a1b6044820152606401610d99565b60515462010000900460ff16158080156111555750605154600161ffff909116105b806111705750303b158015611170575060515461ffff166001145b6111bc5760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a6564000000006044820152606401610d99565b6051805461ffff1916600117905580156111e2576051805462ff00001916620100001790555b60006111f16040840184614b8d565b604051602001611202929190614bd3565b60408051601f198184030181529190528051602090910120905061124c6112298480614b8d565b6112366020870187614b8d565b8561124760e08a0160c08b0161444a565b612b85565b6040805180820190915260068152654c4956454c5960d01b60208201526045906112769082614c29565b5060408051808201909152600381526213159360ea1b602082015260469061129e9082614c29565b5060808301356048556112b8610100840160e0850161444a565b604980546001600160a01b0319166001600160a01b03929092169190911790556112f76112ed6101208501610100860161444a565b8460a00135612b9b565b506113256113058480614b8d565b6113126020870187614b8d565b8561132060608a018a614b8d565b612c5b565b508015611339576051805462ff0000191690555b5050565b600061134c60515461ffff1690565b905090565b6000611364633950935160e01b33610c18565b336000836113728387612de1565b61137c9190614a91565b9050611389828683612884565b846001600160a01b0316826001600160a01b03167f865ea570c20f0fe0ae579ec567fa79d57a683390554593dc070ea0dcd5f466fb866040516113ce91815260200190565b60405180910390a3949350505050565b60006113f46340c10f1960e01b84600180612786565b610eb98383612b9b565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114485760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661147a612b3c565b6001600160a01b0316146114a05760405162461bcd60e51b8152600401610d9990614b28565b60006114af60515461ffff1690565b61ffff16116115005760405162461bcd60e51b815260206004820152601860248201527f436f6e7472616374204e6f7420496e697469616c697a656400000000000000006044820152606401610d99565b61151063225bf2f960e11b612e0c565b6115545760405162461bcd60e51b815260206004820152601560248201527429b2ba29b0b332a6b7b232902337b93134b23232b760591b6044820152606401610d99565b6004805460ff191683151517905560035430336001600160a01b03167fdd452a31d2e164a1ea436c084842c27d24ae2548a575a869f71b05a4ed16243f856040516115a3911515815260200190565b60405180910390a450805b919050565b60006115c86311a98d3560e21b828080612786565b610eb98383612f73565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361161c5760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661164e612b3c565b6001600160a01b0316146116745760405162461bcd60e51b8152600401610d9990614b28565b60045460ff16156116975760405162461bcd60e51b8152600401610d9990614b56565b6116a7631239af8760e21b612e0c565b6116f35760405162461bcd60e51b815260206004820152601a60248201527f5365745570677261646553746174757320466f7262696464656e0000000000006044820152606401610d99565b6116fb61304f565b6117475760405162461bcd60e51b815260206004820152601760248201527f5265616c6d205570677261646520466f7262696464656e0000000000000000006044820152606401610d99565b6004805461ff0019166101008415150217905560035430336001600160a01b03167fe9f97ad94c2ba252dcfc525e004f608ac5cb886955d8fc87d9e0ee070a698c56856040516115a3911515815260200190565b6001600160a01b0381166000908152604a602052604081208054600190910154610b719190614a91565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461183f5760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c20436f6e74726163742044656c656761746563616c6c0000006044820152606401610d99565b5060008051602061533483398151915290565b6118666357b001f960e01b60008080612786565b6001600160a01b03811661188c5760405162461bcd60e51b8152600401610d9990614ce8565b611897604d82612a71565b6118d75760405162461bcd60e51b81526020600482015260116024820152701058d8dbdd5b9d08139bdd08119bdd5b99607a1b6044820152606401610d99565b6118e2604d8261318b565b506040516001600160a01b0382169033907f3d072963433794eb417a69355df67d08bbd73d5076ef653d6863861161d60af390600090a350565b600061134c612b3c565b61193a63595c6a6760e01b60008080612786565b6049805460ff60a01b1916600160a01b1790556119543390565b6001600160a01b03167ff1005168aea1429fe9559d51ef6caa33e6426890864e2e6e41e5d54baa7be79f60405160405180910390a2565b60006001600160a01b03821615801590610b715750610b71604d83612a71565b60006119c56335c1ca4960e11b610c18602085018561444a565b610b71826131a0565b6001600160a01b0381166000908152604a6020526040812060020154610b71565b60606001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611a395760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a6b612b3c565b6001600160a01b031614611a915760405162461bcd60e51b8152600401610d9990614b28565b60045460ff1615611ab45760405162461bcd60e51b8152600401610d9990614b56565b600454610100900460ff16611b035760405162461bcd60e51b8152602060048201526015602482015274155c19dc9859194810d85b1b0814995a9958dd1959605a1b6044820152606401610d99565b611b0c84613296565b610eb684848461335d565b60045460ff1615611b3a5760405162461bcd60e51b8152600401610d9990614b56565b611b4a63756af45f60e01b612e0c565b611b965760405162461bcd60e51b815260206004820152601a60248201527f57697468647261772042616c616e636520466f7262696464656e0000000000006044820152606401610d99565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015611339573d6000803e3d6000fd5b611bdf6376a67a5160e01b60008080612786565b6001600160a01b038116611c055760405162461bcd60e51b8152600401610d9990614ce8565b611c10604d82612a71565b15611c565760405162461bcd60e51b81526020600482015260166024820152751058d8dbdd5b9d08105b1c9958591e4814185d5cd95960521b6044820152606401610d99565b611c61604d826135ae565b506040516001600160a01b0382169033907f3dd4f37ca5eaf6c357698a52c806820426d7c9a26adb0991c3bebb09cf23352a90600090a350565b606061134c604f6135c3565b611cbb637d35f35560e01b60008080612786565b60005b81811015611d3357611d20838383818110611cdb57611cdb614a65565b611cf1926020604090920201908101915061444a565b848484818110611d0357611d03614a65565b9050604002016020016020810190611d1b919061460e565b612f73565b5080611d2b81614aa9565b915050611cbe565b505050565b600061134c306135d0565b611d57638a2ddd0360e01b60008080612786565b6049805460ff60a01b1916905560405133907f3c1fb1fd79ee84e55a8fe78554c432ef36ea033a9245ce4b650bd824a12554d390600090a2565b6001600160a01b038181166000908152604c60209081526040808320868452909152812080546001820154600283015493948594859485948594919390926001600160801b0380841693600160801b90041691811690600160a01b900460ff166003811115611e0257611e02614d1f565b939c929b5090995097509095509350505050565b606060468054610b8690614a31565b6060611e3c639a7e187360e01b6000600181612786565b600080836001600160401b03811115611e5757611e57614676565b604051908082528060200260200182016040528015611e80578160200160208202803683370190505b50905060005b84811015611f4f57611eb9868683818110611ea357611ea3614a65565b610d74926020608090920201908101915061444a565b15611ed65760405162461bcd60e51b8152600401610d9990614ac2565b611ef6868683818110611eeb57611eeb614a65565b9050608002016131a0565b828281518110611f0857611f08614a65565b602002602001018181525050858582818110611f2657611f26614a65565b9050608002016060013583611f3b9190614a91565b925080611f4781614aa9565b915050611e86565b5060405182815233907f8e04d4df873aa900cbe3c4b51af80c003e2a72b8dfd36a6a2e54fdadbf4d11279060200160405180910390a2949350505050565b6000611fa3634daf9ab760e11b82600181612786565b6000805b8381101561204e57611fe7858583818110611fc457611fc4614a65565b9050602002810190611fd69190614d35565b610d7490604081019060200161444a565b156120045760405162461bcd60e51b8152600401610d9990614ac2565b61203085858381811061201957612019614a65565b905060200281019061202b9190614d35565b61360f565b61203a9083614a91565b91508061204681614aa9565b915050611fa7565b5060405181815233907f358ca32fb65dbe46a9aec67304b927cf0c3eaf896217f853f9a93fef2e92072390602001610cc1565b6000612097632770a7eb60e21b84600180612786565b6001600160a01b0383166120bd5760405162461bcd60e51b8152600401610d9990614ce8565b6001600160a01b0383166000908152604a6020526040902054828110156121265760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74204163636f756e742042616c616e6365000000006044820152606401610d99565b6001600160a01b0384166000908152604a60205260408120848303905560478054859290612155908490614d55565b90915550506047546040805185815260208101929092526001600160a01b0386169133917f5d624aa9c148153ab3446c1b154f660ee7701e549fe9b62dab7171b1c80e6fa2910160405180910390a3505060475492915050565b60006121c5639fd5a6cf60e01b88600180612786565b834211156122155760405162461bcd60e51b815260206004820152601760248201527f5065726d697420446561646c696e6520457870697265640000000000000000006044820152606401610d99565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886122448c6136fe565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006122e26122a1613729565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b905060006123268287878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061379292505050565b9050896001600160a01b0316816001600160a01b0316146123895760405162461bcd60e51b815260206004820152601860248201527f496c6c6567616c20454344415341205369676e617475726500000000000000006044820152606401610d99565b6123948a8a8a612884565b5060019998505050505050505050565b60006123b763a457c2d760e01b33610c18565b336123c38185856137b6565b836001600160a01b0316816001600160a01b03167f2d6189480d1bb13da7c0ed0063fe94af3c19eed814940db43733c4198d00a7428560405161240891815260200190565b60405180910390a361241a8185612de1565b949350505050565b600061243563a5bfa9a960e01b33610c18565b610b718261298a565b600061245163a9059cbb60e01b33610c18565b600060485411801561246d575061246b335b604f90612a71565b155b156124825761247d338484613827565b610c2b565b610c2b3384846138ae565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036124d75760405162461bcd60e51b8152600401610d9990614af9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612509612b3c565b6001600160a01b03161461252f5760405162461bcd60e51b8152600401610d9990614b28565b60045460ff16156125525760405162461bcd60e51b8152600401610d9990614b56565b61256263d9dc1f1960e01b612e0c565b6125ae5760405162461bcd60e51b815260206004820152601760248201527f5365744c6f63616c41646d696e20466f7262696464656e0000000000000000006044820152606401610d99565b6001600160a01b0382166125f65760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b6044820152606401610d99565b6125ff82613974565b506001919050565b6000610eb98383612de1565b606061134c604d6135c3565b600061134c613729565b600061134c612b5d565b6000612646631f54aa5560e31b33610c18565b6000805b838110156126da5784848281811061266457612664614a65565b90506040020160200135826126799190614a91565b91506126c83386868481811061269157612691614a65565b6126a7926020604090920201908101915061444a565b8787858181106126b9576126b9614a65565b905060400201602001356138ae565b806126d281614aa9565b91505061264a565b5060405181815233907f6f8b319642e67cd1f14d773b5289e2e9bc1afce60945a4705b94c4c2ce0d347e90602001610e83565b600061272a633f6e4bb160e21b610c18604085016020860161444a565b610b718261360f565b90565b60006001600160e01b0319821663748be05360e01b148061276757506001600160e01b031982166352d1902d60e01b145b80610b7157506301ffc9a760e01b6001600160e01b0319831614610b71565b60045460ff16156127a95760405162461bcd60e51b8152600401610d9990614b56565b836127b381612e0c565b6127ef5760405162461bcd60e51b815260206004820152600d60248201526c1058d8d95cdcc811195b9a5959609a1b6044820152606401610d99565b821561284f57604954600160a01b900460ff161561284f5760405162461bcd60e51b815260206004820152601960248201527f455243323050617573653a2043616c6c2052656a6563746564000000000000006044820152606401610d99565b811561287d57612860604d85612a71565b1561287d5760405162461bcd60e51b8152600401610d9990614ac2565b5050505050565b6001600160a01b0383166128d25760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964204f776e6572204164647265737360581b6044820152606401610d99565b6001600160a01b0382166129285760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964205370656e64657220416464726573730000000000000000006044820152606401610d99565b6001600160a01b038381166000818152604b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60405163f7d6b5af60e01b8152604a600482015260248101829052600090819073__$02a10a5b613955ebe0b1689ca5d6d93e29$__9063f7d6b5af90604401602060405180830381865af41580156129e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0a9190614d6c565b336000818152604c602090815260408083208884528252918290206002015491518481529394506001600160a01b039091169286917f2a0eb8ca138e1b0c7a85d2f8f43d0f3fe72c27b59c53365fdce897e3e6f3271891015b60405180910390a492915050565b6001600160a01b03811660009081526001830160205260408120541515610eb9565b604854600090339015801590612aaf5750612aad33612463565b155b15612ac457612abf858585613827565b612acf565b612acf8585856138ae565b612ada8582856137b6565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f5f7542858008eeb041631f30e6109ae94b83a58e9a58261dd2c42c508850f93986604051612b2991815260200190565b60405180910390a4506001949350505050565b60006000805160206153348339815191525b546001600160a01b0316919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103612b4e565b612b938686868686866139eb565b505050505050565b60006001600160a01b038316612bc35760405162461bcd60e51b8152600401610d9990614ce8565b8160476000828254612bd59190614a91565b90915550506001600160a01b0383166000908152604a602052604081208054849290612c02908490614a91565b90915550506047546040805184815260208101929092526001600160a01b0385169133917f2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee910160405180910390a35060475492915050565b6001546002546003546040516397ca328d60e01b8152600481019390935260248301919091526044820152600090819073__$02a10a5b613955ebe0b1689ca5d6d93e29$__906397ca328d90606401600060405180830381865af4158015612cc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cef9190810190614ef4565b6000546040516378efa4ed60e11b81529294509092506001600160a01b03169063f1df49da90612d29908790879087908790600401614fd9565b6020604051808303816000875af1158015612d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6c9190614d6c565b50612d75612b3c565b6001600160a01b031630336001600160a01b03167ff851a1e85477b818fc72ad517ea622cc316f10f67d61c9e740adc151a8b413948c8c8c8c8c612dbc60515461ffff1690565b604051612dce969594939291906150e5565b60405180910390a4505050505050505050565b6001600160a01b039182166000908152604b6020908152604080832093909416825291909152205490565b600080546001600160a01b03163003612ef85760006363d59cf360e11b612e32306135d0565b3385604051602401612e469392919061512a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506000612ec3612e87612b3c565b836040518060400160405280601d81526020017f44656c656761746563616c6c20686173416363657373204661696c6564000000815250613bf6565b90508060018251612ed49190614d55565b81518110612ee457612ee4614a65565b60209101015160f81c600114949350505050565b6000546001600160a01b031663c7ab39e6612f12306135d0565b33856040518463ffffffff1660e01b8152600401612f329392919061512a565b602060405180830381865afa158015612f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b719190615153565b60006001600160a01b038316336001600160a01b03167f85766eb39b0ac39ad7e8afbf36233d9adb1af81136bbea1f94cacd4b2e272c6984604051612fbc911515815260200190565b60405180910390a3604051634572e0c160e01b8152604a60048201526001600160a01b0384166024820152821515604482015273__$02a10a5b613955ebe0b1689ca5d6d93e29$__90634572e0c190606401602060405180830381865af415801561302b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb99190615153565b600080546001600160a01b0316300361311557600063e25d75f060e01b60035460405160240161308191815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905060006130e16130c2612b3c565b8360405180606001604052806025815260200161530f60259139613bf6565b905080600182516130f29190614d55565b8151811061310257613102614a65565b60209101015160f81c6001149392505050565b600054600354604051630e25d75f60e41b81526001600160a01b039092169163e25d75f09161314a9160040190815260200190565b602060405180830381865afa158015613167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190615153565b6000610eb9836001600160a01b038416613cbf565b60008073__$02a10a5b613955ebe0b1689ca5d6d93e29$__6310e1fc40604a856040518363ffffffff1660e01b81526004016131dd929190615170565b602060405180830381865af41580156131fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321e9190614d6c565b905061322d602084018461444a565b6001600160a01b031633827f8c6c9f95afe4c944c9f81d2965f0a9a0c021ce66ac4020dd8b25953a971f9148613269604088016020890161444a565b604080516001600160a01b0390921682528089013560208301526060808a01359183019190915201612a63565b61329e612b3c565b6001600160a01b0316816001600160a01b0316036132fe5760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204e657720496d706c656d656e746174696f6e0000000000006044820152606401610d99565b61330e637147855d60e01b612e0c565b61335a5760405162461bcd60e51b815260206004820152601960248201527f5570677261646520436f6e7465787420466f7262696464656e000000000000006044820152606401610d99565b50565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156133a75761339284613db2565b50604080516000815260208101909152610eb9565b836001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613401575060408051601f3d908101601f191682019092526133fe91810190614d6c565b60015b6134455760405162461bcd60e51b8152602060048201526015602482015274125b1b1959d85b0815555414c810dbdb9d1c9858dd605a1b6044820152606401610d99565b600080516020615334833981519152811461349a5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a590815555414c810dbdb9d1c9858dd605a1b6044820152606401610d99565b506040516301ffc9a760e01b815263748be05360e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa925050508015613502575060408051601f3d908101601f191682019092526134ff91810190615153565b60015b61354e5760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204950726f787920436f6e74726163740000000000000000006044820152606401610d99565b8061359b5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204950726f787920436f6e74726163740000000000000000006044820152606401610d99565b506135a7848484613e33565b9050610eb9565b6000610eb9836001600160a01b038416613e9d565b60606000610eb983613eec565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b600080600073__$02a10a5b613955ebe0b1689ca5d6d93e29$__63f1c3afef604a866040518363ffffffff1660e01b815260040161364e9291906151c8565b6040805180830381865af415801561366a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061368e919061524f565b90925090506136a3604085016020860161444a565b6001600160a01b03163385357f571ab3cb94eb114c4b41e4f4bbbe9625a6c546920db08ddea52bd3ec7cb5858685856136df60408b018b614b8d565b6040516136ef949392919061527d565b60405180910390a49392505050565b6001600160a01b0381166000908152604a602052604090206002018054600181018255905b50919050565b600154600254604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60008060006137a18585613f48565b915091506137ae81613fb6565b509392505050565b60006137c28484612de1565b9050818110156138145760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e74204163636f756e7420416c6c6f77616e636500006044820152606401610d99565b6138218484848403612884565b50505050565b600061383e6048548361416c90919063ffffffff16565b9050600061388c826040518060400160405280601c81526020017f496e73756666696369656e74205472616e7366657220416d6f756e7400000000815250856141849092919063ffffffff16565b6049549091506138a79086906001600160a01b0316846138ae565b61287d8585835b604051633de90db360e01b8152604a60048201526001600160a01b038085166024830152831660448201526064810182905273__$02a10a5b613955ebe0b1689ca5d6d93e29$__90633de90db39060840160006040518083038186803b15801561391757600080fd5b505af415801561392b573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161297d91815260200190565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f54ab0d18de7958786ba1ad85966d59baa2b395455f0530dcdcfd732e6af539e29181900360200190a350565b60515462010000900460ff16613a435760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e67000000000000006044820152606401610d99565b8585604051602001613a56929190614bd3565b60408051601f19818403018152908290528051602091820120600155613a80918691869101614bd3565b60408051601f19818403018152919052805160209091012060025560038290556001600160a01b038116613ac557600080546001600160a01b03191630179055613be2565b6040516301ffc9a760e01b81526301fe701d60e21b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa925050508015613b2c575060408051601f3d908101601f19168201909252613b2991810190615153565b60015b613b785760405162461bcd60e51b815260206004820152601c60248201527f496c6c6567616c20416363657373436f6e74726f6c4d616e61676572000000006044820152606401610d99565b80613bc55760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420416363657373436f6e74726f6c4d616e61676572000000006044820152606401610d99565b50600080546001600160a01b0319166001600160a01b0383161790555b6004805461ffff19169055612b9333613974565b60606001600160a01b0384163b613c4a5760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b6044820152606401610d99565b600080856001600160a01b031685604051613c6591906152a5565b600060405180830381855af49150503d8060008114613ca0576040519150601f19603f3d011682016040523d82523d6000602084013e613ca5565b606091505b5091509150613cb58282866141b0565b9695505050505050565b60008181526001830160205260408120548015613da8576000613ce3600183614d55565b8554909150600090613cf790600190614d55565b9050818114613d5c576000866000018281548110613d1757613d17614a65565b9060005260206000200154905080876000018481548110613d3a57613d3a614a65565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613d6d57613d6d6152b7565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b71565b6000915050610b71565b6001600160a01b0381163b613e045760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b6044820152606401610d99565b60008051602061533483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060613e3e846141e9565b600083511180613e4b5750815b15613e86576135a784846040518060400160405280601381526020017211195b1959d85d1958d85b1b0811985a5b1959606a1b815250613bf6565b505060408051600081526020810190915292915050565b6000818152600183016020526040812054613ee457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b71565b506000610b71565b606081600001805480602002602001604051908101604052809291908181526020018280548015613f3c57602002820191906000526020600020905b815481526020019060010190808311613f28575b50505050509050919050565b6000808251604103613f7e5760208301516040840151606085015160001a613f728782858561422d565b94509450505050613faf565b8251604003613fa75760208301516040840151613f9c86838361431a565b935093505050613faf565b506000905060025b9250929050565b6000816004811115613fca57613fca614d1f565b03613fd25750565b6001816004811115613fe657613fe6614d1f565b036140335760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610d99565b600281600481111561404757614047614d1f565b036140945760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610d99565b60038160048111156140a8576140a8614d1f565b036141005760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610d99565b600481600481111561411457614114614d1f565b0361335a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610d99565b6000610eb961271061417e8585614353565b9061435f565b600081848411156141a85760405162461bcd60e51b8152600401610d9991906143f6565b505050900390565b606083156141bf575081610eb9565b8251156141cf5782518084602001fd5b8160405162461bcd60e51b8152600401610d9991906143f6565b6141f281613db2565b6040516001600160a01b03821690309033907f354bd4b6eb65d64e6c79c53fa4f983a5e6bec4824ce4627c71be0b2722f4917e90600090a450565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156142645750600090506003614311565b8460ff16601b1415801561427c57508460ff16601c14155b1561428d5750600090506004614311565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156142e1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661430a57600060019250925050614311565b9150600090505b94509492505050565b6000806001600160ff1b0383168161433760ff86901c601b614a91565b90506143458782888561422d565b935093505050935093915050565b6000610eb982846152cd565b6000610eb982846152ec565b6001600160e01b03198116811461335a57600080fd5b60006020828403121561439357600080fd5b8135610eb98161436b565b60005b838110156143b95781810151838201526020016143a1565b838111156138215750506000910152565b600081518084526143e281602086016020860161439e565b601f01601f19169290920160200192915050565b602081526000610eb960208301846143ca565b6001600160a01b038116811461335a57600080fd5b6000806040838503121561443157600080fd5b823561443c81614409565b946020939093013593505050565b60006020828403121561445c57600080fd5b8135610eb981614409565b60008083601f84011261447957600080fd5b5081356001600160401b0381111561449057600080fd5b6020830191508360208260051b8501011115613faf57600080fd5b600080602083850312156144be57600080fd5b82356001600160401b038111156144d457600080fd5b6144e085828601614467565b90969095509350505050565b6000602082840312156144fe57600080fd5b5035919050565b6000806020838503121561451857600080fd5b82356001600160401b038082111561452f57600080fd5b818501915085601f83011261454357600080fd5b81358181111561455257600080fd5b86602060608302850101111561456757600080fd5b60209290920196919550909350505050565b60008060006060848603121561458e57600080fd5b833561459981614409565b925060208401356145a981614409565b929592945050506040919091013590565b6000602082840312156145cc57600080fd5b81356001600160401b038111156145e257600080fd5b82016101208185031215610eb957600080fd5b801515811461335a57600080fd5b80356115ae816145f5565b60006020828403121561462057600080fd5b8135610eb9816145f5565b6000806040838503121561463e57600080fd5b823561464981614409565b91506020830135614659816145f5565b809150509250929050565b60006080828403121561372357600080fd5b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156146ae576146ae614676565b60405290565b604051601f8201601f191681016001600160401b03811182821017156146dc576146dc614676565b604052919050565b6000806000606084860312156146f957600080fd5b833561470481614409565b92506020848101356001600160401b038082111561472157600080fd5b818701915087601f83011261473557600080fd5b81358181111561474757614747614676565b614759601f8201601f191685016146b4565b9150808252888482850101111561476f57600080fd5b808484018584013760008482840101525080945050505061479260408501614603565b90509250925092565b6020808252825182820181905260009190848201906040850190845b818110156147dc5783516001600160a01b0316835292840192918401916001016147b7565b50909695505050505050565b60008083601f8401126147fa57600080fd5b5081356001600160401b0381111561481157600080fd5b6020830191508360208260061b8501011115613faf57600080fd5b6000806020838503121561483f57600080fd5b82356001600160401b0381111561485557600080fd5b6144e0858286016147e8565b6000806040838503121561487457600080fd5b82359150602083013561465981614409565b6000806020838503121561489957600080fd5b82356001600160401b03808211156148b057600080fd5b818501915085601f8301126148c457600080fd5b8135818111156148d357600080fd5b8660208260071b850101111561456757600080fd5b6020808252825182820181905260009190848201906040850190845b818110156147dc57835183529284019291840191600101614904565b60008060008060008060a0878903121561493957600080fd5b863561494481614409565b9550602087013561495481614409565b9450604087013593506060870135925060808701356001600160401b038082111561497e57600080fd5b818901915089601f83011261499257600080fd5b8135818111156149a157600080fd5b8a60208285010111156149b357600080fd5b6020830194508093505050509295509295509295565b600080604083850312156149dc57600080fd5b82356149e781614409565b9150602083013561465981614409565b600060208284031215614a0957600080fd5b81356001600160401b03811115614a1f57600080fd5b820160608185031215610eb957600080fd5b600181811c90821680614a4557607f821691505b60208210810361372357634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614aa457614aa4614a7b565b500190565b600060018201614abb57614abb614a7b565b5060010190565b6020808252601d908201527f455243323050617573653a204163636f756e742053757370656e646564000000604082015260600190565b602080825260159082015274125b1b1959d85b0810dbdb9d1c9858dd0810d85b1b605a1b604082015260600190565b602080825260149082015273141c9bde1e4810d85b1b195908125b9d985b1a5960621b604082015260600190565b60208082526017908201527f536166654d6f64653a2043616c6c2052656a6563746564000000000000000000604082015260600190565b6000808335601e19843603018112614ba457600080fd5b8301803591506001600160401b03821115614bbe57600080fd5b602001915036819003821315613faf57600080fd5b8183823760009101908152919050565b601f821115611d3357600081815260208120601f850160051c81016020861015614c0a5750805b601f850160051c820191505b81811015612b9357828155600101614c16565b81516001600160401b03811115614c4257614c42614676565b614c5681614c508454614a31565b84614be3565b602080601f831160018114614c8b5760008415614c735750858301515b600019600386901b1c1916600185901b178555612b93565b600085815260208120601f198616915b82811015614cba57888601518255948401946001909101908401614c9b565b5085821015614cd85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526017908201527f496e76616c6964204163636f756e742041646472657373000000000000000000604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60008235605e19833603018112614d4b57600080fd5b9190910192915050565b600082821015614d6757614d67614a7b565b500390565b600060208284031215614d7e57600080fd5b5051919050565b80516115ae816145f5565b60006001600160401b03821115614da957614da9614676565b5060051b60200190565b600082601f830112614dc457600080fd5b81516020614dd9614dd483614d90565b6146b4565b82815260059290921b84018101918181019086841115614df857600080fd5b8286015b84811015614ee95780516001600160401b0380821115614e1c5760008081fd5b908801906060828b03601f1901811315614e365760008081fd5b614e3e61468c565b87840151815260408085015184811115614e585760008081fd5b85019350603f84018d13614e6c5760008081fd5b88840151614e7c614dd482614d90565b81815260059190911b85018201908a8101908f831115614e9c5760008081fd5b958301955b82871015614ec3578651614eb48161436b565b8252958b0195908b0190614ea1565b848c015250614ed59050858401614d85565b908201528652505050918301918301614dfc565b509695505050505050565b60008082840360c0811215614f0857600080fd5b60a0811215614f1657600080fd5b5060405160a081016001600160401b038282108183111715614f3a57614f3a614676565b8160405285518352602086015160208401526040860151604084015260608601519150614f6682614409565b81606084015260808601519150614f7c826145f5565b6080830182905260a086015192945080831115614f9857600080fd5b5050614fa685828601614db3565b9150509250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e081526000614fed60e083018688614fb0565b6020855181850152808601516040818187015280880151915060608281880152808901519250608060018060a01b03841681890152808a0151151560a089015287860360c089015285935088518087528587019450858160051b880101868b016000805b848110156150d0578a8403601f190189528251805185528a8101518b86018990528051898701819052908c01908490898801905b808310156150af5783516001600160e01b0319168252928e019260019290920191908e0190615085565b50928b01511515968b019690965250988a0198935091890191600101615051565b50919f9e505050505050505050505050505050565b6080815260006150f960808301888a614fb0565b828103602084015261510c818789614fb0565b91505083604083015261ffff83166060830152979650505050505050565b9283526001600160a01b039190911660208301526001600160e01b031916604082015260600190565b60006020828403121561516557600080fd5b8151610eb9816145f5565b82815260a08101823561518281614409565b6001600160a01b03908116602084810191909152840135906151a382614409565b8082166040850152505060408301356060830152606083013560808301529392505050565b8281526040602082015281356040820152600060208301356151e981614409565b6001600160a01b03166060830152604083013536849003601e1901811261520f57600080fd5b83016020810190356001600160401b0381111561522b57600080fd5b80360382131561523a57600080fd5b60606080850152613cb560a085018284614fb0565b6000806040838503121561526257600080fd5b825161526d81614409565b6020939093015192949293505050565b60018060a01b0385168152836020820152606060408201526000613cb5606083018486614fb0565b60008251614d4b81846020870161439e565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156152e7576152e7614a7b565b500290565b60008261530957634e487b7160e01b600052601260045260246000fd5b50049056fe44656c656761746563616c6c2069735265616c6d55706772616461626c65204661696c6564360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220d9c76295704d0a4d2d0e45f0c636a72e2c2816230388b66d617c81dacb60372464736f6c634300080f0033",
  "libraries": {
    "LTokenERC20": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20153,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20155,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_domainName",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 20157,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_domainVersion",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 20159,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_domainRealm",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 20161,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_isSafeMode",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 20163,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_isUpgradable",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 20168,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)64_storage"
      },
      {
        "astId": 22866,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_name",
        "offset": 0,
        "slot": "69",
        "type": "t_string_storage"
      },
      {
        "astId": 22868,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "70",
        "type": "t_string_storage"
      },
      {
        "astId": 22870,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 22872,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_taxRate",
        "offset": 0,
        "slot": "72",
        "type": "t_uint256"
      },
      {
        "astId": 22874,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_taxTreasury",
        "offset": 0,
        "slot": "73",
        "type": "t_address"
      },
      {
        "astId": 22876,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_isPaused",
        "offset": 20,
        "slot": "73",
        "type": "t_bool"
      },
      {
        "astId": 22879,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_data",
        "offset": 0,
        "slot": "74",
        "type": "t_struct(DataCollection)22859_storage"
      },
      {
        "astId": 20341,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "81",
        "type": "t_uint16"
      },
      {
        "astId": 20344,
        "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
        "label": "_initializing",
        "offset": 2,
        "slot": "81",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)64_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[64]",
        "numberOfBytes": "2048"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(LockState)22814": {
        "encoding": "inplace",
        "label": "enum LivelyStorage.LockState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(AssetLock)22834_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct LivelyStorage.AssetLock))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(AssetLock)22834_storage)"
      },
      "t_mapping(t_address,t_struct(AccountInfo)22822_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LivelyStorage.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)22822_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AssetLock)22834_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LivelyStorage.AssetLock)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetLock)22834_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AccountInfo)22822_storage": {
        "encoding": "inplace",
        "label": "struct LivelyStorage.AccountInfo",
        "members": [
          {
            "astId": 22816,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22818,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "lockBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22821,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "nonce",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Counter)10524_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AddressSet)17576_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.AddressSet",
        "members": [
          {
            "astId": 17575,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)17275_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AssetLock)22834_storage": {
        "encoding": "inplace",
        "label": "struct LivelyStorage.AssetLock",
        "members": [
          {
            "astId": 22824,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22826,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "lockedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 22828,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "claimedAt",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 22830,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "source",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 22833,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "status",
            "offset": 20,
            "slot": "2",
            "type": "t_enum(LockState)22814"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Counter)10524_storage": {
        "encoding": "inplace",
        "label": "struct LCounters.Counter",
        "members": [
          {
            "astId": 10523,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DataCollection)22859_storage": {
        "encoding": "inplace",
        "label": "struct LivelyStorage.DataCollection",
        "members": [
          {
            "astId": 22839,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "accounts",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(AccountInfo)22822_storage)"
          },
          {
            "astId": 22845,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "allowances",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 22852,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "locks",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(AssetLock)22834_storage))"
          },
          {
            "astId": 22855,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "pausedList",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)17576_storage"
          },
          {
            "astId": 22858,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "taxWhitelist",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(AddressSet)17576_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)17275_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Set",
        "members": [
          {
            "astId": 17270,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 17274,
            "contract": "src/contracts/token/lively/LivelyToken.sol:LivelyToken",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}