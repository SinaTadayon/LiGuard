{
  "language": "Solidity",
  "sources": {
    "src/contracts/acl/AccessControlManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./IAccessControl.sol\";\nimport \"./AccessControlStorage.sol\";\nimport \"./IGroupManagement.sol\";\nimport \"./IRealmManagement.sol\";\nimport \"./IRoleManagement.sol\";\nimport \"./IContextManagement.sol\";\nimport \"../lib/struct/EnumerableSet.sol\";\nimport \"../lib/struct/EnumerableMap.sol\";\nimport \"../lib/acl/ContextManagementLib.sol\";\nimport \"../proxy/Initializable.sol\";\nimport \"../proxy/BaseUUPSProxy.sol\";\n// import \"hardhat/console.sol\";\n\ncontract AccessControlManager is AccessControlStorage, BaseUUPSProxy, IContextManagement, IAccessControl, IGroupManagement, IRealmManagement,IRoleManagement {\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\n\n    constructor() {}\n\n    function initialize(string calldata domainName, string calldata domainVersion, string calldata domainRealm, address accessControlManager) public onlyAdmin initializer {\n        bytes32 realm = keccak256(abi.encodePacked(domainRealm));\n        __BASE_UUPS_init(domainName, domainVersion, realm, accessControlManager);\n        emit Initialized(_msgSender(), address(this), _implementation(), _domainName, _domainVersion, realm, getInitializedCount());\n    }\n\n    // TODO should be complete.\n    function contractRegisteration() external onlyProxy onlyAdmin returns (bool) {}\n    //     // RequestContext memory reqCtx = RequestContext({\n    //     //     realm: keccak256(abi.encodePacked(_domainRealm)),\n    //     //     smca: address(this)\n    //     // });\n\n    //     RequestContext memory rc;\n    //     rc.role = LIVELY_ADMIN_ROLE;\n    //     rc.isEnabled = true;\n    //     rc.funcSelectors = new bytes4[](10);\n    //     rc.funcSelectors[0] = this.setUpgradability.selector;\n    //     rc.funcSelectors[1] = this.setActivity.selector;\n    //     rc.funcSelectors[2] = this.setAdmin.selector;\n    //     rc.funcSelectors[3] = this.upgradeTo.selector;\n    //     rc.funcSelectors[4] = this.initialize.selector;\n    // }\n\n    // TODO hasPermission call this  function by SYSTEM_ADMIN\n    function registerContext(address newContract, bytes32 realm, RequestContext[] calldata rc) external returns (bytes32) {\n        bytes32 context = ContextManagementLib.registerContext(_dataMaps, newContract, realm, rc);\n        emit ContextRegistered(context, newContract, msg.sender, realm);\n        return context;\n    }\n\n    // TODO hasPermission call this  function by SYSTEM_ADMIN\n    function updateContext(bytes32 ctx, RequestContext[] calldata rc) external returns (address) {\n        // (address scma, bytes32 realm) = ContextManagementLib.updateContext(_dataMaps, ctx, rc);\n        // emit ContextUpdated(ctx, scma, msg.sender, realm);\n        // return scma;\n    }\n\n    function grantContextRole(bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bool) {\n        // bytes32 realm = ContextManagementLib.grantContextRole(_dataMaps, ctx, functionSelector, role);\n        // emit ContextRoleGranted(ctx, role, msg.sender, functionSelector, realm);\n        // return true;\n    }\n\n    function revokeContextRole(bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bool) {\n        // bytes32 realm = ContextManagementLib.revokeContextRole(_dataMaps, ctx, functionSelector, role);\n        // emit ContextRoleRevoked(ctx, role, msg.sender, functionSelector, realm);\n        // return true;\n    }\n\n    function enableContext(bytes32 ctx) external returns (bool) {\n        // return ContextManagementLib.enableContext(_dataMaps, ctx);\n    }\n\n    function disableContext(bytes32 ctx) external returns (bool) {\n        // return ContextManagementLib.disableContext(_dataMaps, ctx);\n    }\n\n    function enableUpgradeContext(bytes32 ctx) external returns (bool) {\n        // return ContextManagementLib.enableUpgradeContext(_dataMaps, ctx);\n    }\n\n    function hasContextRole(bytes32 ctx, bytes32 role, bytes4 functionSelector) external view returns (bool) {\n        // return ContextManagementLib.hasContextRole(_dataMaps, ctx, role, functionSelector);\n    }\n\n    function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory) {\n        // return ContextManagementLib.getContextInfo(_dataMaps, ctx);\n    }\n\n    function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory) {\n        // return ContextManagementLib.getContextFuncs(_dataMaps, ctx);\n    }\n\n\n\n    function hasAccess(bytes32 context, address account, bytes4 signature) external view returns (bool) {\n        return true;\n    }\n\n    function hasSystemAdminRole(address account) external view returns (bool) {}\n\n    function hasLivelyAdminRole(address account) external view returns (bool) {}\n\n    function hasLivelyGroup(bytes32 role) external view returns (bool) {}\n\n    function hasLivelyRealm(bytes32 context) external view returns (bool) {}\n\n    function isEnabled(bytes32 context) external view returns (bool) {}\n\n    function isUpgradeEnabled(bytes32 context) external view returns (bool) {}\n\n      function addGroup(string calldata name, bool isEnabled) external returns (bytes32) {} \n\n    function grantGroupRole(bytes32 group, bytes32 role) external returns (bool) {} \n\n    function revokeGroupRole(bytes32 group, bytes32 role) external returns (bool) {}\n\n    function enabledGroup(bytes32 group) external returns (bool) {}\n\n    function disabledGroup(bytes32 group) external returns (bool) {}\n\n    function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool) {}\n\n    function getGroup(bytes32 group) external view returns (string memory, bool) {}\n\n    function getGroupRoles(bytes32 group) external view returns (bytes32[] memory) {}\n\n     function addRealm(string calldata name, bool isEnabled) external returns (bytes32) {}\n\n    function grantRealmContext(bytes32 realm, bytes32 context) external returns (bool) {}\n\n    function revokeRealmContext(bytes32 realm, bytes32 context) external returns (bool) {}\n\n    function enabledRealm(bytes32 realm) external returns (bool) {}\n\n    function disabledRealm(bytes32 realm) external returns (bool) {}\n\n    function enableUpgradeRealm(bytes32 realm) external returns (bool) {}\n\n    function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool) {}\n\n    function getRealm(bytes32 realm) external view returns (string memory, bool) {}\n\n    function getRealmContextes(bytes32 realm) external view returns (bytes32[] memory) {}\n\n\n    function grantRoleAccount(bytes32 role, address account) external returns (bool) {}\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRoleAccount(bytes32 role, address account) external returns (bool) {}\n\n    /**\n     * \n     */\n    function addRole(string calldata name, string calldata group, bool isEnabled) external returns (bytes32) {}\n\n    /**\n     * \n     */\n    function setEnabledRole(bytes32 role) external returns (bool) {}\n\n    /**\n     * \n     */\n    function setDisabledRole(bytes32 role) external returns (bool) {}\n\n\n    function getRole(bytes32 role) external view returns (string memory, string memory, bool) {}\n\n    function getRoleUsers(bytes32 role) external view returns (address[] memory) {}\n\n    function getRoleContextes(bytes32 role) external view returns (bytes32[] memory) {}\n\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasAccountRole(bytes32 role, address account) external view returns (bool) {}\n\n}"
    },
    "src/contracts/acl/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IAccessControl {\n    /** \n     * @dev Function called by apps to check ACL on kernel or to check permission status\n     * @return boolean indicating whether the ACL allows the role or not\n     */\n    function hasAccess(bytes32 context, address account, bytes4 signature) external view returns (bool);\n\n    function hasSystemAdminRole(address account) external view returns (bool);\n\n    function hasLivelyAdminRole(address account) external view returns (bool);\n\n    function hasLivelyGroup(bytes32 role) external view returns (bool);\n\n    function hasLivelyRealm(bytes32 context) external view returns (bool);\n\n    function isEnabled(bytes32 context) external view returns (bool);\n\n    function isUpgradeEnabled(bytes32 context) external view returns (bool);\n\n}"
    },
    "src/contracts/acl/AccessControlStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../lib/struct/EnumerableSet.sol\";\nimport \"../lib/struct/EnumerableMap.sol\";\nimport \"../proxy/BaseUUPSStorage.sol\";\n\nabstract contract AccessControlStorage is BaseUUPSStorage {\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\n\n    enum Status {\n        NONE,\n        ENABLED,\n        DISABLED\n    }\n\n    struct Context {\n        bytes32 realm;\n        address smca;                               // smart contract address\n        bool isEnabled;\n        mapping(bytes32 => Status) resources;      // function selector + Role => Status\n        EnumerableSet.Bytes32Set funcSet; \n    }\n\n    struct Role {\n        string name;\n        bytes32 group;\n        bool isEnabled;\n        EnumerableMap.AddressToUintMap userMap;\n        // mapping(address => Status) userMap;        \n        // EnumerableSet.AddressSet userSet;\n        // EnumerableSet.Bytes32Set ctxSet;        // TODO check it if needed or no\n    }\n\n    struct Realm {\n        string name;\n        bool isEnabled;\n        bool isUpgradable;\n        EnumerableSet.Bytes32Set ctxSet;        \n    }\n\n    struct Group {\n        string name;\n        bool isEnabled;\n        EnumerableSet.Bytes32Set roles;       \n    }\n\n\n    struct DataMaps {\n        mapping(address => bytes32[]) userRoleMap;\n        mapping(bytes32 => Context)  ctxMap;\n        mapping(bytes32 => Role)  roleMap;\n        mapping(bytes32 => Realm) realmMap;\n        mapping(bytes32 => Group) groupMap;\n    }\n\n    bytes32 public constant LIVELY_GENERAL_REALM = keccak256(abi.encodePacked(\"LIVELY_GENERAL_REALM\"));\n    bytes32 public constant LIVELY_GENERAL_GROUP = keccak256(abi.encodePacked(\"LIVELY_GENERAL_GROUP\"));\n    bytes32 public constant LIVELY_ADMIN_ROLE = keccak256(abi.encodePacked(\"LIVELY_ADMIN_ROLE\"));\n    bytes32 public constant LIVELY_SYSTEM_ADMIN_ROLE = keccak256(abi.encodePacked(\"LIVELY_SYSTEM_ADMIN_ROLE\"));\n    bytes32 public constant LIVELY_PUBLIC_ROLE = keccak256(abi.encodePacked(\"LIVELY_ADMIN_ROLE\"));\n\n    DataMaps internal _dataMaps;\n    Realm internal _livelyGeneralRealm;\n    Group internal _livelyGeneralGroup;\n    Role  internal _livelyAdminRole;\n    Role  internal _liveltSystemAdminRole;\n}"
    },
    "src/contracts/acl/IGroupManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IGroupManagement {\n\n    event GroupRegistered(bytes32 indexed group, address indexed sender, string name, bool isEnabled);\n\n    event GroupRoleGranted(bytes32 indexed group, bytes32 indexed role, address indexed sender);\n\n    event GroupRoleRevoked(bytes32 indexed group, bytes32 indexed role, address indexed sender);\n\n    event GroupEnabled(bytes32 indexed group, address indexed sender);\n\n    event GroupDisabled(bytes32 indexed group, address indexed sender);\n\n    function addGroup(string calldata name, bool isEnabled) external returns (bytes32);\n\n    function grantGroupRole(bytes32 group, bytes32 role) external returns (bool);\n\n    function revokeGroupRole(bytes32 group, bytes32 role) external returns (bool);\n\n    function enabledGroup(bytes32 group) external returns (bool);\n\n    function disabledGroup(bytes32 group) external returns (bool);\n\n    function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool);\n\n    function getGroup(bytes32 group) external view returns (string calldata, bool);\n\n    function getGroupRoles(bytes32 group) external view returns (bytes32[] calldata);\n\n}"
    },
    "src/contracts/acl/IRealmManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IRealmManagement {\n\n    event RealmRegistered(bytes32 indexed realm, address indexed sender, string name, bool isEnabled);\n\n    event RealmContextGranted(bytes32 indexed realm, bytes32 indexed context, address indexed sender);\n\n    event RealmRoleRevoked(bytes32 indexed realm, bytes32 indexed context, address indexed sender);\n\n    event RealmEnabled(bytes32 indexed realm, address indexed sender);\n\n    event RealmDisabled(bytes32 indexed realm, address indexed sender);\n\n    event RealmUpgradeEnabled(bytes32 indexed realm, address indexed sender);\n\n    \n    function addRealm(string calldata name, bool isEnabled) external returns (bytes32);\n\n    function grantRealmContext(bytes32 realm, bytes32 context) external returns (bool);\n\n    function revokeRealmContext(bytes32 realm, bytes32 context) external returns (bool);\n\n    function enabledRealm(bytes32 realm) external returns (bool);\n\n    function disabledRealm(bytes32 realm) external returns (bool);\n\n    function enableUpgradeRealm(bytes32 realm) external returns (bool);\n\n    function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool);\n\n    function getRealm(bytes32 realm) external view returns (string calldata, bool);\n\n    function getRealmContextes(bytes32 realm) external view returns (bytes32[] calldata);\n\n}"
    },
    "src/contracts/acl/IRoleManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IRoleManagement {\n    \n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call\n     */\n    event RoleAccountGranted(bytes32 indexed role, address indexed account, address indexed sender, bytes32 group);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleAccountRevoked(bytes32 indexed role, address indexed account, address indexed sender, bytes32 group);\n\n    /**\n     * \n     */\n    event RoleRegistered(bytes32 indexed role, string indexed name, address indexed sender, bytes32 group, bool isEnabled);\n\n    /**\n     * \n     */\n    event RoleEnabled(bytes32 indexed role, address indexed sender, bytes32 indexed group);\n\n    /**\n     * \n     */\n    event RoleDisabled(bytes32 indexed role, address indexed sender, bytes32 indexed group);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRoleAccount(bytes32 role, address account) external returns (bool);\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRoleAccount(bytes32 role, address account) external returns (bool);\n\n    /**\n     * \n     */\n    function addRole(string calldata name, string calldata group, bool isEnabled) external returns (bytes32);\n\n    /**\n     * \n     */\n    function setEnabledRole(bytes32 role) external returns (bool);\n\n    /**\n     * \n     */\n    function setDisabledRole(bytes32 role) external returns (bool);\n\n\n    function getRole(bytes32 role) external view returns (string memory, string memory, bool); \n\n    function getRoleUsers(bytes32 role) external view returns (address[] memory); \n\n    function getRoleContextes(bytes32 role) external view returns (bytes32[] memory);\n\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasAccountRole(bytes32 role, address account) external view returns (bool);\n\n\n}"
    },
    "src/contracts/acl/IContextManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IContextManagement {\n\n    struct RequestContext {\n        bytes32 role;\n        bytes4[] funcSelectors;\n        bool isEnabled;\n    }\n\n    struct ResponseContext {\n        string name;\n        string version; \n        address smca;\n        bytes32 realm; \n        bool isEnabled; \n        bool isUpgradable;\n    }\n\n    event ContextRegistered(bytes32 indexed context, address indexed scma, address indexed sender, bytes32 realm);\n\n    event ContextUpdated(bytes32 indexed context, address indexed scma, address indexed sender, bytes32 realm);\n\n    event ContextRoleGranted(bytes32 indexed context, bytes32 indexed role, \n                            address indexed sender, bytes4 functionSelector, bytes32 realm);\n\n    event ContextRoleRevoked(bytes32 indexed context, bytes32 indexed role, \n                            address indexed sender, bytes4 functionSelector, bytes32 realm);\n\n    function registerContext(address newContract, bytes32 realm, RequestContext[] calldata rc) external returns (bytes32);\n\n    function updateContext(bytes32 ctx, RequestContext[] calldata rc) external returns (address);\n\n    function grantContextRole(bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bool);\n\n    function revokeContextRole(bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bool);\n\n    function enableContext(bytes32 ctx) external returns (bool);\n\n    function disableContext(bytes32 ctx) external returns (bool);\n\n    function enableUpgradeContext(bytes32 ctx) external returns (bool);\n\n    function hasContextRole(bytes32 ctx, bytes32 role, bytes4 functionSelector) external view returns (bool);\n\n    function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\n\n    function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\n}"
    },
    "src/contracts/lib/struct/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "src/contracts/lib/struct/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) since v4.6.0\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function get(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), errorMessage);\n        return value;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToAddressMap storage map,\n        uint256 key,\n        address value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        AddressToUintMap storage map,\n        address key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        AddressToUintMap storage map,\n        address key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\n    }\n}\n"
    },
    "src/contracts/lib/acl/ContextManagementLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../../acl/IContextManagement.sol\";\nimport \"../../acl/AccessControlStorage.sol\";\nimport \"../struct/EnumerableSet.sol\";\nimport \"../../proxy/IProxy.sol\";\n\nlibrary ContextManagementLib {\n\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // TODO check convert bytes4 to bytes32 \n    function registerContext(AccessControlStorage.DataMaps storage data, \n                             address newContract, bytes32 realm,\n                             IContextManagement.RequestContext[] calldata rc) external returns (bytes32) {\n        // require(msg.sender == rc.smca, \"Illegal Contract Address\");\n        require(bytes(data.realmMap[realm].name).length != 0, \"Realm Not Found\");\n\n        bytes32 ctx = ContextUtils.generateCtx(newContract);\n        require(data.ctxMap[ctx].smca == address(0), \"Context Already Registered\");\n        AccessControlStorage.Context storage newContext = data.ctxMap[ctx];\n        newContext.realm = realm;\n        newContext.smca = newContract;\n        \n        for (uint256 i = 0; i < rc.length; i++) {\n            require(bytes(data.roleMap[rc[i].role].name).length != 0, \"Role Not Found\");\n            for (uint256 j = 0; j < rc[i].funcSelectors.length; j++) {\n                bytes32 selectorKey = keccak256(abi.encodePacked(rc[i].funcSelectors[j], rc[i].role));\n                newContext.resources[selectorKey] = rc[i].isEnabled ? AccessControlStorage.Status.ENABLED : AccessControlStorage.Status.DISABLED;\n                newContext.funcSet.add(rc[i].funcSelectors[j]); \n            }\n        }\n\n        return ctx;\n    }\n\n    // function updateContext(AccessControlStorage.DataMaps storage data,\n    //         bytes32 ctx, IContextManagement.RequestContext[] calldata rc) external returns (address, bytes32) {\n        \n    //     address smca = data.ctxMap[ctx].smca;\n    //     require(smca != address(0), \"Context Not Found\");\n    //     require(smca != msg.sender, \"Context Update Forbidden\");\n        \n    //     for (uint256 i = 0; i < rc.length; i++) {\n    //         require(bytes(data.roleMap[rc[i].role].name).length != 0, \"Role Not Found\");\n    //         for (uint256 j = 0; j < rc[i].funcSelectors.length; j++) {\n    //             bytes32 selectorKey = keccak256(abi.encodePacked(rc[i].funcSelectors[j], rc[i].role));\n    //             data.ctxMap[ctx].resources[selectorKey] = rc[i].isEnabled ? AccessControlStorage.Status.ENABLED : AccessControlStorage.Status.DISABLED;                \n    //             if (!data.ctxMap[ctx].funcSet.contains(rc[i].funcSelectors[j])) {\n    //                 data.ctxMap[ctx].funcSet.add(rc[i].funcSelectors[j]);\n    //             }\n    //         }\n    //     }\n    //     return (smca, data.ctxMap[ctx].realm);\n    // }\n\n    // function grantContextRole(AccessControlStorage.DataMaps storage data, \n    //         bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bytes32) {\n\n    //     require(data.ctxMap[ctx].smca != address(0), \"Context Not Found\");\n    //     require(bytes(data.roleMap[role].name).length != 0, \"Role Not Found\");\n    //     require(data.ctxMap[ctx].funcSet.contains(functionSelector), \"FunctionSelector Not Found\");\n    //     bytes32 selectorKey = keccak256(abi.encodePacked(functionSelector,role));\n    //     data.ctxMap[ctx].resources[selectorKey] = AccessControlStorage.Status.ENABLED;\n    //     return data.ctxMap[ctx].realm;  \n    // }\n\n    // function revokeContextRole(AccessControlStorage.DataMaps storage data, \n    //         bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bytes32) {\n\n    //     require(data.ctxMap[ctx].smca != address(0), \"Context Not Found\");\n    //     require(bytes(data.roleMap[role].name).length != 0, \"Role Not Found\");\n    //     require(data.ctxMap[ctx].funcSet.contains(functionSelector), \"FunctionSelector Not Found\");\n    //     bytes32 selectorKey = keccak256(abi.encodePacked(functionSelector,role));\n    //     data.ctxMap[ctx].resources[selectorKey] = AccessControlStorage.Status.DISABLED;\n    //     return data.ctxMap[ctx].realm;  \n    // }\n\n    // function enableContext(AccessControlStorage.DataMaps storage data, bytes32 ctx) external returns (bool) {\n    //     require(data.ctxMap[ctx].smca != address(0), \"Context Not Found\");\n    //     return IProxy(data.ctxMap[ctx].smca).setActivity(true); \n    // }\n\n    // function disableContext(AccessControlStorage.DataMaps storage data, bytes32 ctx) external returns (bool) {\n    //     require(data.ctxMap[ctx].smca != address(0), \"Context Not Found\");\n    //     return IProxy(data.ctxMap[ctx].smca).setActivity(false); \n    // }\n\n    // function enableUpgradeContext(AccessControlStorage.DataMaps storage data, bytes32 ctx) external returns (bool) {\n    //     require(data.ctxMap[ctx].smca != address(0), \"Context Not Found\");\n    //     return IProxy(data.ctxMap[ctx].smca).setUpgradability(true);\n    // }\n\n    // function hasContextRole(AccessControlStorage.DataMaps storage data, \n    //         bytes32 ctx, bytes32 role, bytes4 functionSelector) external view returns (bool) {\n    //     if(data.ctxMap[ctx].smca != address(0)) {\n    //         return false;\n    //     }\n\n    //     if(bytes(data.roleMap[role].name).length != 0) {\n    //         return false;\n    //     }\n\n    //     bytes32 selectorKey = keccak256(abi.encodePacked(functionSelector,role));\n    //     return data.ctxMap[ctx].resources[selectorKey] == AccessControlStorage.Status.ENABLED;\n    // }\n\n    // function getContextInfo(AccessControlStorage.DataMaps storage data, bytes32 ctx) external view returns (IContextManagement.ResponseContext memory) {\n    //     require(data.ctxMap[ctx].smca != address(0), \"Context Not Found\");\n    //     string memory name = IProxy(data.ctxMap[ctx].smca).contractName();\n    //     string memory version = IProxy(data.ctxMap[ctx].smca).contractVersion();\n    //     bool isEnabled = IProxy(data.ctxMap[ctx].smca).isActivated();\n    //     bool isUpgradable = IProxy(data.ctxMap[ctx].smca).isUpgradable();\n\n    //     return IContextManagement.ResponseContext({\n    //         name: name,\n    //         version: version,\n    //         smca: data.ctxMap[ctx].smca,\n    //         realm: data.ctxMap[ctx].realm,\n    //         isEnabled: isEnabled,\n    //         isUpgradable: isUpgradable\n    //     });\n    // }\n\n\n    // // TODO test convert bytes32 to bytes4\n    // function getContextFuncs(AccessControlStorage.DataMaps storage data, bytes32 ctx) external view returns (bytes4[] memory) {\n    //     require(data.ctxMap[ctx].smca != address(0), \"Context Not Found\");\n    //     bytes4[] memory funcs = new bytes4[](data.ctxMap[ctx].funcSet.length());\n    //     for (uint32 i = 0; i < data.ctxMap[ctx].funcSet.length(); i++) {\n    //         funcs[i] = bytes4(data.ctxMap[ctx].funcSet.at(i));\n    //     }\n    //     return funcs;\n    // }\n\n}"
    },
    "src/contracts/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\nimport \"../lib/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint16 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n\n    function getInitializedCount() public view returns (uint16) {\n        return _initialized;\n    }\n\n    function isInitializing() public view returns (bool) {\n        return _initializing;\n    } \n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint16 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Contract Not Initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint16).max);\n    }\n\n    function _setInitializedVersion(uint16 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !Address.isContract(address(this)),\n                \"Contract Already Initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Illegal Initialize Version\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "src/contracts/proxy/BaseUUPSProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\nimport \"./IERC1822.sol\";\nimport \"./IProxy.sol\";\nimport \"./BaseProxy.sol\";\nimport \"./BaseUUPSStorage.sol\";\nimport \"./Initializable.sol\";\nimport \"../lib/Address.sol\";\nimport \"../lib/StorageSlot.sol\";\nimport \"../acl/IAccessControl.sol\";\nimport \"../acl/IContextManagement.sol\";\nimport \"../utils/Message.sol\";\nimport \"../utils/ERC165.sol\";\nimport \"../lib/ContextUtils.sol\";\n// import \"hardhat/console.sol\";\n\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n\n * An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\n\nabstract contract BaseUUPSProxy is BaseUUPSStorage, BaseProxy, Initializable, IProxy, IERC1822Proxiable, Message, ERC165 {\n \n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Illegal Contract Call\");\n        require(_implementation() == __self, \"Proxy Called Invalid\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyAdmin() {\n        require(_getAdmin() == _msgSender(), \"Caller Not Authorized\");\n        _;\n    }\n\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"Illeagal Contract Delegatecall\");\n        _;\n    }\n\n    function _hasPermission(bytes4 selector) internal returns (bool) {\n        if (address(this) == _accessControl) {\n            bytes memory data = abi.encodeWithSignature(\"hasAccess(bytes32,address,bytes4)\", \n                    ContextUtils.generateCtx(address(this)), msg.sender, selector);\n            bytes memory returndata = _functionDelegateCall(_implementation(), data, \"hasAccess Failed\");\n            return uint8(returndata[returndata.length - 1]) == 1;\n        } else {\n            return IAccessControl(_accessControl).hasAccess(ContextUtils.generateCtx(address(this)), msg.sender, selector);\n        }\n    }\n\n\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n\n    constructor() {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        // set contract Admin (implementation contract)\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = _msgSender();\n\n        // set _isUpgradable and _isEnabled of contact  \n        _isUpgradable = false;\n        _isEnabled = false;\n    }\n\n\n    function __BASE_UUPS_init(string calldata domainName, string calldata domainVersion, bytes32 domainRealm, address accessControl) internal {\n        __BASE_UUPS_init_unchained(domainName, domainVersion, domainRealm, accessControl);\n    }\n\n    function __BASE_UUPS_init_unchained(string calldata domainName, string calldata domainVersion, bytes32 domainRealm, address accessControl) internal onlyProxy onlyInitializing {\n        _domainName = domainName;\n        _domainVersion = domainVersion;\n        _domainRealm = domainRealm;\n        // TODO check acl address\n        if (accessControl == address(0)) {\n            _accessControl = address(this);\n        } else {\n            _accessControl = accessControl;\n        }\n        _isUpgradable = false;\n        _isEnabled = true;\n        _setAdmin(_accessControl);        \n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IProxy).interfaceId || \n            interfaceId == type(IERC1822Proxiable).interfaceId || \n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal override view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(_isEnabled, \"Context Not Activated\");\n        require(Address.isContract(newImplementation), \"Illegal Contract Address\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        require(_isUpgradable, \"Context Upgradable Disabled\");\n        _setImplementation(newImplementation);              \n        emit Upgraded(msg.sender, address(this), newImplementation);  \n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal returns (bytes memory) {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            return _functionDelegateCall(newImplementation, data, \"Delegatecall Failed\");\n        }\n        return new bytes(0);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal returns (bytes memory) {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            require(_isUpgradable, \"Context Not Upgradable\");\n            _setImplementation(newImplementation);\n            return new bytes(0);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"Contract UUPS Invalid\");\n            } catch {\n                revert(\"Contract Not UUPS\");\n            }\n            return _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     */\n    function _functionDelegateCall(address target, bytes memory data, string memory message) private returns (bytes memory) {\n        require(_isEnabled, \"Context Not Activated\");\n        require(Address.isContract(target), \"Illegal Contract Address\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        // console.log(\"_functionDelegateCall, msg: %s\", message);\n        // console.logBool(success);\n        // console.logBytes(returndata);\n        return Address.verifyCallResult(success, returndata, message);\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    function upgradeTo(address newImplementation, bytes memory data, bool forceCall) external virtual onlyProxy returns (bytes memory){\n        _authorizeUpgrade(newImplementation);\n        return _upgradeToAndCallUUPS(newImplementation, data, forceCall);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual {\n        require(_hasPermission(this.upgradeTo.selector), \"Context Upgradability Forbidden\");\n        \n    }\n\n\n    function getAdmin() external view returns (address) {\n        return _getAdmin();\n    }\n\n    function setAdmin(address newAdmin) external returns (bool) {\n        _setAdmin(newAdmin);\n        return true;\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) internal onlyProxy {\n        require(_isEnabled, \"Context Not Activated\");\n        require(_hasPermission(this.setAdmin.selector), \"Change ProxyAdmin Forbidden\");\n        require(newAdmin != address(0), \"Address Invalid\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n        emit AdminChanged(_msgSender(), address(this), newAdmin);\n    }\n \n    function setActivity(bool value) external onlyProxy returns (bool) {\n        require(_hasPermission(this.setActivity.selector), \"Changed Activity Forbidden\");\n        _isEnabled = value;\n        emit ActivityChanged(_msgSender(), address(this), _domainRealm, value);\n        return value;\n    }\n\n    function setUpgradability(bool value) external onlyProxy returns (bool) {\n        require(_hasPermission(this.setUpgradability.selector), \"Change Upgradability Forbidden\");\n        _isUpgradable = value;\n        emit UpgradabilityChanged(_msgSender(), address(this), _domainRealm, value);\n        return value;\n    }\n\n    function contractName() external view returns (string memory) {\n        return _domainName;\n    }\n\n    function contractVersion() external view returns (string memory) {\n        return _domainVersion;\n    }\n\n    function contractRealm() external view returns (bytes32) {\n        return _domainRealm;\n    }\n\n    function contractContext() external view returns (bytes32) {\n        return ContextUtils.generateCtx(address(this));\n    }\n\n    function getAccessControl() external view returns (address) {\n        return _accessControl;\n    }\n\n    function subjectAddress() external view returns (address) {\n        return _implementation();\n    }\n\n    function isActivated() external view returns (bool) {\n        return _isEnabled;\n    }\n\n    function isUpgradable() external view returns (bool) {\n        return _isUpgradable;\n    }\n}\n"
    },
    "src/contracts/proxy/BaseUUPSStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\nimport \"./IERC1822.sol\";\nimport \"./IProxy.sol\";\nimport \"./BaseProxy.sol\";\nimport \"./Initializable.sol\";\nimport \"../lib/Address.sol\";\nimport \"../lib/StorageSlot.sol\";\nimport \"../utils/Message.sol\";\nimport \"../lib/ContextUtils.sol\";\n\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\n\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n */\n\nabstract contract BaseUUPSStorage {\n \n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address internal immutable __self = address(this);\n    address internal _accessControl;\n    string internal _domainName;\n    string internal _domainVersion;\n    bytes32 internal _domainRealm;\n    bool internal _isEnabled;\n    bool internal _isUpgradable;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */     \n    uint256[64] private __gap;\n}\n"
    },
    "src/contracts/proxy/IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "src/contracts/proxy/IProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\nimport \"./IBaseProxy.sol\";\n\ninterface IProxy is IBaseProxy {\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address indexed sender, address indexed proxy, address newAdmin);\n                    \n    event ActivityChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool value);\n\n    event UpgradabilityChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool value);\n\n    // /**\n    //  * @dev Triggered when the contract has been initialized or reinitialized.\n    //  */\n    event Initialized(address indexed sender, address indexed proxy, address indexed subject, \n                      string name, string version, bytes32 realm, uint16 initializedCount);\n\n\n    function upgradeTo(address newImplementation, bytes memory data, bool forceCall) external returns (bytes memory);\n\n    function setActivity(bool value) external returns (bool);\n\n    function setUpgradability(bool value) external returns (bool);\n\n    function setAdmin(address newAdmin) external returns (bool);\n\n    function contractRegisteration() external returns (bool);\n\n    function contractName() external view returns (string memory);\n\n    function contractVersion() external view returns (string memory);\n\n    function contractRealm() external view returns (bytes32);\n\n    function contractContext() external view returns (bytes32);\n\n    function getAccessControl() external view returns (address);\n\n    function subjectAddress() external view returns (address);\n\n    function isActivated() external view returns (bool);\n\n    function isUpgradable() external view returns (bool);\n\n    function getAdmin() external view returns (address);\n}"
    },
    "src/contracts/proxy/BaseProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract BaseProxy {\n    \n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "src/contracts/lib/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/contracts/lib/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity >= 0.8.15;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "src/contracts/utils/Message.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Message {\n\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[64] private __gap;\n}\n"
    },
    "src/contracts/lib/ContextUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\n/**\n * @dev Collection of functions related to the context\n */\nlibrary ContextUtils {\n\n    function generateCtx(address contractAddress) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(contractAddress));\n    }\n}"
    },
    "src/contracts/proxy/IBaseProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\ninterface IBaseProxy {\n    event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\n\n}"
    },
    "src/contracts/utils/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.15;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "src/contracts/utils/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.15;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >= 0.8.15;\n\nimport \"./IBaseProxy.sol\";\nimport \"./BaseProxy.sol\";\nimport \"./BaseUUPSStorage.sol\";\nimport \"../lib/Address.sol\";\nimport \"../lib/StorageSlot.sol\";\n// import \"hardhat/console.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\n\ncontract Proxy is BaseUUPSStorage, BaseProxy, IBaseProxy {\n\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address logic, bytes memory data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = msg.sender;\n        _upgradeToAndCallUUPS(logic, data, false);\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view override returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {  \n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) private {\n        _setImplementation(newImplementation);\n        emit Upgraded(msg.sender, address(this), _implementation());\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall \n    ) private returns (bytes memory) {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n           return _functionDelegateCall(newImplementation, data);\n        }\n        return new bytes(0);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) private returns (bytes memory) {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n            return new bytes(0);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"UUPS Contract Invalid\");\n            } catch {\n                revert(\"Contract Not UUPS\");\n            }\n            \n            return _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(Address.isContract(target), \"Illegal Contract Address\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return Address.verifyCallResult(success, returndata, \"Delegatecall Failed\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}