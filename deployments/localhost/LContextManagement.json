{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "name": "CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIB_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIB_VERSION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PREDICT_CTX_MESSAGE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x861ab7ea79167110ebce8c15d34e5561ef73f0b1380d81521feabe8cd3639c7a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3422569",
    "logsBloom": "0x
    "blockHash": "0x59176cbf499a86fd39270e20ff17d5408f0bd93290bac63cffd1e955b7fba164",
    "transactionHash": "0x861ab7ea79167110ebce8c15d34e5561ef73f0b1380d81521feabe8cd3639c7a",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3422569",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ec35144bcae382bade356ad21c3cf133",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIB_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIB_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREDICT_CTX_MESSAGE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/lib/acl/LContextManagement.sol\":\"LContextManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../lib/struct/LEnumerableMap.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\n\\nabstract contract AccessControlStorage is BaseUUPSStorage {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableMap for LEnumerableMap.Bytes32ToBytes32Map;\\n  using LEnumerableMap for LEnumerableMap.AddressToUintMap;\\n\\n  enum Status {\\n    NONE,\\n    ENABLED,\\n    DISABLED\\n  }\\n\\n  struct RoleStat {\\n    bytes32 role;\\n    Status status;\\n  }\\n\\n  struct Context {\\n    bytes32 realm;\\n    address contractId;\\n    bool isEnabled;\\n    mapping(bytes4 => RoleStat) resources; // function selector => RoleStat\\n    LEnumerableSet.Bytes32Set funcSet;\\n  }\\n\\n  struct Role {\\n    bytes32 group;\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.AddressSet accountSet;\\n  }\\n\\n  struct Realm {\\n    string name;\\n    bool isEnabled;\\n    bool isUpgradable;\\n    LEnumerableSet.Bytes32Set ctxSet;\\n  }\\n\\n  struct Group {\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.Bytes32Set roleSet;\\n  }\\n\\n  struct DataCollections {\\n    mapping(address => mapping(bytes32 => Status)) accountMap;\\n    mapping(bytes32 => Context) ctxMap;\\n    mapping(bytes32 => Role) roleMap;\\n    mapping(bytes32 => Realm) realmMap;\\n    mapping(bytes32 => Group) groupMap;\\n  }\\n\\n  DataCollections internal _data;\\n}\\n\",\"keccak256\":\"0x60509d8305172425766c720799c949fa5571e2db7935d6726d8b6408b2009aeb\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool status;\\n  }\\n\\n   struct RequestPredictContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    bytes32 salt;\\n    address subject;\\n    address deployer;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, bytes32 realm);\\n\\n  event PredictContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, address deployer, address subject, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed contractId, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function registerPredictContext(\\n    bytes memory signature,\\n    RequestPredictContext calldata rpc,\\n    RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0x4811f66509db07ea5b29faf433bf0209e8fd13a822ec371a0da2178289fce71b\",\"license\":\"MIT\"},\"src/contracts/acl/IGroupManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGroupManagement {\\n  event GroupRegistered(bytes32 indexed group, address indexed sender, string name, bool status);\\n\\n  event GroupStatusChanged(bytes32 indexed group, address indexed sender, bool status);\\n\\n  function registerGroup(string calldata name, bool status) external returns (bytes32);\\n\\n  function setGroupStatus(bytes32 group, bool status) external returns (bool);\\n\\n  function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool);\\n\\n  function getGroupInfo(bytes32 group) external view returns (string memory, bool);\\n\\n  function getGroupRoles(bytes32 group) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xef419de7dcf0029fe7a05850895dc4ce569d743e695d7eb2d9d345d185b267f8\",\"license\":\"MIT\"},\"src/contracts/acl/IRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRealmManagement {\\n  event RealmRegistered(bytes32 indexed realm, address indexed sender, string name, bool status, bool isUpgradable);\\n\\n  event RealmStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  event RealmUpgradeStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  function registerRealm(\\n    string calldata name,\\n    bool status,\\n    bool isUpgradable\\n  ) external returns (bytes32);\\n\\n  function setRealmStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function setRealmUpgradeStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool);\\n\\n  function getRealmInfo(bytes32 realm)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bool,\\n      bool\\n    );\\n\\n  function getRealmContexts(bytes32 realm) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x7058ef3754e6c4b92a61e2e908df2708f1c110fc82100338abe2ce98f3b02c0f\",\"license\":\"MIT\"},\"src/contracts/acl/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRoleManagement {\\n\\n  struct RegiterRoleRequest {\\n    bytes32 group;\\n    string name;    \\n    bool status;\\n  }\\n\\n  struct UpdateRoleRequest {\\n    bytes32 role;\\n    address account;\\n  }\\n\\n  event RoleAccountGranted(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleAccountRevoked(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed role,\\n    string indexed name,\\n    bytes32 group,\\n    bool isEnabled\\n  );\\n\\n  event RoleStatusChanged(address indexed sender, bytes32 indexed role, bytes32 indexed group, bool status);\\n\\n  event RoleGroupChanged(address indexed sender, bytes32 indexed role, bytes32 indexed newGroup, bytes32 oldGroup);\\n\\n  function registerRole(\\n    string calldata name,\\n    bytes32 group,\\n    bool status\\n  ) external returns (bytes32);\\n\\n  function batchRegisterRole(RegiterRoleRequest[] calldata requests) external returns(bytes32[] memory);\\n\\n  function grantRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchGrantRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function revokeRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchRevokeRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function setRoleStatus(bytes32 role, bool status) external returns (bool);\\n\\n  function setRoleGroup(bytes32 role, bytes32 group) external returns (bool);\\n\\n  function getRoleInfo(bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    );\\n\\n  function getRoleAccounts(bytes32 role) external view returns (address[] memory);\\n\\n  function hasRoleAccount(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x18e7657fdde30362e8c0186ac84acfdbc161c4f8f06e1e3cb009021d8fe5ab58\",\"license\":\"MIT\"},\"src/contracts/lib/LContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the context\\n */\\nlibrary LContextUtils {\\n  function generateCtx(address contractId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId));\\n  }\\n}\\n\",\"keccak256\":\"0x379d3f1670e48d86daed450ef0f5b75e59c592aa92b0d9ca2034d1888730969d\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n      return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0x24ae105c45515c06b38bbb435d508d4569a2d03f4b060dc43680bde225c8ee14\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../../acl/IGroupManagement.sol\\\";\\nimport \\\"../../acl/IRealmManagement.sol\\\";\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\n\\nlibrary LAccessControl {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LAccessControl\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant LIVELY_GENERAL_REALM = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_REALM\\\"));\\n  bytes32 public constant LIVELY_ASSET_REALM = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_REALM\\\"));\\n\\n  bytes32 public constant LIVELY_GENERAL_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_GROUP\\\"));\\n  bytes32 public constant LIVELY_DAO_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_DAO_GROUP\\\"));\\n  bytes32 public constant LIVELY_ASSET_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_GROUP\\\"));\\n\\n  bytes32 public constant LIVELY_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_SYSTEM_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_SYSTEM_ADMIN_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_ASSET_MANAGER_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_MANAGER_ROLE\\\"));\\n  bytes32 public constant LIVELY_ASSET_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_ADMIN_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_COMMUNITY_DAO_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_COMMUNITY_DAO_ROLE\\\"));  \\n  bytes32 public constant LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_ANONYMOUS_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ANONYMOUS_ROLE\\\"));\\n\\n  function initializeContext(AccessControlStorage.DataCollections storage data) external {\\n    data.accountMap[msg.sender][LIVELY_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n    data.accountMap[msg.sender][LIVELY_SYSTEM_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n\\n    data.roleMap[LIVELY_ADMIN_ROLE].name = \\\"LIVELY_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].name = \\\"LIVELY_SYSTEM_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].name = \\\"LIVELY_ASSET_MANAGER_ROLE\\\";\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].group = LIVELY_ASSET_GROUP;\\n\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].name = \\\"LIVELY_ASSET_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].group = LIVELY_ASSET_GROUP;\\n\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].name = \\\"LIVELY_COMMUNITY_DAO_ROLE\\\";\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].group = LIVELY_DAO_GROUP;\\n\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].name = \\\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\\\";\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].group = LIVELY_DAO_GROUP;\\n    \\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].name = \\\"LIVELY_ANONYMOUS_ROLE\\\";\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].group = LIVELY_GENERAL_GROUP;\\n\\n    data.groupMap[LIVELY_GENERAL_GROUP].name = \\\"LIVELY_GENERAL_GROUP\\\";\\n    data.groupMap[LIVELY_GENERAL_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_ADMIN_ROLE);\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_SYSTEM_ADMIN_ROLE);\\n\\n    data.groupMap[LIVELY_DAO_GROUP].name = \\\"LIVELY_DAO_GROUP\\\";\\n    data.groupMap[LIVELY_DAO_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_DAO_GROUP].roleSet.add(LIVELY_COMMUNITY_DAO_ROLE);\\n    data.groupMap[LIVELY_DAO_GROUP].roleSet.add(LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE);\\n\\n    data.groupMap[LIVELY_ASSET_GROUP].name = \\\"LIVELY_ASSET_GROUP\\\";\\n    data.groupMap[LIVELY_ASSET_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_ASSET_GROUP].roleSet.add(LIVELY_ASSET_MANAGER_ROLE);\\n    data.groupMap[LIVELY_ASSET_GROUP].roleSet.add(LIVELY_ASSET_ADMIN_ROLE);\\n\\n    data.realmMap[LIVELY_GENERAL_REALM].name = \\\"LIVELY_GENERAL_REALM\\\";\\n    data.realmMap[LIVELY_GENERAL_REALM].isEnabled = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].isUpgradable = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].ctxSet.add(LContextUtils.generateCtx(address(this)));\\n\\n    data.realmMap[LIVELY_ASSET_REALM].name = \\\"LIVELY_ASSET_REALM\\\";\\n    data.realmMap[LIVELY_ASSET_REALM].isEnabled = true;\\n    data.realmMap[LIVELY_ASSET_REALM].isUpgradable = true;  \\n  }\\n\\n  function createRequestContext() external pure returns (IContextManagement.RequestRegisterContext[] memory) {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](2);\\n    rrc[0].role = LIVELY_ADMIN_ROLE;\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](22);\\n    rrc[0].funcSelectors[0] = IProxy.setUpgradeStatus.selector;\\n    rrc[0].funcSelectors[1] = IProxy.setSafeMode.selector;\\n    rrc[0].funcSelectors[2] = IContextManagement.addContextFuncRole.selector;\\n    rrc[0].funcSelectors[3] = IContextManagement.removeContextFunc.selector;\\n    rrc[0].funcSelectors[4] = IContextManagement.grantContextRole.selector;\\n    rrc[0].funcSelectors[5] = IContextManagement.revokeContextRole.selector;\\n    rrc[0].funcSelectors[6] = IContextManagement.setContextRealm.selector;\\n    rrc[0].funcSelectors[7] = IContextManagement.setContextStatus.selector;\\n    rrc[0].funcSelectors[8] = IRoleManagement.registerRole.selector;\\n    rrc[0].funcSelectors[9] = IRoleManagement.batchRegisterRole.selector;\\n    rrc[0].funcSelectors[10] = IRoleManagement.grantRoleAccount.selector;\\n    rrc[0].funcSelectors[11] = IRoleManagement.batchGrantRoleAccount.selector;\\n    rrc[0].funcSelectors[12] = IRoleManagement.revokeRoleAccount.selector;\\n    rrc[0].funcSelectors[13] = IRoleManagement.batchRevokeRoleAccount.selector;\\n    rrc[0].funcSelectors[14] = IRoleManagement.setRoleStatus.selector;\\n    rrc[0].funcSelectors[15] = IRoleManagement.setRoleGroup.selector;\\n    rrc[0].funcSelectors[16] = IGroupManagement.registerGroup.selector;\\n    rrc[0].funcSelectors[17] = IGroupManagement.setGroupStatus.selector;\\n    rrc[0].funcSelectors[18] = IRealmManagement.registerRealm.selector;\\n    rrc[0].funcSelectors[19] = IRealmManagement.setRealmStatus.selector;\\n    rrc[0].funcSelectors[20] = IRealmManagement.setRealmUpgradeStatus.selector;\\n    rrc[0].funcSelectors[21] = bytes4(keccak256(\\\"withdrawBalance(address)\\\"));\\n\\n    rrc[1].role = LIVELY_SYSTEM_ADMIN_ROLE;\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](4);\\n    rrc[1].funcSelectors[0] = IProxy.setLocalAdmin.selector;\\n    rrc[1].funcSelectors[1] = IProxy.upgradeTo.selector;\\n    rrc[1].funcSelectors[2] = IContextManagement.registerContext.selector;\\n    rrc[1].funcSelectors[3] = IContextManagement.updateContext.selector;\\n\\n    return rrc;\\n  }\\n\\n  function hasAccess(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool) {\\n    bytes32 role = data.ctxMap[context].resources[signature].role;\\n    // console.log(\\\"hasAccess called, address: %s\\\", account);\\n\\n    // console.log(\\\"data.ctxMap[context].smca: %s\\\", data.ctxMap[context].smca);\\n    // console.log(\\\"data.ctxMap[context].isEnabled:\\\");\\n    // console.logBool(data.ctxMap[context].isEnabled);\\n    // console.log(\\\"data.ctxMap[context].realm: \\\");\\n    // console.logBytes32(data.ctxMap[context].realm);\\n    // console.log(\\\"data.ctxMap[context].resources[signature].status: \\\");\\n    // console.logBytes1(bytes1(uint8(data.ctxMap[context].resources[signature].status)));\\n    // console.log(\\\"data.ctxMap[context].resources[signature].role: \\\");\\n    // console.logBytes32(data.ctxMap[context].resources[signature].role);\\n\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].name: %s\\\", data.realmMap[data.ctxMap[context].realm].name);\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].isEnabled: \\\");\\n    // console.logBool(data.realmMap[data.ctxMap[context].realm].isEnabled);\\n\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].name: %s\\\", data.groupMap[data.roleMap[role].group].name);\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].isEnabled: \\\");\\n    // console.logBool(data.groupMap[data.roleMap[role].group].isEnabled);\\n\\n    // console.log(\\\"data.accountMap[account][role]: \\\");\\n    // console.logBytes1(bytes1(uint8(data.accountMap[account][role])));\\n\\n    if (role == LIVELY_ANONYMOUS_ROLE) {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED;\\n    } else {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED &&\\n        data.realmMap[data.ctxMap[context].realm].isEnabled &&\\n        data.groupMap[data.roleMap[role].group].isEnabled &&\\n        data.accountMap[account][role] == AccessControlStorage.Status.ENABLED;\\n    }\\n  }\\n\\n  function isLivelySystemAdminRole(AccessControlStorage.DataCollections storage data, address account)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.accountMap[account][LIVELY_SYSTEM_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAdminRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAssetManagerRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ASSET_MANAGER_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAssetAdminRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ASSET_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyCommunityDaoRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_COMMUNITY_DAO_ROLE] == AccessControlStorage.Status.ENABLED;  \\n  }\\n\\n  function isLivelyCommunityDaoExecutorRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyGeneralGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_GENERAL_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyAssetGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_ASSET_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyDaoGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_DAO_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyGeneralRealm(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.realmMap[LIVELY_GENERAL_REALM].ctxSet.contains(context);\\n  }\\n\\n  function isLivelyAssetRealm(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.realmMap[LIVELY_ASSET_REALM].ctxSet.contains(context);\\n  }\\n\\n\\n  function isContextSafeMode(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return IProxy(data.ctxMap[context].contractId).isSafeMode();\\n  }\\n\\n  function isContextUpgradable(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return IProxy(data.ctxMap[context].contractId).isUpgradable();\\n  }\\n\\n  function isRealmUpgradable(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    if (bytes(data.realmMap[realm].name).length == 0) return false;\\n    return data.realmMap[realm].isUpgradable;\\n  }\\n\\n  function isGroupExists(AccessControlStorage.DataCollections storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0;\\n  }\\n\\n  function isGroupEnabled(AccessControlStorage.DataCollections storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0 && data.groupMap[group].isEnabled;\\n  }\\n\\n  function isContextExists(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0);\\n  }\\n\\n  function isContextFunctionExists(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0) && data.ctxMap[context].funcSet.contains(functionSelector);\\n  }\\n\\n  function isContextFunctionEnabled(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return\\n      data.ctxMap[context].contractId != address(0) &&\\n      data.ctxMap[context].resources[functionSelector].status == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isContextEnabled(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0) && data.ctxMap[context].isEnabled;\\n  }\\n\\n  function isRoleExists(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0;\\n  }\\n\\n  function isRoleEnabled(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0 && data.roleMap[role].isEnabled;\\n  }\\n\\n  function isRealmExists(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0;\\n  }\\n\\n  function isRealmEnabled(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0 && data.realmMap[realm].isEnabled;\\n  }\\n}\\n\",\"keccak256\":\"0x222138d7d05b0fdf2796daea6bca334ae7fe93e7edbdc902b1931509cfa3cd59\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\nimport \\\"../proxy/LClones.sol\\\";\\n\\nlibrary LContextManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LClones for address;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LContextManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n  \\n  bytes32 public constant CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contractId,string name,string version,string realm)\\\");\\n  \\n  bytes32 public constant PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"PredictContext(address deployer,address subject,string realm)\\\");\\n\\n  function registerAccessControlManagerContext(\\n    AccessControlStorage.DataCollections storage data,\\n    address newContract,\\n    bytes32 realm,\\n    IContextManagement.RequestRegisterContext[] calldata rc\\n  ) external returns (bytes32) {\\n    return _registerContext(data, newContract, realm, true, rc);\\n  }\\n\\n  function registerContext(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes memory signature,\\n    IContextManagement.RequestContext calldata rc,\\n    IContextManagement.RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32, address) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    bytes32 structHash = _getContextMessageHash(rc.contractId, rc.name, rc.version, rc.realm);\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal ECDASA Signature\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msgSigner,\\n        IContextManagement.registerContext.selector\\n      ),\\n      \\\"RegisterContext Access Denied\\\"\\n    );\\n    return (_registerContext(data, rc.contractId, rc.realm, rc.status, rrc), msgSigner);\\n  }\\n\\n  function registerPredictContext(\\n      AccessControlStorage.DataCollections storage data,\\n      bytes memory signature,\\n      IContextManagement.RequestPredictContext calldata rpc,\\n      IContextManagement.RequestRegisterContext[] calldata rrc\\n  ) external returns (address, bytes32, address) {\\n        require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    bytes32 structHash = _getPredictContextMessageHash(rpc.deployer, rpc.subject, rpc.realm);\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal ECDASA Signature\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msgSigner,\\n        IContextManagement.registerContext.selector\\n      ),\\n      \\\"RegisterPredictContext Access Denied\\\"\\n    );\\n\\n    (address contractId, bytes32 ctx) = _registerPredictContext(data, rrc, rpc);\\n    return (contractId, ctx, msgSigner);\\n  }\\n\\n\\n  function _getContextMessageHash(\\n    address contractId,\\n    bytes32 name,\\n    bytes32 version,\\n    bytes32 realm\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(CTX_MESSAGE_TYPEHASH, contractId, name, version, realm));\\n  }\\n\\n  function _getPredictContextMessageHash(\\n    address deployer,\\n    address subject,\\n    bytes32 realm\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(PREDICT_CTX_MESSAGE_TYPEHASH, deployer, subject, realm));\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          IProxy(address(this)).contractName(),\\n          IProxy(address(this)).contractVersion(),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  function _registerContext(\\n    AccessControlStorage.DataCollections storage data,\\n    address newContract,\\n    bytes32 realm,\\n    bool status,\\n    IContextManagement.RequestRegisterContext[] calldata rrc\\n  ) private returns (bytes32) {\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    bytes32 ctx = LContextUtils.generateCtx(newContract);\\n    require(data.ctxMap[ctx].contractId == address(0), \\\"Context Already Registered\\\");\\n    data.realmMap[realm].ctxSet.add(ctx);\\n    AccessControlStorage.Context storage newContext = data.ctxMap[ctx];\\n    newContext.realm = realm;\\n    newContext.contractId = newContract;\\n    newContext.isEnabled = status;\\n\\n    for (uint256 i = 0; i < rrc.length; i++) {\\n      require(bytes(data.roleMap[rrc[i].role].name).length != 0, \\\"Role Not Found\\\");\\n      for (uint256 j = 0; j < rrc[i].funcSelectors.length; j++) {\\n        newContext.resources[rrc[i].funcSelectors[j]].role = rrc[i].role;\\n        newContext.resources[rrc[i].funcSelectors[j]].status = rrc[i].isEnabled\\n          ? AccessControlStorage.Status.ENABLED\\n          : AccessControlStorage.Status.DISABLED;\\n        newContext.funcSet.add(rrc[i].funcSelectors[j]);\\n      }\\n    }\\n\\n    return ctx;\\n  }\\n\\n  function _registerPredictContext(\\n    AccessControlStorage.DataCollections storage data,\\n    IContextManagement.RequestRegisterContext[] calldata rrc,\\n    IContextManagement.RequestPredictContext calldata rpc\\n  ) private returns (address, bytes32) {\\n    require(bytes(data.realmMap[rpc.realm].name).length != 0, \\\"Realm Not Found\\\");\\n\\n    address predictedContractId = rpc.subject.predictDeterministicAddress(rpc.salt, rpc.deployer);\\n    bytes32 ctx = LContextUtils.generateCtx(predictedContractId);\\n\\n    require(data.ctxMap[ctx].contractId == address(0), \\\"Context Already Registered\\\");\\n    data.realmMap[rpc.realm].ctxSet.add(ctx);\\n    AccessControlStorage.Context storage newContext = data.ctxMap[ctx];\\n    newContext.realm = rpc.realm;\\n    newContext.contractId = predictedContractId;\\n    newContext.isEnabled = rpc.status;\\n\\n    for (uint256 i = 0; i < rrc.length; i++) {  \\n      require(bytes(data.roleMap[rrc[i].role].name).length != 0, \\\"Role Not Found\\\");\\n      for (uint256 j = 0; j < rrc[i].funcSelectors.length; j++) {\\n        newContext.resources[rrc[i].funcSelectors[j]].role = rrc[i].role;\\n        newContext.resources[rrc[i].funcSelectors[j]].status = rrc[i].isEnabled\\n          ? AccessControlStorage.Status.ENABLED\\n          : AccessControlStorage.Status.DISABLED;\\n        newContext.funcSet.add(rrc[i].funcSelectors[j]);\\n      }\\n    }\\n\\n    return (predictedContractId, ctx);\\n  }\\n\\n  function updateContext(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes memory signature,\\n    IContextManagement.RequestContext calldata rc,\\n    IContextManagement.RequestUpdateContext[] calldata ruc\\n  ) external returns (address, address) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    bytes32 structHash = _getContextMessageHash(rc.contractId, rc.name, rc.version, rc.realm);\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal ECDASA Signature\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msgSigner,\\n        IContextManagement.updateContext.selector\\n      ),\\n      \\\"UpdateContext Access Denied\\\"\\n    );\\n    return (_updateContext(data, ctx, rc.realm, rc.status, ruc), msgSigner);\\n  }\\n\\n  function _updateContext(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes32 realm,\\n    bool status,\\n    IContextManagement.RequestUpdateContext[] calldata ruc\\n  ) internal returns (address) {\\n    address contractId = data.ctxMap[ctx].contractId;\\n    require(contractId != address(0), \\\"Context Not Found\\\");\\n    require(contractId == msg.sender, \\\"Update Context Forbidden\\\");\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    data.ctxMap[ctx].isEnabled = status;\\n\\n    if (data.ctxMap[ctx].realm != realm) {\\n      data.realmMap[data.ctxMap[ctx].realm].ctxSet.remove(ctx);\\n      data.realmMap[realm].ctxSet.add(ctx);\\n    }\\n    data.ctxMap[ctx].realm = realm;\\n\\n    for (uint256 i = 0; i < ruc.length; i++) {\\n      require(bytes(data.roleMap[ruc[i].role].name).length != 0, \\\"Role Not Found\\\");\\n      for (uint256 j = 0; j < ruc[i].funcSelectors.length; j++) {\\n        if (\\n          ruc[i].updateStatus == IContextManagement.UpdateContextStatus.ENABLE ||\\n          ruc[i].updateStatus == IContextManagement.UpdateContextStatus.DISABLE\\n        ) {\\n          data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].role = ruc[i].role;\\n          data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].status = ruc[i].updateStatus ==\\n            IContextManagement.UpdateContextStatus.ENABLE\\n            ? AccessControlStorage.Status.ENABLED\\n            : AccessControlStorage.Status.DISABLED;\\n          if (!data.ctxMap[ctx].funcSet.contains(ruc[i].funcSelectors[j])) {\\n            data.ctxMap[ctx].funcSet.add(ruc[i].funcSelectors[j]);\\n          }\\n        } else {\\n          delete data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].role;\\n          delete data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].status;\\n          data.ctxMap[ctx].funcSet.remove(ruc[i].funcSelectors[j]);\\n        }\\n      }\\n    }\\n    return contractId;\\n  }\\n\\n  function addContextFuncRole(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.addContextFuncRole.selector\\n      ),\\n      \\\"AddContextFuncRole Access Denied\\\"\\n    );\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(!data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Already Exists\\\");\\n    data.ctxMap[ctx].resources[functionSelector].role = role;\\n    data.ctxMap[ctx].resources[functionSelector].status = AccessControlStorage.Status.ENABLED;\\n    data.ctxMap[ctx].funcSet.add(functionSelector);\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function removeContextFunc(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.removeContextFunc.selector\\n      ),\\n      \\\"RemoveContextFunc Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Remove ACL Context\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Not Found\\\");\\n    delete data.ctxMap[ctx].resources[functionSelector].role;\\n    delete data.ctxMap[ctx].resources[functionSelector].status;\\n    data.ctxMap[ctx].funcSet.remove(functionSelector);\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function grantContextRole(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.grantContextRole.selector\\n      ),\\n      \\\"GrantContextRole Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Grant ACL Context\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Not Found\\\");\\n    data.ctxMap[ctx].resources[functionSelector].role = role;\\n    data.ctxMap[ctx].resources[functionSelector].status = AccessControlStorage.Status.ENABLED;\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function revokeContextRole(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.revokeContextRole.selector\\n      ),\\n      \\\"RevokeContextRole Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Revoke ACL Context\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Not Found\\\");\\n    data.ctxMap[ctx].resources[functionSelector].status = AccessControlStorage.Status.DISABLED;\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function setContextStatus(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bool status\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.setContextStatus.selector\\n      ),\\n      \\\"SetContextStatus Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Change ACL Context Status\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    data.ctxMap[ctx].isEnabled = status;\\n    return (true, data.ctxMap[ctx].realm);\\n  }\\n\\n  function setContextRealm(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes32 realm\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.setContextRealm.selector\\n      ),\\n      \\\"SetContextRealm Access Denied\\\"\\n    );\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Change ACL Context Realm\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    require(data.ctxMap[ctx].realm != realm, \\\"Illegal Realm Duplication\\\");\\n    bytes32 oldRealm = data.ctxMap[ctx].realm;\\n    data.realmMap[realm].ctxSet.add(ctx);\\n    data.realmMap[data.ctxMap[ctx].realm].ctxSet.remove(ctx);\\n    return (true, oldRealm);\\n  }\\n\\n  function hasContextRole(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return\\n      data.ctxMap[ctx].contractId != address(0) &&\\n      data.ctxMap[ctx].resources[functionSelector].role == role &&\\n      data.ctxMap[ctx].resources[functionSelector].status == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function getContextInfo(AccessControlStorage.DataCollections storage data, bytes32 ctx)\\n    external\\n    view\\n    returns (IContextManagement.ResponseContext memory)\\n  {\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    bytes32 name = IProxy(data.ctxMap[ctx].contractId).contractName();\\n    bytes32 version = IProxy(data.ctxMap[ctx].contractId).contractVersion();\\n    bool isSafeMode = IProxy(data.ctxMap[ctx].contractId).isSafeMode();\\n    bool isUpgradable = IProxy(data.ctxMap[ctx].contractId).isUpgradable();\\n\\n    return\\n      IContextManagement.ResponseContext({\\n        name: name,\\n        version: version,\\n        contractId: data.ctxMap[ctx].contractId,\\n        realm: data.ctxMap[ctx].realm,\\n        isSafeMode: isSafeMode,\\n        isUpgradable: isUpgradable\\n      });\\n  }\\n\\n  function getContextFuncs(AccessControlStorage.DataCollections storage data, bytes32 ctx)\\n    external\\n    view\\n    returns (bytes4[] memory)\\n  {\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    bytes4[] memory funcs = new bytes4[](data.ctxMap[ctx].funcSet.length());\\n    for (uint32 i = 0; i < data.ctxMap[ctx].funcSet.length(); i++) {\\n      funcs[i] = bytes4(data.ctxMap[ctx].funcSet.at(i));\\n    }\\n    return funcs;\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LAccessControl);\\n  }\\n}\\n\",\"keccak256\":\"0x73b98cc2577a2424df67838a0d79d66c83bacee97a68545d15a4228ca9104613\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0xc8056320321b6983c6685741b1ba607513a7c6817f4e4a7319b6b45ac9194565\",\"license\":\"MIT\"},\"src/contracts/lib/proxy/LClones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n */\\nlibrary LClones {\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n   *\\n   * This function uses the create opcode, which should never revert.\\n   */\\n  function clone(address implementation) internal returns (address instance) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      instance := create(0, ptr, 0x37)\\n    }\\n    require(instance != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n   *\\n   * This function uses the create2 opcode and a `salt` to deterministically deploy\\n   * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n   * the clones cannot be deployed twice at the same address.\\n   */\\n  function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      instance := create2(0, ptr, 0x37, salt)\\n    }\\n    require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(\\n    address implementation,\\n    bytes32 salt,\\n    address deployer\\n  ) internal pure returns (address predicted) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n      mstore(add(ptr, 0x38), shl(0x60, deployer))\\n      mstore(add(ptr, 0x4c), salt)\\n      mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n      predicted := keccak256(add(ptr, 0x37), 0x55)\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n    return predictDeterministicAddress(implementation, salt, address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xa7bf692e117b23688be8687bf9e4c3c31ffcaa8cf94d9946b33a1e8b4d953052\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./LEnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) \\n * - `address -> uint256` (`AddressToUintMap`) \\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) \\n * - `uint256 -> uint256` (`UintToUintMap`) \\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) \\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap.\\n * ====\\n */\\nlibrary LEnumerableMap {\\n    using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        LEnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x902b2d606e688f51f33d0a1db574be9cc049c20e7c8fd43cde744e2ec3743eb6\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xeb49909b77ba631382c48e9fead2e49f8b4c72f3325f7685d4bddfce32d7528b\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n */\\n\\nabstract contract BaseUUPSStorage {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 internal constant _TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  \\n  address internal immutable __self = address(this);\\n\\n  bytes32 internal _domainName;\\n  bytes32 internal _domainVersion;\\n  bytes32 internal _domainRealm;\\n  address internal _accessControlManager;\\n  bool internal _isSafeMode;\\n  bool internal _isUpgradable;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x086334b0668244b8ff2ef60dd770da77ecfd05f705e7c2251c60553c4651bfad\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBaseProxy {\\n  event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x719d13ceb21e3fda10fc0ba5fb1b167b8736919d6c6a99f6268667acb8b4d062\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event LocalAdminChanged(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event SafeModeChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  event UpgradeStatusChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeMode(bool status) external returns (bool);\\n\\n  function setUpgradeStatus(bool status) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function contractName() external view returns (bytes32);\\n\\n  function contractVersion() external view returns (bytes32);\\n\\n  function contractRealm() external view returns (bytes32);\\n\\n  function contractContext() external view returns (bytes32);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function isSafeMode() external view returns (bool);\\n\\n  function isUpgradable() external view returns (bool);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n\\n}\\n\",\"keccak256\":\"0x93bf3ccb33a8616fba3379b096e79e88ae3249882af81d1dc808eec6688800a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061012b5760003560e01c806376fd3e82116100b7578063adfc581b1161007b578063adfc581b146103b5578063bec94751146103ec578063ebcc861e146103f4578063ef20d55d14610414578063f0b15def1461043457600080fd5b806376fd3e82146102cb5780638533777c146102eb5780639bbafb111461030e578063a234dae314610375578063a64c0bb01461039557600080fd5b8063542a5808116100fe578063542a5808146101dc57806364d4c8191461021c57806366cd3f06146102435780636da4c23c146102635780637678922e146102a057600080fd5b80630ec7ee0e146101305780632466209b1461017f57806334109de2146101955780634a56c0b8146101bc575b600080fd5b81801561013c57600080fd5b5061015061014b366004613599565b61045b565b604080516001600160a01b03948516815260208101939093529216918101919091526060015b60405180910390f35b6101876106db565b604051908152602001610176565b6101877f7aabe2571874f2a330ea11c8972d9cc3792d973efc6b36e3e29005861a34418881565b8180156101c857600080fd5b506101876101d7366004613649565b610709565b8180156101e857600080fd5b506101fc6101f7366004613696565b6109a1565b604080516001600160a01b03938416815292909116602083015201610176565b6101877f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b610256610251366004613727565b610c10565b6040516101769190613749565b81801561026f57600080fd5b5061028361027e366004613797565b610d4b565b604080519283526001600160a01b03909116602083015201610176565b6040516001600160a01b0373__$c43b1d7058274a71a9734d16e6b6586431$__168152602001610176565b8180156102d757600080fd5b506101876102e636600461380d565b610f53565b6102fe6102f936600461384a565b61121a565b6040519015158152602001610176565b61032161031c366004613727565b6112c0565b60405161017691908151815260208083015190820152604080830151908201526060808301516001600160a01b03169082015260808083015115159082015260a09182015115159181019190915260c00190565b81801561038157600080fd5b5061018761039036600461380d565b61158c565b8180156103a157600080fd5b506101876103b03660046138a0565b611841565b8180156103c157600080fd5b506103d56103d03660046138f7565b61185c565b604080519215158352602083019190915201610176565b610187611b51565b81801561040057600080fd5b506103d561040f366004613934565b611b77565b81801561042057600080fd5b5061018761042f36600461380d565b611da8565b6101877ffc434588684348dd50856b075c47bed14245c1030aa04c32955af5549981462781565b6000806000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c2919061396d565b156104e85760405162461bcd60e51b81526004016104df9061398a565b60405180910390fd5b60006105796104fd60c0890160a08a016139c1565b61050d60a08a0160808b016139c1565b604080517ffc434588684348dd50856b075c47bed14245c1030aa04c32955af554998146276020808301919091526001600160a01b0394851682840152929093166060840152808b01356080808501919091528151808503909101815260a09093019052815191012090565b9050600061058682612058565b9050600080610595838c6120a6565b909250905060008160048111156105ae576105ae6139dc565b146105cb5760405162461bcd60e51b81526004016104df906139f2565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a8d6105ef30612114565b6040516001600160e01b031960e085901b16815261061c92919087906378efa4ed60e11b90600401613a29565b602060405180830381865af4158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d919061396d565b6106b55760405162461bcd60e51b8152602060048201526024808201527f526567697374657250726564696374436f6e74657874204163636573732044656044820152631b9a595960e21b60648201526084016104df565b6000806106c48e8c8c8f612153565b909f909e50939c50929a5050505050505050505050565b604051640312e302e360dc1b60208201526025015b6040516020818303038152906040528051906020012081565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d919061396d565b1561078a5760405162461bcd60e51b81526004016104df9061398a565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a856107ae30612114565b6040516001600160e01b031960e085901b1681526107db9291903390635ac4b36f60e11b90600401613a29565b602060405180830381865af41580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c919061396d565b6108685760405162461bcd60e51b815260206004820152601f60248201527f52656d6f7665436f6e7465787446756e63204163636573732044656e6965640060448201526064016104df565b8261087230612114565b036108bf5760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c2052656d6f76652041434c20436f6e7465787400000000000060448201526064016104df565b60008381526001808601602052604090912001546001600160a01b03166108f85760405162461bcd60e51b81526004016104df90613a57565b6000838152600185016020526040902061091f906003016001600160e01b031984166125fe565b61093b5760405162461bcd60e51b81526004016104df90613a82565b60008381526001808601602081815260408085206001600160e01b03198816808752600282018452918620868155909401805460ff19169055938790525261098891600390910190612619565b5050506000908152600191909101602052604090205490565b600080306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a06919061396d565b15610a235760405162461bcd60e51b81526004016104df9061398a565b6000610aad610a3860808801606089016139c1565b604080517f7aabe2571874f2a330ea11c8972d9cc3792d973efc6b36e3e29005861a3441886020828101919091526001600160a01b03939093168183015289356060820152828a01356080820152818a013560a0808301919091528251808303909101815260c0909101909152805191012090565b90506000610aba82612058565b9050600080610ac9838b6120a6565b90925090506000816004811115610ae257610ae26139dc565b14610aff5760405162461bcd60e51b81526004016104df906139f2565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a8d610b2330612114565b6040516001600160e01b031960e085901b168152610b509291908790631ccb7c8d60e31b90600401613a29565b602060405180830381865af4158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b91919061396d565b610bdd5760405162461bcd60e51b815260206004820152601b60248201527f557064617465436f6e74657874204163636573732044656e696564000000000060448201526064016104df565b610bfe8c8c60408c0135610bf760a08e0160808f01613ab9565b8c8c612625565b9c919b50909950505050505050505050565b60008181526001808401602052604090912001546060906001600160a01b0316610c4c5760405162461bcd60e51b81526004016104df90613a57565b60008281526001840160205260408120610c6890600301612d50565b67ffffffffffffffff811115610c8057610c806134b1565b604051908082528060200260200182016040528015610ca9578160200160208202803683370190505b50905060005b60008481526001860160205260409020610ccb90600301612d50565b8163ffffffff161015610d415760008481526001860160205260409020610cfe9060030163ffffffff80841690612d5a16565b828263ffffffff1681518110610d1657610d16613ad6565b6001600160e01b03199092166020928302919091019091015280610d3981613b02565b915050610caf565b5090505b92915050565b600080306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db0919061396d565b15610dcd5760405162461bcd60e51b81526004016104df9061398a565b6000610de2610a3860808801606089016139c1565b90506000610def82612058565b9050600080610dfe838b6120a6565b90925090506000816004811115610e1757610e176139dc565b14610e345760405162461bcd60e51b81526004016104df906139f2565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a8c610e5830612114565b6040516001600160e01b031960e085901b168152610e8592919087906378efa4ed60e11b90600401613a29565b602060405180830381865af4158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec6919061396d565b610f125760405162461bcd60e51b815260206004820152601d60248201527f5265676973746572436f6e74657874204163636573732044656e69656400000060448201526064016104df565b610f428b610f2660808c0160608d016139c1565b60408c0135610f3b60a08e0160808f01613ab9565b8c8c612d66565b9b919a509098505050505050505050565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb7919061396d565b15610fd45760405162461bcd60e51b81526004016104df9061398a565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a86610ff830612114565b6040516001600160e01b031960e085901b168152611025929190339063771bcf4560e01b90600401613a29565b602060405180830381865af4158015611042573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611066919061396d565b6110b25760405162461bcd60e51b815260206004820152601e60248201527f4772616e74436f6e74657874526f6c65204163636573732044656e696564000060448201526064016104df565b836110bc30612114565b036111095760405162461bcd60e51b815260206004820152601960248201527f496c6c6567616c204772616e742041434c20436f6e746578740000000000000060448201526064016104df565b60008481526001808701602052604090912001546001600160a01b03166111425760405162461bcd60e51b81526004016104df90613a57565b60008281526002860160205260409020600101805461116090613b25565b90506000036111815760405162461bcd60e51b81526004016104df90613b59565b600084815260018601602052604090206111a8906003016001600160e01b031985166125fe565b6111c45760405162461bcd60e51b81526004016104df90613a82565b60008481526001868101602090815260408084206001600160e01b0319881685526002019091529091208381558101805460ff191682805b02179055505050600091825250600191909101602052604090205490565b600083815260018086016020526040822001546001600160a01b03161580159061126b5750600084815260018601602090815260408083206001600160e01b03198616845260020190915290205483145b80156112b75750600160008581526001808801602090815260408084206001600160e01b0319881685526002908101909252909220015460ff16908111156112b5576112b56139dc565b145b95945050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260008281526001808501602052604090912001546001600160a01b031661132b5760405162461bcd60e51b81526004016104df90613a57565b6000828152600180850160209081526040808420909201548251631d74303760e21b815292516001600160a01b03909116926375d0c0dc9260048083019391928290030181865afa158015611384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a89190613b81565b6000848152600180870160209081526040808420909201548251630505472360e51b8152925194955092936001600160a01b039093169263a0a8e4609260048082019392918290030181865afa158015611406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142a9190613b81565b600085815260018088016020908152604080842090920154825163be22465d60e01b8152925194955092936001600160a01b039093169263be22465d9260048082019392918290030181865afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac919061396d565b6000868152600180890160209081526040808420909201548251630151e76560e61b8152925194955092936001600160a01b0390931692635479d9409260048082019392918290030181865afa15801561150a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152e919061396d565b6040805160c08101825295865260208087019590955260008881526001808b018088528383208054948a0194909452918a90529552909301546001600160a01b031660608501525015156080830152151560a0820152905092915050565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f0919061396d565b1561160d5760405162461bcd60e51b81526004016104df9061398a565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a8661163130612114565b6040516001600160e01b031960e085901b16815261165e929190339063031c049360e01b90600401613a29565b602060405180830381865af415801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f919061396d565b6116eb5760405162461bcd60e51b815260206004820181905260248201527f416464436f6e7465787446756e63526f6c65204163636573732044656e69656460448201526064016104df565b60008481526001808701602052604090912001546001600160a01b03166117245760405162461bcd60e51b81526004016104df90613a57565b60008281526002860160205260409020600101805461174290613b25565b90506000036117635760405162461bcd60e51b81526004016104df90613b59565b6000848152600186016020526040902061178a906003016001600160e01b031985166125fe565b156117d75760405162461bcd60e51b815260206004820152601f60248201527f46756e6374696f6e53656c6563746f7220416c7265616479204578697374730060448201526064016104df565b60008481526001868101602081815260408085206001600160e01b031989168087526002820184529186208881558501805460ff19169095179094559388905252611827916003909101906130ee565b505050600091825250600191909101602052604090205490565b600061185286868660018787612d66565b9695505050505050565b600080306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561189d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c1919061396d565b156118de5760405162461bcd60e51b81526004016104df9061398a565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a8661190230612114565b6040516001600160e01b031960e085901b16815261192f929190339063d338640160e01b90600401613a29565b602060405180830381865af415801561194c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611970919061396d565b6119bc5760405162461bcd60e51b815260206004820152601d60248201527f536574436f6e746578745265616c6d204163636573732044656e69656400000060448201526064016104df565b836119c630612114565b03611a135760405162461bcd60e51b815260206004820181905260248201527f496c6c6567616c204368616e67652041434c20436f6e74657874205265616c6d60448201526064016104df565b60008481526001808701602052604090912001546001600160a01b0316611a4c5760405162461bcd60e51b81526004016104df90613a57565b600083815260038601602052604090208054611a6790613b25565b9050600003611a885760405162461bcd60e51b81526004016104df90613b9a565b6000848152600186016020526040902054839003611ae85760405162461bcd60e51b815260206004820152601960248201527f496c6c6567616c205265616c6d204475706c69636174696f6e0000000000000060448201526064016104df565b600084815260018601602090815260408083205486845260038901909252909120611b1690600201866130ee565b5060008581526001870160209081526040808320548352600389019091529020611b439060020186612619565b506001969095509350505050565b604051711310dbdb9d195e1d13585b9859d95b595b9d60721b60208201526032016106f0565b600080306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdc919061396d565b15611bf95760405162461bcd60e51b81526004016104df9061398a565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a86611c1d30612114565b6040516001600160e01b031960e085901b168152611c4a92919033906370420ee360e01b90600401613a29565b602060405180830381865af4158015611c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8b919061396d565b611cd75760405162461bcd60e51b815260206004820152601e60248201527f536574436f6e74657874537461747573204163636573732044656e696564000060448201526064016104df565b83611ce130612114565b03611d385760405162461bcd60e51b815260206004820152602160248201527f496c6c6567616c204368616e67652041434c20436f6e746578742053746174756044820152607360f81b60648201526084016104df565b60008481526001808701602052604090912001546001600160a01b0316611d715760405162461bcd60e51b81526004016104df90613a57565b50506000828152600180850160205260409091208082018054841515600160a01b0260ff60a01b1990911617905554935093915050565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0c919061396d565b15611e295760405162461bcd60e51b81526004016104df9061398a565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a86611e4d30612114565b6040516001600160e01b031960e085901b168152611e7a9291903390634346a04b60e01b90600401613a29565b602060405180830381865af4158015611e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebb919061396d565b611f075760405162461bcd60e51b815260206004820152601f60248201527f5265766f6b65436f6e74657874526f6c65204163636573732044656e6965640060448201526064016104df565b83611f1130612114565b03611f5e5760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c205265766f6b652041434c20436f6e7465787400000000000060448201526064016104df565b60008481526001808701602052604090912001546001600160a01b0316611f975760405162461bcd60e51b81526004016104df90613a57565b600082815260028601602052604090206001018054611fb590613b25565b9050600003611fd65760405162461bcd60e51b81526004016104df90613b59565b60008481526001860160205260409020611ffd906003016001600160e01b031985166125fe565b6120195760405162461bcd60e51b81526004016104df90613a82565b60008481526001808701602090815260408084206001600160e01b031988168552600290810190925290922081018054909160ff1990911690836111fc565b6000610d456120656130fa565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008082516041036120dc5760208301516040840151606085015160001a6120d087828585613222565b9450945050505061210d565b825160400361210557602083015160408401516120fa86838361330c565b93509350505061210d565b506000905060025b9250929050565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b604080820135600090815260038601602052908120805482919061217690613b25565b90506000036121975760405162461bcd60e51b81526004016104df90613b9a565b600061222a60608501356121b160c0870160a088016139c1565b6121c160a08801608089016139c1565b6001600160a01b03169190604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b9050600061223782612114565b60008181526001808b01602052604090912001549091506001600160a01b0316156122a45760405162461bcd60e51b815260206004820152601a60248201527f436f6e7465787420416c7265616479205265676973746572656400000000000060448201526064016104df565b604080860135600090815260038a01602052206122c490600201826130ee565b5060008181526001898101602052604091829020918701358255810180546001600160a01b0319166001600160a01b03851617905561230960e0870160c08801613ab9565b600182018054911515600160a01b0260ff60a01b1990921691909117905560005b878110156125ed578960020160008a8a8481811061234a5761234a613ad6565b905060200281019061235c9190613bc3565b600001358152602001908152602001600020600101805461237c90613b25565b905060000361239d5760405162461bcd60e51b81526004016104df90613b59565b60005b8989838181106123b2576123b2613ad6565b90506020028101906123c49190613bc3565b6123d2906020810190613be3565b90508110156125da578989838181106123ed576123ed613ad6565b90506020028101906123ff9190613bc3565b356002840160008c8c8681811061241857612418613ad6565b905060200281019061242a9190613bc3565b612438906020810190613be3565b8581811061244857612448613ad6565b905060200201602081019061245d9190613c2d565b6001600160e01b031916815260208101919091526040016000205589898381811061248a5761248a613ad6565b905060200281019061249c9190613bc3565b6124ad906060810190604001613ab9565b6124b85760026124bb565b60015b8360020160008c8c868181106124d3576124d3613ad6565b90506020028101906124e59190613bc3565b6124f3906020810190613be3565b8581811061250357612503613ad6565b90506020020160208101906125189190613c2d565b6001600160e01b0319168152602081019190915260400160002060019081018054909160ff1990911690836002811115612554576125546139dc565b02179055506125c78a8a8481811061256e5761256e613ad6565b90506020028101906125809190613bc3565b61258e906020810190613be3565b8381811061259e5761259e613ad6565b90506020020160208101906125b39190613c2d565b60038501906001600160e01b0319166130ee565b50806125d281613c48565b9150506123a0565b50806125e581613c48565b91505061232a565b509193509150505b94509492505050565b600081815260018301602052604081205415155b9392505050565b60006126128383613345565b600085815260018088016020526040822001546001600160a01b03168061265e5760405162461bcd60e51b81526004016104df90613a57565b6001600160a01b03811633146126b65760405162461bcd60e51b815260206004820152601860248201527f55706461746520436f6e7465787420466f7262696464656e000000000000000060448201526064016104df565b6000868152600389016020526040902080546126d190613b25565b90506000036126f25760405162461bcd60e51b81526004016104df90613b9a565b600087815260018981016020526040909120908101805460ff60a01b1916600160a01b8815150217905554861461276f576000878152600189016020908152604080832054835260038b01909152902061274f9060020188612619565b506000868152600389016020526040902061276d90600201886130ee565b505b600087815260018901602052604081208790555b83811015612d44578860020160008686848181106127a3576127a3613ad6565b90506020028101906127b59190613bc3565b60000135815260200190815260200160002060010180546127d590613b25565b90506000036127f65760405162461bcd60e51b81526004016104df90613b59565b60005b85858381811061280b5761280b613ad6565b905060200281019061281d9190613bc3565b61282b906020810190613be3565b9050811015612d3157600186868481811061284857612848613ad6565b905060200281019061285a9190613bc3565b61286b906060810190604001613c61565b600281111561287c5761287c6139dc565b14806128cd5750600086868481811061289757612897613ad6565b90506020028101906128a99190613bc3565b6128ba906060810190604001613c61565b60028111156128cb576128cb6139dc565b145b15612b87578585838181106128e4576128e4613ad6565b90506020028101906128f69190613bc3565b60008a815260018c01602052604081209135916002019088888681811061291f5761291f613ad6565b90506020028101906129319190613bc3565b61293f906020810190613be3565b8581811061294f5761294f613ad6565b90506020020160208101906129649190613c2d565b6001600160e01b0319168152602081019190915260400160002055600186868481811061299357612993613ad6565b90506020028101906129a59190613bc3565b6129b6906060810190604001613c61565b60028111156129c7576129c76139dc565b146129d35760026129d6565b60015b60008a815260018c0160205260408120600201908888868181106129fc576129fc613ad6565b9050602002810190612a0e9190613bc3565b612a1c906020810190613be3565b85818110612a2c57612a2c613ad6565b9050602002016020810190612a419190613c2d565b6001600160e01b0319168152602081019190915260400160002060019081018054909160ff1990911690836002811115612a7d57612a7d6139dc565b0217905550612aff868684818110612a9757612a97613ad6565b9050602002810190612aa99190613bc3565b612ab7906020810190613be3565b83818110612ac757612ac7613ad6565b9050602002016020810190612adc9190613c2d565b60008b815260018d0160205260409020600301906001600160e01b0319166125fe565b612b8257612b80868684818110612b1857612b18613ad6565b9050602002810190612b2a9190613bc3565b612b38906020810190613be3565b83818110612b4857612b48613ad6565b9050602002016020810190612b5d9190613c2d565b60008b815260018d0160205260409020600301906001600160e01b0319166130ee565b505b612d1f565b600089815260018b016020526040812060020190878785818110612bad57612bad613ad6565b9050602002810190612bbf9190613bc3565b612bcd906020810190613be3565b84818110612bdd57612bdd613ad6565b9050602002016020810190612bf29190613c2d565b6001600160e01b0319168152602080820192909252604090810160009081208190558b815260018d01909252812060020190878785818110612c3657612c36613ad6565b9050602002810190612c489190613bc3565b612c56906020810190613be3565b84818110612c6657612c66613ad6565b9050602002016020810190612c7b9190613c2d565b6001600160e01b03191681526020810191909152604001600020600101805460ff19169055612d1d868684818110612cb557612cb5613ad6565b9050602002810190612cc79190613bc3565b612cd5906020810190613be3565b83818110612ce557612ce5613ad6565b9050602002016020810190612cfa9190613c2d565b60008b815260018d0160205260409020600301906001600160e01b031916612619565b505b80612d2981613c48565b9150506127f9565b5080612d3c81613c48565b915050612783565b50979650505050505050565b6000610d45825490565b60006126128383613438565b600084815260038701602052604081208054612d8190613b25565b9050600003612da25760405162461bcd60e51b81526004016104df90613b9a565b6000612dad87612114565b60008181526001808b01602052604090912001549091506001600160a01b031615612e1a5760405162461bcd60e51b815260206004820152601a60248201527f436f6e7465787420416c7265616479205265676973746572656400000000000060448201526064016104df565b60008681526003890160205260409020612e3790600201826130ee565b5060008181526001808a01602052604082208881559081018054881515600160a01b026001600160a81b03199091166001600160a01b038c1617179055905b848110156130e057896002016000878784818110612e9657612e96613ad6565b9050602002810190612ea89190613bc3565b6000013581526020019081526020016000206001018054612ec890613b25565b9050600003612ee95760405162461bcd60e51b81526004016104df90613b59565b60005b868683818110612efe57612efe613ad6565b9050602002810190612f109190613bc3565b612f1e906020810190613be3565b90508110156130cd57868683818110612f3957612f39613ad6565b9050602002810190612f4b9190613bc3565b35600284016000898986818110612f6457612f64613ad6565b9050602002810190612f769190613bc3565b612f84906020810190613be3565b85818110612f9457612f94613ad6565b9050602002016020810190612fa99190613c2d565b6001600160e01b0319168152602081019190915260400160002055868683818110612fd657612fd6613ad6565b9050602002810190612fe89190613bc3565b612ff9906060810190604001613ab9565b613004576002613007565b60015b83600201600089898681811061301f5761301f613ad6565b90506020028101906130319190613bc3565b61303f906020810190613be3565b8581811061304f5761304f613ad6565b90506020020160208101906130649190613c2d565b6001600160e01b0319168152602081019190915260400160002060019081018054909160ff19909116908360028111156130a0576130a06139dc565b02179055506130ba87878481811061256e5761256e613ad6565b50806130c581613c48565b915050612eec565b50806130d881613c48565b915050612e76565b509098975050505050505050565b60006126128383613462565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f306001600160a01b03166375d0c0dc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561315b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317f9190613b81565b306001600160a01b031663a0a8e4606040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e19190613b81565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561325957506000905060036125f5565b8460ff16601b1415801561327157508460ff16601c14155b1561328257506000905060046125f5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156132d6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166132ff576000600192509250506125f5565b9660009650945050505050565b6000806001600160ff1b0383168161332960ff86901c601b613c82565b905061333787828885613222565b935093505050935093915050565b6000818152600183016020526040812054801561342e576000613369600183613c95565b855490915060009061337d90600190613c95565b90508181146133e257600086600001828154811061339d5761339d613ad6565b90600052602060002001549050808760000184815481106133c0576133c0613ad6565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806133f3576133f3613ca8565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d45565b6000915050610d45565b600082600001828154811061344f5761344f613ad6565b9060005260206000200154905092915050565b60008181526001830160205260408120546134a957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d45565b506000610d45565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126134d857600080fd5b813567ffffffffffffffff808211156134f3576134f36134b1565b604051601f8301601f19908116603f0116810190828211818310171561351b5761351b6134b1565b8160405283815286602085880101111561353457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f84011261356657600080fd5b50813567ffffffffffffffff81111561357e57600080fd5b6020830191508360208260051b850101111561210d57600080fd5b60008060008060008587036101408112156135b357600080fd5b86359550602087013567ffffffffffffffff808211156135d257600080fd5b6135de8a838b016134c7565b965060e0603f19840112156135f257600080fd5b60408901955061012089013592508083111561360d57600080fd5b505061361b88828901613554565b969995985093965092949392505050565b80356001600160e01b03198116811461364457600080fd5b919050565b60008060006060848603121561365e57600080fd5b83359250602084013591506136756040850161362c565b90509250925092565b600060a0828403121561369057600080fd5b50919050565b60008060008060008061012087890312156136b057600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156136d657600080fd5b6136e28a838b016134c7565b95506136f18a60608b0161367e565b945061010089013591508082111561370857600080fd5b5061371589828a01613554565b979a9699509497509295939492505050565b6000806040838503121561373a57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561378b5783516001600160e01b03191683529284019291840191600101613765565b50909695505050505050565b600080600080600061010086880312156137b057600080fd5b85359450602086013567ffffffffffffffff808211156137cf57600080fd5b6137db89838a016134c7565b95506137ea8960408a0161367e565b945060e088013591508082111561380057600080fd5b5061361b88828901613554565b6000806000806080858703121561382357600080fd5b843593506020850135925061383a6040860161362c565b9396929550929360600135925050565b6000806000806080858703121561386057600080fd5b84359350602085013592506040850135915061387e6060860161362c565b905092959194509250565b80356001600160a01b038116811461364457600080fd5b6000806000806000608086880312156138b857600080fd5b853594506138c860208701613889565b935060408601359250606086013567ffffffffffffffff8111156138eb57600080fd5b61361b88828901613554565b60008060006060848603121561390c57600080fd5b505081359360208301359350604090920135919050565b801515811461393157600080fd5b50565b60008060006060848603121561394957600080fd5b8335925060208401359150604084013561396281613923565b809150509250925092565b60006020828403121561397f57600080fd5b815161261281613923565b60208082526017908201527f536166654d6f64653a2043616c6c2052656a6563746564000000000000000000604082015260600190565b6000602082840312156139d357600080fd5b61261282613889565b634e487b7160e01b600052602160045260246000fd5b60208082526018908201527f496c6c6567616c20454344415341205369676e61747572650000000000000000604082015260600190565b93845260208401929092526001600160a01b031660408301526001600160e01b031916606082015260800190565b60208082526011908201527010dbdb9d195e1d08139bdd08119bdd5b99607a1b604082015260600190565b6020808252601a908201527f46756e6374696f6e53656c6563746f72204e6f7420466f756e64000000000000604082015260600190565b600060208284031215613acb57600080fd5b813561261281613923565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818103613b1b57613b1b613aec565b6001019392505050565b600181811c90821680613b3957607f821691505b60208210810361369057634e487b7160e01b600052602260045260246000fd5b6020808252600e908201526d149bdb1948139bdd08119bdd5b9960921b604082015260600190565b600060208284031215613b9357600080fd5b5051919050565b6020808252600f908201526e1499585b1b48139bdd08119bdd5b99608a1b604082015260600190565b60008235605e19833603018112613bd957600080fd5b9190910192915050565b6000808335601e19843603018112613bfa57600080fd5b83018035915067ffffffffffffffff821115613c1557600080fd5b6020019150600581901b360382131561210d57600080fd5b600060208284031215613c3f57600080fd5b6126128261362c565b600060018201613c5a57613c5a613aec565b5060010190565b600060208284031215613c7357600080fd5b81356003811061261257600080fd5b80820180821115610d4557610d45613aec565b81810381811115610d4557610d45613aec565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209ef64a2bec1bed62e8cf3b20982484930743c205798de5fc593834be6737f84664736f6c63430008110033",
  "libraries": {
    "LAccessControl": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}