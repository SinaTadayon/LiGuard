{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [],
      "name": "LIB_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIB_VERSION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ANONYMOUS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ASSET_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_SYSTEM_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainVersion",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "createRequestContext",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "version",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "realm",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "contractId",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "status",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestContext",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4[]",
              "name": "funcSelectors",
              "type": "bytes4[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestRegisterContext[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc879bb6dc6a6cb3a3505be4f5e420a39fcfb86dc8ccdf00fc7675bd6ea353e8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "1981762",
    "logsBloom": "0x
    "blockHash": "0xc801a5e6c98de3743ba8ee48a00f28dad8237bc4dbfddc28fe68a86ac28bb54f",
    "transactionHash": "0xfc879bb6dc6a6cb3a3505be4f5e420a39fcfb86dc8ccdf00fc7675bd6ea353e8",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "1981762",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3e9e2bfc780fe3e74e9adcfad5628582",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LIB_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIB_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ANONYMOUS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ASSET_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_SYSTEM_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"createRequestContext\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractId\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestContext\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSelectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestRegisterContext[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/lib/token/LTokenERC20.sol\":\"LTokenERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAccessControl {\\n  /**\\n   * @dev Function called by apps to check ACL\\n   * @return boolean indicating whether the ACL allows\\n   */\\n  function hasAccess(\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool);\\n\\n  function isLivelySystemAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyAssetManagerRole(address account) external view returns (bool);\\n\\n  function isLivelyAssetAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyCommunityDaoRole(address account) external view returns (bool);\\n\\n  function isLivelyCommunityDaoExecutorRole(address account) external view returns (bool);\\n\\n  function isLivelyGeneralGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyDaoGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyAssetGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyGeneralRealm(bytes32 context) external view returns (bool);\\n\\n  function isLivelyAssetRealm(bytes32 context) external view returns (bool);\\n\\n  function isContextSafeMode(bytes32 context) external view returns (bool);\\n\\n  function isContextUpgradable(bytes32 context) external view returns (bool);\\n\\n  function isContextExists(bytes32 context) external view returns (bool);\\n\\n  function isContextFunctionExists(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextFunctionEnabled(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextEnabled(bytes32 context) external view returns (bool);\\n\\n  function isGroupExists(bytes32 group) external view returns (bool);\\n\\n  function isGroupEnabled(bytes32 group) external view returns (bool);\\n\\n  function isRoleExists(bytes32 role) external view returns (bool);\\n\\n  function isRoleEnabled(bytes32 role) external view returns (bool);\\n\\n  function isRealmExists(bytes32 realm) external view returns (bool);\\n\\n  function isRealmEnabled(bytes32 realm) external view returns (bool); \\n\\n  function isRealmUpgradable(bytes32 realm) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x625c97e65b5c357c09f26f92a6c8f7e8043aeb191323a71fa6aed0670d8d1dca\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool status;\\n  }\\n\\n   struct RequestPredictContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    bytes32 salt;\\n    address subject;\\n    address deployer;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, bytes32 realm);\\n\\n  event PredictContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, address deployer, address subject, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed contractId, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function registerPredictContext(\\n    bytes memory signature,\\n    RequestPredictContext calldata rpc,\\n    RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0x4811f66509db07ea5b29faf433bf0209e8fd13a822ec371a0da2178289fce71b\",\"license\":\"MIT\"},\"src/contracts/lib/LCounters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary LCounters {\\n  struct Counter {\\n    // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n    // this feature: see https://github.com/ethereum/solidity/issues/4637\\n    uint256 _value; // default: 0\\n  }\\n\\n  function current(Counter storage counter) internal view returns (uint256) {\\n    return counter._value;\\n  }\\n\\n  function increment(Counter storage counter) internal {\\n    unchecked {\\n      counter._value += 1;\\n    }\\n  }\\n\\n  function decrement(Counter storage counter) internal {\\n    uint256 value = counter._value;\\n    require(value > 0, \\\"Counter: decrement overflow\\\");\\n    unchecked {\\n      counter._value = value - 1;\\n    }\\n  }\\n\\n  function reset(Counter storage counter) internal {\\n    counter._value = 0;\\n  }\\n}\\n\",\"keccak256\":\"0xc89d20e05193b83f08abb609ce11383eeda906e9a860496c22d633be30dcf1e0\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xeb49909b77ba631382c48e9fead2e49f8b4c72f3325f7685d4bddfce32d7528b\",\"license\":\"MIT\"},\"src/contracts/lib/token/LTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../token/lively/IERC20.sol\\\";\\nimport \\\"../../token/lively/IERC20Extra.sol\\\";\\nimport \\\"../../token/lively/IERC20Pause.sol\\\";\\nimport \\\"../../token/lively/IERC20Lock.sol\\\";\\nimport \\\"../../token/lively/LivelyStorage.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/IAccessControl.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\n\\nlibrary LTokenERC20 {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LTokenERC20\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant LIVELY_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_SYSTEM_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_SYSTEM_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_ANONYMOUS_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ANONYMOUS_ROLE\\\"));\\n  bytes32 public constant LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\\\"));\\n  bytes32 public constant LIVELY_ASSET_MANAGER_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_MANAGER_ROLE\\\"));\\n\\n  function createRequestContext(\\n    bytes32 domainName,\\n    bytes32 domainVersion,\\n    bytes32 realm\\n  )\\n    external\\n    view\\n    returns (IContextManagement.RequestContext memory, IContextManagement.RequestRegisterContext[] memory)\\n  {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](5);\\n    rrc[0].role = LIVELY_ANONYMOUS_ROLE;\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](10);\\n    rrc[0].funcSelectors[0] = IERC20.transfer.selector;\\n    rrc[0].funcSelectors[1] = IERC20.transferFrom.selector;\\n    rrc[0].funcSelectors[2] = IERC20.approve.selector;\\n    rrc[0].funcSelectors[3] = IERC20Extra.batchTransfer.selector;\\n    rrc[0].funcSelectors[4] = IERC20Extra.batchTransferFrom.selector;\\n    rrc[0].funcSelectors[5] = IERC20Extra.permit.selector;\\n    rrc[0].funcSelectors[6] = IERC20Extra.increaseAllowance.selector;\\n    rrc[0].funcSelectors[7] = IERC20Extra.decreaseAllowance.selector;\\n    rrc[0].funcSelectors[8] = IERC20Lock.claimToken.selector;\\n    rrc[0].funcSelectors[9] = IERC20Lock.batchClaimToken.selector;\\n\\n    rrc[1].role = LIVELY_ADMIN_ROLE;\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](12);\\n    rrc[1].funcSelectors[0] = IProxy.setUpgradeStatus.selector;\\n    rrc[1].funcSelectors[1] = IProxy.setSafeMode.selector;\\n    rrc[1].funcSelectors[2] = IERC20Extra.burn.selector;\\n    rrc[1].funcSelectors[3] = IERC20Extra.mint.selector;\\n    rrc[1].funcSelectors[4] = IERC20Extra.updateTaxRate.selector;\\n    rrc[1].funcSelectors[5] = IERC20Extra.updateTaxWhitelist.selector;   \\n    rrc[1].funcSelectors[6] = IERC20Extra.batchUpdateTaxWhitelist.selector;\\n    rrc[1].funcSelectors[7] = IERC20Pause.pause.selector;\\n    rrc[1].funcSelectors[8] = IERC20Pause.unpause.selector;\\n    rrc[1].funcSelectors[9] = IERC20Pause.pauseAll.selector;\\n    rrc[1].funcSelectors[10] = IERC20Pause.unpauseAll.selector;\\n    rrc[1].funcSelectors[11] = bytes4(keccak256(\\\"withdrawBalance(address)\\\"));\\n\\n    rrc[2].role = LIVELY_SYSTEM_ADMIN_ROLE;\\n    rrc[2].isEnabled = true;\\n    rrc[2].funcSelectors = new bytes4[](2);\\n    rrc[2].funcSelectors[0] = IProxy.setLocalAdmin.selector;\\n    rrc[2].funcSelectors[1] = IProxy.upgradeTo.selector;\\n\\n    rrc[3].role = LIVELY_ASSET_MANAGER_ROLE;\\n    rrc[3].isEnabled = true;\\n    rrc[3].funcSelectors = new bytes4[](3);\\n    rrc[3].funcSelectors[0] = IERC20Lock.lockToken.selector;  \\n    rrc[3].funcSelectors[1] = IERC20Lock.batchLockToken.selector;  \\n    rrc[3].funcSelectors[2] = bytes4(keccak256(\\\"tokensDistribution(address,address[7])\\\"));\\n    \\n    rrc[4].role = LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE;\\n    rrc[4].isEnabled = true;\\n    rrc[4].funcSelectors = new bytes4[](2);\\n    rrc[4].funcSelectors[0] = IERC20Lock.unlockToken.selector;\\n    rrc[4].funcSelectors[1] = IERC20Lock.batchUnlockToken.selector;\\n\\n    IContextManagement.RequestContext memory rc = IContextManagement.RequestContext({\\n      name: domainName,\\n      version: domainVersion,\\n      realm: realm,\\n      contractId: address(this),\\n      status: true\\n    });\\n\\n    return (rc, rrc);\\n  }\\n\\n  function lockToken(LivelyStorage.DataCollection storage data, IERC20Lock.LockTokenRequest memory lockRequest) external returns(bytes32) {\\n    require(lockRequest.source != address(0), \\\"Invalid Source Address\\\");\\n    require(lockRequest.dest != address(0), \\\"Invalid Destination Address\\\");\\n    require(lockRequest.source != lockRequest.dest, \\\"Illegal Destination Address\\\");\\n    require(lockRequest.timestamp > block.timestamp + 1 days, \\\"Illegal Timestamp\\\");\\n    require(lockRequest.amount > 0, \\\"Illegal amount\\\");\\n\\n    bytes32 lockId = keccak256(abi.encodePacked(lockRequest.source, lockRequest.dest, lockRequest.timestamp, lockRequest.amount));\\n    require(data.locks[lockRequest.dest][lockId].source == address(0), \\\"LockId Already Exists\\\");\\n    \\n    uint256 srcBalance = data.accounts[lockRequest.source].balance;\\n    require(srcBalance >= lockRequest.amount, \\\"Insufficient Account Balance\\\");\\n    unchecked {\\n      data.accounts[lockRequest.source].balance = srcBalance - lockRequest.amount;\\n    }\\n    data.accounts[lockRequest.dest].lockBalance += lockRequest.amount;\\n\\n    LivelyStorage.AssetLock storage assetLock = data.locks[lockRequest.dest][lockId];\\n    assetLock.lockedAt = uint128(block.timestamp);\\n    assetLock.claimedAt = uint128(lockRequest.timestamp);\\n    assetLock.source = lockRequest.source;\\n    assetLock.amount = lockRequest.amount;\\n    assetLock.status = LivelyStorage.LockState.LOCKED;\\n    return lockId;\\n  }\\n\\n  function claimToken(LivelyStorage.DataCollection storage data, bytes32 lockId) external returns(uint256) {\\n    require(lockId != bytes32(0), \\\"Invalid LockId\\\");\\n    require(data.locks[msg.sender][lockId].source != address(0), \\\"LockId Not Found\\\");\\n    require(data.locks[msg.sender][lockId].claimedAt < uint128(block.timestamp), \\\"Illegal Claim Lock\\\");\\n\\n    uint256 lockAmount = data.locks[msg.sender][lockId].amount;\\n    uint256 lockBalance = data.accounts[msg.sender].lockBalance;\\n    require(lockBalance >= lockAmount, \\\"Insufficient Account Lock Balance\\\");\\n    unchecked {\\n      data.accounts[msg.sender].lockBalance = lockBalance - lockAmount;\\n    }\\n    data.accounts[msg.sender].balance += lockAmount;\\n    data.locks[msg.sender][lockId].status = LivelyStorage.LockState.CLAIMED;\\n    return lockAmount;\\n  }  \\n\\n  function unlockToken(LivelyStorage.DataCollection storage data, IERC20Lock.UnLockTokenRequest calldata unlockRequest) external returns (address, uint256) {\\n    require(unlockRequest.lockId != bytes32(0), \\\"Invalid LockId\\\");\\n    require(data.locks[unlockRequest.account][unlockRequest.lockId].source != address(0), \\\"LockId Not Found\\\");\\n    require(data.locks[unlockRequest.account][unlockRequest.lockId].status == LivelyStorage.LockState.LOCKED, \\\"Invalid Lock State\\\");\\n\\n    uint256 lockAmount = data.locks[unlockRequest.account][unlockRequest.lockId].amount;\\n    uint256 lockBalance = data.accounts[unlockRequest.account].lockBalance;\\n    address srcAccount = data.locks[unlockRequest.account][unlockRequest.lockId].source;    \\n    require(lockBalance >= lockAmount, \\\"Insufficient Account Lock Balance\\\");\\n    unchecked {\\n      data.accounts[unlockRequest.account].lockBalance = lockBalance - lockAmount;\\n    }\\n    data.accounts[srcAccount].balance += lockAmount;\\n    data.locks[unlockRequest.account][unlockRequest.lockId].status = LivelyStorage.LockState.UNLOCKED;\\n    return (srcAccount,lockAmount);\\n  }\\n\\n  function transfer(LivelyStorage.DataCollection storage data, address src, address dest, uint256 amount) external {\\n    require(src != address(0), \\\"Invalid Source Address\\\");\\n    require(dest != address(0), \\\"Invalid Destination Address\\\");\\n    require(src != dest, \\\"Illegal Self Transfer\\\");\\n    require(amount > 0, \\\"Invalid Transfer Amount\\\");\\n\\n    uint256 srcBalance = data.accounts[src].balance;\\n    require(srcBalance >= amount, \\\"Insufficient Account Balance\\\");\\n    unchecked {\\n      data.accounts[src].balance = srcBalance - amount;\\n    }\\n    data.accounts[dest].balance += amount;\\n  }\\n\\n  function updateTaxWhitelist(LivelyStorage.DataCollection storage data, address account, bool isDeleted) external returns (bool){\\n    require(account != address(0), \\\"Invalid Account Address\\\");\\n    if (isDeleted) {\\n      require(data.taxWhitelist.contains(account), \\\"Account Not Found\\\");\\n      data.taxWhitelist.remove(account);\\n    } else {\\n      require(!data.taxWhitelist.contains(account), \\\"Account Already Exists\\\");\\n      data.taxWhitelist.add(account);\\n    }\\n\\n    return true;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xce5294b7aa8818d9877db42475f6b1bcf84cc6d4f3d0f8a201ac5dd7bb7d14ae\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n */\\n\\nabstract contract BaseUUPSStorage {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 internal constant _TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  \\n  address internal immutable __self = address(this);\\n\\n  bytes32 internal _domainName;\\n  bytes32 internal _domainVersion;\\n  bytes32 internal _domainRealm;\\n  address internal _accessControlManager;\\n  bool internal _isSafeMode;\\n  bool internal _isUpgradable;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x086334b0668244b8ff2ef60dd770da77ecfd05f705e7c2251c60553c4651bfad\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBaseProxy {\\n  event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x719d13ceb21e3fda10fc0ba5fb1b167b8736919d6c6a99f6268667acb8b4d062\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event LocalAdminChanged(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event SafeModeChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  event UpgradeStatusChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeMode(bool status) external returns (bool);\\n\\n  function setUpgradeStatus(bool status) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function contractName() external view returns (bytes32);\\n\\n  function contractVersion() external view returns (bytes32);\\n\\n  function contractRealm() external view returns (bytes32);\\n\\n  function contractContext() external view returns (bytes32);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function isSafeMode() external view returns (bool);\\n\\n  function isUpgradable() external view returns (bool);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n\\n}\\n\",\"keccak256\":\"0x93bf3ccb33a8616fba3379b096e79e88ae3249882af81d1dc808eec6688800a7\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4eb0307590f721f5944b1237ca63905ee5d0a495b0ba26f18a61a25568259ca0\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Extra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERC20Extra {\\n  struct BatchTransferRequest {\\n    address to;\\n    uint256 amount;\\n  }\\n\\n  struct BatchTransferFromRequest {\\n    address from;\\n    address to;\\n    uint256 amount;\\n  }\\n\\n  struct BatchUpdateTaxWhitelistRequest {\\n    address account;\\n    bool isDeleted;\\n  }\\n\\n  event ApprovalIncreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event ApprovalDecreased(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event TransferFrom(address indexed sender, address indexed from, address indexed to, uint256 amount);\\n\\n  event BatchTransfer(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTransferFrom(address indexed sender, uint256 totalAmount);\\n\\n  event TaxRateUpdated(address indexed sender, uint256 rate);\\n\\n  event TaxWhitelistUpdated(address indexed sender, address indexed account, bool isDeleted);\\n\\n  event Burn(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  event Mint(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  function increaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function decreaseAllowance(address spender, uint256 amount) external returns (uint256);\\n\\n  function burn(address account, uint256 amount) external returns (uint256);\\n\\n  function mint(address account, uint256 amount) external returns (uint256);\\n\\n  function batchTransfer(BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function batchTransferFrom(BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function updateTaxRate(uint256 taxRate) external returns (bool);\\n\\n  function updateTaxWhitelist(address account, bool isDeleted) external returns (bool);\\n\\n  function batchUpdateTaxWhitelist(BatchUpdateTaxWhitelistRequest[] calldata request) external;\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    bytes calldata signature\\n  ) external returns (bool);\\n\\n  function taxRate() external view returns (uint256);\\n\\n  function taxTreasury() external view returns (address);\\n\\n  function taxWhitelist() external view returns (address[] memory);\\n\\n  function nonce(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbb59e24c40eb21a277d7af836ce202f1a61c5ffc0223f15dbc73a89565b72f2c\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Lock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERC20Lock {\\n\\n  struct LockTokenRequest {\\n    address source;\\n    address dest;\\n    uint256 timestamp;\\n    uint256 amount;\\n  }\\n\\n  struct UnLockTokenRequest {\\n    bytes32 lockId;\\n    address account;\\n    string reason;\\n  }\\n\\n  event TokenLocked(bytes32 indexed id, address indexed sender, address indexed src, address account, uint256 timestamp, uint256 amount);\\n\\n  event TokenClaimed(bytes32 indexed id, address indexed sender, address indexed src, uint256 amount);\\n\\n  event TokenUnlocked(bytes32 indexed id, address indexed sender, address indexed account, address dest, uint256 amount, string reason);\\n\\n  event BatchTokenClaimed(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTokenUnlocked(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTokenLocked(address indexed sender, uint256 totalAmount);\\n\\n  function lockToken(LockTokenRequest calldata lockRequest) external returns (bytes32);\\n\\n  function batchLockToken(LockTokenRequest[] calldata lockRequest) external returns (bytes32[] memory);\\n\\n  function unlockToken(UnLockTokenRequest calldata unlockRequest) external returns (uint256);\\n\\n  function batchUnlockToken(UnLockTokenRequest[] calldata unlockRequest) external returns (uint256);\\n\\n  function claimToken(bytes32 lockId) external returns (uint256);\\n\\n  function batchClaimToken(bytes32[] calldata lockIds) external returns (uint256);\\n\\n  function lockInfo(bytes32 lockId, address account) external view returns (uint256, uint128, uint128, address, uint8);\\n\\n  function totalBalanceOf(address account) external view returns (uint256);\\n\\n  function lockBalanceOf(address account) external view returns (uint256);\\n\\n}\",\"keccak256\":\"0x2764455aaa3a143ac77bb473819c6bfdecd278f40a6bee8492a91d59a3e0f051\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Pause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERC20Pause {\\n  event Paused(address indexed sender, address indexed account);\\n\\n  event Unpaused(address indexed sender, address indexed account);\\n\\n  event PausedAll(address indexed sender);\\n\\n  event UnpausedAll(address indexed sender);\\n\\n  function pause(address account) external;\\n\\n  function unpause(address account) external;\\n\\n  function pauseAll() external;\\n\\n  function unpauseAll() external;\\n\\n  function isPaused(address account) external view returns (bool);\\n\\n  function isPausedAll() external view returns (bool);\\n\\n  function pausedAccounts() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xd8cf18f272186837f1f2b1cbec2155d9030689153357e839f271e3ae293df42d\",\"license\":\"MIT\"},\"src/contracts/token/lively/LivelyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../proxy/BaseUUPSStorage.sol\\\";\\nimport \\\"../../lib/LCounters.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\n\\nabstract contract LivelyStorage is BaseUUPSStorage {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LCounters for LCounters.Counter;\\n\\n  enum LockState {\\n    NONE,\\n    LOCKED,\\n    CLAIMED,\\n    UNLOCKED\\n  }\\n\\n  struct AccountInfo {\\n    uint256 balance;\\n    uint256 lockBalance;\\n    LCounters.Counter nonce;\\n  }\\n\\n  struct AssetLock {\\n    uint256 amount;\\n    uint128 lockedAt;\\n    uint128 claimedAt;\\n    address source;\\n    LockState status;    \\n  }\\n\\n  struct DataCollection {\\n    mapping(address => AccountInfo) accounts;\\n    mapping(address => mapping(address => uint256)) allowances;\\n    mapping(address => mapping(bytes32 => AssetLock)) locks;\\n    LEnumerableSet.AddressSet pausedList;\\n    LEnumerableSet.AddressSet taxWhitelist;\\n  }\\n\\n  bytes32 internal constant _PERMIT_TYPEHASH =\\n    keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n  string internal _name;\\n  string internal _symbol;\\n  uint256 internal _totalSupply;\\n  uint256 internal _taxRate;\\n  address internal _taxTreasury;\\n  bool internal _isPaused;\\n  bool internal _isTokenDistributed;\\n\\n  DataCollection internal _data;\\n\\n}\\n\",\"keccak256\":\"0x2e23f7fb0acf83d7eb6b30362a05869b67649ead4092733a5fa888c79d80caec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6122e061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100d95760003560e01c80639bb20d5111610096578063bec9475111610070578063bec94751146101ac578063d8b31999146101b4578063f1c3afef146101bc578063f7d6b5af146101fb57600080fd5b80639bb20d5114610194578063a61967571461019c578063b899699c146101a457600080fd5b806310e1fc40146100de5780632466209b146101115780633de90db3146101195780634572e0c11461013b5780635632ffd81461016b57806397ca328d14610173575b600080fd5b8180156100ea57600080fd5b506100fe6100f9366004611ee8565b61021b565b6040519081526020015b60405180910390f35b6100fe6105ee565b81801561012557600080fd5b50610139610134366004611f85565b61061c565b005b81801561014757600080fd5b5061015b610156366004611fc9565b610816565b6040519015158152602001610108565b6100fe610940565b61018661018136600461200e565b61096c565b60405161010892919061203a565b6100fe6117a8565b6100fe6117d1565b6100fe6117fe565b6100fe61180d565b6100fe61182c565b8180156101c857600080fd5b506101dc6101d736600461212c565b611851565b604080516001600160a01b039093168352602083019190915201610108565b81801561020757600080fd5b506100fe61021636600461217a565b611b6d565b80516000906001600160a01b03166102735760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420536f75726365204164647265737360501b60448201526064015b60405180910390fd5b60208201516001600160a01b03166102cd5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642044657374696e6174696f6e20416464726573730000000000604482015260640161026a565b81602001516001600160a01b031682600001516001600160a01b0316036103365760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c2044657374696e6174696f6e20416464726573730000000000604482015260640161026a565b61034342620151806121b2565b8260400151116103895760405162461bcd60e51b81526020600482015260116024820152700496c6c6567616c2054696d657374616d7607c1b604482015260640161026a565b60008260600151116103ce5760405162461bcd60e51b815260206004820152600e60248201526d125b1b1959d85b08185b5bdd5b9d60921b604482015260640161026a565b600082600001518360200151846040015185606001516040516020016104269493929190606094851b6bffffffffffffffffffffffff1990811682529390941b90921660148401526028830152604882015260680190565b60408051601f198184030181529181528151602092830120858301516001600160a01b0390811660009081526002808a018652848220848352909552929092209092015491925016156104b35760405162461bcd60e51b81526020600482015260156024820152744c6f636b496420416c72656164792045786973747360581b604482015260640161026a565b82516001600160a01b031660009081526020859052604090205460608401518110156105215760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74204163636f756e742042616c616e636500000000604482015260640161026a565b60608401805185516001600160a01b039081166000908152602089815260408083209487039094559351938801519091168152908120600101805490919061056a9084906121b2565b9091555050506020838101516001600160a01b03908116600090815260028781018452604080832086845290945290839020928601516001600160801b03908116600160801b02429190911617600184015585519083018054606088015190945591166001600160a81b031990921691909117600160a01b17905590505b92915050565b604051640312e302e360dc1b60208201526025015b6040516020818303038152906040528051906020012081565b6001600160a01b03831661066b5760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420536f75726365204164647265737360501b604482015260640161026a565b6001600160a01b0382166106c15760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642044657374696e6174696f6e20416464726573730000000000604482015260640161026a565b816001600160a01b0316836001600160a01b03160361071a5760405162461bcd60e51b815260206004820152601560248201527424b63632b3b0b61029b2b633102a3930b739b332b960591b604482015260640161026a565b6000811161076a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964205472616e7366657220416d6f756e74000000000000000000604482015260640161026a565b6001600160a01b038316600090815260208590526040902054818110156107d35760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74204163636f756e742042616c616e636500000000604482015260640161026a565b6001600160a01b0380851660009081526020879052604080822085850390559185168152908120805484929061080a9084906121b2565b90915550505050505050565b60006001600160a01b03831661086e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204163636f756e742041646472657373000000000000000000604482015260640161026a565b81156108d4576108816005850184611d3b565b6108c15760405162461bcd60e51b81526020600482015260116024820152701058d8dbdd5b9d08139bdd08119bdd5b99607a1b604482015260640161026a565b6108ce6005850184611d60565b50610936565b6108e16005850184611d3b565b156109275760405162461bcd60e51b81526020600482015260166024820152754163636f756e7420416c72656164792045786973747360501b604482015260640161026a565b6109346005850184611d75565b505b5060019392505050565b604051774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b6020820152603801610603565b6040805160a0810182526000808252602082018190528183018190526060808301829052608083018290528351600580825260c082019095529293909290816020015b604080516060808201835260008083526020830191909152918101919091528152602001906001900390816109af57905050604051744c4956454c595f414e4f4e594d4f55535f524f4c4560581b60208201529091506035016040516020818303038152906040528051906020012081600081518110610a3157610a316121db565b60200260200101516000018181525050600181600081518110610a5657610a566121db565b6020908102919091018101519115156040928301528151600a808252610160820190935291908201610140803683370190505081600081518110610a9c57610a9c6121db565b60200260200101516020018190525063a9059cbb60e01b81600081518110610ac657610ac66121db565b602002602001015160200151600081518110610ae457610ae46121db565b6001600160e01b03199092166020928302919091019091015280516323b872dd60e01b908290600090610b1957610b196121db565b602002602001015160200151600181518110610b3757610b376121db565b6001600160e01b031990921660209283029190910190910152805163095ea7b360e01b908290600090610b6c57610b6c6121db565b602002602001015160200151600281518110610b8a57610b8a6121db565b6001600160e01b0319909216602092830291909101909101528051631f54aa5560e31b908290600090610bbf57610bbf6121db565b602002602001015160200151600381518110610bdd57610bdd6121db565b6001600160e01b031990921660209283029190910190910152805163038d251d60e31b908290600090610c1257610c126121db565b602002602001015160200151600481518110610c3057610c306121db565b6001600160e01b0319909216602092830291909101909101528051639fd5a6cf60e01b908290600090610c6557610c656121db565b602002602001015160200151600581518110610c8357610c836121db565b6001600160e01b0319909216602092830291909101909101528051633950935160e01b908290600090610cb857610cb86121db565b602002602001015160200151600681518110610cd657610cd66121db565b6001600160e01b031990921660209283029190910190910152805163a457c2d760e01b908290600090610d0b57610d0b6121db565b602002602001015160200151600781518110610d2957610d296121db565b6001600160e01b031990921660209283029190910190910152805163a5bfa9a960e01b908290600090610d5e57610d5e6121db565b602002602001015160200151600881518110610d7c57610d7c6121db565b6001600160e01b031990921660209283029190910190910152805163028ab43960e31b908290600090610db157610db16121db565b602002602001015160200151600981518110610dcf57610dcf6121db565b6001600160e01b0319909216602092830291909101820152604051610e0c9101704c4956454c595f41444d494e5f524f4c4560781b815260110190565b6040516020818303038152906040528051906020012081600181518110610e3557610e356121db565b60200260200101516000018181525050600181600181518110610e5a57610e5a6121db565b6020908102919091018101519115156040928301528151600c8082526101a0820190935291908201610180803683370190505081600181518110610ea057610ea06121db565b6020026020010151602001819052506348e6be1c60e01b81600181518110610eca57610eca6121db565b602002602001015160200151600081518110610ee857610ee86121db565b6001600160e01b031990921660209283029190910190910152805163225bf2f960e11b9082906001908110610f1f57610f1f6121db565b602002602001015160200151600181518110610f3d57610f3d6121db565b6001600160e01b0319909216602092830291909101909101528051632770a7eb60e21b9082906001908110610f7457610f746121db565b602002602001015160200151600281518110610f9257610f926121db565b6001600160e01b03199092166020928302919091019091015280516340c10f1960e01b9082906001908110610fc957610fc96121db565b602002602001015160200151600381518110610fe757610fe76121db565b6001600160e01b0319909216602092830291909101909101528051630bfee64760e11b908290600190811061101e5761101e6121db565b60200260200101516020015160048151811061103c5761103c6121db565b6001600160e01b03199092166020928302919091019091015280516311a98d3560e21b9082906001908110611073576110736121db565b602002602001015160200151600581518110611091576110916121db565b6001600160e01b0319909216602092830291909101909101528051637d35f35560e01b90829060019081106110c8576110c86121db565b6020026020010151602001516006815181106110e6576110e66121db565b6001600160e01b03199092166020928302919091019091015280516376a67a5160e01b908290600190811061111d5761111d6121db565b60200260200101516020015160078151811061113b5761113b6121db565b6001600160e01b03199092166020928302919091019091015280516357b001f960e01b9082906001908110611172576111726121db565b602002602001015160200151600881518110611190576111906121db565b6001600160e01b031990921660209283029190910190910152805163595c6a6760e01b90829060019081106111c7576111c76121db565b6020026020010151602001516009815181106111e5576111e56121db565b6001600160e01b0319909216602092830291909101909101528051638a2ddd0360e01b908290600190811061121c5761121c6121db565b602002602001015160200151600a8151811061123a5761123a6121db565b60200260200101906001600160e01b03191690816001600160e01b031916815250507f756af45f4ce05d832bee0c171992c529ad6d3ca8e13303d78feace2f8fd7faf281600181518110611290576112906121db565b602002602001015160200151600b815181106112ae576112ae6121db565b6001600160e01b03199092166020928302919091018201526040516112f29101774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b815260180190565b604051602081830303815290604052805190602001208160028151811061131b5761131b6121db565b60200260200101516000018181525050600181600281518110611340576113406121db565b60209081029190910101519015156040918201528051600280825260608201909252908160200160208202803683370190505081600281518110611386576113866121db565b60200260200101516020018190525063d9dc1f1960e01b816002815181106113b0576113b06121db565b6020026020010151602001516000815181106113ce576113ce6121db565b6001600160e01b0319909216602092830291909101909101528051637147855d60e01b9082906002908110611405576114056121db565b602002602001015160200151600181518110611423576114236121db565b6001600160e01b03199092166020928302919091018201526040516114689101784c4956454c595f41535345545f4d414e414745525f524f4c4560381b815260190190565b6040516020818303038152906040528051906020012081600381518110611491576114916121db565b602002602001015160000181815250506001816003815181106114b6576114b66121db565b60209081029190910181015191151560409283015281516003808252608082019093529190820160608036833701905050816003815181106114fa576114fa6121db565b602002602001015160200181905250636b83949260e01b81600381518110611524576115246121db565b602002602001015160200151600081518110611542576115426121db565b6001600160e01b0319909216602092830291909101909101528051639a7e187360e01b9082906003908110611579576115796121db565b602002602001015160200151600181518110611597576115976121db565b60200260200101906001600160e01b03191690816001600160e01b031916815250507fec4ac1f7a145493f4b4d677b3706ded0b0efff6bc9b9de9ab9d367b741bae880816003815181106115ed576115ed6121db565b60200260200101516020015160028151811061160b5761160b6121db565b6001600160e01b031990921660209283029190910182015260405161163091016121f1565b6040516020818303038152906040528051906020012081600481518110611659576116596121db565b6020026020010151600001818152505060018160048151811061167e5761167e6121db565b602090810291909101015190151560409182015280516002808252606082019092529081602001602082028036833701905050816004815181106116c4576116c46121db565b60200260200101516020018190525063fdb92ec460e01b816004815181106116ee576116ee6121db565b60200260200101516020015160008151811061170c5761170c6121db565b6001600160e01b0319909216602092830291909101909101528051634daf9ab760e11b9082906004908110611743576117436121db565b602002602001015160200151600181518110611761576117616121db565b6001600160e01b0319929092166020928302919091018201526040805160a08101825297885290870195909552938501929092525050306060830152600160808301529091565b604051744c4956454c595f414e4f4e594d4f55535f524f4c4560581b6020820152603501610603565b604051784c4956454c595f41535345545f4d414e414745525f524f4c4560381b6020820152603901610603565b604051602001610603906121f1565b6040516a04c546f6b656e45524332360ac1b6020820152602b01610603565b604051704c4956454c595f41444d494e5f524f4c4560781b6020820152603101610603565b60008082356118935760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908131bd8dad25960921b604482015260640161026a565b600060028501816118aa6040870160208801612225565b6001600160a01b039081168252602080830193909352604091820160009081208835825290935291206002015416036119185760405162461bcd60e51b815260206004820152601060248201526f131bd8dad25908139bdd08119bdd5b9960821b604482015260640161026a565b60016002850160006119306040870160208801612225565b6001600160a01b031681526020808201929092526040908101600090812087358252909252902060020154600160a01b900460ff166003811115611976576119766121c5565b146119b85760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204c6f636b20537461746560701b604482015260640161026a565b600060028501816119cf6040870160208801612225565b6001600160a01b03168152602080820192909252604090810160009081208735825283528181205493509187918391611a0c918901908901612225565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015490506000866002016000876020016020810190611a4d9190612225565b6001600160a01b039081168252602080830193909352604091820160009081208a35825290935291206002015416905082821015611a9d5760405162461bcd60e51b815260040161026a90612240565b828203876000611ab360408a0160208b01612225565b6001600160a01b0390811682526020808301939093526040918201600090812060010194909455841683529089905281208054859290611af49084906121b2565b9091555060039050600288016000611b1260408a0160208b01612225565b6001600160a01b03168152602080820192909252604090810160009081208a3582529092529020600201805460ff60a01b1916600160a01b836003811115611b5c57611b5c6121c5565b021790555096919550909350505050565b600081611bad5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908131bd8dad25960921b604482015260640161026a565b33600090815260028085016020908152604080842086855290915290912001546001600160a01b0316611c155760405162461bcd60e51b815260206004820152601060248201526f131bd8dad25908139bdd08119bdd5b9960821b604482015260640161026a565b33600090815260028401602090815260408083208584529091529020600101546001600160801b03428116600160801b9092041610611c8b5760405162461bcd60e51b8152602060048201526012602482015271496c6c6567616c20436c61696d204c6f636b60701b604482015260640161026a565b33600081815260028501602090815260408083208684528252808320549383529086905290206001015481811015611cd55760405162461bcd60e51b815260040161026a90612240565b33600090815260208690526040812083830360018201558054849290611cfc9084906121b2565b909155505033600090815260029586016020908152604080832096835295905293909320909301805460ff60a01b1916600160a11b1790555090919050565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000611d59836001600160a01b038416611d8a565b6000611d59836001600160a01b038416611e7d565b60008181526001830160205260408120548015611e73576000611dae600183612281565b8554909150600090611dc290600190612281565b9050818114611e27576000866000018281548110611de257611de26121db565b9060005260206000200154905080876000018481548110611e0557611e056121db565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e3857611e38612294565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105e8565b60009150506105e8565b6000818152600183016020526040812054611ec4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105e8565b5060006105e8565b80356001600160a01b0381168114611ee357600080fd5b919050565b60008082840360a0811215611efc57600080fd5b833592506080601f1982011215611f1257600080fd5b506040516080810181811067ffffffffffffffff82111715611f4457634e487b7160e01b600052604160045260246000fd5b604052611f5360208501611ecc565b8152611f6160408501611ecc565b60208201526060840135604082015260808401356060820152809150509250929050565b60008060008060808587031215611f9b57600080fd5b84359350611fab60208601611ecc565b9250611fb960408601611ecc565b9396929550929360600135925050565b600080600060608486031215611fde57600080fd5b83359250611fee60208501611ecc565b91506040840135801515811461200357600080fd5b809150509250925092565b60008060006060848603121561202357600080fd5b505081359360208301359350604090920135919050565b600060c08201845183526020808601518185015260408087015181860152606060018060a01b0381890151168187015260808089015115158188015260c060a088015284885180875260e08901915060e08160051b8a01019650858a016000805b8381101561211a578b8a0360df19018552825180518b52898101518a8c018990528051898d01819052908b01908490898e01905b808310156120f95783516001600160e01b0319168252928d019260019290920191908d01906120cf565b50928b015115159c8b019c909c52509950938801939188019160010161209b565b50979c9b505050505050505050505050565b6000806040838503121561213f57600080fd5b82359150602083013567ffffffffffffffff81111561215d57600080fd5b83016060818603121561216f57600080fd5b809150509250929050565b6000806040838503121561218d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808201808211156105e8576105e861219c565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b7f4c4956454c595f434f4d4d554e4954595f44414f5f4558454355544f525f524f8152614c4560f01b602082015260220190565b60006020828403121561223757600080fd5b611d5982611ecc565b60208082526021908201527f496e73756666696369656e74204163636f756e74204c6f636b2042616c616e636040820152606560f81b606082015260800190565b818103818111156105e8576105e861219c565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f47e56a67d3a05e920ac94e3a735529a7383e84ae9db9867deba171d8b31f67a64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100d95760003560e01c80639bb20d5111610096578063bec9475111610070578063bec94751146101ac578063d8b31999146101b4578063f1c3afef146101bc578063f7d6b5af146101fb57600080fd5b80639bb20d5114610194578063a61967571461019c578063b899699c146101a457600080fd5b806310e1fc40146100de5780632466209b146101115780633de90db3146101195780634572e0c11461013b5780635632ffd81461016b57806397ca328d14610173575b600080fd5b8180156100ea57600080fd5b506100fe6100f9366004611ee8565b61021b565b6040519081526020015b60405180910390f35b6100fe6105ee565b81801561012557600080fd5b50610139610134366004611f85565b61061c565b005b81801561014757600080fd5b5061015b610156366004611fc9565b610816565b6040519015158152602001610108565b6100fe610940565b61018661018136600461200e565b61096c565b60405161010892919061203a565b6100fe6117a8565b6100fe6117d1565b6100fe6117fe565b6100fe61180d565b6100fe61182c565b8180156101c857600080fd5b506101dc6101d736600461212c565b611851565b604080516001600160a01b039093168352602083019190915201610108565b81801561020757600080fd5b506100fe61021636600461217a565b611b6d565b80516000906001600160a01b03166102735760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420536f75726365204164647265737360501b60448201526064015b60405180910390fd5b60208201516001600160a01b03166102cd5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642044657374696e6174696f6e20416464726573730000000000604482015260640161026a565b81602001516001600160a01b031682600001516001600160a01b0316036103365760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c2044657374696e6174696f6e20416464726573730000000000604482015260640161026a565b61034342620151806121b2565b8260400151116103895760405162461bcd60e51b81526020600482015260116024820152700496c6c6567616c2054696d657374616d7607c1b604482015260640161026a565b60008260600151116103ce5760405162461bcd60e51b815260206004820152600e60248201526d125b1b1959d85b08185b5bdd5b9d60921b604482015260640161026a565b600082600001518360200151846040015185606001516040516020016104269493929190606094851b6bffffffffffffffffffffffff1990811682529390941b90921660148401526028830152604882015260680190565b60408051601f198184030181529181528151602092830120858301516001600160a01b0390811660009081526002808a018652848220848352909552929092209092015491925016156104b35760405162461bcd60e51b81526020600482015260156024820152744c6f636b496420416c72656164792045786973747360581b604482015260640161026a565b82516001600160a01b031660009081526020859052604090205460608401518110156105215760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74204163636f756e742042616c616e636500000000604482015260640161026a565b60608401805185516001600160a01b039081166000908152602089815260408083209487039094559351938801519091168152908120600101805490919061056a9084906121b2565b9091555050506020838101516001600160a01b03908116600090815260028781018452604080832086845290945290839020928601516001600160801b03908116600160801b02429190911617600184015585519083018054606088015190945591166001600160a81b031990921691909117600160a01b17905590505b92915050565b604051640312e302e360dc1b60208201526025015b6040516020818303038152906040528051906020012081565b6001600160a01b03831661066b5760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420536f75726365204164647265737360501b604482015260640161026a565b6001600160a01b0382166106c15760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642044657374696e6174696f6e20416464726573730000000000604482015260640161026a565b816001600160a01b0316836001600160a01b03160361071a5760405162461bcd60e51b815260206004820152601560248201527424b63632b3b0b61029b2b633102a3930b739b332b960591b604482015260640161026a565b6000811161076a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964205472616e7366657220416d6f756e74000000000000000000604482015260640161026a565b6001600160a01b038316600090815260208590526040902054818110156107d35760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74204163636f756e742042616c616e636500000000604482015260640161026a565b6001600160a01b0380851660009081526020879052604080822085850390559185168152908120805484929061080a9084906121b2565b90915550505050505050565b60006001600160a01b03831661086e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204163636f756e742041646472657373000000000000000000604482015260640161026a565b81156108d4576108816005850184611d3b565b6108c15760405162461bcd60e51b81526020600482015260116024820152701058d8dbdd5b9d08139bdd08119bdd5b99607a1b604482015260640161026a565b6108ce6005850184611d60565b50610936565b6108e16005850184611d3b565b156109275760405162461bcd60e51b81526020600482015260166024820152754163636f756e7420416c72656164792045786973747360501b604482015260640161026a565b6109346005850184611d75565b505b5060019392505050565b604051774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b6020820152603801610603565b6040805160a0810182526000808252602082018190528183018190526060808301829052608083018290528351600580825260c082019095529293909290816020015b604080516060808201835260008083526020830191909152918101919091528152602001906001900390816109af57905050604051744c4956454c595f414e4f4e594d4f55535f524f4c4560581b60208201529091506035016040516020818303038152906040528051906020012081600081518110610a3157610a316121db565b60200260200101516000018181525050600181600081518110610a5657610a566121db565b6020908102919091018101519115156040928301528151600a808252610160820190935291908201610140803683370190505081600081518110610a9c57610a9c6121db565b60200260200101516020018190525063a9059cbb60e01b81600081518110610ac657610ac66121db565b602002602001015160200151600081518110610ae457610ae46121db565b6001600160e01b03199092166020928302919091019091015280516323b872dd60e01b908290600090610b1957610b196121db565b602002602001015160200151600181518110610b3757610b376121db565b6001600160e01b031990921660209283029190910190910152805163095ea7b360e01b908290600090610b6c57610b6c6121db565b602002602001015160200151600281518110610b8a57610b8a6121db565b6001600160e01b0319909216602092830291909101909101528051631f54aa5560e31b908290600090610bbf57610bbf6121db565b602002602001015160200151600381518110610bdd57610bdd6121db565b6001600160e01b031990921660209283029190910190910152805163038d251d60e31b908290600090610c1257610c126121db565b602002602001015160200151600481518110610c3057610c306121db565b6001600160e01b0319909216602092830291909101909101528051639fd5a6cf60e01b908290600090610c6557610c656121db565b602002602001015160200151600581518110610c8357610c836121db565b6001600160e01b0319909216602092830291909101909101528051633950935160e01b908290600090610cb857610cb86121db565b602002602001015160200151600681518110610cd657610cd66121db565b6001600160e01b031990921660209283029190910190910152805163a457c2d760e01b908290600090610d0b57610d0b6121db565b602002602001015160200151600781518110610d2957610d296121db565b6001600160e01b031990921660209283029190910190910152805163a5bfa9a960e01b908290600090610d5e57610d5e6121db565b602002602001015160200151600881518110610d7c57610d7c6121db565b6001600160e01b031990921660209283029190910190910152805163028ab43960e31b908290600090610db157610db16121db565b602002602001015160200151600981518110610dcf57610dcf6121db565b6001600160e01b0319909216602092830291909101820152604051610e0c9101704c4956454c595f41444d494e5f524f4c4560781b815260110190565b6040516020818303038152906040528051906020012081600181518110610e3557610e356121db565b60200260200101516000018181525050600181600181518110610e5a57610e5a6121db565b6020908102919091018101519115156040928301528151600c8082526101a0820190935291908201610180803683370190505081600181518110610ea057610ea06121db565b6020026020010151602001819052506348e6be1c60e01b81600181518110610eca57610eca6121db565b602002602001015160200151600081518110610ee857610ee86121db565b6001600160e01b031990921660209283029190910190910152805163225bf2f960e11b9082906001908110610f1f57610f1f6121db565b602002602001015160200151600181518110610f3d57610f3d6121db565b6001600160e01b0319909216602092830291909101909101528051632770a7eb60e21b9082906001908110610f7457610f746121db565b602002602001015160200151600281518110610f9257610f926121db565b6001600160e01b03199092166020928302919091019091015280516340c10f1960e01b9082906001908110610fc957610fc96121db565b602002602001015160200151600381518110610fe757610fe76121db565b6001600160e01b0319909216602092830291909101909101528051630bfee64760e11b908290600190811061101e5761101e6121db565b60200260200101516020015160048151811061103c5761103c6121db565b6001600160e01b03199092166020928302919091019091015280516311a98d3560e21b9082906001908110611073576110736121db565b602002602001015160200151600581518110611091576110916121db565b6001600160e01b0319909216602092830291909101909101528051637d35f35560e01b90829060019081106110c8576110c86121db565b6020026020010151602001516006815181106110e6576110e66121db565b6001600160e01b03199092166020928302919091019091015280516376a67a5160e01b908290600190811061111d5761111d6121db565b60200260200101516020015160078151811061113b5761113b6121db565b6001600160e01b03199092166020928302919091019091015280516357b001f960e01b9082906001908110611172576111726121db565b602002602001015160200151600881518110611190576111906121db565b6001600160e01b031990921660209283029190910190910152805163595c6a6760e01b90829060019081106111c7576111c76121db565b6020026020010151602001516009815181106111e5576111e56121db565b6001600160e01b0319909216602092830291909101909101528051638a2ddd0360e01b908290600190811061121c5761121c6121db565b602002602001015160200151600a8151811061123a5761123a6121db565b60200260200101906001600160e01b03191690816001600160e01b031916815250507f756af45f4ce05d832bee0c171992c529ad6d3ca8e13303d78feace2f8fd7faf281600181518110611290576112906121db565b602002602001015160200151600b815181106112ae576112ae6121db565b6001600160e01b03199092166020928302919091018201526040516112f29101774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b815260180190565b604051602081830303815290604052805190602001208160028151811061131b5761131b6121db565b60200260200101516000018181525050600181600281518110611340576113406121db565b60209081029190910101519015156040918201528051600280825260608201909252908160200160208202803683370190505081600281518110611386576113866121db565b60200260200101516020018190525063d9dc1f1960e01b816002815181106113b0576113b06121db565b6020026020010151602001516000815181106113ce576113ce6121db565b6001600160e01b0319909216602092830291909101909101528051637147855d60e01b9082906002908110611405576114056121db565b602002602001015160200151600181518110611423576114236121db565b6001600160e01b03199092166020928302919091018201526040516114689101784c4956454c595f41535345545f4d414e414745525f524f4c4560381b815260190190565b6040516020818303038152906040528051906020012081600381518110611491576114916121db565b602002602001015160000181815250506001816003815181106114b6576114b66121db565b60209081029190910181015191151560409283015281516003808252608082019093529190820160608036833701905050816003815181106114fa576114fa6121db565b602002602001015160200181905250636b83949260e01b81600381518110611524576115246121db565b602002602001015160200151600081518110611542576115426121db565b6001600160e01b0319909216602092830291909101909101528051639a7e187360e01b9082906003908110611579576115796121db565b602002602001015160200151600181518110611597576115976121db565b60200260200101906001600160e01b03191690816001600160e01b031916815250507fec4ac1f7a145493f4b4d677b3706ded0b0efff6bc9b9de9ab9d367b741bae880816003815181106115ed576115ed6121db565b60200260200101516020015160028151811061160b5761160b6121db565b6001600160e01b031990921660209283029190910182015260405161163091016121f1565b6040516020818303038152906040528051906020012081600481518110611659576116596121db565b6020026020010151600001818152505060018160048151811061167e5761167e6121db565b602090810291909101015190151560409182015280516002808252606082019092529081602001602082028036833701905050816004815181106116c4576116c46121db565b60200260200101516020018190525063fdb92ec460e01b816004815181106116ee576116ee6121db565b60200260200101516020015160008151811061170c5761170c6121db565b6001600160e01b0319909216602092830291909101909101528051634daf9ab760e11b9082906004908110611743576117436121db565b602002602001015160200151600181518110611761576117616121db565b6001600160e01b0319929092166020928302919091018201526040805160a08101825297885290870195909552938501929092525050306060830152600160808301529091565b604051744c4956454c595f414e4f4e594d4f55535f524f4c4560581b6020820152603501610603565b604051784c4956454c595f41535345545f4d414e414745525f524f4c4560381b6020820152603901610603565b604051602001610603906121f1565b6040516a04c546f6b656e45524332360ac1b6020820152602b01610603565b604051704c4956454c595f41444d494e5f524f4c4560781b6020820152603101610603565b60008082356118935760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908131bd8dad25960921b604482015260640161026a565b600060028501816118aa6040870160208801612225565b6001600160a01b039081168252602080830193909352604091820160009081208835825290935291206002015416036119185760405162461bcd60e51b815260206004820152601060248201526f131bd8dad25908139bdd08119bdd5b9960821b604482015260640161026a565b60016002850160006119306040870160208801612225565b6001600160a01b031681526020808201929092526040908101600090812087358252909252902060020154600160a01b900460ff166003811115611976576119766121c5565b146119b85760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964204c6f636b20537461746560701b604482015260640161026a565b600060028501816119cf6040870160208801612225565b6001600160a01b03168152602080820192909252604090810160009081208735825283528181205493509187918391611a0c918901908901612225565b6001600160a01b03166001600160a01b031681526020019081526020016000206001015490506000866002016000876020016020810190611a4d9190612225565b6001600160a01b039081168252602080830193909352604091820160009081208a35825290935291206002015416905082821015611a9d5760405162461bcd60e51b815260040161026a90612240565b828203876000611ab360408a0160208b01612225565b6001600160a01b0390811682526020808301939093526040918201600090812060010194909455841683529089905281208054859290611af49084906121b2565b9091555060039050600288016000611b1260408a0160208b01612225565b6001600160a01b03168152602080820192909252604090810160009081208a3582529092529020600201805460ff60a01b1916600160a01b836003811115611b5c57611b5c6121c5565b021790555096919550909350505050565b600081611bad5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908131bd8dad25960921b604482015260640161026a565b33600090815260028085016020908152604080842086855290915290912001546001600160a01b0316611c155760405162461bcd60e51b815260206004820152601060248201526f131bd8dad25908139bdd08119bdd5b9960821b604482015260640161026a565b33600090815260028401602090815260408083208584529091529020600101546001600160801b03428116600160801b9092041610611c8b5760405162461bcd60e51b8152602060048201526012602482015271496c6c6567616c20436c61696d204c6f636b60701b604482015260640161026a565b33600081815260028501602090815260408083208684528252808320549383529086905290206001015481811015611cd55760405162461bcd60e51b815260040161026a90612240565b33600090815260208690526040812083830360018201558054849290611cfc9084906121b2565b909155505033600090815260029586016020908152604080832096835295905293909320909301805460ff60a01b1916600160a11b1790555090919050565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000611d59836001600160a01b038416611d8a565b6000611d59836001600160a01b038416611e7d565b60008181526001830160205260408120548015611e73576000611dae600183612281565b8554909150600090611dc290600190612281565b9050818114611e27576000866000018281548110611de257611de26121db565b9060005260206000200154905080876000018481548110611e0557611e056121db565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e3857611e38612294565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105e8565b60009150506105e8565b6000818152600183016020526040812054611ec4575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105e8565b5060006105e8565b80356001600160a01b0381168114611ee357600080fd5b919050565b60008082840360a0811215611efc57600080fd5b833592506080601f1982011215611f1257600080fd5b506040516080810181811067ffffffffffffffff82111715611f4457634e487b7160e01b600052604160045260246000fd5b604052611f5360208501611ecc565b8152611f6160408501611ecc565b60208201526060840135604082015260808401356060820152809150509250929050565b60008060008060808587031215611f9b57600080fd5b84359350611fab60208601611ecc565b9250611fb960408601611ecc565b9396929550929360600135925050565b600080600060608486031215611fde57600080fd5b83359250611fee60208501611ecc565b91506040840135801515811461200357600080fd5b809150509250925092565b60008060006060848603121561202357600080fd5b505081359360208301359350604090920135919050565b600060c08201845183526020808601518185015260408087015181860152606060018060a01b0381890151168187015260808089015115158188015260c060a088015284885180875260e08901915060e08160051b8a01019650858a016000805b8381101561211a578b8a0360df19018552825180518b52898101518a8c018990528051898d01819052908b01908490898e01905b808310156120f95783516001600160e01b0319168252928d019260019290920191908d01906120cf565b50928b015115159c8b019c909c52509950938801939188019160010161209b565b50979c9b505050505050505050505050565b6000806040838503121561213f57600080fd5b82359150602083013567ffffffffffffffff81111561215d57600080fd5b83016060818603121561216f57600080fd5b809150509250929050565b6000806040838503121561218d57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b808201808211156105e8576105e861219c565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b7f4c4956454c595f434f4d4d554e4954595f44414f5f4558454355544f525f524f8152614c4560f01b602082015260220190565b60006020828403121561223757600080fd5b611d5982611ecc565b60208082526021908201527f496e73756666696369656e74204163636f756e74204c6f636b2042616c616e636040820152606560f81b606082015260800190565b818103818111156105e8576105e861219c565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f47e56a67d3a05e920ac94e3a735529a7383e84ae9db9867deba171d8b31f67a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}