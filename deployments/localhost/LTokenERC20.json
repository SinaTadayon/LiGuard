{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [],
      "name": "LIB_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIB_VERSION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "domainName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "domainVersion",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "createRequestContext",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "version",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "realm",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "smca",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "status",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestContext",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4[]",
              "name": "funcSelectors",
              "type": "bytes4[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestRegisterContext[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x73f57feaf1289b7e80548f6f90af805fef94d9cfffe7b078ad8dd8be85781cdc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "725614",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd1318c7db6fc1bcc9b8424fb062bfb5b92d1e54c1bb094c57ae83a564f201586",
    "transactionHash": "0x73f57feaf1289b7e80548f6f90af805fef94d9cfffe7b078ad8dd8be85781cdc",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "725614",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "05a8bb2fca27ec708389aeb9e1c1207b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LIB_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIB_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainVersion\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"createRequestContext\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"smca\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestContext\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSelectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestRegisterContext[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/lib/token/LTokenERC20.sol\":\"LTokenERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IAccessControl {\\n  /**\\n   * @dev Function called by apps to check ACL\\n   * @return boolean indicating whether the ACL allows\\n   */\\n  function hasAccess(\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool);\\n\\n  function isLivelySystemAdmin(address account) external view returns (bool);\\n\\n  function isLivelyAdmin(address account) external view returns (bool);\\n\\n  function isLivelyGeneralGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyGeneralRealm(bytes32 context) external view returns (bool);\\n\\n  function isContextSafeMode(bytes32 context) external view returns (bool);\\n\\n  function isContextUpgradable(bytes32 context) external view returns (bool);\\n\\n  function isContextExists(bytes32 context) external view returns (bool);\\n\\n  function isContextFunctionExists(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextFunctionEnabled(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextEnabled(bytes32 context) external view returns (bool);\\n\\n  function isGroupExists(bytes32 group) external view returns (bool);\\n\\n  function isGroupEnabled(bytes32 group) external view returns (bool);\\n\\n  function isRoleExists(bytes32 role) external view returns (bool);\\n\\n  function isRoleEnabled(bytes32 role) external view returns (bool);\\n\\n  function isRealmExists(bytes32 realm) external view returns (bool);\\n\\n  function isRealmEnabled(bytes32 realm) external view returns (bool);\\n\\n  function isRealmUpgradable(bytes32 realm) external view returns (bool);\\n\\n  function livelyGeneralRealmRole() external pure returns (bytes32);\\n\\n  function livelyGeneralGroupRole() external pure returns (bytes32);\\n\\n  function livelySystemAdminRole() external pure returns (bytes32);\\n\\n  function livelyAdminRole() external pure returns (bytes32);\\n\\n  function livelyAnonymousRole() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9e0325c4503aca891fcda5cf3930b4e658e08f7c873fd2e37d32b8e3f4bd65a8\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address smca;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address smca;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed scma, address indexed sender, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed scma, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0xdb803c78806f81203f8d0b121aa12ab2fdd43c6174ede12ce9b2ad1dcff881cc\",\"license\":\"MIT\"},\"src/contracts/lib/token/LTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../../token/lively/IERC20.sol\\\";\\nimport \\\"../../token/lively/IERC20Extra.sol\\\";\\nimport \\\"../../token/lively/IERC20Pause.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/IAccessControl.sol\\\";\\n\\nlibrary LTokenERC20 {\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LTokenERC20\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  function createRequestContext(\\n    bytes32 domainName,\\n    bytes32 domainVersion,\\n    bytes32 realm\\n  )\\n    external\\n    view\\n    returns (IContextManagement.RequestContext memory, IContextManagement.RequestRegisterContext[] memory)\\n  {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](3);\\n    rrc[0].role = IAccessControl(IProxy(address(this)).accessControlManager()).livelyAnonymousRole();\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](2);\\n    rrc[0].funcSelectors[0] = IERC20.transfer.selector;\\n    rrc[0].funcSelectors[1] = IERC20.approve.selector;\\n\\n    rrc[1].role = IAccessControl(IProxy(address(this)).accessControlManager()).livelyAdminRole();\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](10);\\n    rrc[1].funcSelectors[0] = IProxy.setUpgradeStatus.selector;\\n    rrc[1].funcSelectors[1] = IERC20Extra.burn.selector;\\n    rrc[1].funcSelectors[2] = IERC20Extra.mint.selector;\\n    rrc[1].funcSelectors[3] = IERC20Extra.updateTaxRate.selector;\\n    rrc[1].funcSelectors[4] = IERC20Extra.updateTaxWhitelist.selector;\\n    rrc[1].funcSelectors[5] = IERC20Pause.pause.selector;\\n    rrc[1].funcSelectors[6] = IERC20Pause.unpause.selector;\\n    rrc[1].funcSelectors[7] = IERC20Pause.pauseAll.selector;\\n    rrc[1].funcSelectors[8] = IERC20Pause.unpauseAll.selector;\\n    rrc[1].funcSelectors[9] = bytes4(keccak256(\\\"withdrawBalance(address)\\\"));\\n\\n    rrc[2].role = IAccessControl(IProxy(address(this)).accessControlManager()).livelySystemAdminRole();\\n    rrc[2].isEnabled = true;\\n    rrc[2].funcSelectors = new bytes4[](3);\\n    rrc[2].funcSelectors[0] = IProxy.setLocalAdmin.selector;\\n    rrc[2].funcSelectors[1] = IProxy.setSafeMode.selector;\\n    rrc[2].funcSelectors[2] = IProxy.upgradeTo.selector;\\n\\n    IContextManagement.RequestContext memory rc = IContextManagement.RequestContext({\\n      name: domainName,\\n      version: domainVersion,\\n      realm: realm,\\n      smca: address(this),\\n      status: true\\n    });\\n\\n    return (rc, rrc);\\n  }\\n}\\n\",\"keccak256\":\"0x1d2d9f7cf8c12aeafc3bcd5756375e3cb44488cfc4f373004c295caf06607dd9\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IBaseProxy {\\n  event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x93a2f34af9672a421f1d4d46ed4955e078cc9f966d2e7ab7c18724207d306c9c\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event LocalAdminChanged(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event SafeModeChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  event UpgradeStatusChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeMode(bool status) external returns (bool);\\n\\n  function setUpgradeStatus(bool status) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function contractName() external view returns (bytes32);\\n\\n  function contractVersion() external view returns (bytes32);\\n\\n  function contractRealm() external view returns (bytes32);\\n\\n  function contractContext() external view returns (bytes32);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function isSafeMode() external view returns (bool);\\n\\n  function isUpgradable() external view returns (bool);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n\\n  function initStatus() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc7c04fb816627028a1f82615cbaa6aef6c5051204d57ebe92036d8ae6d2feb15\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  event Transfer(address indexed sender, address indexed recipient, uint256 amount);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address source,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa916a45842ccea0f2f0953e897d5dc1b6d677a35dbde4a5695afb3c6cb7b8e81\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Extra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IERC20Extra {\\n  event ApprovalIncremented(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event ApprovalDecresed(address indexed owner, address indexed spender, uint256 amount);\\n\\n  event TransferFrom(address indexed sender, address indexed from, address indexed to, uint256 amount);\\n\\n  event BatchTransfer(address indexed sender, uint256 totalAmount);\\n\\n  event BatchTransferFrom(address indexed sender, uint256 totalAmount);\\n\\n  event TaxRateUpdated(address indexed sender, uint256 rate);\\n\\n  event TaxWhitelistUpdated(address indexed sender, address indexed account, bool isDeleted);\\n\\n  event Burn(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  event Mint(address indexed sender, address indexed account, uint256 amount, uint256 totalSupply);\\n\\n  struct BatchTransferRequest {\\n    address recipient;\\n    uint256 amount;\\n  }\\n\\n  struct BatchTransferFromRequest {\\n    address source;\\n    address recipient;\\n    uint256 amount;\\n  }\\n\\n  struct BatchUpdateTaxWhitelistRequest {\\n    address account;\\n    bool isDeleted;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 value) external returns (uint256);\\n\\n  function decreaseAllowance(address spender, uint256 value) external returns (uint256);\\n\\n  function burn(address account, uint256 amount) external returns (uint256);\\n\\n  function mint(address account, uint256 amount) external returns (uint256);\\n\\n  function batchTransfer(BatchTransferRequest[] calldata request) external returns (bool);\\n\\n  function batchTransferFrom(BatchTransferFromRequest[] calldata request) external returns (bool);\\n\\n  function updateTaxRate(uint256 taxRate) external returns (bool);\\n\\n  function updateTaxWhitelist(address account, bool isDeleted) external returns (bool);\\n\\n  function batchUpdateTaxWhitelist(BatchUpdateTaxWhitelistRequest[] calldata request) external;\\n\\n  function taxRate() external view returns (uint256);\\n\\n  function taxTreasury() external view returns (address);\\n\\n  function taxWhitelist() external view returns (address[] memory);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    bytes calldata signature\\n  ) external returns (bool);\\n\\n  function nonce(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x252c60451532e2a8ae27ada4986bedb51a64cdfe497ecacfb9ea36ecc95757c0\",\"license\":\"MIT\"},\"src/contracts/token/lively/IERC20Pause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IERC20Pause {\\n  event Paused(address indexed sender, address indexed account);\\n\\n  event Unpaused(address indexed sender, address indexed account);\\n\\n  event PausedAll(address indexed sender);\\n\\n  event UnpausedAll(address indexed sender);\\n\\n  function pause(address account) external;\\n\\n  function unpause(address account) external;\\n\\n  function pauseAll() external;\\n\\n  function unpauseAll() external;\\n\\n  function isPaused(address account) external view returns (bool);\\n\\n  function isPausedAll() external view returns (bool);\\n\\n  function pausedAccounts() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6cbecef9a3aaed4eb021baac9eb689e72c6b89534aab3fbee6a150f0996f3c34\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610c2761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80632466209b1461005057806397ca328d1461006b578063bec947511461008c575b600080fd5b610058610094565b6040519081526020015b60405180910390f35b61007e610079366004610a74565b6100c2565b604051610062929190610aa0565b610058610a55565b604051640312e302e360dc1b60208201526025015b6040516020818303038152906040528051906020012081565b6040805160a081018252600080825260208201819052818301819052606080830182905260808084018390528451600380825291810190955292939092816020015b60408051606080820183526000808352602083019190915291810191909152815260200190600190039081610104579050509050306001600160a01b031663b4a0bdf36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019a9190610b92565b6001600160a01b031663407681406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb9190610bc2565b8160008151811061020e5761020e610bdb565b6020026020010151600001818152505060018160008151811061023357610233610bdb565b6020908102919091010151901515604091820152805160028082526060820190925290816020016020820280368337019050508160008151811061027957610279610bdb565b60200260200101516020018190525063a9059cbb60e01b816000815181106102a3576102a3610bdb565b6020026020010151602001516000815181106102c1576102c1610bdb565b6001600160e01b031990921660209283029190910190910152805163095ea7b360e01b9082906000906102f6576102f6610bdb565b60200260200101516020015160018151811061031457610314610bdb565b6001600160e01b03199092166020928302919091018201526040805163b4a0bdf360e01b81529051309263b4a0bdf392600480820193918290030181865afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103889190610b92565b6001600160a01b031663098b01cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610bc2565b816001815181106103fc576103fc610bdb565b6020026020010151600001818152505060018160018151811061042157610421610bdb565b6020908102919091018101519115156040928301528151600a80825261016082019093529190820161014080368337019050508160018151811061046757610467610bdb565b6020026020010151602001819052506348e6be1c60e01b8160018151811061049157610491610bdb565b6020026020010151602001516000815181106104af576104af610bdb565b6001600160e01b0319909216602092830291909101909101528051632770a7eb60e21b90829060019081106104e6576104e6610bdb565b60200260200101516020015160018151811061050457610504610bdb565b6001600160e01b03199092166020928302919091019091015280516340c10f1960e01b908290600190811061053b5761053b610bdb565b60200260200101516020015160028151811061055957610559610bdb565b6001600160e01b0319909216602092830291909101909101528051630bfee64760e11b908290600190811061059057610590610bdb565b6020026020010151602001516003815181106105ae576105ae610bdb565b6001600160e01b03199092166020928302919091019091015280516311a98d3560e21b90829060019081106105e5576105e5610bdb565b60200260200101516020015160048151811061060357610603610bdb565b6001600160e01b03199092166020928302919091019091015280516376a67a5160e01b908290600190811061063a5761063a610bdb565b60200260200101516020015160058151811061065857610658610bdb565b6001600160e01b03199092166020928302919091019091015280516357b001f960e01b908290600190811061068f5761068f610bdb565b6020026020010151602001516006815181106106ad576106ad610bdb565b6001600160e01b031990921660209283029190910190910152805163595c6a6760e01b90829060019081106106e4576106e4610bdb565b60200260200101516020015160078151811061070257610702610bdb565b6001600160e01b0319909216602092830291909101909101528051638a2ddd0360e01b908290600190811061073957610739610bdb565b60200260200101516020015160088151811061075757610757610bdb565b60200260200101906001600160e01b03191690816001600160e01b031916815250507f756af45f4ce05d832bee0c171992c529ad6d3ca8e13303d78feace2f8fd7faf2816001815181106107ad576107ad610bdb565b6020026020010151602001516009815181106107cb576107cb610bdb565b6001600160e01b03199092166020928302919091018201526040805163b4a0bdf360e01b81529051309263b4a0bdf392600480820193918290030181865afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190610b92565b6001600160a01b0316635ec7870a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190610bc2565b816002815181106108b3576108b3610bdb565b602002602001015160000181815250506001816002815181106108d8576108d8610bdb565b602090810291909101810151911515604092830152815160038082526080820190935291908201606080368337019050508160028151811061091c5761091c610bdb565b60200260200101516020018190525063d9dc1f1960e01b8160028151811061094657610946610bdb565b60200260200101516020015160008151811061096457610964610bdb565b6001600160e01b031990921660209283029190910190910152805163225bf2f960e11b908290600290811061099b5761099b610bdb565b6020026020010151602001516001815181106109b9576109b9610bdb565b6001600160e01b0319909216602092830291909101909101528051637147855d60e01b90829060029081106109f0576109f0610bdb565b602002602001015160200151600281518110610a0e57610a0e610bdb565b6001600160e01b0319929092166020928302919091018201526040805160a08101825297885290870195909552938501929092525050306060830152600160808301529091565b6040516a04c546f6b656e45524332360ac1b6020820152602b016100a9565b600080600060608486031215610a8957600080fd5b505081359360208301359350604090920135919050565b600060c08201845183526020808601518185015260408087015181860152606060018060a01b0381890151168187015260808089015115158188015260c060a088015284885180875260e08901915060e08160051b8a01019650858a016000805b83811015610b80578b8a0360df19018552825180518b52898101518a8c018990528051898d01819052908b01908490898e01905b80831015610b5f5783516001600160e01b0319168252928d019260019290920191908d0190610b35565b50928b015115159c8b019c909c525099509388019391880191600101610b01565b50979c9b505050505050505050505050565b600060208284031215610ba457600080fd5b81516001600160a01b0381168114610bbb57600080fd5b9392505050565b600060208284031215610bd457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122029a3f1b635926c0099b6bca83049b655e293de469f8f7f5f17e92dbb9830615364736f6c634300080f0033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80632466209b1461005057806397ca328d1461006b578063bec947511461008c575b600080fd5b610058610094565b6040519081526020015b60405180910390f35b61007e610079366004610a74565b6100c2565b604051610062929190610aa0565b610058610a55565b604051640312e302e360dc1b60208201526025015b6040516020818303038152906040528051906020012081565b6040805160a081018252600080825260208201819052818301819052606080830182905260808084018390528451600380825291810190955292939092816020015b60408051606080820183526000808352602083019190915291810191909152815260200190600190039081610104579050509050306001600160a01b031663b4a0bdf36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019a9190610b92565b6001600160a01b031663407681406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb9190610bc2565b8160008151811061020e5761020e610bdb565b6020026020010151600001818152505060018160008151811061023357610233610bdb565b6020908102919091010151901515604091820152805160028082526060820190925290816020016020820280368337019050508160008151811061027957610279610bdb565b60200260200101516020018190525063a9059cbb60e01b816000815181106102a3576102a3610bdb565b6020026020010151602001516000815181106102c1576102c1610bdb565b6001600160e01b031990921660209283029190910190910152805163095ea7b360e01b9082906000906102f6576102f6610bdb565b60200260200101516020015160018151811061031457610314610bdb565b6001600160e01b03199092166020928302919091018201526040805163b4a0bdf360e01b81529051309263b4a0bdf392600480820193918290030181865afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103889190610b92565b6001600160a01b031663098b01cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610bc2565b816001815181106103fc576103fc610bdb565b6020026020010151600001818152505060018160018151811061042157610421610bdb565b6020908102919091018101519115156040928301528151600a80825261016082019093529190820161014080368337019050508160018151811061046757610467610bdb565b6020026020010151602001819052506348e6be1c60e01b8160018151811061049157610491610bdb565b6020026020010151602001516000815181106104af576104af610bdb565b6001600160e01b0319909216602092830291909101909101528051632770a7eb60e21b90829060019081106104e6576104e6610bdb565b60200260200101516020015160018151811061050457610504610bdb565b6001600160e01b03199092166020928302919091019091015280516340c10f1960e01b908290600190811061053b5761053b610bdb565b60200260200101516020015160028151811061055957610559610bdb565b6001600160e01b0319909216602092830291909101909101528051630bfee64760e11b908290600190811061059057610590610bdb565b6020026020010151602001516003815181106105ae576105ae610bdb565b6001600160e01b03199092166020928302919091019091015280516311a98d3560e21b90829060019081106105e5576105e5610bdb565b60200260200101516020015160048151811061060357610603610bdb565b6001600160e01b03199092166020928302919091019091015280516376a67a5160e01b908290600190811061063a5761063a610bdb565b60200260200101516020015160058151811061065857610658610bdb565b6001600160e01b03199092166020928302919091019091015280516357b001f960e01b908290600190811061068f5761068f610bdb565b6020026020010151602001516006815181106106ad576106ad610bdb565b6001600160e01b031990921660209283029190910190910152805163595c6a6760e01b90829060019081106106e4576106e4610bdb565b60200260200101516020015160078151811061070257610702610bdb565b6001600160e01b0319909216602092830291909101909101528051638a2ddd0360e01b908290600190811061073957610739610bdb565b60200260200101516020015160088151811061075757610757610bdb565b60200260200101906001600160e01b03191690816001600160e01b031916815250507f756af45f4ce05d832bee0c171992c529ad6d3ca8e13303d78feace2f8fd7faf2816001815181106107ad576107ad610bdb565b6020026020010151602001516009815181106107cb576107cb610bdb565b6001600160e01b03199092166020928302919091018201526040805163b4a0bdf360e01b81529051309263b4a0bdf392600480820193918290030181865afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190610b92565b6001600160a01b0316635ec7870a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190610bc2565b816002815181106108b3576108b3610bdb565b602002602001015160000181815250506001816002815181106108d8576108d8610bdb565b602090810291909101810151911515604092830152815160038082526080820190935291908201606080368337019050508160028151811061091c5761091c610bdb565b60200260200101516020018190525063d9dc1f1960e01b8160028151811061094657610946610bdb565b60200260200101516020015160008151811061096457610964610bdb565b6001600160e01b031990921660209283029190910190910152805163225bf2f960e11b908290600290811061099b5761099b610bdb565b6020026020010151602001516001815181106109b9576109b9610bdb565b6001600160e01b0319909216602092830291909101909101528051637147855d60e01b90829060029081106109f0576109f0610bdb565b602002602001015160200151600281518110610a0e57610a0e610bdb565b6001600160e01b0319929092166020928302919091018201526040805160a08101825297885290870195909552938501929092525050306060830152600160808301529091565b6040516a04c546f6b656e45524332360ac1b6020820152602b016100a9565b600080600060608486031215610a8957600080fd5b505081359360208301359350604090920135919050565b600060c08201845183526020808601518185015260408087015181860152606060018060a01b0381890151168187015260808089015115158188015260c060a088015284885180875260e08901915060e08160051b8a01019650858a016000805b83811015610b80578b8a0360df19018552825180518b52898101518a8c018990528051898d01819052908b01908490898e01905b80831015610b5f5783516001600160e01b0319168252928d019260019290920191908d0190610b35565b50928b015115159c8b019c909c525099509388019391880191600101610b01565b50979c9b505050505050505050505050565b600060208284031215610ba457600080fd5b81516001600160a01b0381168114610bbb57600080fd5b9392505050565b600060208284031215610bd457600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122029a3f1b635926c0099b6bca83049b655e293de469f8f7f5f17e92dbb9830615364736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}