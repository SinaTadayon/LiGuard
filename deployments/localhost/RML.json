{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "name": "LIB_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIB_VERSION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe310ff921134d0dab8a9cd67fedbbbebd93e648e1811d8c76bed00107e318607",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2111413",
    "logsBloom": "0x
    "blockHash": "0x0a5081f48985339fea6101b1409011054a9cf4ab30490068527130030edc3058",
    "transactionHash": "0xe310ff921134d0dab8a9cd67fedbbbebd93e648e1811d8c76bed00107e318607",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "2111413",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ec35144bcae382bade356ad21c3cf133",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LIB_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIB_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/lib/acl/LRoleManagement.sol\":\"LRoleManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../lib/struct/LEnumerableMap.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\n\\nabstract contract AccessControlStorage is BaseUUPSStorage {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableMap for LEnumerableMap.Bytes32ToBytes32Map;\\n  using LEnumerableMap for LEnumerableMap.AddressToUintMap;\\n\\n  enum Status {\\n    NONE,\\n    ENABLED,\\n    DISABLED\\n  }\\n\\n  struct RoleStat {\\n    bytes32 role;\\n    Status status;\\n  }\\n\\n  struct Context {\\n    bytes32 realm;\\n    address contractId;\\n    bool isEnabled;\\n    mapping(bytes4 => RoleStat) resources; // function selector => RoleStat\\n    LEnumerableSet.Bytes32Set funcSet;\\n  }\\n\\n  struct Role {\\n    bytes32 group;\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.AddressSet accountSet;\\n  }\\n\\n  struct Realm {\\n    string name;\\n    bool isEnabled;\\n    bool isUpgradable;\\n    LEnumerableSet.Bytes32Set ctxSet;\\n  }\\n\\n  struct Group {\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.Bytes32Set roleSet;\\n  }\\n\\n  struct DataCollections {\\n    mapping(address => mapping(bytes32 => Status)) accountMap;\\n    mapping(bytes32 => Context) ctxMap;\\n    mapping(bytes32 => Role) roleMap;\\n    mapping(bytes32 => Realm) realmMap;\\n    mapping(bytes32 => Group) groupMap;\\n  }\\n\\n  DataCollections internal _data;\\n}\\n\",\"keccak256\":\"0x60509d8305172425766c720799c949fa5571e2db7935d6726d8b6408b2009aeb\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool status;\\n  }\\n\\n   struct RequestPredictContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    bytes32 salt;\\n    address subject;\\n    address deployer;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, bytes32 realm);\\n\\n  event PredictContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, address deployer, address subject, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed contractId, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function registerPredictContext(\\n    bytes memory signature,\\n    RequestPredictContext calldata rpc,\\n    RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0x4811f66509db07ea5b29faf433bf0209e8fd13a822ec371a0da2178289fce71b\",\"license\":\"MIT\"},\"src/contracts/acl/IGroupManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGroupManagement {\\n  event GroupRegistered(bytes32 indexed group, address indexed sender, string name, bool status);\\n\\n  event GroupStatusChanged(bytes32 indexed group, address indexed sender, bool status);\\n\\n  function registerGroup(string calldata name, bool status) external returns (bytes32);\\n\\n  function setGroupStatus(bytes32 group, bool status) external returns (bool);\\n\\n  function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool);\\n\\n  function getGroupInfo(bytes32 group) external view returns (string memory, bool);\\n\\n  function getGroupRoles(bytes32 group) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xef419de7dcf0029fe7a05850895dc4ce569d743e695d7eb2d9d345d185b267f8\",\"license\":\"MIT\"},\"src/contracts/acl/IRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRealmManagement {\\n  event RealmRegistered(bytes32 indexed realm, address indexed sender, string name, bool status, bool isUpgradable);\\n\\n  event RealmStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  event RealmUpgradeStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  function registerRealm(\\n    string calldata name,\\n    bool status,\\n    bool isUpgradable\\n  ) external returns (bytes32);\\n\\n  function setRealmStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function setRealmUpgradeStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool);\\n\\n  function getRealmInfo(bytes32 realm)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bool,\\n      bool\\n    );\\n\\n  function getRealmContexts(bytes32 realm) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x7058ef3754e6c4b92a61e2e908df2708f1c110fc82100338abe2ce98f3b02c0f\",\"license\":\"MIT\"},\"src/contracts/acl/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRoleManagement {\\n\\n  struct RegiterRoleRequest {\\n    bytes32 group;\\n    string name;    \\n    bool status;\\n  }\\n\\n  struct UpdateRoleRequest {\\n    bytes32 role;\\n    address account;\\n  }\\n\\n  event RoleAccountGranted(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleAccountRevoked(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed role,\\n    string indexed name,\\n    bytes32 group,\\n    bool isEnabled\\n  );\\n\\n  event RoleStatusChanged(address indexed sender, bytes32 indexed role, bytes32 indexed group, bool status);\\n\\n  event RoleGroupChanged(address indexed sender, bytes32 indexed role, bytes32 indexed newGroup, bytes32 oldGroup);\\n\\n  function registerRole(\\n    string calldata name,\\n    bytes32 group,\\n    bool status\\n  ) external returns (bytes32);\\n\\n  function batchRegisterRole(RegiterRoleRequest[] calldata requests) external returns(bytes32[] memory);\\n\\n  function grantRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchGrantRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function revokeRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchRevokeRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function setRoleStatus(bytes32 role, bool status) external returns (bool);\\n\\n  function setRoleGroup(bytes32 role, bytes32 group) external returns (bool);\\n\\n  function getRoleInfo(bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    );\\n\\n  function getRoleAccounts(bytes32 role) external view returns (address[] memory);\\n\\n  function hasRoleAccount(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x18e7657fdde30362e8c0186ac84acfdbc161c4f8f06e1e3cb009021d8fe5ab58\",\"license\":\"MIT\"},\"src/contracts/lib/LContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the context\\n */\\nlibrary LContextUtils {\\n  function generateCtx(address contractId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId));\\n  }\\n}\\n\",\"keccak256\":\"0x379d3f1670e48d86daed450ef0f5b75e59c592aa92b0d9ca2034d1888730969d\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../../acl/IGroupManagement.sol\\\";\\nimport \\\"../../acl/IRealmManagement.sol\\\";\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\n\\nlibrary LAccessControl {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LAccessControl\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant LIVELY_GENERAL_REALM = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_REALM\\\"));\\n  bytes32 public constant LIVELY_ASSET_REALM = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_REALM\\\"));\\n\\n  bytes32 public constant LIVELY_GENERAL_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_GROUP\\\"));\\n  bytes32 public constant LIVELY_DAO_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_DAO_GROUP\\\"));\\n  bytes32 public constant LIVELY_ASSET_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_GROUP\\\"));\\n\\n  bytes32 public constant LIVELY_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_SYSTEM_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_SYSTEM_ADMIN_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_ASSET_MANAGER_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_MANAGER_ROLE\\\"));\\n  bytes32 public constant LIVELY_ASSET_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_ADMIN_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_COMMUNITY_DAO_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_COMMUNITY_DAO_ROLE\\\"));  \\n  bytes32 public constant LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_ANONYMOUS_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ANONYMOUS_ROLE\\\"));\\n\\n  function initializeContext(AccessControlStorage.DataCollections storage data) external {\\n    data.accountMap[msg.sender][LIVELY_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n    data.accountMap[msg.sender][LIVELY_SYSTEM_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n\\n    data.roleMap[LIVELY_ADMIN_ROLE].name = \\\"LIVELY_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].name = \\\"LIVELY_SYSTEM_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].name = \\\"LIVELY_ASSET_MANAGER_ROLE\\\";\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].group = LIVELY_ASSET_GROUP;\\n\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].name = \\\"LIVELY_ASSET_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].group = LIVELY_ASSET_GROUP;\\n\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].name = \\\"LIVELY_COMMUNITY_DAO_ROLE\\\";\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].group = LIVELY_DAO_GROUP;\\n\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].name = \\\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\\\";\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].group = LIVELY_DAO_GROUP;\\n    \\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].name = \\\"LIVELY_ANONYMOUS_ROLE\\\";\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].group = LIVELY_GENERAL_GROUP;\\n\\n    data.groupMap[LIVELY_GENERAL_GROUP].name = \\\"LIVELY_GENERAL_GROUP\\\";\\n    data.groupMap[LIVELY_GENERAL_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_ADMIN_ROLE);\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_SYSTEM_ADMIN_ROLE);\\n\\n    data.groupMap[LIVELY_DAO_GROUP].name = \\\"LIVELY_DAO_GROUP\\\";\\n    data.groupMap[LIVELY_DAO_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_DAO_GROUP].roleSet.add(LIVELY_COMMUNITY_DAO_ROLE);\\n    data.groupMap[LIVELY_DAO_GROUP].roleSet.add(LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE);\\n\\n    data.groupMap[LIVELY_ASSET_GROUP].name = \\\"LIVELY_ASSET_GROUP\\\";\\n    data.groupMap[LIVELY_ASSET_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_ASSET_GROUP].roleSet.add(LIVELY_ASSET_MANAGER_ROLE);\\n    data.groupMap[LIVELY_ASSET_GROUP].roleSet.add(LIVELY_ASSET_ADMIN_ROLE);\\n\\n    data.realmMap[LIVELY_GENERAL_REALM].name = \\\"LIVELY_GENERAL_REALM\\\";\\n    data.realmMap[LIVELY_GENERAL_REALM].isEnabled = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].isUpgradable = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].ctxSet.add(LContextUtils.generateCtx(address(this)));\\n\\n    data.realmMap[LIVELY_ASSET_REALM].name = \\\"LIVELY_ASSET_REALM\\\";\\n    data.realmMap[LIVELY_ASSET_REALM].isEnabled = true;\\n    data.realmMap[LIVELY_ASSET_REALM].isUpgradable = true;  \\n  }\\n\\n  function createRequestContext() external pure returns (IContextManagement.RequestRegisterContext[] memory) {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](2);\\n    rrc[0].role = LIVELY_ADMIN_ROLE;\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](22);\\n    rrc[0].funcSelectors[0] = IProxy.setUpgradeStatus.selector;\\n    rrc[0].funcSelectors[1] = IProxy.setSafeMode.selector;\\n    rrc[0].funcSelectors[2] = IContextManagement.addContextFuncRole.selector;\\n    rrc[0].funcSelectors[3] = IContextManagement.removeContextFunc.selector;\\n    rrc[0].funcSelectors[4] = IContextManagement.grantContextRole.selector;\\n    rrc[0].funcSelectors[5] = IContextManagement.revokeContextRole.selector;\\n    rrc[0].funcSelectors[6] = IContextManagement.setContextRealm.selector;\\n    rrc[0].funcSelectors[7] = IContextManagement.setContextStatus.selector;\\n    rrc[0].funcSelectors[8] = IRoleManagement.registerRole.selector;\\n    rrc[0].funcSelectors[9] = IRoleManagement.batchRegisterRole.selector;\\n    rrc[0].funcSelectors[10] = IRoleManagement.grantRoleAccount.selector;\\n    rrc[0].funcSelectors[11] = IRoleManagement.batchGrantRoleAccount.selector;\\n    rrc[0].funcSelectors[12] = IRoleManagement.revokeRoleAccount.selector;\\n    rrc[0].funcSelectors[13] = IRoleManagement.batchRevokeRoleAccount.selector;\\n    rrc[0].funcSelectors[14] = IRoleManagement.setRoleStatus.selector;\\n    rrc[0].funcSelectors[15] = IRoleManagement.setRoleGroup.selector;\\n    rrc[0].funcSelectors[16] = IGroupManagement.registerGroup.selector;\\n    rrc[0].funcSelectors[17] = IGroupManagement.setGroupStatus.selector;\\n    rrc[0].funcSelectors[18] = IRealmManagement.registerRealm.selector;\\n    rrc[0].funcSelectors[19] = IRealmManagement.setRealmStatus.selector;\\n    rrc[0].funcSelectors[20] = IRealmManagement.setRealmUpgradeStatus.selector;\\n    rrc[0].funcSelectors[21] = bytes4(keccak256(\\\"withdrawBalance(address)\\\"));\\n\\n    rrc[1].role = LIVELY_SYSTEM_ADMIN_ROLE;\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](4);\\n    rrc[1].funcSelectors[0] = IProxy.setLocalAdmin.selector;\\n    rrc[1].funcSelectors[1] = IProxy.upgradeTo.selector;\\n    rrc[1].funcSelectors[2] = IContextManagement.registerContext.selector;\\n    rrc[1].funcSelectors[3] = IContextManagement.updateContext.selector;\\n\\n    return rrc;\\n  }\\n\\n  function hasAccess(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool) {\\n    bytes32 role = data.ctxMap[context].resources[signature].role;\\n    // console.log(\\\"hasAccess called, address: %s\\\", account);\\n\\n    // console.log(\\\"data.ctxMap[context].smca: %s\\\", data.ctxMap[context].smca);\\n    // console.log(\\\"data.ctxMap[context].isEnabled:\\\");\\n    // console.logBool(data.ctxMap[context].isEnabled);\\n    // console.log(\\\"data.ctxMap[context].realm: \\\");\\n    // console.logBytes32(data.ctxMap[context].realm);\\n    // console.log(\\\"data.ctxMap[context].resources[signature].status: \\\");\\n    // console.logBytes1(bytes1(uint8(data.ctxMap[context].resources[signature].status)));\\n    // console.log(\\\"data.ctxMap[context].resources[signature].role: \\\");\\n    // console.logBytes32(data.ctxMap[context].resources[signature].role);\\n\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].name: %s\\\", data.realmMap[data.ctxMap[context].realm].name);\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].isEnabled: \\\");\\n    // console.logBool(data.realmMap[data.ctxMap[context].realm].isEnabled);\\n\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].name: %s\\\", data.groupMap[data.roleMap[role].group].name);\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].isEnabled: \\\");\\n    // console.logBool(data.groupMap[data.roleMap[role].group].isEnabled);\\n\\n    // console.log(\\\"data.accountMap[account][role]: \\\");\\n    // console.logBytes1(bytes1(uint8(data.accountMap[account][role])));\\n\\n    if (role == LIVELY_ANONYMOUS_ROLE) {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED;\\n    } else {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED &&\\n        data.realmMap[data.ctxMap[context].realm].isEnabled &&\\n        data.groupMap[data.roleMap[role].group].isEnabled &&\\n        data.accountMap[account][role] == AccessControlStorage.Status.ENABLED;\\n    }\\n  }\\n\\n  function isLivelySystemAdminRole(AccessControlStorage.DataCollections storage data, address account)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.accountMap[account][LIVELY_SYSTEM_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAdminRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAssetManagerRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ASSET_MANAGER_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAssetAdminRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ASSET_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyCommunityDaoRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_COMMUNITY_DAO_ROLE] == AccessControlStorage.Status.ENABLED;  \\n  }\\n\\n  function isLivelyCommunityDaoExecutorRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyGeneralGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_GENERAL_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyAssetGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_ASSET_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyDaoGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_DAO_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyGeneralRealm(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.realmMap[LIVELY_GENERAL_REALM].ctxSet.contains(context);\\n  }\\n\\n  function isLivelyAssetRealm(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.realmMap[LIVELY_ASSET_REALM].ctxSet.contains(context);\\n  }\\n\\n\\n  function isContextSafeMode(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return IProxy(data.ctxMap[context].contractId).isSafeMode();\\n  }\\n\\n  function isContextUpgradable(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return IProxy(data.ctxMap[context].contractId).isUpgradable();\\n  }\\n\\n  function isRealmUpgradable(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    if (bytes(data.realmMap[realm].name).length == 0) return false;\\n    return data.realmMap[realm].isUpgradable;\\n  }\\n\\n  function isGroupExists(AccessControlStorage.DataCollections storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0;\\n  }\\n\\n  function isGroupEnabled(AccessControlStorage.DataCollections storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0 && data.groupMap[group].isEnabled;\\n  }\\n\\n  function isContextExists(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0);\\n  }\\n\\n  function isContextFunctionExists(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0) && data.ctxMap[context].funcSet.contains(functionSelector);\\n  }\\n\\n  function isContextFunctionEnabled(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return\\n      data.ctxMap[context].contractId != address(0) &&\\n      data.ctxMap[context].resources[functionSelector].status == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isContextEnabled(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0) && data.ctxMap[context].isEnabled;\\n  }\\n\\n  function isRoleExists(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0;\\n  }\\n\\n  function isRoleEnabled(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0 && data.roleMap[role].isEnabled;\\n  }\\n\\n  function isRealmExists(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0;\\n  }\\n\\n  function isRealmEnabled(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0 && data.realmMap[realm].isEnabled;\\n  }\\n}\\n\",\"keccak256\":\"0x222138d7d05b0fdf2796daea6bca334ae7fe93e7edbdc902b1931509cfa3cd59\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\n\\nlibrary LRoleManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LRoleManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  function registerRole(\\n    AccessControlStorage.DataCollections storage data,\\n    string calldata name,\\n    bytes32 group,\\n    bool isEnabled\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.registerRole.selector\\n      ),\\n      \\\"RegisterRole Access Denied\\\"\\n    );\\n  \\n    return _registerRole(data, name, group, isEnabled);\\n  }\\n\\n  function batchRegisterRole(AccessControlStorage.DataCollections storage data, IRoleManagement.RegiterRoleRequest[] calldata requests) external returns(bytes32[] memory) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.batchRegisterRole.selector\\n      ),\\n      \\\"BatchRegisterRole Access Denied\\\"\\n    );\\n    bytes32[] memory roles = new bytes32[](requests.length);\\n    for(uint i; i < requests.length; i++) {\\n      roles[i] = _registerRole(data, requests[i].name, requests[i].group, requests[i].status);\\n    }\\n    return roles;\\n  }\\n\\n  function _registerRole(\\n    AccessControlStorage.DataCollections storage data,\\n    string calldata name,\\n    bytes32 group,\\n    bool isEnabled\\n  ) private returns (bytes32) {\\n    require(bytes(data.groupMap[group].name).length != 0, \\\"Group Not Found\\\");\\n    require(bytes(name).length != 0, \\\"Role Name Invalid\\\");\\n    bytes32 roleKey = keccak256(abi.encodePacked(name));\\n    require(bytes(data.roleMap[roleKey].name).length == 0, \\\"Role Already Registered\\\");\\n\\n    data.groupMap[group].roleSet.add(roleKey);\\n    AccessControlStorage.Role storage newRole = data.roleMap[roleKey];\\n    newRole.name = name;\\n    newRole.group = group;\\n    newRole.isEnabled = isEnabled;\\n    return roleKey;\\n  }\\n\\n\\n  function grantRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.grantRoleAccount.selector\\n      ),\\n      \\\"GrantRoleAccount Access Denied\\\"\\n    );\\n\\n    _grantRoleAccount(data, role, account);\\n    return true;\\n  }\\n\\n  function batchGrantRoleAccount(AccessControlStorage.DataCollections storage data, IRoleManagement.UpdateRoleRequest[] calldata requests) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.batchGrantRoleAccount.selector\\n      ),\\n      \\\"BatchGrantRoleAccount Access Denied\\\"\\n    );\\n    for(uint i; i < requests.length; i++) {\\n      _grantRoleAccount(data, requests[i].role, requests[i].account);\\n    }\\n    return true;\\n  }\\n\\n   function _grantRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) private returns (bool) {\\n    if(role == LAccessControl.LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE) {      \\n      require(account.code.length > 0, \\\"Illegal Grant Community Dao Executor Role\\\");\\n    }\\n\\n    if(role == LAccessControl.LIVELY_ASSET_MANAGER_ROLE) {      \\n      require(account.code.length > 0, \\\"Illegal Grant Asset Manager Role\\\");\\n    }\\n\\n    require(role != LAccessControl.LIVELY_ANONYMOUS_ROLE, \\\"Illegal Grant Anonymous Role\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(account != address(0), \\\"Address Invalid\\\");\\n    data.accountMap[account][role] = AccessControlStorage.Status.ENABLED;\\n    if (!data.roleMap[role].accountSet.contains(account)) {\\n      data.roleMap[role].accountSet.add(account);\\n    }\\n    return true;\\n  }\\n\\n  function revokeRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.revokeRoleAccount.selector\\n      ),\\n      \\\"RevokeRoleAccount Access Denied\\\"\\n    );\\n    \\n    _revokeRoleAccount(data, role, account);\\n    return true;\\n  }\\n\\n  function batchRevokeRoleAccount(AccessControlStorage.DataCollections storage data, IRoleManagement.UpdateRoleRequest[] calldata requests) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.batchRevokeRoleAccount.selector\\n      ),\\n      \\\"BatchRevokeRoleAccount Access Denied\\\"\\n    );\\n    for(uint i; i < requests.length; i++) {\\n      _revokeRoleAccount(data, requests[i].role, requests[i].account);\\n    }\\n    return true;\\n  }\\n\\n  function _revokeRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) private returns (bool) {    \\n    if (role == LAccessControl.LIVELY_ADMIN_ROLE || role == LAccessControl.LIVELY_SYSTEM_ADMIN_ROLE) {\\n      require(data.roleMap[role].accountSet.length() > 1, \\\"Illegal Revoke Role Account\\\");    \\n    } \\n\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(account != address(0), \\\"Address Invalid\\\");\\n    require(data.roleMap[role].accountSet.contains(account), \\\"Account Not Found\\\");\\n    require(data.accountMap[account][role] != AccessControlStorage.Status.NONE, \\\"Account Role Not Found\\\");\\n    data.accountMap[account][role] = AccessControlStorage.Status.DISABLED;\\n    data.roleMap[role].accountSet.remove(account);\\n    return true;\\n  }\\n\\n  function setRoleStatus(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    bool status\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.setRoleStatus.selector\\n      ),\\n      \\\"SetRoleStatus Access Denied\\\"\\n    );\\n    require(\\n      role != LAccessControl.LIVELY_ANONYMOUS_ROLE &&\\n        role != LAccessControl.LIVELY_ADMIN_ROLE &&\\n        role != LAccessControl.LIVELY_SYSTEM_ADMIN_ROLE,\\n      \\\"Illegal Change Role Status\\\"\\n    );\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    data.roleMap[role].isEnabled = status;\\n    return (true, data.roleMap[role].group);\\n  }\\n\\n  function setRoleGroup(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    bytes32 group\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.setRoleGroup.selector\\n      ),\\n      \\\"SetRoleGroup Access Denied\\\"\\n    );\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(bytes(data.groupMap[group].name).length != 0, \\\"Group Not Found\\\");\\n    require(data.roleMap[role].group != group, \\\"Illegal Group Duplication\\\");\\n    bytes32 oldGroup = data.roleMap[role].group;\\n    data.groupMap[data.roleMap[role].group].roleSet.remove(role);\\n    data.groupMap[group].roleSet.add(role);\\n    data.roleMap[role].group = group;\\n    return (true, oldGroup);\\n  }\\n\\n  function getRoleInfo(AccessControlStorage.DataCollections storage data, bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    )\\n  {\\n    return (data.roleMap[role].name, data.roleMap[role].group, data.roleMap[role].isEnabled);\\n  }\\n\\n  function getRoleAccounts(AccessControlStorage.DataCollections storage data, bytes32 role)\\n    external\\n    view\\n    returns (address[] memory)\\n  {\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    return data.roleMap[role].accountSet.values();\\n  }\\n\\n  function hasRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) external view returns (bool) {\\n    return\\n      bytes(data.roleMap[role].name).length != 0 &&\\n      account != address(0) &&\\n      data.accountMap[account][role] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LAccessControl);\\n  }\\n}\\n\",\"keccak256\":\"0x00b7871d16e2c3c1abac071ad263155139c49922e5284bf92cd3c107df62fb72\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./LEnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) \\n * - `address -> uint256` (`AddressToUintMap`) \\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) \\n * - `uint256 -> uint256` (`UintToUintMap`) \\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) \\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap.\\n * ====\\n */\\nlibrary LEnumerableMap {\\n    using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        LEnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x902b2d606e688f51f33d0a1db574be9cc049c20e7c8fd43cde744e2ec3743eb6\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xeb49909b77ba631382c48e9fead2e49f8b4c72f3325f7685d4bddfce32d7528b\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n */\\n\\nabstract contract BaseUUPSStorage {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 internal constant _TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  \\n  address internal immutable __self = address(this);\\n\\n  bytes32 internal _domainName;\\n  bytes32 internal _domainVersion;\\n  bytes32 internal _domainRealm;\\n  address internal _accessControlManager;\\n  bool internal _isSafeMode;\\n  bool internal _isUpgradable;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x086334b0668244b8ff2ef60dd770da77ecfd05f705e7c2251c60553c4651bfad\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBaseProxy {\\n  event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x719d13ceb21e3fda10fc0ba5fb1b167b8736919d6c6a99f6268667acb8b4d062\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event LocalAdminChanged(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event SafeModeChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  event UpgradeStatusChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeMode(bool status) external returns (bool);\\n\\n  function setUpgradeStatus(bool status) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function contractName() external view returns (bytes32);\\n\\n  function contractVersion() external view returns (bytes32);\\n\\n  function contractRealm() external view returns (bytes32);\\n\\n  function contractContext() external view returns (bytes32);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function isSafeMode() external view returns (bool);\\n\\n  function isUpgradable() external view returns (bool);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n\\n}\\n\",\"keccak256\":\"0x93bf3ccb33a8616fba3379b096e79e88ae3249882af81d1dc808eec6688800a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61253d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c80637678922e1161009657806384f27d351161007057806384f27d3514610268578063881d86761461028857806391de53cf146102a8578063bec94751146102c857600080fd5b80637678922e146101fd578063803bd090146102285780638495fa561461024857600080fd5b806352b20ec0116100d257806352b20ec01461016b578063608f85ef1461018d5780636861fc11146101bd57806368b38e0f146101d057600080fd5b80631912cf43146100f95780632466209b146101355780633f75a32d1461014b575b600080fd5b81801561010557600080fd5b50610119610114366004611e71565b6102d0565b6040805192151583526020830191909152015b60405180910390f35b61013d61059d565b60405190815260200161012c565b81801561015757600080fd5b50610119610166366004611eae565b6105cb565b61017e610179366004611ee7565b6108a8565b60405161012c93929190611f09565b81801561019957600080fd5b506101ad6101a8366004611f67565b61096c565b604051901515815260200161012c565b6101ad6101cb366004612002565b610b4f565b8180156101dc57600080fd5b506101f06101eb366004612037565b610bcd565b60405161012c91906120a3565b6040516001600160a01b03735FbDB2315678afecb367f032d93F642f64180aa316815260200161012c565b81801561023457600080fd5b506101ad610243366004611f67565b610e4b565b81801561025457600080fd5b506101ad610263366004612002565b611023565b61027b610276366004611ee7565b61118d565b60405161012c91906120e7565b81801561029457600080fd5b5061013d6102a3366004612128565b6111f5565b8180156102b457600080fd5b506101ad6102c3366004612002565b61136b565b61013d6114d5565b600080306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610311573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033591906121c3565b1561035b5760405162461bcd60e51b8152600401610352906121e0565b60405180910390fd5b735FbDB2315678afecb367f032d93F642f64180aa363513d425a8661037f306114f8565b6040516001600160e01b031960e085901b1681526103ac9291903390630dbf304b60e41b90600401612217565b602060405180830381865af41580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed91906121c3565b6104395760405162461bcd60e51b815260206004820152601a60248201527f536574526f6c6547726f7570204163636573732044656e6965640000000000006044820152606401610352565b60008481526002860160205260409020600101805461045790612245565b90506000036104785760405162461bcd60e51b81526004016103529061227f565b60008381526004860160205260409020805461049390612245565b90506000036104d65760405162461bcd60e51b815260206004820152600f60248201526e11dc9bdd5c08139bdd08119bdd5b99608a1b6044820152606401610352565b60008481526002860160205260409020548390036105365760405162461bcd60e51b815260206004820152601960248201527f496c6c6567616c2047726f7570204475706c69636174696f6e000000000000006044820152606401610352565b60008481526002808701602090815260408084205480855260048a01909252909220610563910186611537565b50600084815260048701602052604090206105819060020186611543565b5060009485526002959095016020525050604090912055600191565b604051640312e302e360dc1b60208201526025015b6040516020818303038152906040528051906020012081565b600080306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063091906121c3565b1561064d5760405162461bcd60e51b8152600401610352906121e0565b735FbDB2315678afecb367f032d93F642f64180aa363513d425a86610671306114f8565b6040516001600160e01b031960e085901b16815261069e929190339063738f112760e11b90600401612217565b602060405180830381865af41580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df91906121c3565b61072b5760405162461bcd60e51b815260206004820152601b60248201527f536574526f6c65537461747573204163636573732044656e69656400000000006044820152606401610352565b604051744c4956454c595f414e4f4e594d4f55535f524f4c4560581b60208201526035016040516020818303038152906040528051906020012084141580156107a95750604051704c4956454c595f41444d494e5f524f4c4560781b6020820152603101604051602081830303815290604052805190602001208414155b80156107f15750604051774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b6020820152603801604051602081830303815290604052805190602001208414155b61083d5760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204368616e676520526f6c65205374617475730000000000006044820152606401610352565b60008481526002860160205260409020600101805461085b90612245565b905060000361087c5760405162461bcd60e51b81526004016103529061227f565b5050600091825260029283016020526040909120918201805460ff191691151591909117905554600191565b600081815260028084016020526040822080549181015460019091018054606094938493909160ff9091169083906108df90612245565b80601f016020809104026020016040519081016040528092919081815260200182805461090b90612245565b80156109585780601f1061092d57610100808354040283529160200191610958565b820191906000526020600020905b81548152906001019060200180831161093b57829003601f168201915b505050505092509250925092509250925092565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d091906121c3565b156109ed5760405162461bcd60e51b8152600401610352906121e0565b735FbDB2315678afecb367f032d93F642f64180aa363513d425a85610a11306114f8565b6040516001600160e01b031960e085901b168152610a3e92919033906362ab810560e11b90600401612217565b602060405180830381865af4158015610a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7f91906121c3565b610ad75760405162461bcd60e51b8152602060048201526024808201527f42617463685265766f6b65526f6c654163636f756e74204163636573732044656044820152631b9a595960e21b6064820152608401610352565b60005b82811015610b4457610b3185858584818110610af857610af86122a7565b90506040020160000135868685818110610b1457610b146122a7565b9050604002016020016020810190610b2c91906122bd565b61154f565b5080610b3c816122ee565b915050610ada565b506001949350505050565b600082815260028401602052604081206001018054610b6d90612245565b1580159150610b8457506001600160a01b03821615155b8015610bc5575060016001600160a01b03831660009081526020868152604080832087845290915290205460ff166002811115610bc357610bc3612307565b145b949350505050565b6060306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3191906121c3565b15610c4e5760405162461bcd60e51b8152600401610352906121e0565b735FbDB2315678afecb367f032d93F642f64180aa363513d425a85610c72306114f8565b6040516001600160e01b031960e085901b168152610c9f9291903390634f1d167560e11b90600401612217565b602060405180830381865af4158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce091906121c3565b610d2c5760405162461bcd60e51b815260206004820152601f60248201527f42617463685265676973746572526f6c65204163636573732044656e696564006044820152606401610352565b60008267ffffffffffffffff811115610d4757610d4761231d565b604051908082528060200260200182016040528015610d70578160200160208202803683370190505b50905060005b83811015610e4257610e1386868684818110610d9457610d946122a7565b9050602002810190610da69190612333565b610db4906020810190612353565b888886818110610dc657610dc66122a7565b9050602002810190610dd89190612333565b35898987818110610deb57610deb6122a7565b9050602002810190610dfd9190612333565b610e0e9060608101906040016123a1565b6117e4565b828281518110610e2557610e256122a7565b602090810291909101015280610e3a816122ee565b915050610d76565b50949350505050565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf91906121c3565b15610ecc5760405162461bcd60e51b8152600401610352906121e0565b735FbDB2315678afecb367f032d93F642f64180aa363513d425a85610ef0306114f8565b6040516001600160e01b031960e085901b168152610f1d92919033906393ba313160e01b90600401612217565b602060405180830381865af4158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e91906121c3565b610fb65760405162461bcd60e51b815260206004820152602360248201527f42617463684772616e74526f6c654163636f756e74204163636573732044656e6044820152621a595960ea1b6064820152608401610352565b60005b82811015610b445761101085858584818110610fd757610fd76122a7565b90506040020160000135868685818110610ff357610ff36122a7565b905060400201602001602081019061100b91906122bd565b611983565b508061101b816122ee565b915050610fb9565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108791906121c3565b156110a45760405162461bcd60e51b8152600401610352906121e0565b735FbDB2315678afecb367f032d93F642f64180aa363513d425a856110c8306114f8565b6040516001600160e01b031960e085901b1681526110f592919033906308f09e0f60e41b90600401612217565b602060405180830381865af4158015611112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113691906121c3565b6111825760405162461bcd60e51b815260206004820152601e60248201527f4772616e74526f6c654163636f756e74204163636573732044656e69656400006044820152606401610352565b610b44848484611983565b600081815260028301602052604090206001018054606091906111af90612245565b90506000036111d05760405162461bcd60e51b81526004016103529061227f565b600082815260028401602052604090206111ec90600301611c69565b90505b92915050565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125991906121c3565b156112765760405162461bcd60e51b8152600401610352906121e0565b735FbDB2315678afecb367f032d93F642f64180aa363513d425a8761129a306114f8565b6040516001600160e01b031960e085901b1681526112c7929190339063b2dc26e560e01b90600401612217565b602060405180830381865af41580156112e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130891906121c3565b6113545760405162461bcd60e51b815260206004820152601a60248201527f5265676973746572526f6c65204163636573732044656e6965640000000000006044820152606401610352565b61136186868686866117e4565b9695505050505050565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf91906121c3565b156113ec5760405162461bcd60e51b8152600401610352906121e0565b735FbDB2315678afecb367f032d93F642f64180aa363513d425a85611410306114f8565b6040516001600160e01b031960e085901b16815261143d929190339063df01de4560e01b90600401612217565b602060405180830381865af415801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e91906121c3565b6114ca5760405162461bcd60e51b815260206004820152601f60248201527f5265766f6b65526f6c654163636f756e74204163636573732044656e696564006044820152606401610352565b610b4484848461154f565b6040516e13149bdb1953585b9859d95b595b9d608a1b6020820152602f016105b2565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b60006111ec8383611c7d565b60006111ec8383611d70565b604051704c4956454c595f41444d494e5f524f4c4560781b6020820152600090603101604051602081830303815290604052805190602001208314806115d05750604051774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b60208201526038016040516020818303038152906040528051906020012083145b1561164157600083815260028501602052604090206001906115f490600301611dbf565b116116415760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c205265766f6b6520526f6c65204163636f756e7400000000006044820152606401610352565b60008381526002850160205260409020600101805461165f90612245565b90506000036116805760405162461bcd60e51b81526004016103529061227f565b6001600160a01b0382166116c85760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b6044820152606401610352565b600083815260028501602052604090206116e59060030183611dc9565b6117255760405162461bcd60e51b81526020600482015260116024820152701058d8dbdd5b9d08139bdd08119bdd5b99607a1b6044820152606401610352565b6001600160a01b03821660009081526020858152604080832086845290915281205460ff16600281111561175b5761175b612307565b036117a15760405162461bcd60e51b81526020600482015260166024820152751058d8dbdd5b9d08149bdb1948139bdd08119bdd5b9960521b6044820152606401610352565b6001600160a01b0382166000908152602085815260408083208684528252808320805460ff1916600290811790915587019091529020610b449060030183611deb565b6000828152600486016020526040812080546117ff90612245565b90506000036118425760405162461bcd60e51b815260206004820152600f60248201526e11dc9bdd5c08139bdd08119bdd5b99608a1b6044820152606401610352565b60008490036118875760405162461bcd60e51b8152602060048201526011602482015270149bdb194813985b5948125b9d985b1a59607a1b6044820152606401610352565b6000858560405160200161189c9291906123be565b60405160208183030381529060405280519060200120905086600201600082815260200190815260200160002060010180546118d790612245565b1590506119265760405162461bcd60e51b815260206004820152601760248201527f526f6c6520416c726561647920526567697374657265640000000000000000006044820152606401610352565b600084815260048801602052604090206119439060020182611543565b50600081815260028801602052604090206001810161196387898361241d565b50848155600201805484151560ff19909116179055905095945050505050565b60006040516020016119c3907f4c4956454c595f434f4d4d554e4954595f44414f5f4558454355544f525f524f8152614c4560f01b602082015260220190565b604051602081830303815290604052805190602001208303611a4b576000826001600160a01b03163b11611a4b5760405162461bcd60e51b815260206004820152602960248201527f496c6c6567616c204772616e7420436f6d6d756e6974792044616f204578656360448201526875746f7220526f6c6560b81b6064820152608401610352565b6040517f4c4956454c595f41535345545f4d414e414745525f524f4c45000000000000006020820152603901604051602081830303815290604052805190602001208303611aed576000826001600160a01b03163b11611aed5760405162461bcd60e51b815260206004820181905260248201527f496c6c6567616c204772616e74204173736574204d616e6167657220526f6c656044820152606401610352565b604051744c4956454c595f414e4f4e594d4f55535f524f4c4560581b6020820152603501604051602081830303815290604052805190602001208303611b755760405162461bcd60e51b815260206004820152601c60248201527f496c6c6567616c204772616e7420416e6f6e796d6f757320526f6c65000000006044820152606401610352565b600083815260028501602052604090206001018054611b9390612245565b9050600003611bb45760405162461bcd60e51b81526004016103529061227f565b6001600160a01b038216611bfc5760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b6044820152606401610352565b6001600160a01b0382166000908152602085815260408083208684528252808320805460ff19166001179055600287019091529020611c3e9060030183611dc9565b611c5f5760008381526002850160205260409020610b449060030183611e00565b5060019392505050565b60606000611c7683611e15565b9392505050565b60008181526001830160205260408120548015611d66576000611ca16001836124de565b8554909150600090611cb5906001906124de565b9050818114611d1a576000866000018281548110611cd557611cd56122a7565b9060005260206000200154905080876000018481548110611cf857611cf86122a7565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d2b57611d2b6124f1565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111ef565b60009150506111ef565b6000818152600183016020526040812054611db7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111ef565b5060006111ef565b60006111ef825490565b6001600160a01b038116600090815260018301602052604081205415156111ec565b60006111ec836001600160a01b038416611c7d565b60006111ec836001600160a01b038416611d70565b606081600001805480602002602001604051908101604052809291908181526020018280548015611e6557602002820191906000526020600020905b815481526020019060010190808311611e51575b50505050509050919050565b600080600060608486031215611e8657600080fd5b505081359360208301359350604090920135919050565b8015158114611eab57600080fd5b50565b600080600060608486031215611ec357600080fd5b83359250602084013591506040840135611edc81611e9d565b809150509250925092565b60008060408385031215611efa57600080fd5b50508035926020909101359150565b606081526000845180606084015260005b81811015611f375760208188018101516080868401015201611f1a565b506000608082850101526080601f19601f8301168401019150508360208301528215156040830152949350505050565b600080600060408486031215611f7c57600080fd5b83359250602084013567ffffffffffffffff80821115611f9b57600080fd5b818601915086601f830112611faf57600080fd5b813581811115611fbe57600080fd5b8760208260061b8501011115611fd357600080fd5b6020830194508093505050509250925092565b80356001600160a01b0381168114611ffd57600080fd5b919050565b60008060006060848603121561201757600080fd5b833592506020840135915061202e60408501611fe6565b90509250925092565b60008060006040848603121561204c57600080fd5b83359250602084013567ffffffffffffffff8082111561206b57600080fd5b818601915086601f83011261207f57600080fd5b81358181111561208e57600080fd5b8760208260051b8501011115611fd357600080fd5b6020808252825182820181905260009190848201906040850190845b818110156120db578351835292840192918401916001016120bf565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156120db5783516001600160a01b031683529284019291840191600101612103565b60008060008060006080868803121561214057600080fd5b85359450602086013567ffffffffffffffff8082111561215f57600080fd5b818801915088601f83011261217357600080fd5b81358181111561218257600080fd5b89602082850101111561219457600080fd5b6020830196508095505050506040860135915060608601356121b581611e9d565b809150509295509295909350565b6000602082840312156121d557600080fd5b8151611c7681611e9d565b60208082526017908201527f536166654d6f64653a2043616c6c2052656a6563746564000000000000000000604082015260600190565b93845260208401929092526001600160a01b031660408301526001600160e01b031916606082015260800190565b600181811c9082168061225957607f821691505b60208210810361227957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d149bdb1948139bdd08119bdd5b9960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156122cf57600080fd5b6111ec82611fe6565b634e487b7160e01b600052601160045260246000fd5b600060018201612300576123006122d8565b5060010190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008235605e1983360301811261234957600080fd5b9190910192915050565b6000808335601e1984360301811261236a57600080fd5b83018035915067ffffffffffffffff82111561238557600080fd5b60200191503681900382131561239a57600080fd5b9250929050565b6000602082840312156123b357600080fd5b8135611c7681611e9d565b8183823760009101908152919050565b601f82111561241857600081815260208120601f850160051c810160208610156123f55750805b601f850160051c820191505b8181101561241457828155600101612401565b5050505b505050565b67ffffffffffffffff8311156124355761243561231d565b612449836124438354612245565b836123ce565b6000601f84116001811461247d57600085156124655750838201355b600019600387901b1c1916600186901b1783556124d7565b600083815260209020601f19861690835b828110156124ae578685013582556020948501946001909201910161248e565b50868210156124cb5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b818103818111156111ef576111ef6122d8565b634e487b7160e01b600052603160045260246000fdfea26469706673582212204e316b0df8be10f14e64899e46a1a20f44a22573050d6705d5b3a2ecfcb4168e64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c80637678922e1161009657806384f27d351161007057806384f27d3514610268578063881d86761461028857806391de53cf146102a8578063bec94751146102c857600080fd5b80637678922e146101fd578063803bd090146102285780638495fa561461024857600080fd5b806352b20ec0116100d257806352b20ec01461016b578063608f85ef1461018d5780636861fc11146101bd57806368b38e0f146101d057600080fd5b80631912cf43146100f95780632466209b146101355780633f75a32d1461014b575b600080fd5b81801561010557600080fd5b50610119610114366004611e71565b6102d0565b6040805192151583526020830191909152015b60405180910390f35b61013d61059d565b60405190815260200161012c565b81801561015757600080fd5b50610119610166366004611eae565b6105cb565b61017e610179366004611ee7565b6108a8565b60405161012c93929190611f09565b81801561019957600080fd5b506101ad6101a8366004611f67565b61096c565b604051901515815260200161012c565b6101ad6101cb366004612002565b610b4f565b8180156101dc57600080fd5b506101f06101eb366004612037565b610bcd565b60405161012c91906120a3565b6040516001600160a01b0373__$c43b1d7058274a71a9734d16e6b6586431$__16815260200161012c565b81801561023457600080fd5b506101ad610243366004611f67565b610e4b565b81801561025457600080fd5b506101ad610263366004612002565b611023565b61027b610276366004611ee7565b61118d565b60405161012c91906120e7565b81801561029457600080fd5b5061013d6102a3366004612128565b6111f5565b8180156102b457600080fd5b506101ad6102c3366004612002565b61136b565b61013d6114d5565b600080306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610311573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033591906121c3565b1561035b5760405162461bcd60e51b8152600401610352906121e0565b60405180910390fd5b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a8661037f306114f8565b6040516001600160e01b031960e085901b1681526103ac9291903390630dbf304b60e41b90600401612217565b602060405180830381865af41580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed91906121c3565b6104395760405162461bcd60e51b815260206004820152601a60248201527f536574526f6c6547726f7570204163636573732044656e6965640000000000006044820152606401610352565b60008481526002860160205260409020600101805461045790612245565b90506000036104785760405162461bcd60e51b81526004016103529061227f565b60008381526004860160205260409020805461049390612245565b90506000036104d65760405162461bcd60e51b815260206004820152600f60248201526e11dc9bdd5c08139bdd08119bdd5b99608a1b6044820152606401610352565b60008481526002860160205260409020548390036105365760405162461bcd60e51b815260206004820152601960248201527f496c6c6567616c2047726f7570204475706c69636174696f6e000000000000006044820152606401610352565b60008481526002808701602090815260408084205480855260048a01909252909220610563910186611537565b50600084815260048701602052604090206105819060020186611543565b5060009485526002959095016020525050604090912055600191565b604051640312e302e360dc1b60208201526025015b6040516020818303038152906040528051906020012081565b600080306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561060c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063091906121c3565b1561064d5760405162461bcd60e51b8152600401610352906121e0565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a86610671306114f8565b6040516001600160e01b031960e085901b16815261069e929190339063738f112760e11b90600401612217565b602060405180830381865af41580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df91906121c3565b61072b5760405162461bcd60e51b815260206004820152601b60248201527f536574526f6c65537461747573204163636573732044656e69656400000000006044820152606401610352565b604051744c4956454c595f414e4f4e594d4f55535f524f4c4560581b60208201526035016040516020818303038152906040528051906020012084141580156107a95750604051704c4956454c595f41444d494e5f524f4c4560781b6020820152603101604051602081830303815290604052805190602001208414155b80156107f15750604051774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b6020820152603801604051602081830303815290604052805190602001208414155b61083d5760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204368616e676520526f6c65205374617475730000000000006044820152606401610352565b60008481526002860160205260409020600101805461085b90612245565b905060000361087c5760405162461bcd60e51b81526004016103529061227f565b5050600091825260029283016020526040909120918201805460ff191691151591909117905554600191565b600081815260028084016020526040822080549181015460019091018054606094938493909160ff9091169083906108df90612245565b80601f016020809104026020016040519081016040528092919081815260200182805461090b90612245565b80156109585780601f1061092d57610100808354040283529160200191610958565b820191906000526020600020905b81548152906001019060200180831161093b57829003601f168201915b505050505092509250925092509250925092565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d091906121c3565b156109ed5760405162461bcd60e51b8152600401610352906121e0565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a85610a11306114f8565b6040516001600160e01b031960e085901b168152610a3e92919033906362ab810560e11b90600401612217565b602060405180830381865af4158015610a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7f91906121c3565b610ad75760405162461bcd60e51b8152602060048201526024808201527f42617463685265766f6b65526f6c654163636f756e74204163636573732044656044820152631b9a595960e21b6064820152608401610352565b60005b82811015610b4457610b3185858584818110610af857610af86122a7565b90506040020160000135868685818110610b1457610b146122a7565b9050604002016020016020810190610b2c91906122bd565b61154f565b5080610b3c816122ee565b915050610ada565b506001949350505050565b600082815260028401602052604081206001018054610b6d90612245565b1580159150610b8457506001600160a01b03821615155b8015610bc5575060016001600160a01b03831660009081526020868152604080832087845290915290205460ff166002811115610bc357610bc3612307565b145b949350505050565b6060306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3191906121c3565b15610c4e5760405162461bcd60e51b8152600401610352906121e0565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a85610c72306114f8565b6040516001600160e01b031960e085901b168152610c9f9291903390634f1d167560e11b90600401612217565b602060405180830381865af4158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce091906121c3565b610d2c5760405162461bcd60e51b815260206004820152601f60248201527f42617463685265676973746572526f6c65204163636573732044656e696564006044820152606401610352565b60008267ffffffffffffffff811115610d4757610d4761231d565b604051908082528060200260200182016040528015610d70578160200160208202803683370190505b50905060005b83811015610e4257610e1386868684818110610d9457610d946122a7565b9050602002810190610da69190612333565b610db4906020810190612353565b888886818110610dc657610dc66122a7565b9050602002810190610dd89190612333565b35898987818110610deb57610deb6122a7565b9050602002810190610dfd9190612333565b610e0e9060608101906040016123a1565b6117e4565b828281518110610e2557610e256122a7565b602090810291909101015280610e3a816122ee565b915050610d76565b50949350505050565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf91906121c3565b15610ecc5760405162461bcd60e51b8152600401610352906121e0565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a85610ef0306114f8565b6040516001600160e01b031960e085901b168152610f1d92919033906393ba313160e01b90600401612217565b602060405180830381865af4158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e91906121c3565b610fb65760405162461bcd60e51b815260206004820152602360248201527f42617463684772616e74526f6c654163636f756e74204163636573732044656e6044820152621a595960ea1b6064820152608401610352565b60005b82811015610b445761101085858584818110610fd757610fd76122a7565b90506040020160000135868685818110610ff357610ff36122a7565b905060400201602001602081019061100b91906122bd565b611983565b508061101b816122ee565b915050610fb9565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108791906121c3565b156110a45760405162461bcd60e51b8152600401610352906121e0565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a856110c8306114f8565b6040516001600160e01b031960e085901b1681526110f592919033906308f09e0f60e41b90600401612217565b602060405180830381865af4158015611112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113691906121c3565b6111825760405162461bcd60e51b815260206004820152601e60248201527f4772616e74526f6c654163636f756e74204163636573732044656e69656400006044820152606401610352565b610b44848484611983565b600081815260028301602052604090206001018054606091906111af90612245565b90506000036111d05760405162461bcd60e51b81526004016103529061227f565b600082815260028401602052604090206111ec90600301611c69565b90505b92915050565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125991906121c3565b156112765760405162461bcd60e51b8152600401610352906121e0565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a8761129a306114f8565b6040516001600160e01b031960e085901b1681526112c7929190339063b2dc26e560e01b90600401612217565b602060405180830381865af41580156112e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130891906121c3565b6113545760405162461bcd60e51b815260206004820152601a60248201527f5265676973746572526f6c65204163636573732044656e6965640000000000006044820152606401610352565b61136186868686866117e4565b9695505050505050565b6000306001600160a01b031663be22465d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf91906121c3565b156113ec5760405162461bcd60e51b8152600401610352906121e0565b73__$c43b1d7058274a71a9734d16e6b6586431$__63513d425a85611410306114f8565b6040516001600160e01b031960e085901b16815261143d929190339063df01de4560e01b90600401612217565b602060405180830381865af415801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e91906121c3565b6114ca5760405162461bcd60e51b815260206004820152601f60248201527f5265766f6b65526f6c654163636f756e74204163636573732044656e696564006044820152606401610352565b610b4484848461154f565b6040516e13149bdb1953585b9859d95b595b9d608a1b6020820152602f016105b2565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b60006111ec8383611c7d565b60006111ec8383611d70565b604051704c4956454c595f41444d494e5f524f4c4560781b6020820152600090603101604051602081830303815290604052805190602001208314806115d05750604051774c4956454c595f53595354454d5f41444d494e5f524f4c4560401b60208201526038016040516020818303038152906040528051906020012083145b1561164157600083815260028501602052604090206001906115f490600301611dbf565b116116415760405162461bcd60e51b815260206004820152601b60248201527f496c6c6567616c205265766f6b6520526f6c65204163636f756e7400000000006044820152606401610352565b60008381526002850160205260409020600101805461165f90612245565b90506000036116805760405162461bcd60e51b81526004016103529061227f565b6001600160a01b0382166116c85760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b6044820152606401610352565b600083815260028501602052604090206116e59060030183611dc9565b6117255760405162461bcd60e51b81526020600482015260116024820152701058d8dbdd5b9d08139bdd08119bdd5b99607a1b6044820152606401610352565b6001600160a01b03821660009081526020858152604080832086845290915281205460ff16600281111561175b5761175b612307565b036117a15760405162461bcd60e51b81526020600482015260166024820152751058d8dbdd5b9d08149bdb1948139bdd08119bdd5b9960521b6044820152606401610352565b6001600160a01b0382166000908152602085815260408083208684528252808320805460ff1916600290811790915587019091529020610b449060030183611deb565b6000828152600486016020526040812080546117ff90612245565b90506000036118425760405162461bcd60e51b815260206004820152600f60248201526e11dc9bdd5c08139bdd08119bdd5b99608a1b6044820152606401610352565b60008490036118875760405162461bcd60e51b8152602060048201526011602482015270149bdb194813985b5948125b9d985b1a59607a1b6044820152606401610352565b6000858560405160200161189c9291906123be565b60405160208183030381529060405280519060200120905086600201600082815260200190815260200160002060010180546118d790612245565b1590506119265760405162461bcd60e51b815260206004820152601760248201527f526f6c6520416c726561647920526567697374657265640000000000000000006044820152606401610352565b600084815260048801602052604090206119439060020182611543565b50600081815260028801602052604090206001810161196387898361241d565b50848155600201805484151560ff19909116179055905095945050505050565b60006040516020016119c3907f4c4956454c595f434f4d4d554e4954595f44414f5f4558454355544f525f524f8152614c4560f01b602082015260220190565b604051602081830303815290604052805190602001208303611a4b576000826001600160a01b03163b11611a4b5760405162461bcd60e51b815260206004820152602960248201527f496c6c6567616c204772616e7420436f6d6d756e6974792044616f204578656360448201526875746f7220526f6c6560b81b6064820152608401610352565b6040517f4c4956454c595f41535345545f4d414e414745525f524f4c45000000000000006020820152603901604051602081830303815290604052805190602001208303611aed576000826001600160a01b03163b11611aed5760405162461bcd60e51b815260206004820181905260248201527f496c6c6567616c204772616e74204173736574204d616e6167657220526f6c656044820152606401610352565b604051744c4956454c595f414e4f4e594d4f55535f524f4c4560581b6020820152603501604051602081830303815290604052805190602001208303611b755760405162461bcd60e51b815260206004820152601c60248201527f496c6c6567616c204772616e7420416e6f6e796d6f757320526f6c65000000006044820152606401610352565b600083815260028501602052604090206001018054611b9390612245565b9050600003611bb45760405162461bcd60e51b81526004016103529061227f565b6001600160a01b038216611bfc5760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b6044820152606401610352565b6001600160a01b0382166000908152602085815260408083208684528252808320805460ff19166001179055600287019091529020611c3e9060030183611dc9565b611c5f5760008381526002850160205260409020610b449060030183611e00565b5060019392505050565b60606000611c7683611e15565b9392505050565b60008181526001830160205260408120548015611d66576000611ca16001836124de565b8554909150600090611cb5906001906124de565b9050818114611d1a576000866000018281548110611cd557611cd56122a7565b9060005260206000200154905080876000018481548110611cf857611cf86122a7565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d2b57611d2b6124f1565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111ef565b60009150506111ef565b6000818152600183016020526040812054611db7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111ef565b5060006111ef565b60006111ef825490565b6001600160a01b038116600090815260018301602052604081205415156111ec565b60006111ec836001600160a01b038416611c7d565b60006111ec836001600160a01b038416611d70565b606081600001805480602002602001604051908101604052809291908181526020018280548015611e6557602002820191906000526020600020905b815481526020019060010190808311611e51575b50505050509050919050565b600080600060608486031215611e8657600080fd5b505081359360208301359350604090920135919050565b8015158114611eab57600080fd5b50565b600080600060608486031215611ec357600080fd5b83359250602084013591506040840135611edc81611e9d565b809150509250925092565b60008060408385031215611efa57600080fd5b50508035926020909101359150565b606081526000845180606084015260005b81811015611f375760208188018101516080868401015201611f1a565b506000608082850101526080601f19601f8301168401019150508360208301528215156040830152949350505050565b600080600060408486031215611f7c57600080fd5b83359250602084013567ffffffffffffffff80821115611f9b57600080fd5b818601915086601f830112611faf57600080fd5b813581811115611fbe57600080fd5b8760208260061b8501011115611fd357600080fd5b6020830194508093505050509250925092565b80356001600160a01b0381168114611ffd57600080fd5b919050565b60008060006060848603121561201757600080fd5b833592506020840135915061202e60408501611fe6565b90509250925092565b60008060006040848603121561204c57600080fd5b83359250602084013567ffffffffffffffff8082111561206b57600080fd5b818601915086601f83011261207f57600080fd5b81358181111561208e57600080fd5b8760208260051b8501011115611fd357600080fd5b6020808252825182820181905260009190848201906040850190845b818110156120db578351835292840192918401916001016120bf565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156120db5783516001600160a01b031683529284019291840191600101612103565b60008060008060006080868803121561214057600080fd5b85359450602086013567ffffffffffffffff8082111561215f57600080fd5b818801915088601f83011261217357600080fd5b81358181111561218257600080fd5b89602082850101111561219457600080fd5b6020830196508095505050506040860135915060608601356121b581611e9d565b809150509295509295909350565b6000602082840312156121d557600080fd5b8151611c7681611e9d565b60208082526017908201527f536166654d6f64653a2043616c6c2052656a6563746564000000000000000000604082015260600190565b93845260208401929092526001600160a01b031660408301526001600160e01b031916606082015260800190565b600181811c9082168061225957607f821691505b60208210810361227957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d149bdb1948139bdd08119bdd5b9960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156122cf57600080fd5b6111ec82611fe6565b634e487b7160e01b600052601160045260246000fd5b600060018201612300576123006122d8565b5060010190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008235605e1983360301811261234957600080fd5b9190910192915050565b6000808335601e1984360301811261236a57600080fd5b83018035915067ffffffffffffffff82111561238557600080fd5b60200191503681900382131561239a57600080fd5b9250929050565b6000602082840312156123b357600080fd5b8135611c7681611e9d565b8183823760009101908152919050565b601f82111561241857600081815260208120601f850160051c810160208610156123f55750805b601f850160051c820191505b8181101561241457828155600101612401565b5050505b505050565b67ffffffffffffffff8311156124355761243561231d565b612449836124438354612245565b836123ce565b6000601f84116001811461247d57600085156124655750838201355b600019600387901b1c1916600186901b1783556124d7565b600083815260209020601f19861690835b828110156124ae578685013582556020948501946001909201910161248e565b50868210156124cb5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b818103818111156111ef576111ef6122d8565b634e487b7160e01b600052603160045260246000fdfea26469706673582212204e316b0df8be10f14e64899e46a1a20f44a22573050d6705d5b3a2ecfcb4168e64736f6c63430008110033",
  "libraries": {
    "LAccessControl": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}