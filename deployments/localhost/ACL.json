{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "LIB_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIB_VERSION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ANONYMOUS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ASSET_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ASSET_GROUP",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ASSET_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_ASSET_REALM",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_COMMUNITY_DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_DAO_GROUP",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_GENERAL_GROUP",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_GENERAL_REALM",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_SYSTEM_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createRequestContext",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4[]",
              "name": "funcSelectors",
              "type": "bytes4[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestRegisterContext[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xff670583ef95fcd611599246c6b9a02478f6da413ff8f3991eb982d1ce60d293",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2593264",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0d13dae40bb31b1c0e52cff52eac16d48924b759311e32462b18a3e7513e7063",
    "transactionHash": "0xff670583ef95fcd611599246c6b9a02478f6da413ff8f3991eb982d1ce60d293",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2593264",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ec35144bcae382bade356ad21c3cf133",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LIB_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIB_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ANONYMOUS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ASSET_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ASSET_GROUP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ASSET_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_ASSET_REALM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_COMMUNITY_DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_DAO_GROUP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_GENERAL_GROUP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_GENERAL_REALM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_SYSTEM_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createRequestContext\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSelectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestRegisterContext[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/lib/acl/LAccessControl.sol\":\"LAccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../lib/struct/LEnumerableMap.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\n\\nabstract contract AccessControlStorage is BaseUUPSStorage {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableMap for LEnumerableMap.Bytes32ToBytes32Map;\\n  using LEnumerableMap for LEnumerableMap.AddressToUintMap;\\n\\n  enum Status {\\n    NONE,\\n    ENABLED,\\n    DISABLED\\n  }\\n\\n  struct RoleStat {\\n    bytes32 role;\\n    Status status;\\n  }\\n\\n  struct Context {\\n    bytes32 realm;\\n    address contractId;\\n    bool isEnabled;\\n    mapping(bytes4 => RoleStat) resources; // function selector => RoleStat\\n    LEnumerableSet.Bytes32Set funcSet;\\n  }\\n\\n  struct Role {\\n    bytes32 group;\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.AddressSet accountSet;\\n  }\\n\\n  struct Realm {\\n    string name;\\n    bool isEnabled;\\n    bool isUpgradable;\\n    LEnumerableSet.Bytes32Set ctxSet;\\n  }\\n\\n  struct Group {\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.Bytes32Set roleSet;\\n  }\\n\\n  struct DataCollections {\\n    mapping(address => mapping(bytes32 => Status)) accountMap;\\n    mapping(bytes32 => Context) ctxMap;\\n    mapping(bytes32 => Role) roleMap;\\n    mapping(bytes32 => Realm) realmMap;\\n    mapping(bytes32 => Group) groupMap;\\n  }\\n\\n  DataCollections internal _data;\\n}\\n\",\"keccak256\":\"0x60509d8305172425766c720799c949fa5571e2db7935d6726d8b6408b2009aeb\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool status;\\n  }\\n\\n   struct RequestPredictContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    bytes32 salt;\\n    address subject;\\n    address deployer;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, bytes32 realm);\\n\\n  event PredictContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, address deployer, address subject, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed contractId, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function registerPredictContext(\\n    bytes memory signature,\\n    RequestPredictContext calldata rpc,\\n    RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0x4811f66509db07ea5b29faf433bf0209e8fd13a822ec371a0da2178289fce71b\",\"license\":\"MIT\"},\"src/contracts/acl/IGroupManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGroupManagement {\\n  event GroupRegistered(bytes32 indexed group, address indexed sender, string name, bool status);\\n\\n  event GroupStatusChanged(bytes32 indexed group, address indexed sender, bool status);\\n\\n  function registerGroup(string calldata name, bool status) external returns (bytes32);\\n\\n  function setGroupStatus(bytes32 group, bool status) external returns (bool);\\n\\n  function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool);\\n\\n  function getGroupInfo(bytes32 group) external view returns (string memory, bool);\\n\\n  function getGroupRoles(bytes32 group) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xef419de7dcf0029fe7a05850895dc4ce569d743e695d7eb2d9d345d185b267f8\",\"license\":\"MIT\"},\"src/contracts/acl/IRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRealmManagement {\\n  event RealmRegistered(bytes32 indexed realm, address indexed sender, string name, bool status, bool isUpgradable);\\n\\n  event RealmStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  event RealmUpgradeStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  function registerRealm(\\n    string calldata name,\\n    bool status,\\n    bool isUpgradable\\n  ) external returns (bytes32);\\n\\n  function setRealmStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function setRealmUpgradeStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool);\\n\\n  function getRealmInfo(bytes32 realm)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bool,\\n      bool\\n    );\\n\\n  function getRealmContexts(bytes32 realm) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x7058ef3754e6c4b92a61e2e908df2708f1c110fc82100338abe2ce98f3b02c0f\",\"license\":\"MIT\"},\"src/contracts/acl/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRoleManagement {\\n\\n  struct RegiterRoleRequest {\\n    bytes32 group;\\n    string name;    \\n    bool status;\\n  }\\n\\n  struct UpdateRoleRequest {\\n    bytes32 role;\\n    address account;\\n  }\\n\\n  event RoleAccountGranted(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleAccountRevoked(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed role,\\n    string indexed name,\\n    bytes32 group,\\n    bool isEnabled\\n  );\\n\\n  event RoleStatusChanged(address indexed sender, bytes32 indexed role, bytes32 indexed group, bool status);\\n\\n  event RoleGroupChanged(address indexed sender, bytes32 indexed role, bytes32 indexed newGroup, bytes32 oldGroup);\\n\\n  function registerRole(\\n    string calldata name,\\n    bytes32 group,\\n    bool status\\n  ) external returns (bytes32);\\n\\n  function batchRegisterRole(RegiterRoleRequest[] calldata requests) external returns(bytes32[] memory);\\n\\n  function grantRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchGrantRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function revokeRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchRevokeRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function setRoleStatus(bytes32 role, bool status) external returns (bool);\\n\\n  function setRoleGroup(bytes32 role, bytes32 group) external returns (bool);\\n\\n  function getRoleInfo(bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    );\\n\\n  function getRoleAccounts(bytes32 role) external view returns (address[] memory);\\n\\n  function hasRoleAccount(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x18e7657fdde30362e8c0186ac84acfdbc161c4f8f06e1e3cb009021d8fe5ab58\",\"license\":\"MIT\"},\"src/contracts/lib/LContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the context\\n */\\nlibrary LContextUtils {\\n  function generateCtx(address contractId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId));\\n  }\\n}\\n\",\"keccak256\":\"0x379d3f1670e48d86daed450ef0f5b75e59c592aa92b0d9ca2034d1888730969d\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../../acl/IGroupManagement.sol\\\";\\nimport \\\"../../acl/IRealmManagement.sol\\\";\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\n\\nlibrary LAccessControl {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LAccessControl\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant LIVELY_GENERAL_REALM = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_REALM\\\"));\\n  bytes32 public constant LIVELY_ASSET_REALM = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_REALM\\\"));\\n\\n  bytes32 public constant LIVELY_GENERAL_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_GROUP\\\"));\\n  bytes32 public constant LIVELY_DAO_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_DAO_GROUP\\\"));\\n  bytes32 public constant LIVELY_ASSET_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_GROUP\\\"));\\n\\n  bytes32 public constant LIVELY_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_SYSTEM_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_SYSTEM_ADMIN_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_ASSET_MANAGER_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_MANAGER_ROLE\\\"));\\n  bytes32 public constant LIVELY_ASSET_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_ADMIN_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_COMMUNITY_DAO_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_COMMUNITY_DAO_ROLE\\\"));  \\n  bytes32 public constant LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_ANONYMOUS_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ANONYMOUS_ROLE\\\"));\\n\\n  function initializeContext(AccessControlStorage.DataCollections storage data) external {\\n    data.accountMap[msg.sender][LIVELY_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n    data.accountMap[msg.sender][LIVELY_SYSTEM_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n\\n    data.roleMap[LIVELY_ADMIN_ROLE].name = \\\"LIVELY_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].name = \\\"LIVELY_SYSTEM_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].name = \\\"LIVELY_ASSET_MANAGER_ROLE\\\";\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].group = LIVELY_ASSET_GROUP;\\n\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].name = \\\"LIVELY_ASSET_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].group = LIVELY_ASSET_GROUP;\\n\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].name = \\\"LIVELY_COMMUNITY_DAO_ROLE\\\";\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].group = LIVELY_DAO_GROUP;\\n\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].name = \\\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\\\";\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].group = LIVELY_DAO_GROUP;\\n    \\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].name = \\\"LIVELY_ANONYMOUS_ROLE\\\";\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].group = LIVELY_GENERAL_GROUP;\\n\\n    data.groupMap[LIVELY_GENERAL_GROUP].name = \\\"LIVELY_GENERAL_GROUP\\\";\\n    data.groupMap[LIVELY_GENERAL_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_ADMIN_ROLE);\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_SYSTEM_ADMIN_ROLE);\\n\\n    data.groupMap[LIVELY_DAO_GROUP].name = \\\"LIVELY_DAO_GROUP\\\";\\n    data.groupMap[LIVELY_DAO_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_DAO_GROUP].roleSet.add(LIVELY_COMMUNITY_DAO_ROLE);\\n    data.groupMap[LIVELY_DAO_GROUP].roleSet.add(LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE);\\n\\n    data.groupMap[LIVELY_ASSET_GROUP].name = \\\"LIVELY_ASSET_GROUP\\\";\\n    data.groupMap[LIVELY_ASSET_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_ASSET_GROUP].roleSet.add(LIVELY_ASSET_MANAGER_ROLE);\\n    data.groupMap[LIVELY_ASSET_GROUP].roleSet.add(LIVELY_ASSET_ADMIN_ROLE);\\n\\n    data.realmMap[LIVELY_GENERAL_REALM].name = \\\"LIVELY_GENERAL_REALM\\\";\\n    data.realmMap[LIVELY_GENERAL_REALM].isEnabled = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].isUpgradable = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].ctxSet.add(LContextUtils.generateCtx(address(this)));\\n\\n    data.realmMap[LIVELY_ASSET_REALM].name = \\\"LIVELY_ASSET_REALM\\\";\\n    data.realmMap[LIVELY_ASSET_REALM].isEnabled = true;\\n    data.realmMap[LIVELY_ASSET_REALM].isUpgradable = true;  \\n  }\\n\\n  function createRequestContext() external pure returns (IContextManagement.RequestRegisterContext[] memory) {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](2);\\n    rrc[0].role = LIVELY_ADMIN_ROLE;\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](22);\\n    rrc[0].funcSelectors[0] = IProxy.setUpgradeStatus.selector;\\n    rrc[0].funcSelectors[1] = IProxy.setSafeMode.selector;\\n    rrc[0].funcSelectors[2] = IContextManagement.addContextFuncRole.selector;\\n    rrc[0].funcSelectors[3] = IContextManagement.removeContextFunc.selector;\\n    rrc[0].funcSelectors[4] = IContextManagement.grantContextRole.selector;\\n    rrc[0].funcSelectors[5] = IContextManagement.revokeContextRole.selector;\\n    rrc[0].funcSelectors[6] = IContextManagement.setContextRealm.selector;\\n    rrc[0].funcSelectors[7] = IContextManagement.setContextStatus.selector;\\n    rrc[0].funcSelectors[8] = IRoleManagement.registerRole.selector;\\n    rrc[0].funcSelectors[9] = IRoleManagement.batchRegisterRole.selector;\\n    rrc[0].funcSelectors[10] = IRoleManagement.grantRoleAccount.selector;\\n    rrc[0].funcSelectors[11] = IRoleManagement.batchGrantRoleAccount.selector;\\n    rrc[0].funcSelectors[12] = IRoleManagement.revokeRoleAccount.selector;\\n    rrc[0].funcSelectors[13] = IRoleManagement.batchRevokeRoleAccount.selector;\\n    rrc[0].funcSelectors[14] = IRoleManagement.setRoleStatus.selector;\\n    rrc[0].funcSelectors[15] = IRoleManagement.setRoleGroup.selector;\\n    rrc[0].funcSelectors[16] = IGroupManagement.registerGroup.selector;\\n    rrc[0].funcSelectors[17] = IGroupManagement.setGroupStatus.selector;\\n    rrc[0].funcSelectors[18] = IRealmManagement.registerRealm.selector;\\n    rrc[0].funcSelectors[19] = IRealmManagement.setRealmStatus.selector;\\n    rrc[0].funcSelectors[20] = IRealmManagement.setRealmUpgradeStatus.selector;\\n    rrc[0].funcSelectors[21] = bytes4(keccak256(\\\"withdrawBalance(address)\\\"));\\n\\n    rrc[1].role = LIVELY_SYSTEM_ADMIN_ROLE;\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](4);\\n    rrc[1].funcSelectors[0] = IProxy.setLocalAdmin.selector;\\n    rrc[1].funcSelectors[1] = IProxy.upgradeTo.selector;\\n    rrc[1].funcSelectors[2] = IContextManagement.registerContext.selector;\\n    rrc[1].funcSelectors[3] = IContextManagement.updateContext.selector;\\n\\n    return rrc;\\n  }\\n\\n  function hasAccess(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool) {\\n    bytes32 role = data.ctxMap[context].resources[signature].role;\\n    // console.log(\\\"hasAccess called, address: %s\\\", account);\\n\\n    // console.log(\\\"data.ctxMap[context].smca: %s\\\", data.ctxMap[context].smca);\\n    // console.log(\\\"data.ctxMap[context].isEnabled:\\\");\\n    // console.logBool(data.ctxMap[context].isEnabled);\\n    // console.log(\\\"data.ctxMap[context].realm: \\\");\\n    // console.logBytes32(data.ctxMap[context].realm);\\n    // console.log(\\\"data.ctxMap[context].resources[signature].status: \\\");\\n    // console.logBytes1(bytes1(uint8(data.ctxMap[context].resources[signature].status)));\\n    // console.log(\\\"data.ctxMap[context].resources[signature].role: \\\");\\n    // console.logBytes32(data.ctxMap[context].resources[signature].role);\\n\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].name: %s\\\", data.realmMap[data.ctxMap[context].realm].name);\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].isEnabled: \\\");\\n    // console.logBool(data.realmMap[data.ctxMap[context].realm].isEnabled);\\n\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].name: %s\\\", data.groupMap[data.roleMap[role].group].name);\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].isEnabled: \\\");\\n    // console.logBool(data.groupMap[data.roleMap[role].group].isEnabled);\\n\\n    // console.log(\\\"data.accountMap[account][role]: \\\");\\n    // console.logBytes1(bytes1(uint8(data.accountMap[account][role])));\\n\\n    if (role == LIVELY_ANONYMOUS_ROLE) {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED;\\n    } else {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED &&\\n        data.realmMap[data.ctxMap[context].realm].isEnabled &&\\n        data.groupMap[data.roleMap[role].group].isEnabled &&\\n        data.accountMap[account][role] == AccessControlStorage.Status.ENABLED;\\n    }\\n  }\\n\\n  function isLivelySystemAdminRole(AccessControlStorage.DataCollections storage data, address account)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.accountMap[account][LIVELY_SYSTEM_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAdminRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAssetManagerRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ASSET_MANAGER_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAssetAdminRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ASSET_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyCommunityDaoRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_COMMUNITY_DAO_ROLE] == AccessControlStorage.Status.ENABLED;  \\n  }\\n\\n  function isLivelyCommunityDaoExecutorRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyGeneralGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_GENERAL_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyAssetGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_ASSET_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyDaoGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_DAO_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyGeneralRealm(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.realmMap[LIVELY_GENERAL_REALM].ctxSet.contains(context);\\n  }\\n\\n  function isLivelyAssetRealm(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.realmMap[LIVELY_ASSET_REALM].ctxSet.contains(context);\\n  }\\n\\n\\n  function isContextSafeMode(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return IProxy(data.ctxMap[context].contractId).isSafeMode();\\n  }\\n\\n  function isContextUpgradable(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return IProxy(data.ctxMap[context].contractId).isUpgradable();\\n  }\\n\\n  function isRealmUpgradable(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    if (bytes(data.realmMap[realm].name).length == 0) return false;\\n    return data.realmMap[realm].isUpgradable;\\n  }\\n\\n  function isGroupExists(AccessControlStorage.DataCollections storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0;\\n  }\\n\\n  function isGroupEnabled(AccessControlStorage.DataCollections storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0 && data.groupMap[group].isEnabled;\\n  }\\n\\n  function isContextExists(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0);\\n  }\\n\\n  function isContextFunctionExists(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0) && data.ctxMap[context].funcSet.contains(functionSelector);\\n  }\\n\\n  function isContextFunctionEnabled(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return\\n      data.ctxMap[context].contractId != address(0) &&\\n      data.ctxMap[context].resources[functionSelector].status == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isContextEnabled(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0) && data.ctxMap[context].isEnabled;\\n  }\\n\\n  function isRoleExists(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0;\\n  }\\n\\n  function isRoleEnabled(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0 && data.roleMap[role].isEnabled;\\n  }\\n\\n  function isRealmExists(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0;\\n  }\\n\\n  function isRealmEnabled(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0 && data.realmMap[realm].isEnabled;\\n  }\\n}\\n\",\"keccak256\":\"0x222138d7d05b0fdf2796daea6bca334ae7fe93e7edbdc902b1931509cfa3cd59\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./LEnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) \\n * - `address -> uint256` (`AddressToUintMap`) \\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) \\n * - `uint256 -> uint256` (`UintToUintMap`) \\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) \\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap.\\n * ====\\n */\\nlibrary LEnumerableMap {\\n    using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        LEnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x902b2d606e688f51f33d0a1db574be9cc049c20e7c8fd43cde744e2ec3743eb6\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xeb49909b77ba631382c48e9fead2e49f8b4c72f3325f7685d4bddfce32d7528b\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n */\\n\\nabstract contract BaseUUPSStorage {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 internal constant _TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  \\n  address internal immutable __self = address(this);\\n\\n  bytes32 internal _domainName;\\n  bytes32 internal _domainVersion;\\n  bytes32 internal _domainRealm;\\n  address internal _accessControlManager;\\n  bool internal _isSafeMode;\\n  bool internal _isUpgradable;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x086334b0668244b8ff2ef60dd770da77ecfd05f705e7c2251c60553c4651bfad\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBaseProxy {\\n  event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x719d13ceb21e3fda10fc0ba5fb1b167b8736919d6c6a99f6268667acb8b4d062\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event LocalAdminChanged(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event SafeModeChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  event UpgradeStatusChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeMode(bool status) external returns (bool);\\n\\n  function setUpgradeStatus(bool status) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function contractName() external view returns (bytes32);\\n\\n  function contractVersion() external view returns (bytes32);\\n\\n  function contractRealm() external view returns (bytes32);\\n\\n  function contractContext() external view returns (bytes32);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function isSafeMode() external view returns (bool);\\n\\n  function isUpgradable() external view returns (bool);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n\\n}\\n\",\"keccak256\":\"0x93bf3ccb33a8616fba3379b096e79e88ae3249882af81d1dc808eec6688800a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}