{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "ActivityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "scma",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "ContextRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "ContextRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "ContextRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "scma",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ContextUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "GroupDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "GroupEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "GroupRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "GroupRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "GroupRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "realm",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "initializedCount",
          "type": "uint16"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RealmContextGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RealmDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RealmEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "RealmRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RealmRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RealmUpgradeEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "RoleAccountGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "RoleAccountRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "RoleDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "RoleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "RoleRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "UpgradabilityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "LIVELY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_GENERAL_GROUP",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_GENERAL_REALM",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIVELY_SYSTEM_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "addGroup",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "addRealm",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "group",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "addRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRealm",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegisteration",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        }
      ],
      "name": "disableContext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "disabledGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "disabledRealm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        }
      ],
      "name": "enableContext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        }
      ],
      "name": "enableUpgradeContext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "enableUpgradeRealm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "enabledGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "enabledRealm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContext",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        }
      ],
      "name": "getContext",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        }
      ],
      "name": "getContextFuncs",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "getGroupRoles",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitializedCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "getRealm",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "getRealmContextes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRole",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleContextes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "grantContextRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "grantGroupRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "grantRealmContext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRoleAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "signature",
          "type": "bytes4"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAccountRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "hasContextRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "hasGroupRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasLivelyAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "hasLivelyGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "hasLivelyRealm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "hasRealmContext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasSystemAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domainName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "domainVersion",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "domainRealm",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "acl",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "isEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitializing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgradable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "isUpgradeEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "realm",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "smca",
              "type": "address"
            }
          ],
          "internalType": "struct IContextManagement.RequestContext",
          "name": "rc",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4[]",
              "name": "funcSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IContextManagement.RequestContextResource[]",
          "name": "rcr",
          "type": "tuple[]"
        }
      ],
      "name": "registerContext",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "revokeContextRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "revokeGroupRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "revokeRealmContext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRoleAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setActivity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "setDisabledRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "setEnabledRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setUpgradability",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "realm",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "smca",
              "type": "address"
            }
          ],
          "internalType": "struct IContextManagement.RequestContext",
          "name": "rc",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4[]",
              "name": "funcSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IContextManagement.RequestContextResource[]",
          "name": "rcr",
          "type": "tuple[]"
        }
      ],
      "name": "updateContext",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "forceInitCall",
          "type": "bool"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2157049b1f6c24ddf08950cf54c6520b2944d5376b7dcade081c146ae0c1e9d1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2513220",
    "logsBloom": "0x
    "blockHash": "0x933b054221844a1623c09b01e0411cc6a91d44cfb9b69ba47444fe086bdff79c",
    "transactionHash": "0x2157049b1f6c24ddf08950cf54c6520b2944d5376b7dcade081c146ae0c1e9d1",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2513220",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7be07c83dcb00354504426619b24f6c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ActivityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scma\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"ContextRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"ContextRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"ContextRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scma\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ContextUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"GroupDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"GroupEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"GroupRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"GroupRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"GroupRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"realm\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"initializedCount\",\"type\":\"uint16\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RealmContextGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RealmDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RealmEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"RealmRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RealmRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RealmUpgradeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"RoleAccountGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"RoleAccountRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"RoleDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"RoleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"RoleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"UpgradabilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LIVELY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_GENERAL_GROUP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_GENERAL_REALM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIVELY_SYSTEM_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"addGroup\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"addRealm\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"group\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"addRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRealm\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegisteration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"}],\"name\":\"disableContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"disabledGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"disabledRealm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"}],\"name\":\"enableContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"}],\"name\":\"enableUpgradeContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"enableUpgradeRealm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"enabledGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"enabledRealm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContext\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"}],\"name\":\"getContext\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"}],\"name\":\"getContextFuncs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"getGroup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"getGroupRoles\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitializedCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"getRealm\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"getRealmContextes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRole\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleContextes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"grantContextRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"grantGroupRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"grantRealmContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRoleAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAccountRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"hasContextRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"hasGroupRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasLivelyAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"hasLivelyGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"hasLivelyRealm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"hasRealmContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasSystemAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainVersion\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainRealm\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"acl\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitializing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"isUpgradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"smca\",\"type\":\"address\"}],\"internalType\":\"struct IContextManagement.RequestContext\",\"name\":\"rc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IContextManagement.RequestContextResource[]\",\"name\":\"rcr\",\"type\":\"tuple[]\"}],\"name\":\"registerContext\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"revokeContextRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"revokeGroupRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"revokeRealmContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRoleAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setActivity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"setDisabledRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"setEnabledRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setUpgradability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"smca\",\"type\":\"address\"}],\"internalType\":\"struct IContextManagement.RequestContext\",\"name\":\"rc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IContextManagement.RequestContextResource[]\",\"name\":\"rcr\",\"type\":\"tuple[]\"}],\"name\":\"updateContext\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forceInitCall\",\"type\":\"bool\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"grantRoleAccount(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasAccess(bytes32,address,bytes4)\":{\"details\":\"Function called by apps to check ACL on kernel or to check permission status\",\"returns\":{\"_0\":\"boolean indicating whether the ACL allows the role or not\"}},\"hasAccountRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"revokeRoleAccount(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/acl/AccessControlManager.sol\":\"AccessControlManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/contracts/acl/AccessControlManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"./AccessControlStorage.sol\\\";\\nimport \\\"./IGroupManagement.sol\\\";\\nimport \\\"./IRealmManagement.sol\\\";\\nimport \\\"./IRoleManagement.sol\\\";\\nimport \\\"./IContextManagement.sol\\\";\\nimport \\\"../lib/struct/EnumerableSet.sol\\\";\\nimport \\\"../lib/struct/EnumerableMap.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"../proxy/BaseUUPSProxy.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract AccessControlManager is BaseUUPSProxy, AccessControlStorage, IContextManagement, IAccessControl, IGroupManagement, IRealmManagement,IRoleManagement {\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    constructor() {\\n        // _disableInitializers();\\n    }\\n\\n    function initialize(string calldata domainName, string calldata domainVersion, string calldata domainRealm, address acl) public initializer {\\n        console.log(\\\"initialize called . . . \\\");\\n        __BASE_UUPS_init(domainName, domainVersion, domainRealm, acl);\\n        // _setAdmin(address(this));\\n\\n        // return this.registerContext();\\n        // emit Initialized(_msgSender(), address(this), _implementation(), _domainName, _domainVersion, _domainRealm, getInitializedCount());\\n    }\\n\\n    // TODO should be complete.\\n    function contractRegisteration() external onlyProxy onlyAdmin returns (bool) {\\n        RequestContext memory reqCtx = RequestContext({\\n            realm: keccak256(abi.encodePacked(_domainRealm)),\\n            smca: address(this)\\n        });\\n\\n        RequestContextResource memory rcr;\\n        rcr.role = LIVELY_ADMIN_ROLE;\\n        rcr.funcSelectors = new bytes4[](10);\\n        rcr.funcSelectors[0] = this.setUpgradability.selector;\\n        rcr.funcSelectors[1] = this.setActivity.selector;\\n        rcr.funcSelectors[2] = this.setAdmin.selector;\\n        rcr.funcSelectors[3] = this.upgradeTo.selector;\\n        rcr.funcSelectors[4] = this.initialize.selector;\\n    }\\n\\n    function registerContext(RequestContext calldata rc, RequestContextResource[] calldata rcr) external returns (bytes32) {\\n        require(_msgSender() == rc.smca, \\\"Illegal Contract Address\\\");\\n        require(bytes(_realmMap[rc.realm].name).length != 0, \\\"Realm Not Found\\\");\\n\\n        bytes32 ctx = ContextUtils.generateCtx(rc.smca);\\n        require(_ctxMap[ctx].smca == address(0), \\\"Context Already Registered\\\");\\n        Context storage newContext = _ctxMap[ctx];\\n        newContext.realm = rc.realm;\\n        newContext.smca = rc.smca;\\n        \\n        for (uint256 i = 0; i < rcr.length; i++) {\\n            require(bytes(_roleMap[rcr[i].role].name).length != 0, \\\"Role Not Found\\\");\\n            for (uint256 j = 0; j < rcr[i].funcSelectors.length; j++) {\\n                newContext.resources[rcr[i].funcSelectors[j]][rcr[i].role] = Status.ENABLED;\\n                newContext.funcSet.add(ctx); \\n            }\\n        }\\n\\n        emit ContextRegistered(ctx, rc.smca, _msgSender(), rc.realm);\\n    }\\n\\n\\n    function updateContext(RequestContext calldata rc, RequestContextResource[] calldata rcr) external returns (bytes32) {}\\n\\n    function grantContextRole(bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bool) {}\\n\\n    function revokeContextRole(bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bool) {}\\n\\n    function enableContext(bytes32 ctx) external returns (bool) {}\\n\\n    function disableContext(bytes32 ctx) external returns (bool) {}\\n\\n    function enableUpgradeContext(bytes32 ctx) external returns (bool) {}\\n\\n    function hasContextRole(bytes32 ctx, bytes32 role, bytes4 functionSelector) external view returns (bool) {}\\n\\n    function getContext(bytes32 ctx) external view returns (string memory, string memory, bytes32, bool) {}\\n\\n    function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory) {}\\n\\n\\n\\n    function hasAccess(bytes32 context, address account, bytes4 signature) external view returns (bool) {\\n        return true;\\n    }\\n\\n    function hasSystemAdminRole(address account) external view returns (bool) {}\\n\\n    function hasLivelyAdminRole(address account) external view returns (bool) {}\\n\\n    function hasLivelyGroup(bytes32 role) external view returns (bool) {}\\n\\n    function hasLivelyRealm(bytes32 context) external view returns (bool) {}\\n\\n    function isEnabled(bytes32 context) external view returns (bool) {}\\n\\n    function isUpgradeEnabled(bytes32 context) external view returns (bool) {}\\n\\n      function addGroup(string calldata name, bool isEnabled) external returns (bytes32) {} \\n\\n    function grantGroupRole(bytes32 group, bytes32 role) external returns (bool) {} \\n\\n    function revokeGroupRole(bytes32 group, bytes32 role) external returns (bool) {}\\n\\n    function enabledGroup(bytes32 group) external returns (bool) {}\\n\\n    function disabledGroup(bytes32 group) external returns (bool) {}\\n\\n    function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool) {}\\n\\n    function getGroup(bytes32 group) external view returns (string memory, bool) {}\\n\\n    function getGroupRoles(bytes32 group) external view returns (bytes32[] memory) {}\\n\\n     function addRealm(string calldata name, bool isEnabled) external returns (bytes32) {}\\n\\n    function grantRealmContext(bytes32 realm, bytes32 context) external returns (bool) {}\\n\\n    function revokeRealmContext(bytes32 realm, bytes32 context) external returns (bool) {}\\n\\n    function enabledRealm(bytes32 realm) external returns (bool) {}\\n\\n    function disabledRealm(bytes32 realm) external returns (bool) {}\\n\\n    function enableUpgradeRealm(bytes32 realm) external returns (bool) {}\\n\\n    function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool) {}\\n\\n    function getRealm(bytes32 realm) external view returns (string memory, bool) {}\\n\\n    function getRealmContextes(bytes32 realm) external view returns (bytes32[] memory) {}\\n\\n\\n    function grantRoleAccount(bytes32 role, address account) external returns (bool) {}\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRoleAccount(bytes32 role, address account) external returns (bool) {}\\n\\n    /**\\n     * \\n     */\\n    function addRole(string calldata name, string calldata group, bool isEnabled) external returns (bytes32) {}\\n\\n    /**\\n     * \\n     */\\n    function setEnabledRole(bytes32 role) external returns (bool) {}\\n\\n    /**\\n     * \\n     */\\n    function setDisabledRole(bytes32 role) external returns (bool) {}\\n\\n\\n    function getRole(bytes32 role) external view returns (string memory, string memory, bool) {}\\n\\n    function getRoleUsers(bytes32 role) external view returns (address[] memory) {}\\n\\n    function getRoleContextes(bytes32 role) external view returns (bytes32[] memory) {}\\n\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasAccountRole(bytes32 role, address account) external view returns (bool) {}\\n\\n}\",\"keccak256\":\"0x3ab6fd9a03e43fdc3fdee306ae1a953133c95ef3d228fbb2154dee42e2fabcba\",\"license\":\"MIT\"},\"src/contracts/acl/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../lib/struct/EnumerableSet.sol\\\";\\nimport \\\"../lib/struct/EnumerableMap.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\n\\nabstract contract AccessControlStorage is BaseUUPSStorage {\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    bytes32 public constant LIVELY_GENERAL_REALM = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_REALM\\\"));\\n    bytes32 public constant LIVELY_GENERAL_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_GROUP\\\"));\\n    bytes32 public constant LIVELY_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ADMIN_ROLE\\\"));\\n    bytes32 public constant LIVELY_SYSTEM_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_SYSTEM_ADMIN_ROLE\\\"));\\n\\n\\n    enum Status {\\n        NONE,\\n        ENABLED,\\n        DISABLED\\n    }\\n\\n    struct Context {\\n        bytes32 realm;\\n        address smca;                    // smart contract address\\n        mapping(bytes32 => mapping(bytes32 => Status)) resources;      // function selector  => Roles\\n        EnumerableSet.Bytes32Set funcSet; \\n    }\\n\\n    struct Role {\\n        string name;\\n        bytes32 group;\\n        bool isEnabled;\\n        EnumerableMap.AddressToUintMap userMap;\\n        // mapping(address => Status) userMap;        \\n        // EnumerableSet.AddressSet userSet;\\n        // EnumerableSet.Bytes32Set ctxSet;        // TODO check it if needed or no\\n    }\\n\\n    struct Realm {\\n        string name;\\n        bool isEnabled;\\n        bool isUpgradable;\\n        EnumerableSet.Bytes32Set ctxSet;        \\n    }\\n\\n    struct Group {\\n        string name;\\n        bool isEnabled;\\n        EnumerableSet.Bytes32Set roles;       \\n    }\\n\\n    mapping(address => mapping(bytes32 => Status)) internal _userRoleMap;\\n    mapping(bytes32 => Context) internal _ctxMap;\\n    mapping(bytes32 => Role) internal _roleMap;\\n    mapping(bytes32 => Realm) internal _realmMap;\\n    mapping(bytes32 => Group) internal _groupMap;\\n\\n    Realm internal _livelyGeneralRealm;\\n    Group internal _livelyGeneralGroup;\\n    Role  internal _livelyAdminRole;\\n    Role  internal _liveltSystemAdminRole;\\n}\",\"keccak256\":\"0x337c577c335c4f8f65d9a67413f319eea2dc1097d5991f7c012957ae0e10de9e\",\"license\":\"MIT\"},\"src/contracts/acl/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IAccessControl {\\n    /** \\n     * @dev Function called by apps to check ACL on kernel or to check permission status\\n     * @return boolean indicating whether the ACL allows the role or not\\n     */\\n    function hasAccess(bytes32 context, address account, bytes4 signature) external view returns (bool);\\n\\n    function hasSystemAdminRole(address account) external view returns (bool);\\n\\n    function hasLivelyAdminRole(address account) external view returns (bool);\\n\\n    function hasLivelyGroup(bytes32 role) external view returns (bool);\\n\\n    function hasLivelyRealm(bytes32 context) external view returns (bool);\\n\\n    function isEnabled(bytes32 context) external view returns (bool);\\n\\n    function isUpgradeEnabled(bytes32 context) external view returns (bool);\\n\\n}\",\"keccak256\":\"0xf107da18cea20a75cf98bb110c853e5f7a8ee827156f44eb523dab2b84bd4133\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IContextManagement {\\n\\n    struct RequestContext {\\n        bytes32 realm;\\n        address smca;                    \\n    }\\n\\n    struct RequestContextResource {\\n        bytes32 role;\\n        bytes4[] funcSelectors;\\n    }\\n\\n    event ContextRegistered(bytes32 indexed context, address indexed scma, address indexed sender, bytes32 realm);\\n\\n    event ContextUpdated(bytes32 indexed context, address indexed scma, address indexed sender);\\n\\n    event ContextRoleGranted(bytes32 indexed context, bytes32 indexed role, \\n                            address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n    event ContextRoleRevoked(bytes32 indexed context, bytes32 indexed role, \\n                            address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n    function registerContext(RequestContext calldata rc, RequestContextResource[] calldata rcr) external returns (bytes32);\\n\\n    function updateContext(RequestContext calldata rc, RequestContextResource[] calldata rcr) external returns (bytes32);\\n\\n    function grantContextRole(bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bool);\\n\\n    function revokeContextRole(bytes32 ctx, bytes4 functionSelector, bytes32 role) external returns (bool);\\n\\n    function enableContext(bytes32 ctx) external returns (bool);\\n\\n    function disableContext(bytes32 ctx) external returns (bool);\\n\\n    function enableUpgradeContext(bytes32 ctx) external returns (bool);\\n\\n    function hasContextRole(bytes32 ctx, bytes32 role, bytes4 functionSelector) external view returns (bool);\\n\\n    function getContext(bytes32 ctx) external view returns (string memory, string memory, bytes32, bool);\\n\\n    function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\",\"keccak256\":\"0x832dae2f1c46783dc1bede35ad8f514b06c43faba2930fd9c1409c66c2da9fe7\",\"license\":\"MIT\"},\"src/contracts/acl/IGroupManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IGroupManagement {\\n\\n    event GroupRegistered(bytes32 indexed group, address indexed sender, string name, bool isEnabled);\\n\\n    event GroupRoleGranted(bytes32 indexed group, bytes32 indexed role, address indexed sender);\\n\\n    event GroupRoleRevoked(bytes32 indexed group, bytes32 indexed role, address indexed sender);\\n\\n    event GroupEnabled(bytes32 indexed group, address indexed sender);\\n\\n    event GroupDisabled(bytes32 indexed group, address indexed sender);\\n\\n    function addGroup(string calldata name, bool isEnabled) external returns (bytes32);\\n\\n    function grantGroupRole(bytes32 group, bytes32 role) external returns (bool);\\n\\n    function revokeGroupRole(bytes32 group, bytes32 role) external returns (bool);\\n\\n    function enabledGroup(bytes32 group) external returns (bool);\\n\\n    function disabledGroup(bytes32 group) external returns (bool);\\n\\n    function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool);\\n\\n    function getGroup(bytes32 group) external view returns (string calldata, bool);\\n\\n    function getGroupRoles(bytes32 group) external view returns (bytes32[] calldata);\\n\\n}\",\"keccak256\":\"0xe5ee8921a26da846787a187132fb934d04c467273da3e87c11a10dbfa7b44393\",\"license\":\"MIT\"},\"src/contracts/acl/IRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IRealmManagement {\\n\\n    event RealmRegistered(bytes32 indexed realm, address indexed sender, string name, bool isEnabled);\\n\\n    event RealmContextGranted(bytes32 indexed realm, bytes32 indexed context, address indexed sender);\\n\\n    event RealmRoleRevoked(bytes32 indexed realm, bytes32 indexed context, address indexed sender);\\n\\n    event RealmEnabled(bytes32 indexed realm, address indexed sender);\\n\\n    event RealmDisabled(bytes32 indexed realm, address indexed sender);\\n\\n    event RealmUpgradeEnabled(bytes32 indexed realm, address indexed sender);\\n\\n    \\n    function addRealm(string calldata name, bool isEnabled) external returns (bytes32);\\n\\n    function grantRealmContext(bytes32 realm, bytes32 context) external returns (bool);\\n\\n    function revokeRealmContext(bytes32 realm, bytes32 context) external returns (bool);\\n\\n    function enabledRealm(bytes32 realm) external returns (bool);\\n\\n    function disabledRealm(bytes32 realm) external returns (bool);\\n\\n    function enableUpgradeRealm(bytes32 realm) external returns (bool);\\n\\n    function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool);\\n\\n    function getRealm(bytes32 realm) external view returns (string calldata, bool);\\n\\n    function getRealmContextes(bytes32 realm) external view returns (bytes32[] calldata);\\n\\n}\",\"keccak256\":\"0x62f2aff7a64b7b4b2e397682cc2bbe79691a7257f3fa2a124d93ee0456566afc\",\"license\":\"MIT\"},\"src/contracts/acl/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IRoleManagement {\\n    \\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call\\n     */\\n    event RoleAccountGranted(bytes32 indexed role, address indexed account, address indexed sender, bytes32 group);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleAccountRevoked(bytes32 indexed role, address indexed account, address indexed sender, bytes32 group);\\n\\n    /**\\n     * \\n     */\\n    event RoleRegistered(bytes32 indexed role, string indexed name, address indexed sender, bytes32 group, bool isEnabled);\\n\\n    /**\\n     * \\n     */\\n    event RoleEnabled(bytes32 indexed role, address indexed sender, bytes32 indexed group);\\n\\n    /**\\n     * \\n     */\\n    event RoleDisabled(bytes32 indexed role, address indexed sender, bytes32 indexed group);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n    /**\\n     * \\n     */\\n    function addRole(string calldata name, string calldata group, bool isEnabled) external returns (bytes32);\\n\\n    /**\\n     * \\n     */\\n    function setEnabledRole(bytes32 role) external returns (bool);\\n\\n    /**\\n     * \\n     */\\n    function setDisabledRole(bytes32 role) external returns (bool);\\n\\n\\n    function getRole(bytes32 role) external view returns (string memory, string memory, bool); \\n\\n    function getRoleUsers(bytes32 role) external view returns (address[] memory); \\n\\n    function getRoleContextes(bytes32 role) external view returns (bytes32[] memory);\\n\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasAccountRole(bytes32 role, address account) external view returns (bool);\\n\\n\\n}\",\"keccak256\":\"0xeb396536f7ed230db37ffdbd6ca63052055607c520e109dd5d33b4a487db80f6\",\"license\":\"MIT\"},\"src/contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4db5a8ffa5e592fc435dd14acf1dc9984ffb27eb0c327482980ddcb9649bf3b7\",\"license\":\"MIT\"},\"src/contracts/lib/ContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\n/**\\n * @dev Collection of functions related to the context\\n */\\nlibrary ContextUtils {\\n\\n    function generateCtx(address contractAddress) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(contractAddress));\\n    }\\n}\",\"keccak256\":\"0xf326cf488a3355c2a430f49301f653e82b61f253d06e4c11f94f228f4f896f68\",\"license\":\"MIT\"},\"src/contracts/lib/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity >= 0.8.15;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb9011bb4b791581d5fd06cca09d0857ec87b43016f8e710a36c0cbe1022f792\",\"license\":\"MIT\"},\"src/contracts/lib/struct/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) since v4.6.0\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x945530d5b3f07eb3d25a42414cf652bb744ae9f2e4c77c327584cafe6a156753\",\"license\":\"MIT\"},\"src/contracts/lib/struct/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd093adb23ded844d69c960ac667c328da4f5d283f2e22e9f68f6a16dc56a2fc3\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract BaseProxy {\\n    \\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x54f7867c6f4d62957873c28ca81c2f5de2a02e720819fd90561e655ea2c8344a\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\nimport \\\"./IERC1822.sol\\\";\\nimport \\\"./IProxy.sol\\\";\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"./BaseUUPSStorage.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"../lib/Address.sol\\\";\\nimport \\\"../lib/StorageSlot.sol\\\";\\nimport \\\"../acl/IAccessControl.sol\\\";\\nimport \\\"../acl/IContextManagement.sol\\\";\\nimport \\\"../utils/Message.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"../lib/ContextUtils.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n\\n * An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\n\\nabstract contract BaseUUPSProxy is BaseUUPSStorage, BaseProxy, Initializable, IProxy, IERC1822Proxiable, Message, ERC165 {\\n \\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Illegal Contract Call\\\");\\n        require(_implementation() == __self, \\\"Proxy Called Invalid\\\");\\n        _;\\n    }\\n\\n      /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyAdmin() {\\n        require(_getAdmin() == _msgSender(), \\\"Caller Not Authorized\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"Illeagal Contract Delegatecall\\\");\\n        _;\\n    }\\n\\n    function _hasPermission(bytes4 selector) internal view returns (bool) {\\n        return IAccessControl(_accessCtrlManager).hasAccess(ContextUtils.generateCtx(address(this)), msg.sender, selector);\\n    }\\n\\n\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n\\n    constructor() {\\n        // set contract Admin (implementation contract)\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = _msgSender();\\n\\n        // set _isUpgradable and _isEnabled of contact  \\n        _isUpgradable = false;\\n        _isEnabled = false;\\n    }\\n\\n\\n    function __BASE_UUPS_init(string calldata domainName, string calldata domainVersion, string calldata domainRealm, address accessCtrlManager) internal onlyInitializing {\\n        console.log(\\\"__BASE_UUPS_init called . . . \\\");\\n        __BASE_UUPS_init_unchained(domainName, domainVersion, domainRealm, accessCtrlManager);\\n    }\\n\\n    function __BASE_UUPS_init_unchained(string calldata domainName, string calldata domainVersion, string calldata domainRealm, address accessCtrlManager) internal  onlyInitializing {\\n        _domainName = domainName;\\n        _domainVersion = domainVersion;\\n        _domainRealm = domainRealm;\\n        // TODO check acl address\\n        _accessCtrlManager = accessCtrlManager;\\n        _isUpgradable = false;\\n        _isEnabled = true;\\n        // _setAdmin(_msgSender());        \\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IProxy).interfaceId || \\n            interfaceId == type(IERC1822Proxiable).interfaceId || \\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal override view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(_isEnabled, \\\"Context Not Activated\\\");\\n        require(Address.isContract(newImplementation), \\\"Illegal Contract Address\\\");\\n        console.log(\\\"before set _setImplementation called . . . \\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n        console.log(\\\"after set _setImplementation called . . . \\\");\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        require(_isUpgradable, \\\"Context Not Upgradable\\\");\\n        _setImplementation(newImplementation);              \\n        emit Upgraded(msg.sender, address(this), newImplementation);  \\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal returns (bytes memory) {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            console.log(\\\"newImplementation called . . . \\\");\\n            return _functionDelegateCall(newImplementation, data);\\n        }\\n        return new bytes(0);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal returns (bytes memory) {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            require(_isUpgradable, \\\"Context Not Upgradable\\\");\\n            _setImplementation(newImplementation);\\n            return new bytes(0);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"Contract Unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"Contract Not UUPS\\\");\\n            }\\n            return _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(_isEnabled, \\\"Context Not Activated\\\");\\n        require(Address.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return Address.verifyCallResult(success, returndata, \\\"Delegatecall Failed\\\");\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    function upgradeTo(address newImplementation, bytes memory data, bool forceInitCall) external virtual onlyProxy returns (bytes memory){\\n        _authorizeUpgrade(newImplementation);\\n        return _upgradeToAndCallUUPS(newImplementation, data, forceInitCall);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual {\\n        require(_hasPermission(this.upgradeTo.selector), \\\"Context Upgradability Forbidden\\\");\\n        \\n    }\\n\\n\\n    function getAdmin() external view returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    function setAdmin(address newAdmin) external returns (bool) {\\n        _setAdmin(newAdmin);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) internal onlyProxy {\\n        require(_isEnabled, \\\"Context Not Activated\\\");\\n        require(_hasPermission(this.setAdmin.selector), \\\"Change ProxyAdmin Forbidden\\\");\\n        require(newAdmin != address(0), \\\"Address Invalid\\\");\\n        emit AdminChanged(_msgSender(), address(this), _getAdmin(), newAdmin);\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;        \\n    }\\n \\n    function setActivity(bool value) external onlyProxy returns (bool) {\\n        require(_hasPermission(this.setActivity.selector), \\\"Changed Activity Forbidden\\\");\\n        _isEnabled = value;\\n        emit ActivityChanged(_msgSender(), address(this), keccak256(abi.encodePacked(_domainRealm)), value);\\n        return value;\\n    }\\n\\n    function setUpgradability(bool value) external onlyProxy returns (bool) {\\n        require(_hasPermission(this.setUpgradability.selector), \\\"Change Upgradability Forbidden\\\");\\n        _isUpgradable = value;\\n        emit UpgradabilityChanged(_msgSender(), address(this), keccak256(abi.encodePacked(_domainRealm)), value);\\n        return value;\\n    }\\n\\n    function contractName() external view returns (string memory) {\\n        return _domainName;\\n    }\\n\\n    function contractVersion() external view returns (string memory) {\\n        return _domainVersion;\\n    }\\n\\n    function contractRealm() external view returns (string memory) {\\n        return _domainRealm;\\n    }\\n\\n    function getContext() external view returns (bytes32) {\\n        return ContextUtils.generateCtx(address(this));\\n    }\\n\\n    function subjectAddress() external view returns (address) {\\n        return _implementation();\\n    }\\n\\n    function isActivated() external view returns (bool) {\\n        return _isEnabled;\\n    }\\n\\n    function isUpgradable() external view returns (bool) {\\n        return _isUpgradable;\\n    }\\n}\\n\",\"keccak256\":\"0x05b424673ca85686e4c3c9285ed5b4446e352c6cca30773735db6de2096d3fed\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\nimport \\\"./IERC1822.sol\\\";\\nimport \\\"./IProxy.sol\\\";\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"../lib/Address.sol\\\";\\nimport \\\"../lib/StorageSlot.sol\\\";\\nimport \\\"../utils/Message.sol\\\";\\nimport \\\"../lib/ContextUtils.sol\\\";\\n\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\n\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n */\\n\\nabstract contract BaseUUPSStorage {\\n \\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address internal immutable __self = address(this);\\n    address internal _accessCtrlManager;\\n    string internal _domainName;\\n    string internal _domainVersion;\\n    string internal _domainRealm;\\n    bool internal _isEnabled;\\n    bool internal _isUpgradable;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     */     \\n    uint256[64] private __gap;\\n}\\n\",\"keccak256\":\"0x751c79ef201b2582bf91084b7e2cc92bfe8ca879b9f127e1e20b8cd08b8cfb7e\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6499fc370056b9391b97f313f250e5f19e6e69d2c306ec0e14c5dc9bea1c4032\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\ninterface IProxy {\\n\\n    event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address indexed sender, address indexed proxy, address previousAdmin, address newAdmin);\\n                    \\n    event ActivityChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool value);\\n\\n    event UpgradabilityChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool value);\\n\\n    // /**\\n    //  * @dev Triggered when the contract has been initialized or reinitialized.\\n    //  */\\n    event Initialized(address indexed sender, address indexed proxy, address indexed subject, \\n                      string name, string version, string realm, uint16 initializedCount);\\n\\n\\n    function upgradeTo(address newImplementation, bytes memory data, bool forceCall) external returns (bytes memory);\\n\\n    function setActivity(bool value) external returns (bool);\\n\\n    function setUpgradability(bool value) external returns (bool);\\n\\n    function setAdmin(address newAdmin) external returns (bool);\\n\\n    function contractRegisteration() external returns (bool);\\n\\n    function contractName() external view returns (string memory);\\n\\n    function contractVersion() external view returns (string memory);\\n\\n    function contractRealm() external view returns (string memory);\\n\\n    function getContext() external view returns (bytes32);\\n\\n    function subjectAddress() external view returns (address);\\n\\n    function isActivated() external view returns (bool);\\n\\n    function isUpgradable() external view returns (bool);\\n\\n    function getAdmin() external view returns (address);\\n}\",\"keccak256\":\"0xe4f06e0f0df4fa0362d2716810a91eadc6cef87395f714c7d76aad1fcfad3fb5\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\n\\nimport \\\"../lib/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint16 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n\\n    function getInitializedCount() public view returns (uint16) {\\n        return _initialized;\\n    }\\n\\n    function isInitializing() public view returns (bool) {\\n        return _initializing;\\n    } \\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint16 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Contract Not Initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint16).max);\\n    }\\n\\n    function _setInitializedVersion(uint16 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Contract Already Initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Illegal Initialize Version\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39efc90147c8325cdb3916e3d3d672e01dc4624febc250483b37c1c8d0640ef9\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.15;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x650c37e20c91d38dd207a010e4b6e7c1729e203064646e2db8d55c03d16b3203\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.15;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c2f770eaebebb234214e646d65789d288d9b0c7dd660e9e396edd282b31c41a\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >= 0.8.15;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Message {\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     */\\n    uint256[64] private __gap;\\n}\\n\",\"keccak256\":\"0xf41251790b8d3d88d1e129cffafb85051ecea590017afaa287a6e738289c068a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b5033620000507fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b6200007f60201b6200160f1760201c565b80546001600160a01b0319166001600160a01b03929092169190911790556004805461ffff1916905562000082565b90565b608051612c15620000e460003960008181610d0001528181610d4001528181610e7a01528181610eba015281816111810152818161131d0152818161135d0152818161146f015281816114af0152818161193701526119770152612c156000f3fe6080604052600436106103d25760003560e01c80636fb63dca116101fd578063c34dd6a111610118578063df01de45116100ab578063f28f30921161007a578063f28f309214610829578063f34b220214610829578063f5122c9214610829578063fb72237d1461041e578063fdba6b171461041e576103e1565b8063df01de4514610686578063ea3779871461041e578063edf1d1cb14610555578063f254453b1461041e576103e1565b8063d545594f116100e7578063d545594f1461041e578063d8b31999146108c4578063d97f9e5d1461041e578063d9aba36e14610829576103e1565b8063c34dd6a114610829578063c3f1f22d1461041e578063c7ab39e61461088b578063d3e024b8146108af576103e1565b80639dd0725411610190578063b386033f1161015f578063b386033f1461074b578063b567d4ba14610859578063b879bdfb14610859578063c2f6167a146105d7576103e1565b80639dd07254146108095780639f8e37bb14610829578063a0a8e46014610844578063ac7e7c671461041e576103e1565b8063771bcf45116101cc578063771bcf451461059b5780638b480975146107c85780638f09e0f01461068657806396a9b471146107ee576103e1565b80636fb63dca1461074b578063704b6c02146107665780637147855d1461078657806375d0c0dc146107b3576103e1565b80633ec91f05116102ed57806358dbc45d116102805780636ac58ac11161024f5780636ac58ac1146106d15780636b3b0159146106e65780636e8eb7bc146107015780636e9960c314610736576103e1565b806358dbc45d146106395780635c6d8da1146106665780635dd0a7db146106865780636217088f146106a9576103e1565b806352d1902d116102bc57806352d1902d146105f25780635472e25e146105555780635479d940146106075780635632ffd814610624576103e1565b80633ec91f051461057d5780634346a04b1461059b5780634a8c1fb4146105bf5780634f2eca98146105d7576103e1565b8063178cf4bb1161036557806320dd27af1161033457806320dd27af146104da57806329b2be01146104ef5780632e2adf00146105275780632f67173314610555576103e1565b8063178cf4bb146104a25780631cc032cf146104c55780631e26521a1461041e57806320c877071461041e576103e1565b80630d1ee1bd116103a15780630d1ee1bd1461041e578063127f0f071461046d57806312c1a08e1461041e578063133899f514610482576103e1565b806301ffc9a7146103e95780630610e0371461041e57806309d4a9071461041e5780630c9a90741461043f576103e1565b366103e1576103df6108d9565b005b6103df6108d9565b3480156103f557600080fd5b50610409610404366004612150565b6108eb565b60405190151581526020015b60405180910390f35b34801561042a57600080fd5b5061040961043936600461216b565b50600090565b34801561044b57600080fd5b5061045f61045a366004612184565b61093d565b604051908152602001610415565b34801561047957600080fd5b5061045f610ce4565b34801561048e57600080fd5b5061040961049d36600461222b565b610cf4565b3480156104ae57600080fd5b5060455460405161ffff9091168152602001610415565b3480156104d157600080fd5b50610409610e6e565b3480156104e657600080fd5b5061045f611137565b3480156104fb57600080fd5b5061051761050a36600461216b565b6060806000809193509193565b60405161041594939291906122a4565b34801561053357600080fd5b5061054861054236600461216b565b50606090565b60405161041591906122e2565b34801561056157600080fd5b5061057061054236600461216b565b6040516104159190612330565b34801561058957600080fd5b5060455462010000900460ff16610409565b3480156105a757600080fd5b506104096105b6366004612368565b60009392505050565b3480156105cb57600080fd5b5060045460ff16610409565b3480156105e357600080fd5b506104096104393660046123b4565b3480156105fe57600080fd5b5061045f611174565b34801561061357600080fd5b50600454610100900460ff16610409565b34801561063057600080fd5b5061045f611201565b34801561064557600080fd5b5061064e611232565b6040516001600160a01b039091168152602001610415565b34801561067257600080fd5b506103df610681366004612418565b61123c565b34801561069257600080fd5b506104096106a13660046124c3565b600092915050565b3480156106b557600080fd5b506106c461054236600461216b565b60405161041591906124ef565b3480156106dd57600080fd5b5061045f6112cc565b3480156106f257600080fd5b506104096105b6366004612530565b34801561070d57600080fd5b5061072761071c36600461216b565b506060908190600090565b60405161041593929190612565565b34801561074257600080fd5b5061064e6112f4565b34801561075757600080fd5b5061045f6105b636600461259d565b34801561077257600080fd5b506104096107813660046123b4565b6112fe565b34801561079257600080fd5b506107a66107a136600461260a565b611311565b60405161041591906126d3565b3480156107bf57600080fd5b506107a66113d1565b3480156107d457600080fd5b5061045f6107e33660046126e6565b600095945050505050565b3480156107fa57600080fd5b5061045f6105b6366004612184565b34801561081557600080fd5b5061040961082436600461222b565b611463565b34801561083557600080fd5b506104096106a136600461276a565b34801561085057600080fd5b506107a66115cc565b34801561086557600080fd5b5061087d61087436600461216b565b60606000915091565b60405161041592919061278c565b34801561089757600080fd5b506104096108a63660046127b0565b60019392505050565b3480156108bb57600080fd5b506107a66115db565b3480156108d057600080fd5b5061045f6115ea565b6108e96108e4611612565b611633565b565b60006001600160e01b031982166315ee8bab60e31b148061091c57506001600160e01b031982166352d1902d60e01b145b8061093757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061094f60408501602086016123b4565b6001600160a01b0316336001600160a01b0316146109885760405162461bcd60e51b815260040161097f906127e3565b60405180910390fd5b8335600090815260896020526040902080546109a39061281a565b90506000036109e65760405162461bcd60e51b815260206004820152600f60248201526e1499585b1b48139bdd08119bdd5b99608a1b604482015260640161097f565b6000610a006109fb60408701602088016123b4565b61165c565b6000818152608760205260409020600101549091506001600160a01b031615610a6b5760405162461bcd60e51b815260206004820152601a60248201527f436f6e7465787420416c72656164792052656769737465726564000000000000604482015260640161097f565b6000818152608760209081526040918290208735815591610a91919088019088016123b4565b6001820180546001600160a01b0319166001600160a01b039290921691909117905560005b84811015610c825760886000878784818110610ad457610ad4612854565b9050602002810190610ae6919061286a565b35815260208101919091526040016000208054610b029061281a565b9050600003610b445760405162461bcd60e51b815260206004820152600e60248201526d149bdb1948139bdd08119bdd5b9960921b604482015260640161097f565b60005b868683818110610b5957610b59612854565b9050602002810190610b6b919061286a565b610b7990602081019061288a565b9050811015610c6f576001836002016000898986818110610b9c57610b9c612854565b9050602002810190610bae919061286a565b610bbc90602081019061288a565b85818110610bcc57610bcc612854565b9050602002016020810190610be19190612150565b6001600160e01b03191681526020019081526020016000206000898986818110610c0d57610c0d612854565b9050602002810190610c1f919061286a565b3581526020810191909152604001600020805460ff19166001836002811115610c4a57610c4a6128d4565b0217905550610c5c6003840185611690565b5080610c67816128ea565b915050610b47565b5080610c7a816128ea565b915050610ab6565b5033610c9460408801602089016123b4565b6001600160a01b0316837f11cf8f3561fae187c57df59424ecf5d3f444e138924944c77dcb68144c6357318960000135604051610cd391815260200190565b60405180910390a450509392505050565b6000610cef3061165c565b905090565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d3e5760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d70611612565b6001600160a01b031614610d965760405162461bcd60e51b815260040161097f90612940565b610da663133899f560e01b61169c565b610df25760405162461bcd60e51b815260206004820152601e60248201527f4368616e6765205570677261646162696c69747920466f7262696464656e0000604482015260640161097f565b6004805461ff00191661010084151502179055604051610e179060039060200161296e565b60408051808303601f19018152908290528051602091820120841515835291309133917fc6897d79f339058b761ed7563fa04b4f4bdda8dab073af53173e440326e4a95191015b60405180910390a450805b919050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610eb85760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610eea611612565b6001600160a01b031614610f105760405162461bcd60e51b815260040161097f90612940565b33610f19611726565b6001600160a01b031614610f675760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c88139bdd08105d5d1a1bdc9a5e9959605a1b604482015260640161097f565b600060405180604001604052806003604051602001610f86919061296e565b60408051808303601f1901815291815281516020928301208352309282019290925281518083018352600081526060818301528251704c4956454c595f41444d494e5f524f4c4560781b81840152835160118183030181526031909101845280519083012081528251600a808252610160820190945293945092919082016101408036833750505060208201819052805163133899f560e01b919060009061103057611030612854565b6001600160e01b031990921660209283029190910182015281015180516327741c9560e21b9190600190811061106857611068612854565b6001600160e01b03199092166020928302919091018201528101518051633825b60160e11b919060029081106110a0576110a0612854565b6001600160e01b03199092166020928302919091018201528101518051637147855d60e01b919060039081106110d8576110d8612854565b6001600160e01b03199092166020928302919091018201528101518051635c6d8da160e01b9190600490811061111057611110612854565b60200260200101906001600160e01b03191690816001600160e01b03191681525050505090565b604051734c4956454c595f47454e4552414c5f5245414c4d60601b60208201526034015b6040516020818303038152906040528051906020012081565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111ee5760405162461bcd60e51b815260206004820152601e60248201527f496c6c656167616c20436f6e74726163742044656c656761746563616c6c0000604482015260640161097f565b50600080516020612bc083398151915290565b6040517f4c4956454c595f53595354454d5f41444d494e5f524f4c450000000000000000602082015260380161115b565b6000610cef611612565b6000611248600161174e565b90508015611262576045805462ff00001916620100001790555b6112a06040518060400160405280601881526020017f696e697469616c697a652063616c6c6564202e202e202e20000000000000000081525061183d565b6112af88888888888888611883565b80156112c2576045805462ff0000191690555b5050505050505050565b6040517304c4956454c595f47454e4552414c5f47524f55560641b602082015260340161115b565b6000610cef611726565b60006113098261192d565b506001919050565b60606001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361135b5760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661138d611612565b6001600160a01b0316146113b35760405162461bcd60e51b815260040161097f90612940565b6113bc84611b21565b6113c7848484611b7d565b90505b9392505050565b6060600180546113e09061281a565b80601f016020809104026020016040519081016040528092919081815260200182805461140c9061281a565b80156114595780601f1061142e57610100808354040283529160200191611459565b820191906000526020600020905b81548152906001019060200180831161143c57829003601f168201915b5050505050905090565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114ad5760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114df611612565b6001600160a01b0316146115055760405162461bcd60e51b815260040161097f90612940565b6115156327741c9560e21b61169c565b6115615760405162461bcd60e51b815260206004820152601a60248201527f4368616e67656420416374697669747920466f7262696464656e000000000000604482015260640161097f565b6004805460ff19168315151790556040516115819060039060200161296e565b60408051808303601f19018152908290528051602091820120841515835291309133917f139c91c652708a87d9a40a2cbfb6d5d37c20d1dcd2a75b2d0c09b59a214474bc9101610e5e565b6060600280546113e09061281a565b6060600380546113e09061281a565b604051704c4956454c595f41444d494e5f524f4c4560781b602082015260310161115b565b90565b6000600080516020612bc08339815191525b546001600160a01b0316919050565b3660008037600080366000845af43d6000803e808015611652573d6000f35b3d6000fd5b505050565b604080516001600160a01b038316602082015260009101604051602081830303815290604052805190602001209050919050565b60006113ca8383611d2c565b600080546001600160a01b031663c7ab39e66116b73061165c565b6040516001600160e01b031960e084901b8116825260048201929092523360248201529085166044820152606401602060405180830381865afa158015611702573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093791906129e4565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103611624565b60455460009062010000900460ff16156117c9578161ffff1660011480156117755750303b155b6117c15760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a656400000000604482015260640161097f565b506000919050565b60455461ffff8084169116106118215760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c20496e697469616c697a652056657273696f6e000000000000604482015260640161097f565b506045805461ffff191661ffff92909216919091179055600190565b6118808160405160240161185191906126d3565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611d7b565b50565b60455462010000900460ff166118d75760405162461bcd60e51b8152602060048201526019602482015278436f6e7472616374204e6f7420496e697469616c697a696e6760381b604482015260640161097f565b6119156040518060400160405280601e81526020017f5f5f424153455f555550535f696e69742063616c6c6564202e202e202e20000081525061183d565b61192487878787878787611d9c565b50505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119755760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166119a7611612565b6001600160a01b0316146119cd5760405162461bcd60e51b815260040161097f90612940565b60045460ff166119ef5760405162461bcd60e51b815260040161097f90612a01565b6119ff633825b60160e11b61169c565b611a4b5760405162461bcd60e51b815260206004820152601b60248201527f4368616e67652050726f787941646d696e20466f7262696464656e0000000000604482015260640161097f565b6001600160a01b038116611a935760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b604482015260640161097f565b30337f69feba90503661246e4691cb2fe465cc9acb27d5ae05f8b48a57eefa7c726fb1611abe611726565b604080516001600160a01b03928316815291861660208301520160405180910390a37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0319166001600160a01b0392909216919091179055565b611b31637147855d60e01b61169c565b6118805760405162461bcd60e51b815260206004820152601f60248201527f436f6e74657874205570677261646162696c69747920466f7262696464656e00604482015260640161097f565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c1757600454610100900460ff16611bf95760405162461bcd60e51b8152602060048201526016602482015275436f6e74657874204e6f742055706772616461626c6560501b604482015260640161097f565b611c0284611e50565b506040805160008152602081019091526113ca565b836001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c71575060408051601f3d908101601f19168201909252611c6e91810190612a30565b60015b611cb15760405162461bcd60e51b8152602060048201526011602482015270436f6e7472616374204e6f74205555505360781b604482015260640161097f565b600080516020612bc08339815191528114611d195760405162461bcd60e51b815260206004820152602260248201527f436f6e747261637420556e737570706f727465642070726f786961626c655555604482015261125160f21b606482015260840161097f565b50611d25848484611f04565b90506113ca565b6000818152600183016020526040812054611d7357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610937565b506000610937565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60455462010000900460ff16611df05760405162461bcd60e51b8152602060048201526019602482015278436f6e7472616374204e6f7420496e697469616c697a696e6760381b604482015260640161097f565b6001611dfd878983612a97565b506002611e0b858783612a97565b506003611e19838583612a97565b50600080546001600160a01b0319166001600160a01b039290921691909117905550506004805461ffff1916600117905550505050565b60045460ff16611e725760405162461bcd60e51b815260040161097f90612a01565b6001600160a01b0381163b611e995760405162461bcd60e51b815260040161097f906127e3565b611eba6040518060600160405280602b8152602001612b95602b913961183d565b600080516020612bc083398151915280546001600160a01b0319166001600160a01b0383161790556040805160608101909152602a8082526118809190612b6b602083013961183d565b6060611f0f84611f80565b600083511180611f1c5750815b15611f6957611f5f6040518060400160405280601f81526020017f6e6577496d706c656d656e746174696f6e2063616c6c6564202e202e202e200081525061183d565b611d258484612014565b505060408051600081526020810190915292915050565b600454610100900460ff16611fd05760405162461bcd60e51b8152602060048201526016602482015275436f6e74657874204e6f742055706772616461626c6560501b604482015260640161097f565b611fd981611e50565b6040516001600160a01b03821690309033907f354bd4b6eb65d64e6c79c53fa4f983a5e6bec4824ce4627c71be0b2722f4917e90600090a450565b60045460609060ff166120395760405162461bcd60e51b815260040161097f90612a01565b6001600160a01b0383163b6120605760405162461bcd60e51b815260040161097f906127e3565b600080846001600160a01b03168460405161207b9190612b58565b600060405180830381855af49150503d80600081146120b6576040519150601f19603f3d011682016040523d82523d6000602084013e6120bb565b606091505b50915091506120f682826040518060400160405280601381526020017211195b1959d85d1958d85b1b0811985a5b1959606a1b8152506120ff565b95945050505050565b6060831561210e5750816113ca565b82511561211e5782518084602001fd5b8160405162461bcd60e51b815260040161097f91906126d3565b80356001600160e01b031981168114610e6957600080fd5b60006020828403121561216257600080fd5b6113ca82612138565b60006020828403121561217d57600080fd5b5035919050565b6000806000838503606081121561219a57600080fd5b60408112156121a857600080fd5b50839250604084013567ffffffffffffffff808211156121c757600080fd5b818601915086601f8301126121db57600080fd5b8135818111156121ea57600080fd5b8760208260051b85010111156121ff57600080fd5b6020830194508093505050509250925092565b801515811461188057600080fd5b8035610e6981612212565b60006020828403121561223d57600080fd5b81356113ca81612212565b60005b8381101561226357818101518382015260200161224b565b83811115612272576000848401525b50505050565b60008151808452612290816020860160208601612248565b601f01601f19169290920160200192915050565b6080815260006122b76080830187612278565b82810360208401526122c98187612278565b6040840195909552505090151560609091015292915050565b6020808252825182820181905260009190848201906040850190845b818110156123245783516001600160e01b031916835292840192918401916001016122fe565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156123245783518352928401929184019160010161234c565b60008060006060848603121561237d57600080fd5b8335925061238d60208501612138565b9150604084013590509250925092565b80356001600160a01b0381168114610e6957600080fd5b6000602082840312156123c657600080fd5b6113ca8261239d565b60008083601f8401126123e157600080fd5b50813567ffffffffffffffff8111156123f957600080fd5b60208301915083602082850101111561241157600080fd5b9250929050565b60008060008060008060006080888a03121561243357600080fd5b873567ffffffffffffffff8082111561244b57600080fd5b6124578b838c016123cf565b909950975060208a013591508082111561247057600080fd5b61247c8b838c016123cf565b909750955060408a013591508082111561249557600080fd5b506124a28a828b016123cf565b90945092506124b590506060890161239d565b905092959891949750929550565b600080604083850312156124d657600080fd5b823591506124e66020840161239d565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156123245783516001600160a01b03168352928401929184019160010161250b565b60008060006060848603121561254557600080fd5b833592506020840135915061255c60408501612138565b90509250925092565b6060815260006125786060830186612278565b828103602084015261258a8186612278565b9150508215156040830152949350505050565b6000806000604084860312156125b257600080fd5b833567ffffffffffffffff8111156125c957600080fd5b6125d5868287016123cf565b90945092505060208401356125e981612212565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561261f57600080fd5b6126288461239d565b9250602084013567ffffffffffffffff8082111561264557600080fd5b818601915086601f83011261265957600080fd5b81358181111561266b5761266b6125f4565b604051601f8201601f19908116603f01168101908382118183101715612693576126936125f4565b816040528281528960208487010111156126ac57600080fd5b82602086016020830137600060208483010152809650505050505061255c60408501612220565b6020815260006113ca6020830184612278565b6000806000806000606086880312156126fe57600080fd5b853567ffffffffffffffff8082111561271657600080fd5b61272289838a016123cf565b9097509550602088013591508082111561273b57600080fd5b50612748888289016123cf565b909450925050604086013561275c81612212565b809150509295509295909350565b6000806040838503121561277d57600080fd5b50508035926020909101359150565b60408152600061279f6040830185612278565b905082151560208301529392505050565b6000806000606084860312156127c557600080fd5b833592506127d56020850161239d565b915061255c60408501612138565b60208082526018908201527f496c6c6567616c20436f6e747261637420416464726573730000000000000000604082015260600190565b600181811c9082168061282e57607f821691505b60208210810361284e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261288057600080fd5b9190910192915050565b6000808335601e198436030181126128a157600080fd5b83018035915067ffffffffffffffff8211156128bc57600080fd5b6020019150600581901b360382131561241157600080fd5b634e487b7160e01b600052602160045260246000fd5b60006001820161290a57634e487b7160e01b600052601160045260246000fd5b5060010190565b602080825260159082015274125b1b1959d85b0810dbdb9d1c9858dd0810d85b1b605a1b604082015260600190565b602080825260149082015273141c9bde1e4810d85b1b195908125b9d985b1a5960621b604082015260600190565b600080835461297c8161281a565b6001828116801561299457600181146129a9576129d8565b60ff19841687528215158302870194506129d8565b8760005260208060002060005b858110156129cf5781548a8201529084019082016129b6565b50505082870194505b50929695505050505050565b6000602082840312156129f657600080fd5b81516113ca81612212565b60208082526015908201527410dbdb9d195e1d08139bdd081058dd1a5d985d1959605a1b604082015260600190565b600060208284031215612a4257600080fd5b5051919050565b601f82111561165757600081815260208120601f850160051c81016020861015612a705750805b601f850160051c820191505b81811015612a8f57828155600101612a7c565b505050505050565b67ffffffffffffffff831115612aaf57612aaf6125f4565b612ac383612abd835461281a565b83612a49565b6000601f841160018114612af75760008515612adf5750838201355b600019600387901b1c1916600186901b178355612b51565b600083815260209020601f19861690835b82811015612b285786850135825560209485019460019092019101612b08565b5086821015612b455760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000825161288081846020870161224856fe616674657220736574205f736574496d706c656d656e746174696f6e2063616c6c6564202e202e202e206265666f726520736574205f736574496d706c656d656e746174696f6e2063616c6c6564202e202e202e20360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212201970d1a6fcd9f9492cf0f95548592eaf86d13e5d53305246dd5d387c62f0975e64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106103d25760003560e01c80636fb63dca116101fd578063c34dd6a111610118578063df01de45116100ab578063f28f30921161007a578063f28f309214610829578063f34b220214610829578063f5122c9214610829578063fb72237d1461041e578063fdba6b171461041e576103e1565b8063df01de4514610686578063ea3779871461041e578063edf1d1cb14610555578063f254453b1461041e576103e1565b8063d545594f116100e7578063d545594f1461041e578063d8b31999146108c4578063d97f9e5d1461041e578063d9aba36e14610829576103e1565b8063c34dd6a114610829578063c3f1f22d1461041e578063c7ab39e61461088b578063d3e024b8146108af576103e1565b80639dd0725411610190578063b386033f1161015f578063b386033f1461074b578063b567d4ba14610859578063b879bdfb14610859578063c2f6167a146105d7576103e1565b80639dd07254146108095780639f8e37bb14610829578063a0a8e46014610844578063ac7e7c671461041e576103e1565b8063771bcf45116101cc578063771bcf451461059b5780638b480975146107c85780638f09e0f01461068657806396a9b471146107ee576103e1565b80636fb63dca1461074b578063704b6c02146107665780637147855d1461078657806375d0c0dc146107b3576103e1565b80633ec91f05116102ed57806358dbc45d116102805780636ac58ac11161024f5780636ac58ac1146106d15780636b3b0159146106e65780636e8eb7bc146107015780636e9960c314610736576103e1565b806358dbc45d146106395780635c6d8da1146106665780635dd0a7db146106865780636217088f146106a9576103e1565b806352d1902d116102bc57806352d1902d146105f25780635472e25e146105555780635479d940146106075780635632ffd814610624576103e1565b80633ec91f051461057d5780634346a04b1461059b5780634a8c1fb4146105bf5780634f2eca98146105d7576103e1565b8063178cf4bb1161036557806320dd27af1161033457806320dd27af146104da57806329b2be01146104ef5780632e2adf00146105275780632f67173314610555576103e1565b8063178cf4bb146104a25780631cc032cf146104c55780631e26521a1461041e57806320c877071461041e576103e1565b80630d1ee1bd116103a15780630d1ee1bd1461041e578063127f0f071461046d57806312c1a08e1461041e578063133899f514610482576103e1565b806301ffc9a7146103e95780630610e0371461041e57806309d4a9071461041e5780630c9a90741461043f576103e1565b366103e1576103df6108d9565b005b6103df6108d9565b3480156103f557600080fd5b50610409610404366004612150565b6108eb565b60405190151581526020015b60405180910390f35b34801561042a57600080fd5b5061040961043936600461216b565b50600090565b34801561044b57600080fd5b5061045f61045a366004612184565b61093d565b604051908152602001610415565b34801561047957600080fd5b5061045f610ce4565b34801561048e57600080fd5b5061040961049d36600461222b565b610cf4565b3480156104ae57600080fd5b5060455460405161ffff9091168152602001610415565b3480156104d157600080fd5b50610409610e6e565b3480156104e657600080fd5b5061045f611137565b3480156104fb57600080fd5b5061051761050a36600461216b565b6060806000809193509193565b60405161041594939291906122a4565b34801561053357600080fd5b5061054861054236600461216b565b50606090565b60405161041591906122e2565b34801561056157600080fd5b5061057061054236600461216b565b6040516104159190612330565b34801561058957600080fd5b5060455462010000900460ff16610409565b3480156105a757600080fd5b506104096105b6366004612368565b60009392505050565b3480156105cb57600080fd5b5060045460ff16610409565b3480156105e357600080fd5b506104096104393660046123b4565b3480156105fe57600080fd5b5061045f611174565b34801561061357600080fd5b50600454610100900460ff16610409565b34801561063057600080fd5b5061045f611201565b34801561064557600080fd5b5061064e611232565b6040516001600160a01b039091168152602001610415565b34801561067257600080fd5b506103df610681366004612418565b61123c565b34801561069257600080fd5b506104096106a13660046124c3565b600092915050565b3480156106b557600080fd5b506106c461054236600461216b565b60405161041591906124ef565b3480156106dd57600080fd5b5061045f6112cc565b3480156106f257600080fd5b506104096105b6366004612530565b34801561070d57600080fd5b5061072761071c36600461216b565b506060908190600090565b60405161041593929190612565565b34801561074257600080fd5b5061064e6112f4565b34801561075757600080fd5b5061045f6105b636600461259d565b34801561077257600080fd5b506104096107813660046123b4565b6112fe565b34801561079257600080fd5b506107a66107a136600461260a565b611311565b60405161041591906126d3565b3480156107bf57600080fd5b506107a66113d1565b3480156107d457600080fd5b5061045f6107e33660046126e6565b600095945050505050565b3480156107fa57600080fd5b5061045f6105b6366004612184565b34801561081557600080fd5b5061040961082436600461222b565b611463565b34801561083557600080fd5b506104096106a136600461276a565b34801561085057600080fd5b506107a66115cc565b34801561086557600080fd5b5061087d61087436600461216b565b60606000915091565b60405161041592919061278c565b34801561089757600080fd5b506104096108a63660046127b0565b60019392505050565b3480156108bb57600080fd5b506107a66115db565b3480156108d057600080fd5b5061045f6115ea565b6108e96108e4611612565b611633565b565b60006001600160e01b031982166315ee8bab60e31b148061091c57506001600160e01b031982166352d1902d60e01b145b8061093757506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061094f60408501602086016123b4565b6001600160a01b0316336001600160a01b0316146109885760405162461bcd60e51b815260040161097f906127e3565b60405180910390fd5b8335600090815260896020526040902080546109a39061281a565b90506000036109e65760405162461bcd60e51b815260206004820152600f60248201526e1499585b1b48139bdd08119bdd5b99608a1b604482015260640161097f565b6000610a006109fb60408701602088016123b4565b61165c565b6000818152608760205260409020600101549091506001600160a01b031615610a6b5760405162461bcd60e51b815260206004820152601a60248201527f436f6e7465787420416c72656164792052656769737465726564000000000000604482015260640161097f565b6000818152608760209081526040918290208735815591610a91919088019088016123b4565b6001820180546001600160a01b0319166001600160a01b039290921691909117905560005b84811015610c825760886000878784818110610ad457610ad4612854565b9050602002810190610ae6919061286a565b35815260208101919091526040016000208054610b029061281a565b9050600003610b445760405162461bcd60e51b815260206004820152600e60248201526d149bdb1948139bdd08119bdd5b9960921b604482015260640161097f565b60005b868683818110610b5957610b59612854565b9050602002810190610b6b919061286a565b610b7990602081019061288a565b9050811015610c6f576001836002016000898986818110610b9c57610b9c612854565b9050602002810190610bae919061286a565b610bbc90602081019061288a565b85818110610bcc57610bcc612854565b9050602002016020810190610be19190612150565b6001600160e01b03191681526020019081526020016000206000898986818110610c0d57610c0d612854565b9050602002810190610c1f919061286a565b3581526020810191909152604001600020805460ff19166001836002811115610c4a57610c4a6128d4565b0217905550610c5c6003840185611690565b5080610c67816128ea565b915050610b47565b5080610c7a816128ea565b915050610ab6565b5033610c9460408801602089016123b4565b6001600160a01b0316837f11cf8f3561fae187c57df59424ecf5d3f444e138924944c77dcb68144c6357318960000135604051610cd391815260200190565b60405180910390a450509392505050565b6000610cef3061165c565b905090565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d3e5760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d70611612565b6001600160a01b031614610d965760405162461bcd60e51b815260040161097f90612940565b610da663133899f560e01b61169c565b610df25760405162461bcd60e51b815260206004820152601e60248201527f4368616e6765205570677261646162696c69747920466f7262696464656e0000604482015260640161097f565b6004805461ff00191661010084151502179055604051610e179060039060200161296e565b60408051808303601f19018152908290528051602091820120841515835291309133917fc6897d79f339058b761ed7563fa04b4f4bdda8dab073af53173e440326e4a95191015b60405180910390a450805b919050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610eb85760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610eea611612565b6001600160a01b031614610f105760405162461bcd60e51b815260040161097f90612940565b33610f19611726565b6001600160a01b031614610f675760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c88139bdd08105d5d1a1bdc9a5e9959605a1b604482015260640161097f565b600060405180604001604052806003604051602001610f86919061296e565b60408051808303601f1901815291815281516020928301208352309282019290925281518083018352600081526060818301528251704c4956454c595f41444d494e5f524f4c4560781b81840152835160118183030181526031909101845280519083012081528251600a808252610160820190945293945092919082016101408036833750505060208201819052805163133899f560e01b919060009061103057611030612854565b6001600160e01b031990921660209283029190910182015281015180516327741c9560e21b9190600190811061106857611068612854565b6001600160e01b03199092166020928302919091018201528101518051633825b60160e11b919060029081106110a0576110a0612854565b6001600160e01b03199092166020928302919091018201528101518051637147855d60e01b919060039081106110d8576110d8612854565b6001600160e01b03199092166020928302919091018201528101518051635c6d8da160e01b9190600490811061111057611110612854565b60200260200101906001600160e01b03191690816001600160e01b03191681525050505090565b604051734c4956454c595f47454e4552414c5f5245414c4d60601b60208201526034015b6040516020818303038152906040528051906020012081565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111ee5760405162461bcd60e51b815260206004820152601e60248201527f496c6c656167616c20436f6e74726163742044656c656761746563616c6c0000604482015260640161097f565b50600080516020612bc083398151915290565b6040517f4c4956454c595f53595354454d5f41444d494e5f524f4c450000000000000000602082015260380161115b565b6000610cef611612565b6000611248600161174e565b90508015611262576045805462ff00001916620100001790555b6112a06040518060400160405280601881526020017f696e697469616c697a652063616c6c6564202e202e202e20000000000000000081525061183d565b6112af88888888888888611883565b80156112c2576045805462ff0000191690555b5050505050505050565b6040517304c4956454c595f47454e4552414c5f47524f55560641b602082015260340161115b565b6000610cef611726565b60006113098261192d565b506001919050565b60606001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361135b5760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661138d611612565b6001600160a01b0316146113b35760405162461bcd60e51b815260040161097f90612940565b6113bc84611b21565b6113c7848484611b7d565b90505b9392505050565b6060600180546113e09061281a565b80601f016020809104026020016040519081016040528092919081815260200182805461140c9061281a565b80156114595780601f1061142e57610100808354040283529160200191611459565b820191906000526020600020905b81548152906001019060200180831161143c57829003601f168201915b5050505050905090565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114ad5760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114df611612565b6001600160a01b0316146115055760405162461bcd60e51b815260040161097f90612940565b6115156327741c9560e21b61169c565b6115615760405162461bcd60e51b815260206004820152601a60248201527f4368616e67656420416374697669747920466f7262696464656e000000000000604482015260640161097f565b6004805460ff19168315151790556040516115819060039060200161296e565b60408051808303601f19018152908290528051602091820120841515835291309133917f139c91c652708a87d9a40a2cbfb6d5d37c20d1dcd2a75b2d0c09b59a214474bc9101610e5e565b6060600280546113e09061281a565b6060600380546113e09061281a565b604051704c4956454c595f41444d494e5f524f4c4560781b602082015260310161115b565b90565b6000600080516020612bc08339815191525b546001600160a01b0316919050565b3660008037600080366000845af43d6000803e808015611652573d6000f35b3d6000fd5b505050565b604080516001600160a01b038316602082015260009101604051602081830303815290604052805190602001209050919050565b60006113ca8383611d2c565b600080546001600160a01b031663c7ab39e66116b73061165c565b6040516001600160e01b031960e084901b8116825260048201929092523360248201529085166044820152606401602060405180830381865afa158015611702573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093791906129e4565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103611624565b60455460009062010000900460ff16156117c9578161ffff1660011480156117755750303b155b6117c15760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a656400000000604482015260640161097f565b506000919050565b60455461ffff8084169116106118215760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c20496e697469616c697a652056657273696f6e000000000000604482015260640161097f565b506045805461ffff191661ffff92909216919091179055600190565b6118808160405160240161185191906126d3565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611d7b565b50565b60455462010000900460ff166118d75760405162461bcd60e51b8152602060048201526019602482015278436f6e7472616374204e6f7420496e697469616c697a696e6760381b604482015260640161097f565b6119156040518060400160405280601e81526020017f5f5f424153455f555550535f696e69742063616c6c6564202e202e202e20000081525061183d565b61192487878787878787611d9c565b50505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119755760405162461bcd60e51b815260040161097f90612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166119a7611612565b6001600160a01b0316146119cd5760405162461bcd60e51b815260040161097f90612940565b60045460ff166119ef5760405162461bcd60e51b815260040161097f90612a01565b6119ff633825b60160e11b61169c565b611a4b5760405162461bcd60e51b815260206004820152601b60248201527f4368616e67652050726f787941646d696e20466f7262696464656e0000000000604482015260640161097f565b6001600160a01b038116611a935760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b604482015260640161097f565b30337f69feba90503661246e4691cb2fe465cc9acb27d5ae05f8b48a57eefa7c726fb1611abe611726565b604080516001600160a01b03928316815291861660208301520160405180910390a37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0319166001600160a01b0392909216919091179055565b611b31637147855d60e01b61169c565b6118805760405162461bcd60e51b815260206004820152601f60248201527f436f6e74657874205570677261646162696c69747920466f7262696464656e00604482015260640161097f565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611c1757600454610100900460ff16611bf95760405162461bcd60e51b8152602060048201526016602482015275436f6e74657874204e6f742055706772616461626c6560501b604482015260640161097f565b611c0284611e50565b506040805160008152602081019091526113ca565b836001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c71575060408051601f3d908101601f19168201909252611c6e91810190612a30565b60015b611cb15760405162461bcd60e51b8152602060048201526011602482015270436f6e7472616374204e6f74205555505360781b604482015260640161097f565b600080516020612bc08339815191528114611d195760405162461bcd60e51b815260206004820152602260248201527f436f6e747261637420556e737570706f727465642070726f786961626c655555604482015261125160f21b606482015260840161097f565b50611d25848484611f04565b90506113ca565b6000818152600183016020526040812054611d7357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610937565b506000610937565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60455462010000900460ff16611df05760405162461bcd60e51b8152602060048201526019602482015278436f6e7472616374204e6f7420496e697469616c697a696e6760381b604482015260640161097f565b6001611dfd878983612a97565b506002611e0b858783612a97565b506003611e19838583612a97565b50600080546001600160a01b0319166001600160a01b039290921691909117905550506004805461ffff1916600117905550505050565b60045460ff16611e725760405162461bcd60e51b815260040161097f90612a01565b6001600160a01b0381163b611e995760405162461bcd60e51b815260040161097f906127e3565b611eba6040518060600160405280602b8152602001612b95602b913961183d565b600080516020612bc083398151915280546001600160a01b0319166001600160a01b0383161790556040805160608101909152602a8082526118809190612b6b602083013961183d565b6060611f0f84611f80565b600083511180611f1c5750815b15611f6957611f5f6040518060400160405280601f81526020017f6e6577496d706c656d656e746174696f6e2063616c6c6564202e202e202e200081525061183d565b611d258484612014565b505060408051600081526020810190915292915050565b600454610100900460ff16611fd05760405162461bcd60e51b8152602060048201526016602482015275436f6e74657874204e6f742055706772616461626c6560501b604482015260640161097f565b611fd981611e50565b6040516001600160a01b03821690309033907f354bd4b6eb65d64e6c79c53fa4f983a5e6bec4824ce4627c71be0b2722f4917e90600090a450565b60045460609060ff166120395760405162461bcd60e51b815260040161097f90612a01565b6001600160a01b0383163b6120605760405162461bcd60e51b815260040161097f906127e3565b600080846001600160a01b03168460405161207b9190612b58565b600060405180830381855af49150503d80600081146120b6576040519150601f19603f3d011682016040523d82523d6000602084013e6120bb565b606091505b50915091506120f682826040518060400160405280601381526020017211195b1959d85d1958d85b1b0811985a5b1959606a1b8152506120ff565b95945050505050565b6060831561210e5750816113ca565b82511561211e5782518084602001fd5b8160405162461bcd60e51b815260040161097f91906126d3565b80356001600160e01b031981168114610e6957600080fd5b60006020828403121561216257600080fd5b6113ca82612138565b60006020828403121561217d57600080fd5b5035919050565b6000806000838503606081121561219a57600080fd5b60408112156121a857600080fd5b50839250604084013567ffffffffffffffff808211156121c757600080fd5b818601915086601f8301126121db57600080fd5b8135818111156121ea57600080fd5b8760208260051b85010111156121ff57600080fd5b6020830194508093505050509250925092565b801515811461188057600080fd5b8035610e6981612212565b60006020828403121561223d57600080fd5b81356113ca81612212565b60005b8381101561226357818101518382015260200161224b565b83811115612272576000848401525b50505050565b60008151808452612290816020860160208601612248565b601f01601f19169290920160200192915050565b6080815260006122b76080830187612278565b82810360208401526122c98187612278565b6040840195909552505090151560609091015292915050565b6020808252825182820181905260009190848201906040850190845b818110156123245783516001600160e01b031916835292840192918401916001016122fe565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156123245783518352928401929184019160010161234c565b60008060006060848603121561237d57600080fd5b8335925061238d60208501612138565b9150604084013590509250925092565b80356001600160a01b0381168114610e6957600080fd5b6000602082840312156123c657600080fd5b6113ca8261239d565b60008083601f8401126123e157600080fd5b50813567ffffffffffffffff8111156123f957600080fd5b60208301915083602082850101111561241157600080fd5b9250929050565b60008060008060008060006080888a03121561243357600080fd5b873567ffffffffffffffff8082111561244b57600080fd5b6124578b838c016123cf565b909950975060208a013591508082111561247057600080fd5b61247c8b838c016123cf565b909750955060408a013591508082111561249557600080fd5b506124a28a828b016123cf565b90945092506124b590506060890161239d565b905092959891949750929550565b600080604083850312156124d657600080fd5b823591506124e66020840161239d565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156123245783516001600160a01b03168352928401929184019160010161250b565b60008060006060848603121561254557600080fd5b833592506020840135915061255c60408501612138565b90509250925092565b6060815260006125786060830186612278565b828103602084015261258a8186612278565b9150508215156040830152949350505050565b6000806000604084860312156125b257600080fd5b833567ffffffffffffffff8111156125c957600080fd5b6125d5868287016123cf565b90945092505060208401356125e981612212565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561261f57600080fd5b6126288461239d565b9250602084013567ffffffffffffffff8082111561264557600080fd5b818601915086601f83011261265957600080fd5b81358181111561266b5761266b6125f4565b604051601f8201601f19908116603f01168101908382118183101715612693576126936125f4565b816040528281528960208487010111156126ac57600080fd5b82602086016020830137600060208483010152809650505050505061255c60408501612220565b6020815260006113ca6020830184612278565b6000806000806000606086880312156126fe57600080fd5b853567ffffffffffffffff8082111561271657600080fd5b61272289838a016123cf565b9097509550602088013591508082111561273b57600080fd5b50612748888289016123cf565b909450925050604086013561275c81612212565b809150509295509295909350565b6000806040838503121561277d57600080fd5b50508035926020909101359150565b60408152600061279f6040830185612278565b905082151560208301529392505050565b6000806000606084860312156127c557600080fd5b833592506127d56020850161239d565b915061255c60408501612138565b60208082526018908201527f496c6c6567616c20436f6e747261637420416464726573730000000000000000604082015260600190565b600181811c9082168061282e57607f821691505b60208210810361284e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261288057600080fd5b9190910192915050565b6000808335601e198436030181126128a157600080fd5b83018035915067ffffffffffffffff8211156128bc57600080fd5b6020019150600581901b360382131561241157600080fd5b634e487b7160e01b600052602160045260246000fd5b60006001820161290a57634e487b7160e01b600052601160045260246000fd5b5060010190565b602080825260159082015274125b1b1959d85b0810dbdb9d1c9858dd0810d85b1b605a1b604082015260600190565b602080825260149082015273141c9bde1e4810d85b1b195908125b9d985b1a5960621b604082015260600190565b600080835461297c8161281a565b6001828116801561299457600181146129a9576129d8565b60ff19841687528215158302870194506129d8565b8760005260208060002060005b858110156129cf5781548a8201529084019082016129b6565b50505082870194505b50929695505050505050565b6000602082840312156129f657600080fd5b81516113ca81612212565b60208082526015908201527410dbdb9d195e1d08139bdd081058dd1a5d985d1959605a1b604082015260600190565b600060208284031215612a4257600080fd5b5051919050565b601f82111561165757600081815260208120601f850160051c81016020861015612a705750805b601f850160051c820191505b81811015612a8f57828155600101612a7c565b505050505050565b67ffffffffffffffff831115612aaf57612aaf6125f4565b612ac383612abd835461281a565b83612a49565b6000601f841160018114612af75760008515612adf5750838201355b600019600387901b1c1916600186901b178355612b51565b600083815260209020601f19861690835b82811015612b285786850135825560209485019460019092019101612b08565b5086821015612b455760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000825161288081846020870161224856fe616674657220736574205f736574496d706c656d656e746174696f6e2063616c6c6564202e202e202e206265666f726520736574205f736574496d706c656d656e746174696f6e2063616c6c6564202e202e202e20360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212201970d1a6fcd9f9492cf0f95548592eaf86d13e5d53305246dd5d387c62f0975e64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "grantRoleAccount(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasAccess(bytes32,address,bytes4)": {
        "details": "Function called by apps to check ACL on kernel or to check permission status",
        "returns": {
          "_0": "boolean indicating whether the ACL allows the role or not"
        }
      },
      "hasAccountRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "revokeRoleAccount(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12004,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_accessCtrlManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12006,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_domainName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 12008,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_domainVersion",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 12010,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_domainRealm",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 12012,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_isEnabled",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 12014,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_isUpgradable",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 12019,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)64_storage"
      },
      {
        "astId": 12172,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "69",
        "type": "t_uint16"
      },
      {
        "astId": 12175,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_initializing",
        "offset": 2,
        "slot": "69",
        "type": "t_bool"
      },
      {
        "astId": 12648,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "__gap",
        "offset": 0,
        "slot": "70",
        "type": "t_array(t_uint256)64_storage"
      },
      {
        "astId": 8914,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_userRoleMap",
        "offset": 0,
        "slot": "134",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_enum(Status)8864))"
      },
      {
        "astId": 8919,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_ctxMap",
        "offset": 0,
        "slot": "135",
        "type": "t_mapping(t_bytes32,t_struct(Context)8879_storage)"
      },
      {
        "astId": 8924,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_roleMap",
        "offset": 0,
        "slot": "136",
        "type": "t_mapping(t_bytes32,t_struct(Role)8889_storage)"
      },
      {
        "astId": 8929,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_realmMap",
        "offset": 0,
        "slot": "137",
        "type": "t_mapping(t_bytes32,t_struct(Realm)8899_storage)"
      },
      {
        "astId": 8934,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_groupMap",
        "offset": 0,
        "slot": "138",
        "type": "t_mapping(t_bytes32,t_struct(Group)8907_storage)"
      },
      {
        "astId": 8937,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_livelyGeneralRealm",
        "offset": 0,
        "slot": "139",
        "type": "t_struct(Realm)8899_storage"
      },
      {
        "astId": 8940,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_livelyGeneralGroup",
        "offset": 0,
        "slot": "143",
        "type": "t_struct(Group)8907_storage"
      },
      {
        "astId": 8943,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_livelyAdminRole",
        "offset": 0,
        "slot": "147",
        "type": "t_struct(Role)8889_storage"
      },
      {
        "astId": 8946,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_liveltSystemAdminRole",
        "offset": 0,
        "slot": "153",
        "type": "t_struct(Role)8889_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)64_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[64]",
        "numberOfBytes": "2048"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Status)8864": {
        "encoding": "inplace",
        "label": "enum AccessControlStorage.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_enum(Status)8864))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => enum AccessControlStorage.Status))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_enum(Status)8864)"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_enum(Status)8864)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum AccessControlStorage.Status)",
        "numberOfBytes": "32",
        "value": "t_enum(Status)8864"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_enum(Status)8864))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => enum AccessControlStorage.Status))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_enum(Status)8864)"
      },
      "t_mapping(t_bytes32,t_struct(Context)8879_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorage.Context)",
        "numberOfBytes": "32",
        "value": "t_struct(Context)8879_storage"
      },
      "t_mapping(t_bytes32,t_struct(Group)8907_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorage.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)8907_storage"
      },
      "t_mapping(t_bytes32,t_struct(Realm)8899_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorage.Realm)",
        "numberOfBytes": "32",
        "value": "t_struct(Realm)8899_storage"
      },
      "t_mapping(t_bytes32,t_struct(Role)8889_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorage.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)8889_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressToUintMap)10334_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 10333,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)9867_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)10785_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 10784,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10591_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)9867_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 9862,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)10785_storage"
          },
          {
            "astId": 9866,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Context)8879_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.Context",
        "members": [
          {
            "astId": 8866,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "realm",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8868,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "smca",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8875,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "resources",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_enum(Status)8864))"
          },
          {
            "astId": 8878,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "funcSet",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Bytes32Set)10785_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Group)8907_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.Group",
        "members": [
          {
            "astId": 8901,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8903,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "isEnabled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8906,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "roles",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Bytes32Set)10785_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Realm)8899_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.Realm",
        "members": [
          {
            "astId": 8891,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8893,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "isEnabled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8895,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "isUpgradable",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8898,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "ctxSet",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Bytes32Set)10785_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Role)8889_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.Role",
        "members": [
          {
            "astId": 8881,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8883,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "group",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8885,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "isEnabled",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 8888,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "userMap",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressToUintMap)10334_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)10591_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10586,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10590,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}