{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "ContextFuncRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "ContextFuncRoleAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oldRealm",
          "type": "bytes32"
        }
      ],
      "name": "ContextRealmChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "scma",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "ContextRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "ContextRoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "ContextRoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ContextStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "scma",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "ContextUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "GroupRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "GroupStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "initCount",
          "type": "uint16"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "LocalAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isUpgradable",
          "type": "bool"
        }
      ],
      "name": "RealmRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "RealmStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "RealmUpgradeStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleAccountGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RoleAccountRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newGroup",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oldGroup",
          "type": "bytes32"
        }
      ],
      "name": "RoleGroupChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "RoleRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "RoleStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SafeModeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "UpgradeStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "addContextFuncRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractContext",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRealm",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        }
      ],
      "name": "getContextFuncs",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        }
      ],
      "name": "getContextInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "version",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "realm",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "smca",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isSafeMode",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUpgradable",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.ResponseContext",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "getGroupInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "getGroupRoles",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "getRealmContexts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "getRealmInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAccounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "grantContextRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRoleAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "signature",
          "type": "bytes4"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "hasContextRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "hasGroupRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "hasRealmContext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRoleAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domainName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "domainVersion",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "domainRealm",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accessControlManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "isContextEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "isContextExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "isContextFunctionEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "isContextFunctionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "isContextSafeMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "isContextUpgradable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "isGroupEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "isGroupExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isLivelyAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isLivelyAssetManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isLivelyDao",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isLivelyDaoExecutor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "isLivelyGeneralGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "isLivelyGeneralRealm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isLivelySystemAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "isRealmEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "isRealmExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "isRealmUpgradable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "isRoleEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "isRoleExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSafeMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgradable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "livelyAdminRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "livelyAnonymousRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "livelyAssetManagerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "livelyDaoExecutorRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "livelyDaoRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "livelyGeneralGroupRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "livelyGeneralRealmRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "livelySystemAdminRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "version",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "realm",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "smca",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "status",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestContext",
          "name": "rc",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4[]",
              "name": "funcSelectors",
              "type": "bytes4[]"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestRegisterContext[]",
          "name": "rcr",
          "type": "tuple[]"
        }
      ],
      "name": "registerContext",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "registerGroup",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isUpgradable",
          "type": "bool"
        }
      ],
      "name": "registerRealm",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "registerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "removeContextFunc",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "revokeContextRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRoleAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        }
      ],
      "name": "setContextRealm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setContextStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setGroupStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLocalAdmin",
          "type": "address"
        }
      ],
      "name": "setLocalAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setRealmStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setRealmUpgradeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "group",
          "type": "bytes32"
        }
      ],
      "name": "setRoleGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setRoleStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setSafeMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setUpgradeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ctx",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "version",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "realm",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "smca",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "status",
              "type": "bool"
            }
          ],
          "internalType": "struct IContextManagement.RequestContext",
          "name": "rc",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "bytes4[]",
              "name": "funcSelectors",
              "type": "bytes4[]"
            },
            {
              "internalType": "enum IContextManagement.UpdateContextStatus",
              "name": "updateStatus",
              "type": "uint8"
            }
          ],
          "internalType": "struct IContextManagement.RequestUpdateContext[]",
          "name": "rcr",
          "type": "tuple[]"
        }
      ],
      "name": "updateContext",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "forceCall",
          "type": "bool"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9a5603095fa9ff4ba09786a979d088559fc9843345de80c61c50a43c637f6610",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "4810113",
    "logsBloom": "0x
    "blockHash": "0x8b519547fac4c625ff3673f0e7ed2ce5d8272b3a56f84cac93b6b14013f5e6fb",
    "transactionHash": "0x9a5603095fa9ff4ba09786a979d088559fc9843345de80c61c50a43c637f6610",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "4810113",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3e2301e7d344110cf0a11d061271faa8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"ContextFuncRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"ContextFuncRoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldRealm\",\"type\":\"bytes32\"}],\"name\":\"ContextRealmChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scma\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"ContextRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"ContextRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"ContextRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ContextStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"scma\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"ContextUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"GroupRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"GroupStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"initCount\",\"type\":\"uint16\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"LocalAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUpgradable\",\"type\":\"bool\"}],\"name\":\"RealmRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"RealmStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"RealmUpgradeStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleAccountGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RoleAccountRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newGroup\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oldGroup\",\"type\":\"bytes32\"}],\"name\":\"RoleGroupChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"RoleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"RoleStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SafeModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpgradeStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"addContextFuncRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractContext\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRealm\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"}],\"name\":\"getContextFuncs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"}],\"name\":\"getContextInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"smca\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSafeMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUpgradable\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.ResponseContext\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"getGroupInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"getGroupRoles\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"getRealmContexts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"getRealmInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"grantContextRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRoleAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"hasContextRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"hasGroupRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"hasRealmContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRoleAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainVersion\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"domainRealm\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accessControlManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"isContextEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"isContextExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"isContextFunctionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"isContextFunctionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"isContextSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"isContextUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"isGroupEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"isGroupExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLivelyAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLivelyAssetManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLivelyDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLivelyDaoExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"isLivelyGeneralGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"isLivelyGeneralRealm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLivelySystemAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"isRealmEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"isRealmExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"isRealmUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"isRoleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"isRoleExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"livelyAdminRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"livelyAnonymousRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"livelyAssetManagerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"livelyDaoExecutorRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"livelyDaoRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"livelyGeneralGroupRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"livelyGeneralRealmRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"livelySystemAdminRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"smca\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestContext\",\"name\":\"rc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSelectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestRegisterContext[]\",\"name\":\"rcr\",\"type\":\"tuple[]\"}],\"name\":\"registerContext\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"registerGroup\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUpgradable\",\"type\":\"bool\"}],\"name\":\"registerRealm\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"registerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"removeContextFunc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"revokeContextRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRoleAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"}],\"name\":\"setContextRealm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setContextStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setGroupStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLocalAdmin\",\"type\":\"address\"}],\"name\":\"setLocalAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setRealmStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setRealmUpgradeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"group\",\"type\":\"bytes32\"}],\"name\":\"setRoleGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setRoleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setUpgradeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ctx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"smca\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"internalType\":\"struct IContextManagement.RequestContext\",\"name\":\"rc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSelectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"enum IContextManagement.UpdateContextStatus\",\"name\":\"updateStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct IContextManagement.RequestUpdateContext[]\",\"name\":\"rcr\",\"type\":\"tuple[]\"}],\"name\":\"updateContext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forceCall\",\"type\":\"bool\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hasAccess(bytes32,address,bytes4)\":{\"details\":\"Function called by apps to check ACL\",\"returns\":{\"_0\":\"boolean indicating whether the ACL allows\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/acl/AccessControlManager.sol\":\"AccessControlManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/contracts/acl/AccessControlManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"./AccessControlStorage.sol\\\";\\nimport \\\"./IGroupManagement.sol\\\";\\nimport \\\"./IRealmManagement.sol\\\";\\nimport \\\"./IRoleManagement.sol\\\";\\nimport \\\"./IContextManagement.sol\\\";\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../lib/struct/LEnumerableMap.sol\\\";\\nimport \\\"../lib/acl/LContextManagement.sol\\\";\\nimport \\\"../lib/acl/LRoleManagement.sol\\\";\\nimport \\\"../lib/acl/LGroupManagement.sol\\\";\\nimport \\\"../lib/acl/LRealmManagement.sol\\\";\\nimport \\\"../lib/acl/LAccessControl.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"../proxy/BaseUUPSProxy.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract AccessControlManager is\\n  AccessControlStorage,\\n  BaseUUPSProxy,\\n  IContextManagement,\\n  IAccessControl,\\n  IGroupManagement,\\n  IRealmManagement,\\n  IRoleManagement\\n{\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableMap for LEnumerableMap.Bytes32ToBytes32Map;\\n  using LEnumerableMap for LEnumerableMap.AddressToUintMap;\\n\\n  constructor() {}\\n\\n  function initialize(\\n    string calldata domainName,\\n    string calldata domainVersion,\\n    string calldata domainRealm,\\n    address accessControlManager\\n  ) public onlyProxy onlyLocalAdmin initializer {\\n    bytes32 realm = keccak256(abi.encodePacked(domainRealm));\\n\\n    LAccessControl.initializeContext(_dataMaps);\\n\\n    __BASE_UUPS_init(domainName, domainVersion, realm, accessControlManager);\\n\\n    RequestRegisterContext[] memory rc = LAccessControl.createRequestContext();\\n    LContextManagement.registerAccessControlManagerContext(_dataMaps, address(this), realm, rc);\\n\\n    emit Initialized(\\n      _msgSender(),\\n      address(this),\\n      _implementation(),\\n      domainName,\\n      domainVersion,\\n      realm,\\n      _getInitializedCount()\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n    return\\n      interfaceId == type(IAccessControl).interfaceId ||\\n      interfaceId == type(IContextManagement).interfaceId ||\\n      interfaceId == type(IRoleManagement).interfaceId ||\\n      interfaceId == type(IGroupManagement).interfaceId ||\\n      interfaceId == type(IRealmManagement).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function hasAccess(\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool) {\\n    return LAccessControl.hasAccess(_dataMaps, context, account, signature);\\n  }\\n\\n  function isLivelySystemAdmin(address account) external view returns (bool) {\\n    return LAccessControl.isLivelySystemAdmin(_dataMaps, account);\\n  }\\n\\n  function isLivelyAdmin(address account) external view returns (bool) {\\n    return LAccessControl.isLivelyAdmin(_dataMaps, account);\\n  }\\n\\n  function isLivelyAssetManager(address account) external view returns (bool) {\\n    return LAccessControl.isLivelyAssetManager(_dataMaps, account);\\n  }\\n\\n  function isLivelyDao(address account) external view returns (bool) {\\n    return LAccessControl.isLivelyDao(_dataMaps, account);\\n  }\\n\\n  function isLivelyDaoExecutor(address account) external view returns (bool) {\\n    return LAccessControl.isLivelyDaoExecutor(_dataMaps, account);\\n  }\\n\\n  function isLivelyGeneralGroup(bytes32 role) external view returns (bool) {\\n    return LAccessControl.isLivelyGeneralGroup(_dataMaps, role);\\n  }\\n\\n  function isLivelyGeneralRealm(bytes32 context) external view returns (bool) {\\n    return LAccessControl.isLivelyGeneralRealm(_dataMaps, context);\\n  }\\n\\n  function isContextSafeMode(bytes32 context) external view returns (bool) {\\n    return LAccessControl.isContextSafeMode(_dataMaps, context);\\n  }\\n\\n  function isContextUpgradable(bytes32 context) external view returns (bool) {\\n    return LAccessControl.isContextUpgradable(_dataMaps, context);\\n  }\\n\\n  function isRealmUpgradable(bytes32 realm) external view returns (bool) {\\n    return LAccessControl.isRealmUpgradable(_dataMaps, realm);\\n  }\\n\\n  function isGroupExists(bytes32 group) external view returns (bool) {\\n    return LAccessControl.isGroupExists(_dataMaps, group);\\n  }\\n\\n  function isGroupEnabled(bytes32 group) external view returns (bool) {\\n    return LAccessControl.isGroupEnabled(_dataMaps, group);\\n  }\\n\\n  function isContextExists(bytes32 context) external view returns (bool) {\\n    return LAccessControl.isContextExists(_dataMaps, context);\\n  }\\n\\n  function isContextFunctionExists(bytes32 context, bytes4 functionSelector) external view returns (bool) {\\n    return LAccessControl.isContextFunctionExists(_dataMaps, context, functionSelector);\\n  }\\n\\n  function isContextFunctionEnabled(bytes32 context, bytes4 functionSelector) external view returns (bool) {\\n    return LAccessControl.isContextFunctionEnabled(_dataMaps, context, functionSelector);\\n  }\\n\\n  function isContextEnabled(bytes32 context) external view returns (bool) {\\n    return LAccessControl.isContextEnabled(_dataMaps, context);\\n  }\\n\\n  function isRoleExists(bytes32 role) external view returns (bool) {\\n    return LAccessControl.isRoleExists(_dataMaps, role);\\n  }\\n\\n  function isRoleEnabled(bytes32 role) external view returns (bool) {\\n    return LAccessControl.isRoleEnabled(_dataMaps, role);\\n  }\\n\\n  function isRealmExists(bytes32 realm) external view returns (bool) {\\n    return LAccessControl.isRealmExists(_dataMaps, realm);\\n  }\\n\\n  function isRealmEnabled(bytes32 realm) external view returns (bool) {\\n    return LAccessControl.isRealmEnabled(_dataMaps, realm);\\n  }\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32) {\\n    (bytes32 context, address sender) = LContextManagement.registerContext(_dataMaps, signature, rc, rcr);\\n    emit ContextRegistered(context, rc.smca, sender, rc.realm);\\n    return context;\\n  }\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata rcr\\n  ) external returns (address) {\\n    (address smca, address sender) = LContextManagement.updateContext(_dataMaps, ctx, signature, rc, rcr);\\n    emit ContextUpdated(ctx, smca, sender, rc.realm);\\n    return smca;\\n  }\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool) {\\n    bytes32 realm = LContextManagement.addContextFuncRole(_dataMaps, ctx, functionSelector, role);\\n    emit ContextFuncRoleAdded(ctx, role, msg.sender, functionSelector, realm);\\n    return true;\\n  }\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool) {\\n    bytes32 realm = LContextManagement.removeContextFunc(_dataMaps, ctx, functionSelector);\\n    emit ContextFuncRemoved(ctx, msg.sender, functionSelector, realm);\\n    return true;\\n  }\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool) {\\n    bytes32 realm = LContextManagement.grantContextRole(_dataMaps, ctx, functionSelector, role);\\n    emit ContextRoleGranted(ctx, role, msg.sender, functionSelector, realm);\\n    return true;\\n  }\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool) {\\n    bytes32 realm = LContextManagement.revokeContextRole(_dataMaps, ctx, functionSelector, role);\\n    emit ContextRoleRevoked(ctx, role, msg.sender, functionSelector, realm);\\n    return true;\\n  }\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool) {\\n    (bool success, bytes32 realm) = LContextManagement.setContextStatus(_dataMaps, ctx, status);\\n    emit ContextStatusChanged(ctx, _msgSender(), realm, status);\\n    return success;\\n  }\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool) {\\n    (bool success, bytes32 oldRealm) = LContextManagement.setContextRealm(_dataMaps, ctx, realm);\\n    emit ContextRealmChanged(ctx, _msgSender(), realm, oldRealm);\\n    return success;\\n  }\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return LContextManagement.hasContextRole(_dataMaps, ctx, role, functionSelector);\\n  }\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory) {\\n    return LContextManagement.getContextInfo(_dataMaps, ctx);\\n  }\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory) {\\n    return LContextManagement.getContextFuncs(_dataMaps, ctx);\\n  }\\n\\n  function registerGroup(string calldata name, bool status) external returns (bytes32) {\\n    bytes32 group = LGroupManagement.registerGroup(_dataMaps, name, status);\\n    emit GroupRegistered(group, _msgSender(), name, status);\\n    return group;\\n  }\\n\\n  function setGroupStatus(bytes32 group, bool status) external returns (bool) {\\n    emit GroupStatusChanged(group, _msgSender(), status);\\n    return LGroupManagement.setGroupStatus(_dataMaps, group, status);\\n  }\\n\\n  function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool) {\\n    return LGroupManagement.hasGroupRole(_dataMaps, group, role);\\n  }\\n\\n  function getGroupInfo(bytes32 group) external view returns (string memory, bool) {\\n    return LGroupManagement.getGroupInfo(_dataMaps, group);\\n  }\\n\\n  function getGroupRoles(bytes32 group) external view returns (bytes32[] memory) {\\n    return LGroupManagement.getGroupRoles(_dataMaps, group);\\n  }\\n\\n  function registerRealm(\\n    string calldata name,\\n    bool status,\\n    bool isUpgradable\\n  ) external returns (bytes32) {\\n    bytes32 realm = LRealmManagement.registerRealm(_dataMaps, name, status, isUpgradable);\\n    emit RealmRegistered(realm, _msgSender(), name, status, isUpgradable);\\n    return realm;\\n  }\\n\\n  function setRealmStatus(bytes32 realm, bool status) external returns (bool) {\\n    emit RealmStatusChanged(realm, _msgSender(), status);\\n    return LRealmManagement.setRealmStatus(_dataMaps, realm, status);\\n  }\\n\\n  function setRealmUpgradeStatus(bytes32 realm, bool status) external returns (bool) {\\n    emit RealmUpgradeStatusChanged(realm, _msgSender(), status);\\n    return LRealmManagement.setRealmUpgradeStatus(_dataMaps, realm, status);\\n  }\\n\\n  function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool) {\\n    return LRealmManagement.hasRealmContext(_dataMaps, realm, context);\\n  }\\n\\n  function getRealmInfo(bytes32 realm)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bool,\\n      bool\\n    )\\n  {\\n    return LRealmManagement.getRealmInfo(_dataMaps, realm);\\n  }\\n\\n  function getRealmContexts(bytes32 realm) external view returns (bytes32[] memory) {\\n    return LRealmManagement.getRealmContexts(_dataMaps, realm);\\n  }\\n\\n  function grantRoleAccount(bytes32 role, address account) external returns (bool) {\\n    emit RoleAccountGranted(_msgSender(), role, account);\\n    return LRoleManagement.grantRoleAccount(_dataMaps, role, account);\\n  }\\n\\n  function revokeRoleAccount(bytes32 role, address account) external returns (bool) {\\n    emit RoleAccountRevoked(_msgSender(), role, account);\\n    return LRoleManagement.revokeRoleAccount(_dataMaps, role, account);\\n  }\\n\\n  function registerRole(\\n    string calldata name,\\n    bytes32 group,\\n    bool status\\n  ) external returns (bytes32) {\\n    bytes32 role = LRoleManagement.registerRole(_dataMaps, name, group, status);\\n    emit RoleRegistered(_msgSender(), role, name, group, status);\\n    return role;\\n  }\\n\\n  function setRoleStatus(bytes32 role, bool status) external returns (bool) {\\n    (bool success, bytes32 group) = LRoleManagement.setRoleStatus(_dataMaps, role, status);\\n    emit RoleStatusChanged(_msgSender(), role, group, status);\\n    return success;\\n  }\\n\\n  function setRoleGroup(bytes32 role, bytes32 group) external returns (bool) {\\n    (bool success, bytes32 oldGroup) = LRoleManagement.setRoleGroup(_dataMaps, role, group);\\n    emit RoleGroupChanged(_msgSender(), role, group, oldGroup);\\n    return success;\\n  }\\n\\n  function getRoleInfo(bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    )\\n  {\\n    return LRoleManagement.getRoleInfo(_dataMaps, role);\\n  }\\n\\n  function getRoleAccounts(bytes32 role) external view returns (address[] memory) {\\n    return LRoleManagement.getRoleAccounts(_dataMaps, role);\\n  }\\n\\n  function hasRoleAccount(bytes32 role, address account) external view returns (bool) {\\n    return LRoleManagement.hasRoleAccount(_dataMaps, role, account);\\n  }\\n\\n  function livelyGeneralRealmRole() external pure returns (bytes32) {\\n    return LAccessControl.LIVELY_GENERAL_REALM;\\n  }\\n\\n  function livelyGeneralGroupRole() external pure returns (bytes32) {\\n    return LAccessControl.LIVELY_GENERAL_GROUP;\\n  }\\n\\n  function livelySystemAdminRole() external pure returns (bytes32) {\\n    return LAccessControl.LIVELY_SYSTEM_ADMIN_ROLE;\\n  }\\n\\n  function livelyAdminRole() external pure returns (bytes32) {\\n    return LAccessControl.LIVELY_ADMIN_ROLE;\\n  }\\n\\n  function livelyAssetManagerRole() external pure returns (bytes32) {\\n    return LAccessControl.LIVELY_ASSET_MANAGER_ROLE;\\n  }\\n\\n  function livelyDaoRole() external pure returns (bytes32) {\\n    return LAccessControl.LIVELY_DAO_ROLE;\\n  }\\n\\n  function livelyDaoExecutorRole() external pure returns (bytes32) {\\n    return LAccessControl.LIVELY_DAO_EXECUTOR_ROLE;\\n  }\\n\\n  function livelyAnonymousRole() external pure returns (bytes32) {\\n    return LAccessControl.LIVELY_ANONYMOUS_ROLE;\\n  }\\n}\\n\",\"keccak256\":\"0x3a649f1a3d94ffbd472cbdf727c2316209e781f5e2f02f4c50cb7bb8d26d0343\",\"license\":\"MIT\"},\"src/contracts/acl/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../lib/struct/LEnumerableMap.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\n\\nabstract contract AccessControlStorage is BaseUUPSStorage {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableMap for LEnumerableMap.Bytes32ToBytes32Map;\\n  using LEnumerableMap for LEnumerableMap.AddressToUintMap;\\n\\n  enum Status {\\n    NONE,\\n    ENABLED,\\n    DISABLED\\n  }\\n\\n  struct RoleStat {\\n    bytes32 role;\\n    Status status;\\n  }\\n\\n  struct Context {\\n    bytes32 realm;\\n    address smca; // smart contract address\\n    bool isEnabled;\\n    mapping(bytes4 => RoleStat) resources; // function selector => RoleStat\\n    LEnumerableSet.Bytes32Set funcSet;\\n  }\\n\\n  struct Role {\\n    string name;\\n    bytes32 group;\\n    bool isEnabled;\\n    LEnumerableSet.AddressSet accountSet;\\n  }\\n\\n  struct Realm {\\n    string name;\\n    bool isEnabled;\\n    bool isUpgradable;\\n    LEnumerableSet.Bytes32Set ctxSet;\\n  }\\n\\n  struct Group {\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.Bytes32Set roleSet;\\n  }\\n\\n  struct DataMaps {\\n    mapping(address => mapping(bytes32 => Status)) accountMap;\\n    mapping(bytes32 => Context) ctxMap;\\n    mapping(bytes32 => Role) roleMap;\\n    mapping(bytes32 => Realm) realmMap;\\n    mapping(bytes32 => Group) groupMap;\\n  }\\n\\n  DataMaps internal _dataMaps;\\n}\\n\",\"keccak256\":\"0xc3318b258dd49e5199c017c9f17e0dfb100211a312dd0e910baae4126058e941\",\"license\":\"MIT\"},\"src/contracts/acl/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IAccessControl {\\n  /**\\n   * @dev Function called by apps to check ACL\\n   * @return boolean indicating whether the ACL allows\\n   */\\n  function hasAccess(\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool);\\n\\n  function isLivelySystemAdmin(address account) external view returns (bool);\\n\\n  function isLivelyAdmin(address account) external view returns (bool);\\n\\n  function isLivelyAssetManager(address account) external view returns (bool);\\n\\n  function isLivelyDao(address account) external view returns (bool);\\n\\n  function isLivelyDaoExecutor(address account) external view returns (bool);\\n\\n  function isLivelyGeneralGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyGeneralRealm(bytes32 context) external view returns (bool);\\n\\n  function isContextSafeMode(bytes32 context) external view returns (bool);\\n\\n  function isContextUpgradable(bytes32 context) external view returns (bool);\\n\\n  function isContextExists(bytes32 context) external view returns (bool);\\n\\n  function isContextFunctionExists(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextFunctionEnabled(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextEnabled(bytes32 context) external view returns (bool);\\n\\n  function isGroupExists(bytes32 group) external view returns (bool);\\n\\n  function isGroupEnabled(bytes32 group) external view returns (bool);\\n\\n  function isRoleExists(bytes32 role) external view returns (bool);\\n\\n  function isRoleEnabled(bytes32 role) external view returns (bool);\\n\\n  function isRealmExists(bytes32 realm) external view returns (bool);\\n\\n  function isRealmEnabled(bytes32 realm) external view returns (bool);\\n\\n  function isRealmUpgradable(bytes32 realm) external view returns (bool);\\n\\n  function livelyGeneralRealmRole() external pure returns (bytes32);\\n\\n  function livelyGeneralGroupRole() external pure returns (bytes32);\\n\\n  function livelySystemAdminRole() external pure returns (bytes32);\\n\\n  function livelyAdminRole() external pure returns (bytes32);\\n\\n  function livelyAssetManagerRole() external pure returns (bytes32);\\n\\n  function livelyDaoRole() external pure returns (bytes32);\\n\\n  function livelyDaoExecutorRole() external pure returns (bytes32);\\n\\n  function livelyAnonymousRole() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb3fc27e8b00531a5455535b9b8cf710db82ae40a56597cda4573a74656a55d59\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address smca;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address smca;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed scma, address indexed sender, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed scma, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0xdb803c78806f81203f8d0b121aa12ab2fdd43c6174ede12ce9b2ad1dcff881cc\",\"license\":\"MIT\"},\"src/contracts/acl/IGroupManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IGroupManagement {\\n  event GroupRegistered(bytes32 indexed group, address indexed sender, string name, bool status);\\n\\n  event GroupStatusChanged(bytes32 indexed group, address indexed sender, bool status);\\n\\n  function registerGroup(string calldata name, bool status) external returns (bytes32);\\n\\n  function setGroupStatus(bytes32 group, bool status) external returns (bool);\\n\\n  function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool);\\n\\n  function getGroupInfo(bytes32 group) external view returns (string memory, bool);\\n\\n  function getGroupRoles(bytes32 group) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xcfdaba2dfb246d03da0adf1a01ae32185dfc73048f639cc3bd389ed9e5403b86\",\"license\":\"MIT\"},\"src/contracts/acl/IRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IRealmManagement {\\n  event RealmRegistered(bytes32 indexed realm, address indexed sender, string name, bool status, bool isUpgradable);\\n\\n  event RealmStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  event RealmUpgradeStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  function registerRealm(\\n    string calldata name,\\n    bool status,\\n    bool isUpgradable\\n  ) external returns (bytes32);\\n\\n  function setRealmStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function setRealmUpgradeStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool);\\n\\n  function getRealmInfo(bytes32 realm)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bool,\\n      bool\\n    );\\n\\n  function getRealmContexts(bytes32 realm) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x5a0a193706319c4b2c77928a0fff9d95a48c85d84bbcc837c9f7a4def0915979\",\"license\":\"MIT\"},\"src/contracts/acl/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IRoleManagement {\\n  event RoleAccountGranted(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleAccountRevoked(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed role,\\n    string indexed name,\\n    bytes32 group,\\n    bool isEnabled\\n  );\\n\\n  event RoleStatusChanged(address indexed sender, bytes32 indexed role, bytes32 indexed group, bool status);\\n\\n  event RoleGroupChanged(address indexed sender, bytes32 indexed role, bytes32 indexed newGroup, bytes32 oldGroup);\\n\\n  function registerRole(\\n    string calldata name,\\n    bytes32 group,\\n    bool status\\n  ) external returns (bytes32);\\n\\n  function grantRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function revokeRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function setRoleStatus(bytes32 role, bool status) external returns (bool);\\n\\n  function setRoleGroup(bytes32 role, bytes32 group) external returns (bool);\\n\\n  function getRoleInfo(bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    );\\n\\n  function getRoleAccounts(bytes32 role) external view returns (address[] memory);\\n\\n  function hasRoleAccount(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2914f127efe6bf9975cc9e46cff550c020fac132b9899787fd1c0381f5ba1dd\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7d59bfa264a24f3f8c59d3eefe74c0f3081234bfdc9f181888ce028a900fb572\",\"license\":\"MIT\"},\"src/contracts/lib/LContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the context\\n */\\nlibrary LContextUtils {\\n  function generateCtx(address contractAddress) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractAddress));\\n  }\\n}\\n\",\"keccak256\":\"0xae0cd5e3563156b9bc14d8c54282f80c6cefd446800a6e8c83e19faee286f966\",\"license\":\"MIT\"},\"src/contracts/lib/LStorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary LStorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x00c12bb8adba5ac60c7cebcb2fced78d2abbf5a2b7f1378f7f0381e1c7b0c0ac\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0xb174a9429701d72e43a0880a9f2351dd9e695afa130c433c210db4d47ffce425\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../../acl/IGroupManagement.sol\\\";\\nimport \\\"../../acl/IRealmManagement.sol\\\";\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LAccessControl {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LAccessControl\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant LIVELY_GENERAL_REALM = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_REALM\\\"));\\n  bytes32 public constant LIVELY_GENERAL_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_GROUP\\\"));\\n  bytes32 public constant LIVELY_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_SYSTEM_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_SYSTEM_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_ASSET_MANAGER_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_MANAGER_ROLE\\\"));\\n  bytes32 public constant LIVELY_DAO_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_DAO_ROLE\\\"));\\n  bytes32 public constant LIVELY_DAO_EXECUTOR_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_DAO_EXECUTOR_ROLE\\\"));\\n  bytes32 public constant LIVELY_ANONYMOUS_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ANONYMOUS_ROLE\\\"));\\n\\n  function initializeContext(AccessControlStorage.DataMaps storage data) external {\\n    data.accountMap[msg.sender][LIVELY_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n    data.accountMap[msg.sender][LIVELY_SYSTEM_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n\\n    data.roleMap[LIVELY_ADMIN_ROLE].name = \\\"LIVELY_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].name = \\\"LIVELY_SYSTEM_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].name = \\\"LIVELY_ASSET_MANAGER_ROLE\\\";\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].group = LIVELY_GENERAL_GROUP;\\n\\n    data.roleMap[LIVELY_DAO_ROLE].name = \\\"LIVELY_DAO_ROLE\\\";\\n    data.roleMap[LIVELY_DAO_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_DAO_ROLE].group = LIVELY_GENERAL_GROUP;\\n\\n    data.roleMap[LIVELY_DAO_EXECUTOR_ROLE].name = \\\"LIVELY_DAO_EXECUTOR_ROLE\\\";\\n    data.roleMap[LIVELY_DAO_EXECUTOR_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_DAO_EXECUTOR_ROLE].group = LIVELY_GENERAL_GROUP;\\n    \\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].name = \\\"LIVELY_ANONYMOUS_ROLE\\\";\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].accountSet.add(msg.sender);\\n\\n    data.groupMap[LIVELY_GENERAL_GROUP].name = \\\"LIVELY_GENERAL_GROUP\\\";\\n    data.groupMap[LIVELY_GENERAL_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_ADMIN_ROLE);\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_SYSTEM_ADMIN_ROLE);\\n\\n    data.realmMap[LIVELY_GENERAL_REALM].name = \\\"LIVELY_GENERAL_REALM\\\";\\n    data.realmMap[LIVELY_GENERAL_REALM].isEnabled = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].isUpgradable = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].ctxSet.add(LContextUtils.generateCtx(address(this)));\\n  }\\n\\n  function createRequestContext() external pure returns (IContextManagement.RequestRegisterContext[] memory) {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](2);\\n    rrc[0].role = LIVELY_ADMIN_ROLE;\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](18);\\n    rrc[0].funcSelectors[0] = IProxy.setUpgradeStatus.selector;\\n    rrc[0].funcSelectors[1] = IContextManagement.addContextFuncRole.selector;\\n    rrc[0].funcSelectors[2] = IContextManagement.removeContextFunc.selector;\\n    rrc[0].funcSelectors[3] = IContextManagement.grantContextRole.selector;\\n    rrc[0].funcSelectors[4] = IContextManagement.revokeContextRole.selector;\\n    rrc[0].funcSelectors[5] = IContextManagement.setContextRealm.selector;\\n    rrc[0].funcSelectors[6] = IContextManagement.setContextStatus.selector;\\n    rrc[0].funcSelectors[7] = IRoleManagement.registerRole.selector;\\n    rrc[0].funcSelectors[8] = IRoleManagement.grantRoleAccount.selector;\\n    rrc[0].funcSelectors[9] = IRoleManagement.revokeRoleAccount.selector;\\n    rrc[0].funcSelectors[10] = IRoleManagement.setRoleStatus.selector;\\n    rrc[0].funcSelectors[11] = IRoleManagement.setRoleGroup.selector;\\n    rrc[0].funcSelectors[12] = IGroupManagement.registerGroup.selector;\\n    rrc[0].funcSelectors[13] = IGroupManagement.setGroupStatus.selector;\\n    rrc[0].funcSelectors[14] = IRealmManagement.registerRealm.selector;\\n    rrc[0].funcSelectors[15] = IRealmManagement.setRealmStatus.selector;\\n    rrc[0].funcSelectors[16] = IRealmManagement.setRealmUpgradeStatus.selector;\\n    rrc[0].funcSelectors[17] = bytes4(keccak256(\\\"withdrawBalance(address)\\\"));\\n\\n    rrc[1].role = LIVELY_SYSTEM_ADMIN_ROLE;\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](5);\\n    rrc[1].funcSelectors[0] = IProxy.setLocalAdmin.selector;\\n    rrc[1].funcSelectors[1] = IProxy.setSafeMode.selector;\\n    rrc[1].funcSelectors[2] = IProxy.upgradeTo.selector;\\n    rrc[1].funcSelectors[3] = IContextManagement.registerContext.selector;\\n    rrc[1].funcSelectors[4] = IContextManagement.updateContext.selector;\\n\\n    return rrc;\\n  }\\n\\n  function hasAccess(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool) {\\n    bytes32 role = data.ctxMap[context].resources[signature].role;\\n    // console.log(\\\"hasAccess called, address: %s\\\", account);\\n\\n    // console.log(\\\"data.ctxMap[context].smca: %s\\\", data.ctxMap[context].smca);\\n    // console.log(\\\"data.ctxMap[context].isEnabled:\\\");\\n    // console.logBool(data.ctxMap[context].isEnabled);\\n    // console.log(\\\"data.ctxMap[context].realm: \\\");\\n    // console.logBytes32(data.ctxMap[context].realm);\\n    // console.log(\\\"data.ctxMap[context].resources[signature].status: \\\");\\n    // console.logBytes1(bytes1(uint8(data.ctxMap[context].resources[signature].status)));\\n    // console.log(\\\"data.ctxMap[context].resources[signature].role: \\\");\\n    // console.logBytes32(data.ctxMap[context].resources[signature].role);\\n\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].name: %s\\\", data.realmMap[data.ctxMap[context].realm].name);\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].isEnabled: \\\");\\n    // console.logBool(data.realmMap[data.ctxMap[context].realm].isEnabled);\\n\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].name: %s\\\", data.groupMap[data.roleMap[role].group].name);\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].isEnabled: \\\");\\n    // console.logBool(data.groupMap[data.roleMap[role].group].isEnabled);\\n\\n    // console.log(\\\"data.accountMap[account][role]: \\\");\\n    // console.logBytes1(bytes1(uint8(data.accountMap[account][role])));\\n\\n    if (role == LIVELY_ANONYMOUS_ROLE) {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED;\\n    } else {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED &&\\n        data.realmMap[data.ctxMap[context].realm].isEnabled &&\\n        data.groupMap[data.roleMap[role].group].isEnabled &&\\n        data.accountMap[account][role] == AccessControlStorage.Status.ENABLED;\\n    }\\n  }\\n\\n  function isLivelySystemAdmin(AccessControlStorage.DataMaps storage data, address account)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.accountMap[account][LIVELY_SYSTEM_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAdmin(AccessControlStorage.DataMaps storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAssetManager(AccessControlStorage.DataMaps storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ASSET_MANAGER_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyDao(AccessControlStorage.DataMaps storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_DAO_ROLE] == AccessControlStorage.Status.ENABLED;  \\n  }\\n\\n  function isLivelyDaoExecutor(AccessControlStorage.DataMaps storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_DAO_EXECUTOR_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyGeneralGroup(AccessControlStorage.DataMaps storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_GENERAL_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyGeneralRealm(AccessControlStorage.DataMaps storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.realmMap[LIVELY_GENERAL_REALM].ctxSet.contains(context);\\n  }\\n\\n  function isContextSafeMode(AccessControlStorage.DataMaps storage data, bytes32 context) external view returns (bool) {\\n    return IProxy(data.ctxMap[context].smca).isSafeMode();\\n  }\\n\\n  function isContextUpgradable(AccessControlStorage.DataMaps storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return IProxy(data.ctxMap[context].smca).isUpgradable();\\n  }\\n\\n  function isRealmUpgradable(AccessControlStorage.DataMaps storage data, bytes32 realm) external view returns (bool) {\\n    if (bytes(data.realmMap[realm].name).length == 0) return false;\\n    return data.realmMap[realm].isUpgradable;\\n  }\\n\\n  function isGroupExists(AccessControlStorage.DataMaps storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0;\\n  }\\n\\n  function isGroupEnabled(AccessControlStorage.DataMaps storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0 && data.groupMap[group].isEnabled;\\n  }\\n\\n  function isContextExists(AccessControlStorage.DataMaps storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].smca != address(0);\\n  }\\n\\n  function isContextFunctionExists(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return data.ctxMap[context].smca != address(0) && data.ctxMap[context].funcSet.contains(functionSelector);\\n  }\\n\\n  function isContextFunctionEnabled(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return\\n      data.ctxMap[context].smca != address(0) &&\\n      data.ctxMap[context].resources[functionSelector].status == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isContextEnabled(AccessControlStorage.DataMaps storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].smca != address(0) && data.ctxMap[context].isEnabled;\\n  }\\n\\n  function isRoleExists(AccessControlStorage.DataMaps storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0;\\n  }\\n\\n  function isRoleEnabled(AccessControlStorage.DataMaps storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0 && data.roleMap[role].isEnabled;\\n  }\\n\\n  function isRealmExists(AccessControlStorage.DataMaps storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0;\\n  }\\n\\n  function isRealmEnabled(AccessControlStorage.DataMaps storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0 && data.realmMap[realm].isEnabled;\\n  }\\n}\\n\",\"keccak256\":\"0x4eaaa44a9b0ea9272b7fa8811776c680c95cab552761d2b933a1413323beab83\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LContextManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LContextManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n  bytes32 public constant MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contract,string name,string version,string realm)\\\");\\n\\n  function registerAccessControlManagerContext(\\n    AccessControlStorage.DataMaps storage data,\\n    address newContract,\\n    bytes32 realm,\\n    IContextManagement.RequestRegisterContext[] calldata rc\\n  ) external returns (bytes32) {\\n    return _registerContext(data, newContract, realm, true, rc);\\n  }\\n\\n  function registerContext(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes memory signature,\\n    IContextManagement.RequestContext calldata rc,\\n    IContextManagement.RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32, address) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    bytes32 structHash = _getMessageHash(rc.smca, rc.name, rc.version, rc.realm);\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal ECDASA Signature\\\");\\n\\n    // console.log(\\\"blockchain id: %d\\\", block.chainid);\\n    // console.log(\\\"msgDigest id\\\");\\n    // console.logBytes32(msgDigest);\\n    // console.log(\\\"registerContext msgSigner is %s\\\", msgSigner);\\n\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msgSigner,\\n        IContextManagement.registerContext.selector\\n      ),\\n      \\\"RegisterContext Access Denied\\\"\\n    );\\n    return (_registerContext(data, rc.smca, rc.realm, rc.status, rrc), msgSigner);\\n  }\\n\\n  function _getMessageHash(\\n    address smca,\\n    bytes32 name,\\n    bytes32 version,\\n    bytes32 realm\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(MESSAGE_TYPEHASH, smca, name, version, realm));\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          IProxy(address(this)).contractName(),\\n          IProxy(address(this)).contractVersion(),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  function _registerContext(\\n    AccessControlStorage.DataMaps storage data,\\n    address newContract,\\n    bytes32 realm,\\n    bool status,\\n    IContextManagement.RequestRegisterContext[] calldata rrc\\n  ) private returns (bytes32) {\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    bytes32 ctx = LContextUtils.generateCtx(newContract);\\n    require(data.ctxMap[ctx].smca == address(0), \\\"Context Already Registered\\\");\\n    data.realmMap[realm].ctxSet.add(ctx);\\n    AccessControlStorage.Context storage newContext = data.ctxMap[ctx];\\n    newContext.realm = realm;\\n    newContext.smca = newContract;\\n    newContext.isEnabled = status;\\n\\n    for (uint256 i = 0; i < rrc.length; i++) {\\n      require(bytes(data.roleMap[rrc[i].role].name).length != 0, \\\"Role Not Found\\\");\\n      for (uint256 j = 0; j < rrc[i].funcSelectors.length; j++) {\\n        newContext.resources[rrc[i].funcSelectors[j]].role = rrc[i].role;\\n        newContext.resources[rrc[i].funcSelectors[j]].status = rrc[i].isEnabled\\n          ? AccessControlStorage.Status.ENABLED\\n          : AccessControlStorage.Status.DISABLED;\\n        newContext.funcSet.add(rrc[i].funcSelectors[j]);\\n      }\\n    }\\n\\n    return ctx;\\n  }\\n\\n  function updateContext(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 ctx,\\n    bytes memory signature,\\n    IContextManagement.RequestContext calldata rc,\\n    IContextManagement.RequestUpdateContext[] calldata ruc\\n  ) external returns (address, address) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    bytes32 structHash = _getMessageHash(rc.smca, rc.name, rc.version, rc.realm);\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal ECDASA Signature\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msgSigner,\\n        IContextManagement.updateContext.selector\\n      ),\\n      \\\"UpdateContext Access Denied\\\"\\n    );\\n    return (_updateContext(data, ctx, rc.realm, rc.status, ruc), msgSigner);\\n  }\\n\\n  function _updateContext(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 ctx,\\n    bytes32 realm,\\n    bool status,\\n    IContextManagement.RequestUpdateContext[] calldata ruc\\n  ) internal returns (address) {\\n    address smca = data.ctxMap[ctx].smca;\\n    require(smca != address(0), \\\"Context Not Found\\\");\\n    require(smca == msg.sender, \\\"Update Context Forbidden\\\");\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    data.ctxMap[ctx].isEnabled = status;\\n\\n    if (data.ctxMap[ctx].realm != realm) {\\n      data.realmMap[data.ctxMap[ctx].realm].ctxSet.remove(ctx);\\n      data.realmMap[realm].ctxSet.add(ctx);\\n    }\\n    data.ctxMap[ctx].realm = realm;\\n\\n    for (uint256 i = 0; i < ruc.length; i++) {\\n      require(bytes(data.roleMap[ruc[i].role].name).length != 0, \\\"Role Not Found\\\");\\n      for (uint256 j = 0; j < ruc[i].funcSelectors.length; j++) {\\n        if (\\n          ruc[i].updateStatus == IContextManagement.UpdateContextStatus.ENABLE ||\\n          ruc[i].updateStatus == IContextManagement.UpdateContextStatus.DISABLE\\n        ) {\\n          data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].role = ruc[i].role;\\n          data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].status = ruc[i].updateStatus ==\\n            IContextManagement.UpdateContextStatus.ENABLE\\n            ? AccessControlStorage.Status.ENABLED\\n            : AccessControlStorage.Status.DISABLED;\\n          if (!data.ctxMap[ctx].funcSet.contains(ruc[i].funcSelectors[j])) {\\n            data.ctxMap[ctx].funcSet.add(ruc[i].funcSelectors[j]);\\n          }\\n        } else {\\n          delete data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].role;\\n          delete data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].status;\\n          data.ctxMap[ctx].funcSet.remove(ruc[i].funcSelectors[j]);\\n        }\\n      }\\n    }\\n    return smca;\\n  }\\n\\n  function addContextFuncRole(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.addContextFuncRole.selector\\n      ),\\n      \\\"AddContextFuncRole Access Denied\\\"\\n    );\\n    require(data.ctxMap[ctx].smca != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(!data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Already Exists\\\");\\n    data.ctxMap[ctx].resources[functionSelector].role = role;\\n    data.ctxMap[ctx].resources[functionSelector].status = AccessControlStorage.Status.ENABLED;\\n    data.ctxMap[ctx].funcSet.add(functionSelector);\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function removeContextFunc(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.removeContextFunc.selector\\n      ),\\n      \\\"RemoveContextFunc Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Remove ACL Context\\\");\\n    require(data.ctxMap[ctx].smca != address(0), \\\"Context Not Found\\\");\\n    require(data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Not Found\\\");\\n    delete data.ctxMap[ctx].resources[functionSelector].role;\\n    delete data.ctxMap[ctx].resources[functionSelector].status;\\n    data.ctxMap[ctx].funcSet.remove(functionSelector);\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function grantContextRole(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.grantContextRole.selector\\n      ),\\n      \\\"GrantContextRole Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Grant ACL Context\\\");\\n    require(data.ctxMap[ctx].smca != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Not Found\\\");\\n    data.ctxMap[ctx].resources[functionSelector].role = role;\\n    data.ctxMap[ctx].resources[functionSelector].status = AccessControlStorage.Status.ENABLED;\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function revokeContextRole(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.revokeContextRole.selector\\n      ),\\n      \\\"RevokeContextRole Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Revoke ACL Context\\\");\\n    require(data.ctxMap[ctx].smca != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Not Found\\\");\\n    data.ctxMap[ctx].resources[functionSelector].status = AccessControlStorage.Status.DISABLED;\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function setContextStatus(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 ctx,\\n    bool status\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.setContextStatus.selector\\n      ),\\n      \\\"SetContextStatus Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Change ACL Context Status\\\");\\n    require(data.ctxMap[ctx].smca != address(0), \\\"Context Not Found\\\");\\n    data.ctxMap[ctx].isEnabled = status;\\n    return (true, data.ctxMap[ctx].realm);\\n  }\\n\\n  function setContextRealm(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 ctx,\\n    bytes32 realm\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.setContextRealm.selector\\n      ),\\n      \\\"SetContextRealm Access Denied\\\"\\n    );\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Change ACL Context Realm\\\");\\n    require(data.ctxMap[ctx].smca != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    require(data.ctxMap[ctx].realm != realm, \\\"Illegal Realm Duplication\\\");\\n    bytes32 oldRealm = data.ctxMap[ctx].realm;\\n    data.realmMap[realm].ctxSet.add(ctx);\\n    data.realmMap[data.ctxMap[ctx].realm].ctxSet.remove(ctx);\\n    return (true, oldRealm);\\n  }\\n\\n  function hasContextRole(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return\\n      data.ctxMap[ctx].smca != address(0) &&\\n      data.ctxMap[ctx].resources[functionSelector].role == role &&\\n      data.ctxMap[ctx].resources[functionSelector].status == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function getContextInfo(AccessControlStorage.DataMaps storage data, bytes32 ctx)\\n    external\\n    view\\n    returns (IContextManagement.ResponseContext memory)\\n  {\\n    require(data.ctxMap[ctx].smca != address(0), \\\"Context Not Found\\\");\\n    bytes32 name = IProxy(data.ctxMap[ctx].smca).contractName();\\n    bytes32 version = IProxy(data.ctxMap[ctx].smca).contractVersion();\\n    bool isSafeMode = IProxy(data.ctxMap[ctx].smca).isSafeMode();\\n    bool isUpgradable = IProxy(data.ctxMap[ctx].smca).isUpgradable();\\n\\n    return\\n      IContextManagement.ResponseContext({\\n        name: name,\\n        version: version,\\n        smca: data.ctxMap[ctx].smca,\\n        realm: data.ctxMap[ctx].realm,\\n        isSafeMode: isSafeMode,\\n        isUpgradable: isUpgradable\\n      });\\n  }\\n\\n  function getContextFuncs(AccessControlStorage.DataMaps storage data, bytes32 ctx)\\n    external\\n    view\\n    returns (bytes4[] memory)\\n  {\\n    require(data.ctxMap[ctx].smca != address(0), \\\"Context Not Found\\\");\\n    bytes4[] memory funcs = new bytes4[](data.ctxMap[ctx].funcSet.length());\\n    for (uint32 i = 0; i < data.ctxMap[ctx].funcSet.length(); i++) {\\n      funcs[i] = bytes4(data.ctxMap[ctx].funcSet.at(i));\\n    }\\n    return funcs;\\n  }\\n}\\n\",\"keccak256\":\"0xadc787c4138d44b6160f594644f902c1f94d0fc27efa7b5d6bab732029da98fa\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LGroupManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../../acl/IGroupManagement.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\n\\nlibrary LGroupManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LGroupManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  function registerGroup(\\n    AccessControlStorage.DataMaps storage data,\\n    string calldata name,\\n    bool status\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IGroupManagement.registerGroup.selector\\n      ),\\n      \\\"RegisterGroup Access Denied\\\"\\n    );\\n    require(bytes(name).length != 0, \\\"Group Name Invalid\\\");\\n    bytes32 groupKey = keccak256(abi.encodePacked(name));\\n    require(bytes(data.groupMap[groupKey].name).length == 0, \\\"Group Already Registered\\\");\\n\\n    AccessControlStorage.Group storage newGroup = data.groupMap[groupKey];\\n    newGroup.name = name;\\n    newGroup.isEnabled = status;\\n    return groupKey;\\n  }\\n\\n  function setGroupStatus(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 group,\\n    bool status\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    if (group == LAccessControl.LIVELY_GENERAL_GROUP) {\\n      bytes32 context = LContextUtils.generateCtx(address(this));\\n      bytes4 signature = IRealmManagement.setRealmStatus.selector;\\n      bytes32 role = data.ctxMap[context].resources[signature].role;\\n      require(\\n        data.ctxMap[context].isEnabled &&\\n          data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED &&\\n          data.realmMap[data.ctxMap[context].realm].isEnabled &&\\n          data.accountMap[msg.sender][role] == AccessControlStorage.Status.ENABLED,\\n        \\\"SetGroupStatus Access Denied\\\"\\n      );\\n    } else {\\n      require(\\n        LAccessControl.hasAccess(\\n          data,\\n          LContextUtils.generateCtx(address(this)),\\n          msg.sender,\\n          IGroupManagement.setGroupStatus.selector\\n        ),\\n        \\\"SetGroupStatus Access Denied\\\"\\n      );\\n    }\\n    require(bytes(data.groupMap[group].name).length != 0, \\\"Group Not Found\\\");\\n    data.groupMap[group].isEnabled = status;\\n    return true;\\n  }\\n\\n  function hasGroupRole(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 group,\\n    bytes32 role\\n  ) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length != 0 && data.groupMap[group].roleSet.contains(role);\\n  }\\n\\n  function getGroupInfo(AccessControlStorage.DataMaps storage data, bytes32 group)\\n    external\\n    view\\n    returns (string memory, bool)\\n  {\\n    return (data.groupMap[group].name, data.groupMap[group].isEnabled);\\n  }\\n\\n  function getGroupRoles(AccessControlStorage.DataMaps storage data, bytes32 group)\\n    external\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return data.groupMap[group].roleSet.values();\\n  }\\n}\\n\",\"keccak256\":\"0x99beca8e988a785dd13f1658422167fa04c6493741001c2b4bd450b99855d508\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../../acl/IRealmManagement.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\n\\nlibrary LRealmManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LRealmManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  function registerRealm(\\n    AccessControlStorage.DataMaps storage data,\\n    string calldata name,\\n    bool status,\\n    bool isUpgradable\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRealmManagement.registerRealm.selector\\n      ),\\n      \\\"RegisterRealm Access Denied\\\"\\n    );\\n    require(bytes(name).length != 0, \\\"Realm Name Invalid\\\");\\n    bytes32 realmKey = keccak256(abi.encodePacked(name));\\n    require(bytes(data.realmMap[realmKey].name).length == 0, \\\"Realm Already Registered\\\");\\n\\n    AccessControlStorage.Realm storage newRealm = data.realmMap[realmKey];\\n    newRealm.name = name;\\n    newRealm.isEnabled = status;\\n    newRealm.isUpgradable = isUpgradable;\\n    return realmKey;\\n  }\\n\\n  function setRealmStatus(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 realm,\\n    bool status\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    if (LAccessControl.LIVELY_GENERAL_REALM == realm) {\\n      bytes32 context = LContextUtils.generateCtx(address(this));\\n      bytes4 signature = IRealmManagement.setRealmStatus.selector;\\n      bytes32 role = data.ctxMap[context].resources[signature].role;\\n      require(\\n        data.ctxMap[context].isEnabled &&\\n          data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED &&\\n          data.groupMap[data.roleMap[role].group].isEnabled &&\\n          data.accountMap[msg.sender][role] == AccessControlStorage.Status.ENABLED,\\n        \\\"SetRealmStatus Access Denied\\\"\\n      );\\n    } else {\\n      require(\\n        LAccessControl.hasAccess(\\n          data,\\n          LContextUtils.generateCtx(address(this)),\\n          msg.sender,\\n          IRealmManagement.setRealmStatus.selector\\n        ),\\n        \\\"SetRealmStatus Access Denied\\\"\\n      );\\n    }\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    data.realmMap[realm].isEnabled = status;\\n    return true;\\n  }\\n\\n  function setRealmUpgradeStatus(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 realm,\\n    bool status\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRealmManagement.setRealmUpgradeStatus.selector\\n      ),\\n      \\\"SetRealmUpgradeStatus Access Denied\\\"\\n    );\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    data.realmMap[realm].isUpgradable = status;\\n    return true;\\n  }\\n\\n  function hasRealmContext(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 realm,\\n    bytes32 context\\n  ) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length != 0 && data.realmMap[realm].ctxSet.contains(context);\\n  }\\n\\n  function getRealmInfo(AccessControlStorage.DataMaps storage data, bytes32 realm)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bool,\\n      bool\\n    )\\n  {\\n    return (data.realmMap[realm].name, data.realmMap[realm].isEnabled, data.realmMap[realm].isUpgradable);\\n  }\\n\\n  function getRealmContexts(AccessControlStorage.DataMaps storage data, bytes32 realm)\\n    external\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return data.realmMap[realm].ctxSet.values();\\n  }\\n}\\n\",\"keccak256\":\"0xe958ed60e83f9d87dd2408dac217ec0a688ea2d0bfeea3aa77c0136dbee836e8\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\n\\nlibrary LRoleManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LRoleManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  function registerRole(\\n    AccessControlStorage.DataMaps storage data,\\n    string calldata name,\\n    bytes32 group,\\n    bool isEnabled\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.registerRole.selector\\n      ),\\n      \\\"RegisterRole Access Denied\\\"\\n    );\\n    require(bytes(data.groupMap[group].name).length != 0, \\\"Group Not Found\\\");\\n    require(bytes(name).length != 0, \\\"Role Name Invalid\\\");\\n    bytes32 roleKey = keccak256(abi.encodePacked(name));\\n    require(bytes(data.roleMap[roleKey].name).length == 0, \\\"Role Already Registered\\\");\\n\\n    data.groupMap[group].roleSet.add(roleKey);\\n    AccessControlStorage.Role storage newRole = data.roleMap[roleKey];\\n    newRole.name = name;\\n    newRole.group = group;\\n    newRole.isEnabled = isEnabled;\\n    return roleKey;\\n  }\\n\\n  function grantRoleAccount(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 role,\\n    address account\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.grantRoleAccount.selector\\n      ),\\n      \\\"GrantRoleAccount Access Denied\\\"\\n    );\\n\\n    if(role == LAccessControl.LIVELY_DAO_EXECUTOR_ROLE) {      \\n      require(account.code.length > 0 && data.roleMap[role].accountSet.length() == uint256(0), \\\"Illegal Grant Dao Executor Role\\\");\\n    }\\n\\n    require(role != LAccessControl.LIVELY_ANONYMOUS_ROLE, \\\"Illegal Grant Anonymous Role\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(account != address(0), \\\"Address Invalid\\\");\\n    data.accountMap[account][role] = AccessControlStorage.Status.ENABLED;\\n    if (!data.roleMap[role].accountSet.contains(account)) {\\n      data.roleMap[role].accountSet.add(account);\\n    }\\n    return true;\\n  }\\n\\n  function revokeRoleAccount(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 role,\\n    address account\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.revokeRoleAccount.selector\\n      ),\\n      \\\"RevokeRoleAccount Access Denied\\\"\\n    );\\n    \\n    if (role == LAccessControl.LIVELY_ADMIN_ROLE || role == LAccessControl.LIVELY_SYSTEM_ADMIN_ROLE) {\\n      require(data.roleMap[role].accountSet.length() > 1, \\\"Illegal Revoke Role Account\\\");    \\n    } \\n\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(account != address(0), \\\"Address Invalid\\\");\\n    require(data.roleMap[role].accountSet.contains(account), \\\"Account Not Found\\\");\\n    require(data.accountMap[account][role] != AccessControlStorage.Status.NONE, \\\"Account Role Not Found\\\");\\n    data.accountMap[account][role] = AccessControlStorage.Status.DISABLED;\\n    data.roleMap[role].accountSet.remove(account);\\n    return true;\\n  }\\n\\n  function setRoleStatus(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 role,\\n    bool status\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.setRoleStatus.selector\\n      ),\\n      \\\"SetRoleStatus Access Denied\\\"\\n    );\\n    require(\\n      role != LAccessControl.LIVELY_ANONYMOUS_ROLE &&\\n        role != LAccessControl.LIVELY_ADMIN_ROLE &&\\n        role != LAccessControl.LIVELY_SYSTEM_ADMIN_ROLE,\\n      \\\"Illegal Change Role Status\\\"\\n    );\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    data.roleMap[role].isEnabled = status;\\n    return (true, data.roleMap[role].group);\\n  }\\n\\n  function setRoleGroup(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 role,\\n    bytes32 group\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.setRoleGroup.selector\\n      ),\\n      \\\"SetRoleGroup Access Denied\\\"\\n    );\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(bytes(data.groupMap[group].name).length != 0, \\\"Group Not Found\\\");\\n    require(data.roleMap[role].group != group, \\\"Illegal Group Duplication\\\");\\n    bytes32 oldGroup = data.roleMap[role].group;\\n    data.groupMap[data.roleMap[role].group].roleSet.remove(role);\\n    data.groupMap[group].roleSet.add(role);\\n    data.roleMap[role].group = group;\\n    return (true, oldGroup);\\n  }\\n\\n  function getRoleInfo(AccessControlStorage.DataMaps storage data, bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    )\\n  {\\n    return (data.roleMap[role].name, data.roleMap[role].group, data.roleMap[role].isEnabled);\\n  }\\n\\n  function getRoleAccounts(AccessControlStorage.DataMaps storage data, bytes32 role)\\n    external\\n    view\\n    returns (address[] memory)\\n  {\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    return data.roleMap[role].accountSet.values();\\n  }\\n\\n  function hasRoleAccount(\\n    AccessControlStorage.DataMaps storage data,\\n    bytes32 role,\\n    address account\\n  ) external view returns (bool) {\\n    return\\n      bytes(data.roleMap[role].name).length != 0 &&\\n      account != address(0) &&\\n      data.accountMap[account][role] == AccessControlStorage.Status.ENABLED;\\n  }\\n}\\n\",\"keccak256\":\"0x231398921185e6883b235ad5e1e76e6fa77d4b70cd2767a728186e549804d42e\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0x1ad8278bc0ca7b38d455518d056d498e3b01fccb105fe2cda15762c984427dd3\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./LEnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) since v4.6.0\\n */\\nlibrary LEnumerableMap {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Map type with\\n  // bytes32 keys and values.\\n  // The Map implementation uses private functions, and user-facing\\n  // implementations (such as Uint256ToAddressMap) are just wrappers around\\n  // the underlying Map.\\n  // This means that we can only create new EnumerableMaps for types that fit\\n  // in bytes32.\\n\\n  struct Bytes32ToBytes32Map {\\n    // Storage of keys\\n    LEnumerableSet.Bytes32Set _keys;\\n    mapping(bytes32 => bytes32) _values;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    Bytes32ToBytes32Map storage map,\\n    bytes32 key,\\n    bytes32 value\\n  ) internal returns (bool) {\\n    map._values[key] = value;\\n    return map._keys.add(key);\\n  }\\n\\n  /**\\n   * @dev Removes a key-value pair from a map. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n    delete map._values[key];\\n    return map._keys.remove(key);\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n    return map._keys.contains(key);\\n  }\\n\\n  /**\\n   * @dev Returns the number of key-value pairs in the map. O(1).\\n   */\\n  function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n    return map._keys.length();\\n  }\\n\\n  /**\\n   * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of entries inside the\\n   * array, and it may change when more entries are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n    bytes32 key = map._keys.at(index);\\n    return (key, map._values[key]);\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`.  O(1).\\n   * Does not revert if `key` is not in the map.\\n   */\\n  function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n    bytes32 value = map._values[key];\\n    if (value == bytes32(0)) {\\n      return (contains(map, key), bytes32(0));\\n    } else {\\n      return (true, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`.  O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n    bytes32 value = map._values[key];\\n    require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {_tryGet}.\\n   */\\n  function get(\\n    Bytes32ToBytes32Map storage map,\\n    bytes32 key,\\n    string memory errorMessage\\n  ) internal view returns (bytes32) {\\n    bytes32 value = map._values[key];\\n    require(value != 0 || contains(map, key), errorMessage);\\n    return value;\\n  }\\n\\n  // UintToAddressMap\\n  struct UintToAddressMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    UintToAddressMap storage map,\\n    uint256 key,\\n    address value\\n  ) internal returns (bool) {\\n    return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n    return remove(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n   */\\n  function length(UintToAddressMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the set. O(1).\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (uint256(key), address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`.  O(1).\\n   * Does not revert if `key` is not in the map.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n    return (success, address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`.  O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n    return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n  }\\n\\n  /**\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\n   */\\n  function get(\\n    UintToAddressMap storage map,\\n    uint256 key,\\n    string memory errorMessage\\n  ) internal view returns (address) {\\n    return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n  }\\n\\n  // AddressToUintMap\\n  struct AddressToUintMap {\\n    Bytes32ToBytes32Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    AddressToUintMap storage map,\\n    address key,\\n    uint256 value\\n  ) internal returns (bool) {\\n    return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n    return remove(map._inner, bytes32(uint256(uint160(key))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n    return contains(map._inner, bytes32(uint256(uint160(key))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n   */\\n  function length(AddressToUintMap storage map) internal view returns (uint256) {\\n    return length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the set. O(1).\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n    (bytes32 key, bytes32 value) = at(map._inner, index);\\n    return (address(uint160(uint256(key))), uint256(value));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`.  O(1).\\n   * Does not revert if `key` is not in the map.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n    (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n    return (success, uint256(value));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`.  O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n  }\\n\\n  /**\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\n   */\\n  function get(\\n    AddressToUintMap storage map,\\n    address key,\\n    string memory errorMessage\\n  ) internal view returns (uint256) {\\n    return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n  }\\n}\\n\",\"keccak256\":\"0xc1de84250534848559360e8904bdca74d0d6b76c209cafb17a9fe275c5ddb914\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x7f3959e011b05bae8c06ee1a9baedcea7be69895988327147b80ab1d07feb524\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract BaseProxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overridden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x3edfd0233aac5bde241e0bf49843e0621fde4768650f1758c85581657778e8ff\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./IERC1822.sol\\\";\\nimport \\\"./IProxy.sol\\\";\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"./BaseUUPSStorage.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"../lib/LAddress.sol\\\";\\nimport \\\"../lib/LStorageSlot.sol\\\";\\nimport \\\"../acl/IAccessControl.sol\\\";\\nimport \\\"../acl/IContextManagement.sol\\\";\\nimport \\\"../utils/Message.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"../lib/LContextUtils.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n\\n * An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\n\\nabstract contract BaseUUPSProxy is\\n  BaseUUPSStorage,\\n  BaseProxy,\\n  Initializable,\\n  IProxy,\\n  IERC1822Proxiable,\\n  Message,\\n  ERC165\\n{\\n  /**\\n   * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n   * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n   * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n   * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n   * fail.\\n   */\\n  modifier onlyProxy() {\\n    require(address(this) != __self, \\\"Illegal Contract Call\\\");\\n    require(_implementation() == __self, \\\"Proxy Called Invalid\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyLocalAdmin() {\\n    require(_getLocalAdmin() == _msgSender(), \\\"Caller Not Authorized\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n   * callable on the implementing contract but not through proxies.\\n   */\\n  modifier notDelegated() {\\n    require(address(this) == __self, \\\"Illegal Contract Delegatecall\\\");\\n    _;\\n  }\\n\\n  modifier safeModeCheck() {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    _;\\n  }\\n\\n  modifier aclCheck(bytes4 selector) {\\n    require(_hasPermission(selector), \\\"Access Denied\\\");\\n    _;\\n  }\\n\\n  function _hasPermission(bytes4 selector) internal returns (bool) {\\n    if (address(this) == _accessControlManager) {\\n      bytes memory data = abi.encodeWithSelector(\\n        IAccessControl.hasAccess.selector,\\n        LContextUtils.generateCtx(address(this)),\\n        _msgSender(),\\n        selector\\n      );\\n      bytes memory returndata = LAddress.functionDelegateCall(_implementation(), data, \\\"Delegatecall hasAccess Failed\\\");\\n      return uint8(returndata[returndata.length - 1]) == 1;\\n    } else {\\n      return\\n        IAccessControl(_accessControlManager).hasAccess(\\n          LContextUtils.generateCtx(address(this)),\\n          _msgSender(),\\n          selector\\n        );\\n    }\\n  }\\n\\n  function _isRealmUpgradable() internal returns (bool) {\\n    if (address(this) == _accessControlManager) {\\n      bytes memory data = abi.encodeWithSelector(IAccessControl.isRealmUpgradable.selector, _domainRealm);\\n      bytes memory returndata = LAddress.functionDelegateCall(\\n        _implementation(),\\n        data,\\n        \\\"Delegatecall isRealmUpgradable Failed\\\"\\n      );\\n      return uint8(returndata[returndata.length - 1]) == 1;\\n    } else {\\n      return IAccessControl(_accessControlManager).isRealmUpgradable(_domainRealm);\\n    }\\n  }\\n\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n   */\\n\\n  constructor() {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n    // set contract Admin (implementation contract)\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = _msgSender();\\n\\n    // set _isUpgradable and _isSafeMode of contact\\n    _isUpgradable = false;\\n    _isSafeMode = true;\\n  }\\n\\n  function __BASE_UUPS_init(\\n    string calldata domainName,\\n    string calldata domainVersion,\\n    bytes32 domainRealm,\\n    address accessControl\\n  ) internal {\\n    __BASE_UUPS_init_unchained(domainName, domainVersion, domainRealm, accessControl);\\n  }\\n\\n  function __BASE_UUPS_init_unchained(\\n    string calldata domainName,\\n    string calldata domainVersion,\\n    bytes32 domainRealm,\\n    address accessControl\\n  ) internal onlyInitializing {\\n    _domainName = keccak256(abi.encodePacked(domainName));\\n    _domainVersion = keccak256(abi.encodePacked(domainVersion));\\n    _domainRealm = domainRealm;\\n    if (accessControl == address(0)) {\\n      _accessControlManager = address(this);\\n    } else {\\n      try IERC165(accessControl).supportsInterface(type(IAccessControl).interfaceId) returns (bool isSupported) {\\n        require(isSupported, \\\"Invalid AccessControlManager\\\");\\n      } catch {\\n        revert(\\\"Illegal AccessControlManager\\\");\\n      }\\n      _accessControlManager = accessControl;\\n    }\\n    _isUpgradable = false;\\n    _isSafeMode = false;\\n    _setLocalAdmin(_msgSender());\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IProxy).interfaceId ||\\n      interfaceId == type(IERC1822Proxiable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation() internal view override returns (address) {\\n    return LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    require(LAddress.isContract(newImplementation), \\\"Illegal Contract Address\\\");\\n    LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(msg.sender, address(this), newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      return LAddress.functionDelegateCall(newImplementation, data, \\\"Delegatecall Failed\\\");\\n    }\\n    return new bytes(0);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCallUUPS(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\n    if (LStorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n      _setImplementation(newImplementation);\\n      return new bytes(0);\\n    } else {\\n      try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n        require(slot == _IMPLEMENTATION_SLOT, \\\"Invalid UUPS Contract\\\");\\n      } catch {\\n        revert(\\\"Illegal UUPS Contract\\\");\\n      }\\n\\n      try IERC165(newImplementation).supportsInterface(type(IProxy).interfaceId) returns (bool isSupported) {\\n        require(isSupported, \\\"Invalid IProxy Contract\\\");\\n      } catch {\\n        revert(\\\"Illegal IProxy Contract\\\");\\n      }\\n\\n      return _upgradeToAndCall(newImplementation, data, forceCall);\\n    }\\n  }\\n\\n  /**\\n   * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n   * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n   */\\n  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n    return _IMPLEMENTATION_SLOT;\\n  }\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external virtual onlyProxy returns (bytes memory) {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_isUpgradable, \\\"Upgrade Call Rejected\\\");\\n    _authorizeUpgrade(newImplementation);\\n    return _upgradeToAndCallUUPS(newImplementation, data, forceCall);\\n  }\\n\\n  /**\\n   * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n   * {upgradeTo} and {upgradeToAndCall}.\\n   *\\n   * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n   *\\n   * ```solidity\\n   * function _authorizeUpgrade(address) internal override onlyOwner {}\\n   * ```\\n   */\\n  function _authorizeUpgrade(address newImplementation) internal virtual {\\n    require(newImplementation != _implementation(), \\\"Illegal New Implementation\\\");\\n    require(_hasPermission(this.upgradeTo.selector), \\\"Upgrade Context Forbidden\\\");\\n  }\\n\\n  function localAdmin() external view returns (address) {\\n    return _getLocalAdmin();\\n  }\\n\\n  function setLocalAdmin(address newLocalAdmin) external onlyProxy returns (bool) {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_hasPermission(this.setLocalAdmin.selector), \\\"SetLocalAdmin Forbidden\\\");\\n    require(newLocalAdmin != address(0), \\\"Address Invalid\\\");\\n    _setLocalAdmin(newLocalAdmin);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n   */\\n  function _getLocalAdmin() internal view returns (address) {\\n    return LStorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setLocalAdmin(address newAdmin) internal {\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    emit LocalAdminChanged(_msgSender(), address(this), newAdmin);\\n  }\\n\\n  // In each upgrade the initialize requirement must be changed\\n  function setSafeMode(bool status) external onlyProxy returns (bool) {\\n    require(_getInitializedCount() > 0, \\\"Contract Not Initialized\\\");\\n    require(_hasPermission(this.setSafeMode.selector), \\\"SetSafeMode Forbidden\\\");\\n    _isSafeMode = status;\\n    emit SafeModeChanged(_msgSender(), address(this), _domainRealm, status);\\n    return status;\\n  }\\n\\n  function setUpgradeStatus(bool status) external onlyProxy returns (bool) {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_hasPermission(this.setUpgradeStatus.selector), \\\"SetUpgradeStatus Forbidden\\\");\\n    require(_isRealmUpgradable(), \\\"Realm Upgrade Forbidden\\\");\\n    _isUpgradable = status;\\n    emit UpgradeStatusChanged(_msgSender(), address(this), _domainRealm, status);\\n    return status;\\n  }\\n\\n  function contractName() external view returns (bytes32) {\\n    return _domainName;\\n  }\\n\\n  function contractVersion() external view returns (bytes32) {\\n    return _domainVersion;\\n  }\\n\\n  function contractRealm() external view returns (bytes32) {\\n    return _domainRealm;\\n  }\\n\\n  function contractContext() external view returns (bytes32) {\\n    return LContextUtils.generateCtx(address(this));\\n  }\\n\\n  function accessControlManager() external view returns (address) {\\n    return _accessControlManager;\\n  }\\n\\n  function subjectAddress() external view returns (address) {\\n    return _implementation();\\n  }\\n\\n  function isSafeMode() external view returns (bool) {\\n    return _isSafeMode;\\n  }\\n\\n  function isUpgradable() external view returns (bool) {\\n    return _isUpgradable;\\n  }\\n\\n  function domainSeparator() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return keccak256(abi.encode(_TYPE_HASH, _domainName, _domainVersion, block.chainid, address(this)));\\n  }\\n\\n  function initVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  function initStatus() external view returns (bool) {\\n    return _isInitializing();\\n  }\\n\\n  function withdrawBalance(address recepient) public {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_hasPermission(this.withdrawBalance.selector), \\\"Withdraw Balance Forbidden\\\");\\n    payable(recepient).transfer(address(this).balance);\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable override {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable override {}\\n}\\n\",\"keccak256\":\"0xa6e2ccc286ee794829d094b1b206b9211a7ce2f6f279d559f42da5a125a5af8a\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n */\\n\\nabstract contract BaseUUPSStorage {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 internal constant _TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n  address internal immutable __self = address(this);\\n  address internal _accessControlManager;\\n  bytes32 internal _domainName;\\n  bytes32 internal _domainVersion;\\n  bytes32 internal _domainRealm;\\n  bool internal _isSafeMode;\\n  bool internal _isUpgradable;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __gap;\\n}\\n\",\"keccak256\":\"0xc964e08c3277d878d99b02e6be1946266da008cd201b07152a84e1b78e6f1206\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\ninterface IBaseProxy {\\n  event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x93a2f34af9672a421f1d4d46ed4955e078cc9f966d2e7ab7c18724207d306c9c\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x52ff537da18dfa18e65daeb7597fc021a1950d2ad99201d398a4f6609f97aa50\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event LocalAdminChanged(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event SafeModeChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  event UpgradeStatusChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeMode(bool status) external returns (bool);\\n\\n  function setUpgradeStatus(bool status) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function contractName() external view returns (bytes32);\\n\\n  function contractVersion() external view returns (bytes32);\\n\\n  function contractRealm() external view returns (bytes32);\\n\\n  function contractContext() external view returns (bytes32);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function isSafeMode() external view returns (bool);\\n\\n  function isUpgradable() external view returns (bool);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n\\n  function initStatus() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc7c04fb816627028a1f82615cbaa6aef6c5051204d57ebe92036d8ae6d2feb15\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0xd9fbde935172757ed5c989aec2decfeef6aa5b6b77b7041e928a73aa86fa099c\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x9b1c7fe54c596987fdd4d30a40d2deb9b1b84eea1e670f1ceba024e659e1b724\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3132fe87425509b784af9b03bb882bbe8dcc883bc41fc74655dea1629f7ace3e\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.15 <0.9.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xddb448c18fbc0631d5d2bb8bf010e598e6b33a669fd2992cdae1c0183f77f90e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061043c5760003560e01c8063771bcf4511610232578063d33864011161012d578063e71e224e116100b0578063f698da2511610077578063f698da2514610dd3578063f80f010f14610de8578063f8aa7e3f14610e08578063f94a0adb14610e28578063facaf13914610e3d57005b8063e71e224e14610d33578063edf1d1cb14610d53578063f1df49da14610d73578063f2c673bd14610d93578063f5122c9214610db357005b8063dc853dd0116100f4578063dc853dd014610c86578063df01de4514610ca6578063e1ed0a8214610cc6578063e25d75f014610cf3578063e65be46814610d1357005b8063d338640114610bf1578063d3e024b814610c11578063d9aba36e14610c26578063d9dc1f1914610c46578063dbf304b014610c6657005b8063b2dc26e5116101b5578063be22465d1161017c578063be22465d14610b4a578063be409a1114610b62578063c48e7ae614610b91578063c7ab39e614610bb1578063c7ea945c14610bd157005b8063b2dc26e514610aac578063b4a0bdf314610acc578063b4c4b58f14610aea578063b58966de14610b0a578063b6c03f0314610b2a57005b806391690955116101f957806391690955146109c357806398625fff146109e35780639ebf624614610a03578063a0a8e46014610a77578063aea3f33b14610a8c57005b8063771bcf451461092e578063870666cb1461094e5780638b7dbd6c146109635780638e703826146109835780638f09e0f0146109a357005b806348e6be1c116103425780635ec7870a116102c557806370420ee31161028c57806370420ee3146108975780637147855d146108b75780637276ce29146108e4578063756af45f146108f957806375d0c0dc1461091957005b80635ec7870a1461080157806360fefdec14610816578063611b4886146108345780636b2b7dd8146108495780636b3b01591461087757005b806351e70bb01161030957806351e70bb01461076257806352d1902d146107825780635479d9401461079757806358dbc45d146107b45780635c6d8da1146107e157005b806348e6be1c146106cd5780634944f532146106ed5780634bb1be8c1461070d5780634bdbf69c1461072d5780634dc13c8f1461074257005b806337bfbfe8116103ca5780633f4c99b8116103915780633f4c99b81461063857806340768140146106585780634346a04b1461066d57806344b7e5f21461068d57806345b5203c146106ad57005b806337bfbfe81461058a57806338d38c97146105b75780633b17f50b146105df5780633c7d5b25146105f45780633dfe3aa21461062357005b806311b529b31161040e57806311b529b3146104dd5780631846d125146104fd5780632e2adf001461051d5780632f032edd1461054a5780633228144d1461056a57005b806301ffc9a714610445578063031c04931461047a578063098b01cf1461049a578063101df54d146104bd57005b3661044357005b005b34801561045157600080fd5b50610465610460366004614101565b610e5d565b60405190151581526020015b60405180910390f35b34801561048657600080fd5b5061046561049536600461411e565b610ef4565b3480156104a657600080fd5b506104af610fca565b604051908152602001610471565b3480156104c957600080fd5b506104656104d8366004614156565b611009565b3480156104e957600080fd5b506104656104f836600461416f565b611088565b34801561050957600080fd5b50610465610518366004614156565b611108565b34801561052957600080fd5b5061053d610538366004614156565b611149565b604051610471919061419f565b34801561055657600080fd5b50610465610565366004614156565b6111cb565b34801561057657600080fd5b50610465610585366004614156565b61120d565b34801561059657600080fd5b506105aa6105a5366004614156565b61124f565b60405161047191906141ed565b3480156105c357600080fd5b506105cc6112d2565b60405161ffff9091168152602001610471565b3480156105eb57600080fd5b506104af6112e6565b34801561060057600080fd5b5061061461060f366004614156565b61131a565b60405161047193929190614281565b34801561062f57600080fd5b506104af6113ae565b34801561064457600080fd5b506104af610653366004614301565b6113d9565b34801561066457600080fd5b506104af6114ab565b34801561067957600080fd5b5061046561068836600461411e565b6114d7565b34801561069957600080fd5b506104656106a8366004614357565b611598565b3480156106b957600080fd5b506104656106c8366004614156565b611752565b3480156106d957600080fd5b506104656106e8366004614357565b611794565b3480156106f957600080fd5b50610465610708366004614156565b61195d565b34801561071957600080fd5b506104af610728366004614374565b61199f565b34801561073957600080fd5b506104af611a76565b34801561074e57600080fd5b5061046561075d366004614156565b611aaa565b34801561076e57600080fd5b5061046561077d366004614156565b611aec565b34801561078e57600080fd5b506104af611b2e565b3480156107a357600080fd5b50600454610100900460ff16610465565b3480156107c057600080fd5b506107c9611bbb565b6040516001600160a01b039091168152602001610471565b3480156107ed57600080fd5b506104436107fc3660046143f0565b611bc5565b34801561080d57600080fd5b506104af611f87565b34801561082257600080fd5b50604a5462010000900460ff16610465565b34801561084057600080fd5b506104af611fbb565b34801561085557600080fd5b50610869610864366004614156565b611fe1565b60405161047192919061449d565b34801561088357600080fd5b506104656108923660046144c1565b61206f565b3480156108a357600080fd5b506104656108b23660046144ef565b61210d565b3480156108c357600080fd5b506108d76108d23660046145ff565b6121ef565b6040516104719190614657565b3480156108f057600080fd5b506104af612317565b34801561090557600080fd5b5061044361091436600461466a565b612342565b34801561092557600080fd5b506001546104af565b34801561093a57600080fd5b5061046561094936600461411e565b6123fa565b34801561095a57600080fd5b506104af6124bb565b34801561096f57600080fd5b5061046561097e3660046144ef565b6124c6565b34801561098f57600080fd5b5061046561099e366004614156565b612555565b3480156109af57600080fd5b506104656109be366004614687565b612597565b3480156109cf57600080fd5b506104656109de366004614156565b61261f565b3480156109ef57600080fd5b506104656109fe36600461466a565b612661565b348015610a0f57600080fd5b50610a23610a1e366004614156565b6126ab565b60405161047191908151815260208083015190820152604080830151908201526060808301516001600160a01b03169082015260808083015115159082015260a09182015115159181019190915260c00190565b348015610a8357600080fd5b506002546104af565b348015610a9857600080fd5b50610465610aa736600461466a565b612754565b348015610ab857600080fd5b506104af610ac73660046146ac565b61279e565b348015610ad857600080fd5b506000546001600160a01b03166107c9565b348015610af657600080fd5b50610465610b0536600461416f565b61289a565b348015610b1657600080fd5b50610465610b2536600461416f565b6128d9565b348015610b3657600080fd5b50610465610b453660046144ef565b6129a9565b348015610b5657600080fd5b5060045460ff16610465565b348015610b6e57600080fd5b50610b82610b7d366004614156565b612a38565b604051610471939291906146ff565b348015610b9d57600080fd5b50610465610bac366004614156565b612abf565b348015610bbd57600080fd5b50610465610bcc366004614729565b612b01565b348015610bdd57600080fd5b50610465610bec366004614687565b612b62565b348015610bfd57600080fd5b50610465610c0c366004614760565b612bb3565b348015610c1d57600080fd5b506003546104af565b348015610c3257600080fd5b50610465610c41366004614760565b612c82565b348015610c5257600080fd5b50610465610c6136600461466a565b612ccb565b348015610c7257600080fd5b50610465610c81366004614760565b612e45565b348015610c9257600080fd5b50610465610ca1366004614156565b612f14565b348015610cb257600080fd5b50610465610cc1366004614687565b612f56565b348015610cd257600080fd5b50610ce6610ce1366004614156565b612fde565b6040516104719190614782565b348015610cff57600080fd5b50610465610d0e366004614156565b613060565b348015610d1f57600080fd5b506107c9610d2e36600461481f565b6130a2565b348015610d3f57600080fd5b50610465610d4e3660046144ef565b61318a565b348015610d5f57600080fd5b506105aa610d6e366004614156565b61325c565b348015610d7f57600080fd5b506104af610d8e3660046148a5565b61329e565b348015610d9f57600080fd5b50610465610dae3660046144ef565b613393565b348015610dbf57600080fd5b50610465610dce366004614760565b613422565b348015610ddf57600080fd5b506104af61346b565b348015610df457600080fd5b50610465610e0336600461466a565b613475565b348015610e1457600080fd5b50610465610e2336600461466a565b6134bf565b348015610e3457600080fd5b506107c9613509565b348015610e4957600080fd5b50610465610e5836600461466a565b613513565b60006001600160e01b031982166301fe701d60e21b1480610e8e57506001600160e01b03198216633b661d8360e21b145b80610ea957506001600160e01b0319821663467e3a6160e01b145b80610ec457506001600160e01b03198216637d22131d60e11b145b80610edf57506001600160e01b031982166370319bff60e11b145b80610eee5750610eee82613560565b92915050565b60008073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__63518bf96060458787876040518563ffffffff1660e01b8152600401610f35949392919061491c565b602060405180830381865af4158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190614941565b9050336001600160a01b031683867fce5e1f2ba33f195f748a93b00ee62600b55e27cc50531a72e5443713bac23e128785604051610fb592919061495a565b60405180910390a460019150505b9392505050565b604051704c4956454c595f41444d494e5f524f4c4560781b60208201526000906031015b60405160208183030381529060405280519060200120905090565b604051637cd7c4ed60e01b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__90637cd7c4ed906044015b602060405180830381865af4158015611064573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190614974565b6040516302a0d2e360e61b815260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063a834b8c0906110c79060459087908790600401614991565b602060405180830381865af41580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc39190614974565b60405162fd7cb960e41b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__90630fd7cb9090604401611047565b60405163ec77eb2160e01b8152604560048201526024810182905260609073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__9063ec77eb2190604401600060405180830381865af41580156111a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eee9190810190614a43565b60405163e24b90a960e01b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063e24b90a990604401611047565b60405163442b0ca160e01b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063442b0ca190604401611047565b6040516350f0b31d60e11b8152604560048201526024810182905260609073__$bc3cfbaf1827cbc66e3e608da812a405b7$__9063a1e1663a906044015b600060405180830381865af41580156112aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eee9190810190614a77565b60006112e1604a5461ffff1690565b905090565b6040517f4c4956454c595f44414f5f4558454355544f525f524f4c4500000000000000006020820152600090603801610fee565b60405163108ca8b760e01b81526045600482015260248101829052606090600090819073__$bc3cfbaf1827cbc66e3e608da812a405b7$__9063108ca8b790604401600060405180830381865af4158015611379573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113a19190810190614b4c565b9250925092509193909250565b6040517304c4956454c595f47454e4552414c5f47524f55560641b6020820152600090603401610fee565b60008073__$6309dd7d2656d358c392b35d5c4e4605f9$__63f728a0f560458787876040518563ffffffff1660e01b815260040161141a9493929190614bce565b602060405180830381865af4158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b9190614941565b9050336001600160a01b0316817fde3bd866160a7f983f3c5f990127712936d37378d60b93ba96ab3a66a04feb1887878760405161149b93929190614bfb565b60405180910390a3949350505050565b604051744c4956454c595f414e4f4e594d4f55535f524f4c4560581b6020820152600090603501610fee565b60008073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__635acd816a60458787876040518563ffffffff1660e01b8152600401611518949392919061491c565b602060405180830381865af4158015611535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115599190614941565b9050336001600160a01b031683867f888ebbee43b69c568a7ef10a18f4afb4a0452ed2cfec2dde7a3d37b7e5ef87a38785604051610fb592919061495a565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115eb5760405162461bcd60e51b81526004016115e290614c21565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661161d6135b0565b6001600160a01b0316146116435760405162461bcd60e51b81526004016115e290614c50565b6000611652604a5461ffff1690565b61ffff16116116a35760405162461bcd60e51b815260206004820152601860248201527f436f6e7472616374204e6f7420496e697469616c697a6564000000000000000060448201526064016115e2565b6116b363225bf2f960e11b6135d1565b6116f75760405162461bcd60e51b815260206004820152601560248201527429b2ba29b0b332a6b7b232902337b93134b23232b760591b60448201526064016115e2565b6004805460ff191683151517905560035430336001600160a01b03167fdd452a31d2e164a1ea436c084842c27d24ae2548a575a869f71b05a4ed16243f85604051611746911515815260200190565b60405180910390a45090565b604051630227e50560e31b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063113f282890604401611047565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036117de5760405162461bcd60e51b81526004016115e290614c21565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118106135b0565b6001600160a01b0316146118365760405162461bcd60e51b81526004016115e290614c50565b60045460ff16156118595760405162461bcd60e51b81526004016115e290614c7e565b611869631239af8760e21b6135d1565b6118b55760405162461bcd60e51b815260206004820152601a60248201527f5365745570677261646553746174757320466f7262696464656e00000000000060448201526064016115e2565b6118bd613714565b6119095760405162461bcd60e51b815260206004820152601760248201527f5265616c6d205570677261646520466f7262696464656e00000000000000000060448201526064016115e2565b6004805461ff0019166101008415150217905560035430336001600160a01b03167fe9f97ad94c2ba252dcfc525e004f608ac5cb886955d8fc87d9e0ee070a698c5685604051611746911515815260200190565b604051633346dd2d60e01b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__90633346dd2d90604401611047565b60008073__$bc3cfbaf1827cbc66e3e608da812a405b7$__6359186f406045888888886040518663ffffffff1660e01b81526004016119e2959493929190614cb5565b602060405180830381865af41580156119ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a239190614941565b9050336001600160a01b0316817f5a8acbe7e0fa397d934e9aafb8fb1a483627af9e9b4690f4488d740b669f8b4788888888604051611a659493929190614ce8565b60405180910390a395945050505050565b6040517f4c4956454c595f41535345545f4d414e414745525f524f4c45000000000000006020820152600090603901610fee565b60405163017d626960e01b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063017d626990604401611047565b60405163af07cfcd60e01b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063af07cfcd90604401611047565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611ba85760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c20436f6e74726163742044656c656761746563616c6c00000060448201526064016115e2565b506000805160206154e083398151915290565b60006112e16135b0565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611c0d5760405162461bcd60e51b81526004016115e290614c21565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c3f6135b0565b6001600160a01b031614611c655760405162461bcd60e51b81526004016115e290614c50565b33611c6e613850565b6001600160a01b031614611cbc5760405162461bcd60e51b815260206004820152601560248201527410d85b1b195c88139bdd08105d5d1a1bdc9a5e9959605a1b60448201526064016115e2565b604a5462010000900460ff1615808015611cde5750604a54600161ffff909116105b80611cf95750303b158015611cf95750604a5461ffff166001145b611d455760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a65640000000060448201526064016115e2565b604a805461ffff191660011790558015611d6b57604a805462ff00001916620100001790555b60008484604051602001611d80929190614d14565b60408051808303601f190181529082905280516020909101206308bae38360e31b825260456004830152915073__$c43b1d7058274a71a9734d16e6b6586431$__906345d71c189060240160006040518083038186803b158015611de357600080fd5b505af4158015611df7573d6000803e3d6000fd5b50505050611e09898989898588613878565b600073__$c43b1d7058274a71a9734d16e6b6586431$__6362f3c2d46040518163ffffffff1660e01b8152600401600060405180830381865af4158015611e54573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e7c9190810190614d24565b604051631f5dcce360e31b815290915073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__9063faee671890611ebd90604590309087908790600401614e27565b602060405180830381865af4158015611eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efe9190614941565b50611f076135b0565b6001600160a01b031630336001600160a01b03167ff851a1e85477b818fc72ad517ea622cc316f10f67d61c9e740adc151a8b413948d8d8d8d89611f4e604a5461ffff1690565b604051611f6096959493929190614eff565b60405180910390a450508015611f7d57604a805462ff0000191690555b5050505050505050565b6040517f4c4956454c595f53595354454d5f41444d494e5f524f4c4500000000000000006020820152600090603801610fee565b6040516e4c4956454c595f44414f5f524f4c4560881b6020820152600090602f01610fee565b604051630e8a623f60e31b8152604560048201526024810182905260609060009073__$6309dd7d2656d358c392b35d5c4e4605f9$__9063745311f890604401600060405180830381865af415801561203e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120669190810190614f44565b91509150915091565b604051637134bb4560e01b81526045600482015260248101849052604481018390526001600160e01b03198216606482015260009073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__90637134bb45906084015b602060405180830381865af41580156120e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121059190614974565b949350505050565b604051637cc5941d60e01b8152604560048201526024810183905281151560448201526000908190819073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__90637cc5941d906064016040805180830381865af4158015612172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121969190614f8a565b91509150806121a23390565b6001600160a01b0316867f354501e3216e5f916d4d35ef255a577d106a7eab306488227783a837dc042a4e876040516121df911515815260200190565b60405180910390a4509392505050565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036122395760405162461bcd60e51b81526004016115e290614c21565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661226b6135b0565b6001600160a01b0316146122915760405162461bcd60e51b81526004016115e290614c50565b60045460ff16156122b45760405162461bcd60e51b81526004016115e290614c7e565b600454610100900460ff166123035760405162461bcd60e51b8152602060048201526015602482015274155c19dc9859194810d85b1b0814995a9958dd1959605a1b60448201526064016115e2565b61230c8461388e565b612105848484613955565b604051734c4956454c595f47454e4552414c5f5245414c4d60601b6020820152600090603401610fee565b60045460ff16156123655760405162461bcd60e51b81526004016115e290614c7e565b61237563756af45f60e01b6135d1565b6123c15760405162461bcd60e51b815260206004820152601a60248201527f57697468647261772042616c616e636520466f7262696464656e00000000000060448201526064016115e2565b6040516001600160a01b038216904780156108fc02916000818181858888f193505050501580156123f6573d6000803e3d6000fd5b5050565b60008073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__63453dd6dc60458787876040518563ffffffff1660e01b815260040161243b949392919061491c565b602060405180830381865af4158015612458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247c9190614941565b9050336001600160a01b031683867fea00ff399a342f54b82233841f91faa5677300e901667e010e9f22aea1ae59318785604051610fb592919061495a565b60006112e130613ba6565b6000336001600160a01b0316837ffe1617b569bd167ab40b31e034f68e32656219dbe4ab9469a00660550fec72c884604051612506911515815260200190565b60405180910390a3604051630549f02d60e01b81526045600482015260248101849052821515604482015273__$bc3cfbaf1827cbc66e3e608da812a405b7$__90630549f02d906064016110c7565b6040516310f0750160e01b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__906310f0750190604401611047565b6040516000906001600160a01b03831690849033907fd992f85df7a0be47c44b0be141be17eefd360033a4ce05b5458fba27b7781999908590a46040516389d4da6560e01b815260456004820152602481018490526001600160a01b038316604482015273__$340101a45712d3611711048793ce62ace0$__906389d4da65906064016110c7565b60405163327c496560e11b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__906364f892ca90604401611047565b60405163be74825b60e01b8152604560048201526001600160a01b038216602482015260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063be74825b90604401611047565b6040805160c081018252600080825260208201819052818301819052606082018190526080820181905260a0820152905163399d749f60e11b8152604560048201526024810183905273__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__9063733ae93e9060440160c060405180830381865af4158015612730573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190614fb8565b604051636c203fff60e11b8152604560048201526001600160a01b038216602482015260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063d8407ffe90604401611047565b60008073__$340101a45712d3611711048793ce62ace0$__633859eb7f6045888888886040518663ffffffff1660e01b81526004016127e1959493929190615049565b602060405180830381865af41580156127fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128229190614941565b90508585604051612834929190614d14565b6040518091039020816128443390565b6001600160a01b03167f539b07dddd6bd9ffefa3d951a9467d78948cbe1a8d13be00e7376842a83a598187876040516128899291909182521515602082015260400190565b60405180910390a495945050505050565b6040516337b3cdd760e21b815260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063decf375c906110c79060459087908790600401614991565b60008073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__63b0c25575604586866040518463ffffffff1660e01b815260040161291893929190614991565b602060405180830381865af4158015612935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129599190614941565b9050336001600160a01b0316847fa6234dfea6da9d63d0505ba9b61ac8405dfd897089208859cda18011c4847d69858460405161299792919061495a565b60405180910390a35060019392505050565b6000336001600160a01b0316837fe595d6b009cbfd06bfdfc4b7c06799f0e0b08fb2c6f5fa6e28a9aac2495440f9846040516129e9911515815260200190565b60405180910390a3604051637c95bcdf60e01b81526045600482015260248101849052821515604482015273__$6309dd7d2656d358c392b35d5c4e4605f9$__90637c95bcdf906064016110c7565b604051631f9471ef60e01b81526045600482015260248101829052606090600090819073__$340101a45712d3611711048793ce62ace0$__90631f9471ef90604401600060405180830381865af4158015612a97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113a1919081019061507c565b604051633bcd353d60e11b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063779a6a7a90604401611047565b604051630243e34b60e51b815260456004820152602481018490526001600160a01b03831660448201526001600160e01b03198216606482015260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063487c6960906084016120c4565b604051630938ae7160e01b815260456004820152602481018390526001600160a01b038216604482015260009073__$340101a45712d3611711048793ce62ace0$__90630938ae71906064016110c7565b604051631f00af7b60e11b81526045600482015260248101839052604481018290526000908190819073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__90633e015ef6906064016040805180830381865af4158015612c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3b9190614f8a565b9150915083612c473390565b6001600160a01b0316867fa0eaa0025d4f12545803a03c369115c59f885df7b5fc07a6393438827dbf51b7846040516121df91815260200190565b604051631e7abee360e21b815260456004820152602481018390526044810182905260009073__$bc3cfbaf1827cbc66e3e608da812a405b7$__906379eafb8c906064016110c7565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612d155760405162461bcd60e51b81526004016115e290614c21565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612d476135b0565b6001600160a01b031614612d6d5760405162461bcd60e51b81526004016115e290614c50565b60045460ff1615612d905760405162461bcd60e51b81526004016115e290614c7e565b612da063d9dc1f1960e01b6135d1565b612dec5760405162461bcd60e51b815260206004820152601760248201527f5365744c6f63616c41646d696e20466f7262696464656e00000000000000000060448201526064016115e2565b6001600160a01b038216612e345760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b60448201526064016115e2565b612e3d82613be5565b506001919050565b60405163c3203fd160e01b81526045600482015260248101839052604481018290526000908190819073__$340101a45712d3611711048793ce62ace0$__9063c3203fd1906064016040805180830381865af4158015612ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecd9190614f8a565b915091508385612eda3390565b6001600160a01b03167f970f60a11b3302f55122bdb3e2de766d28491b40fe0a2a6d04da71e5ab577cb9846040516121df91815260200190565b60405163d95140eb60e01b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063d95140eb90604401611047565b6040516000906001600160a01b03831690849033907f1d31fe42f06d4c1f16f6cb7b5682f1d6743641a9e1412fa0258f6776c5b943ee908590a4604051633d58057760e01b815260456004820152602481018490526001600160a01b038316604482015273__$340101a45712d3611711048793ce62ace0$__90633d580577906064016110c7565b604051633e5c6e9760e11b8152604560048201526024810182905260609073__$340101a45712d3611711048793ce62ace0$__90637cb8dd2e90604401600060405180830381865af4158015613038573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eee91908101906150cb565b6040516333064c8960e11b8152604560048201526024810182905260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063660c991290604401611047565b600080600073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__63099a0c2e60458a8a8a8a8a6040518763ffffffff1660e01b81526004016130e996959493929190615259565b6040805180830381865af4158015613105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131299190615322565b91509150806001600160a01b0316826001600160a01b0316897f2acec3419c1d10dab06d0715f556e96b344f2092a52a23fb192b4b89f5b7cf42896040013560405161317791815260200190565b60405180910390a4509695505050505050565b604051633d2003d360e21b8152604560048201526024810183905281151560448201526000908190819073__$340101a45712d3611711048793ce62ace0$__9063f4800f4c906064016040805180830381865af41580156131ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132139190614f8a565b9150915080856132203390565b6001600160a01b03167faaf3a0e62c1102e283a5a18e81d678b9ce6f4f043cc7afafee4f7f82b85330a2876040516121df911515815260200190565b6040516309f7398160e11b8152604560048201526024810182905260609073__$6309dd7d2656d358c392b35d5c4e4605f9$__906313ee73029060440161128d565b600080600073__$122c978fc1a65ab69c7a0ac6b07fd0b0cd$__6315922efe6045898989896040518663ffffffff1660e01b81526004016132e3959493929190615351565b6040805180830381865af41580156132ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133239190615415565b90925090506001600160a01b038116613342608088016060890161466a565b6001600160a01b0316837f11cf8f3561fae187c57df59424ecf5d3f444e138924944c77dcb68144c635731896040013560405161338191815260200190565b60405180910390a45095945050505050565b6000336001600160a01b0316837f552ce1fc1bc82a48cdc0636ff7162480d868c590f2e57c63c30a944f3a82ec36846040516133d3911515815260200190565b60405180910390a36040516315b18c7560e11b81526045600482015260248101849052821515604482015273__$bc3cfbaf1827cbc66e3e608da812a405b7$__90632b6318ea906064016110c7565b604051634ba8456360e01b815260456004820152602481018390526044810182905260009073__$6309dd7d2656d358c392b35d5c4e4605f9$__90634ba84563906064016110c7565b60006112e1613c5c565b60405163470e456560e01b8152604560048201526001600160a01b038216602482015260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063470e456590604401611047565b60405163fbe97e1960e01b8152604560048201526001600160a01b038216602482015260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063fbe97e1990604401611047565b60006112e1613850565b60405163e8a0df2d60e01b8152604560048201526001600160a01b038216602482015260009073__$c43b1d7058274a71a9734d16e6b6586431$__9063e8a0df2d90604401611047565b90565b60006001600160e01b0319821663748be05360e01b148061359157506001600160e01b031982166352d1902d60e01b145b80610eee57506301ffc9a760e01b6001600160e01b0319831614610eee565b60006000805160206154e08339815191525b546001600160a01b0316919050565b600080546001600160a01b031630036136bd5760006363d59cf360e11b6135f730613ba6565b338560405160240161360b9392919061543a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050600061368861364c6135b0565b836040518060400160405280601d81526020017f44656c656761746563616c6c20686173416363657373204661696c6564000000815250613caf565b905080600182516136999190615463565b815181106136a9576136a9615488565b60209101015160f81c600114949350505050565b6000546001600160a01b031663c7ab39e66136d730613ba6565b33856040518463ffffffff1660e01b81526004016136f79392919061543a565b602060405180830381865afa158015611064573d6000803e3d6000fd5b600080546001600160a01b031630036137da57600063e25d75f060e01b60035460405160240161374691815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905060006137a66137876135b0565b836040518060600160405280602581526020016154bb60259139613caf565b905080600182516137b79190615463565b815181106137c7576137c7615488565b60209101015160f81c6001149392505050565b600054600354604051630e25d75f60e41b81526001600160a01b039092169163e25d75f09161380f9160040190815260200190565b602060405180830381865afa15801561382c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e19190614974565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036135c2565b613886868686868686613d78565b505050505050565b6138966135b0565b6001600160a01b0316816001600160a01b0316036138f65760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204e657720496d706c656d656e746174696f6e00000000000060448201526064016115e2565b613906637147855d60e01b6135d1565b6139525760405162461bcd60e51b815260206004820152601960248201527f5570677261646520436f6e7465787420466f7262696464656e0000000000000060448201526064016115e2565b50565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561399f5761398a84613f83565b50604080516000815260208101909152610fc3565b836001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156139f9575060408051601f3d908101601f191682019092526139f691810190614941565b60015b613a3d5760405162461bcd60e51b8152602060048201526015602482015274125b1b1959d85b0815555414c810dbdb9d1c9858dd605a1b60448201526064016115e2565b6000805160206154e08339815191528114613a925760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a590815555414c810dbdb9d1c9858dd605a1b60448201526064016115e2565b506040516301ffc9a760e01b815263748be05360e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa925050508015613afa575060408051601f3d908101601f19168201909252613af791810190614974565b60015b613b465760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204950726f787920436f6e747261637400000000000000000060448201526064016115e2565b80613b935760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204950726f787920436f6e747261637400000000000000000060448201526064016115e2565b50613b9f848484614004565b9050610fc3565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f54ab0d18de7958786ba1ad85966d59baa2b395455f0530dcdcfd732e6af539e29181900360200190a350565b600154600254604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c001610fee565b60606001600160a01b0384163b613d035760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b60448201526064016115e2565b600080856001600160a01b031685604051613d1e919061549e565b600060405180830381855af49150503d8060008114613d59576040519150601f19603f3d011682016040523d82523d6000602084013e613d5e565b606091505b5091509150613d6e82828661406e565b9695505050505050565b604a5462010000900460ff16613dd05760405162461bcd60e51b815260206004820152601960248201527f436f6e7472616374204e6f7420496e697469616c697a696e670000000000000060448201526064016115e2565b8585604051602001613de3929190614d14565b60408051601f19818403018152908290528051602091820120600155613e0d918691869101614d14565b60408051601f19818403018152919052805160209091012060025560038290556001600160a01b038116613e5257600080546001600160a01b03191630179055613f6f565b6040516301ffc9a760e01b81526301fe701d60e21b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa925050508015613eb9575060408051601f3d908101601f19168201909252613eb691810190614974565b60015b613f055760405162461bcd60e51b815260206004820152601c60248201527f496c6c6567616c20416363657373436f6e74726f6c4d616e616765720000000060448201526064016115e2565b80613f525760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420416363657373436f6e74726f6c4d616e616765720000000060448201526064016115e2565b50600080546001600160a01b0319166001600160a01b0383161790555b6004805461ffff1916905561388633613be5565b6001600160a01b0381163b613fd55760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b60448201526064016115e2565b6000805160206154e083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b606061400f846140a7565b60008351118061401c5750815b1561405757613b9f84846040518060400160405280601381526020017211195b1959d85d1958d85b1b0811985a5b1959606a1b815250613caf565b505060408051600081526020810190915292915050565b6060831561407d575081610fc3565b82511561408d5782518084602001fd5b8160405162461bcd60e51b81526004016115e29190614657565b6140b081613f83565b6040516001600160a01b03821690309033907f354bd4b6eb65d64e6c79c53fa4f983a5e6bec4824ce4627c71be0b2722f4917e90600090a450565b6001600160e01b03198116811461395257600080fd5b60006020828403121561411357600080fd5b8135610fc3816140eb565b60008060006060848603121561413357600080fd5b833592506020840135614145816140eb565b929592945050506040919091013590565b60006020828403121561416857600080fd5b5035919050565b6000806040838503121561418257600080fd5b823591506020830135614194816140eb565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156141e15783516001600160e01b031916835292840192918401916001016141bb565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156141e157835183529284019291840191600101614209565b60005b83811015614240578181015183820152602001614228565b8381111561424f576000848401525b50505050565b6000815180845261426d816020860160208601614225565b601f01601f19169290920160200192915050565b6060815260006142946060830186614255565b931515602083015250901515604090910152919050565b60008083601f8401126142bd57600080fd5b5081356001600160401b038111156142d457600080fd5b6020830191508360208285010111156142ec57600080fd5b9250929050565b801515811461395257600080fd5b60008060006040848603121561431657600080fd5b83356001600160401b0381111561432c57600080fd5b614338868287016142ab565b909450925050602084013561434c816142f3565b809150509250925092565b60006020828403121561436957600080fd5b8135610fc3816142f3565b6000806000806060858703121561438a57600080fd5b84356001600160401b038111156143a057600080fd5b6143ac878288016142ab565b90955093505060208501356143c0816142f3565b915060408501356143d0816142f3565b939692955090935050565b6001600160a01b038116811461395257600080fd5b60008060008060008060006080888a03121561440b57600080fd5b87356001600160401b038082111561442257600080fd5b61442e8b838c016142ab565b909950975060208a013591508082111561444757600080fd5b6144538b838c016142ab565b909750955060408a013591508082111561446c57600080fd5b506144798a828b016142ab565b909450925050606088013561448d816143db565b8091505092959891949750929550565b6040815260006144b06040830185614255565b905082151560208301529392505050565b6000806000606084860312156144d657600080fd5b8335925060208401359150604084013561434c816140eb565b6000806040838503121561450257600080fd5b823591506020830135614194816142f3565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561454c5761454c614514565b60405290565b604051601f8201601f191681016001600160401b038111828210171561457a5761457a614514565b604052919050565b60006001600160401b0382111561459b5761459b614514565b50601f01601f191660200190565b600082601f8301126145ba57600080fd5b81356145cd6145c882614582565b614552565b8181528460208386010111156145e257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561461457600080fd5b833561461f816143db565b925060208401356001600160401b0381111561463a57600080fd5b614646868287016145a9565b925050604084013561434c816142f3565b602081526000610fc36020830184614255565b60006020828403121561467c57600080fd5b8135610fc3816143db565b6000806040838503121561469a57600080fd5b823591506020830135614194816143db565b600080600080606085870312156146c257600080fd5b84356001600160401b038111156146d857600080fd5b6146e4878288016142ab565b9095509350506020850135915060408501356143d0816142f3565b6060815260006147126060830186614255565b602083019490945250901515604090910152919050565b60008060006060848603121561473e57600080fd5b833592506020840135614750816143db565b9150604084013561434c816140eb565b6000806040838503121561477357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156141e15783516001600160a01b03168352928401929184019160010161479e565b600060a082840312156147d557600080fd5b50919050565b60008083601f8401126147ed57600080fd5b5081356001600160401b0381111561480457600080fd5b6020830191508360208260051b85010111156142ec57600080fd5b6000806000806000610100868803121561483857600080fd5b8535945060208601356001600160401b038082111561485657600080fd5b61486289838a016145a9565b95506148718960408a016147c3565b945060e088013591508082111561488757600080fd5b50614894888289016147db565b969995985093965092949392505050565b60008060008060e085870312156148bb57600080fd5b84356001600160401b03808211156148d257600080fd5b6148de888389016145a9565b95506148ed88602089016147c3565b945060c087013591508082111561490357600080fd5b50614910878288016147db565b95989497509550505050565b93845260208401929092526001600160e01b0319166040830152606082015260800190565b60006020828403121561495357600080fd5b5051919050565b6001600160e01b0319929092168252602082015260400190565b60006020828403121561498657600080fd5b8151610fc3816142f3565b92835260208301919091526001600160e01b031916604082015260600190565b60006001600160401b038211156149ca576149ca614514565b5060051b60200190565b600082601f8301126149e557600080fd5b815160206149f56145c8836149b1565b82815260059290921b84018101918181019086841115614a1457600080fd5b8286015b84811015614a38578051614a2b816140eb565b8352918301918301614a18565b509695505050505050565b600060208284031215614a5557600080fd5b81516001600160401b03811115614a6b57600080fd5b612105848285016149d4565b60006020808385031215614a8a57600080fd5b82516001600160401b03811115614aa057600080fd5b8301601f81018513614ab157600080fd5b8051614abf6145c8826149b1565b81815260059190911b82018301908381019087831115614ade57600080fd5b928401925b82841015614afc57835182529284019290840190614ae3565b979650505050505050565b600082601f830112614b1857600080fd5b8151614b266145c882614582565b818152846020838601011115614b3b57600080fd5b612105826020830160208701614225565b600080600060608486031215614b6157600080fd5b83516001600160401b03811115614b7757600080fd5b614b8386828701614b07565b9350506020840151614b94816142f3565b604085015190925061434c816142f3565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b848152606060208201526000614be8606083018587614ba5565b9050821515604083015295945050505050565b604081526000614c0f604083018587614ba5565b90508215156020830152949350505050565b602080825260159082015274125b1b1959d85b0810dbdb9d1c9858dd0810d85b1b605a1b604082015260600190565b602080825260149082015273141c9bde1e4810d85b1b195908125b9d985b1a5960621b604082015260600190565b60208082526017908201527f536166654d6f64653a2043616c6c2052656a6563746564000000000000000000604082015260600190565b858152608060208201526000614ccf608083018688614ba5565b9315156040830152509015156060909101529392505050565b606081526000614cfc606083018688614ba5565b93151560208301525090151560409091015292915050565b8183823760009101908152919050565b60006020808385031215614d3757600080fd5b82516001600160401b0380821115614d4e57600080fd5b818501915085601f830112614d6257600080fd5b8151614d706145c8826149b1565b81815260059190911b83018401908481019088831115614d8f57600080fd5b8585015b83811015614e1a57805185811115614dab5760008081fd5b86016060818c03601f1901811315614dc35760008081fd5b614dcb61452a565b89830151815260408084015189811115614de55760008081fd5b614df38f8d838801016149d4565b838d0152509282015192614e06846142f3565b810192909252508352918601918601614d93565b5098975050505050505050565b60006080808301878452602060018060a01b03881681860152604087818701526060848188015283885180865260a08901915060a08160051b8a01019550848a016000805b83811015614eeb578b8903609f19018552825180518a5288810151898b018890528051888c01819052908a019084908d8d01905b80831015614eca5783516001600160e01b0319168252928c019260019290920191908c0190614ea0565b50928a015115159b8a019b909b525098509387019391870191600101614e6c565b50969e9d5050505050505050505050505050565b608081526000614f1360808301888a614ba5565b8281036020840152614f26818789614ba5565b91505083604083015261ffff83166060830152979650505050505050565b60008060408385031215614f5757600080fd5b82516001600160401b03811115614f6d57600080fd5b614f7985828601614b07565b9250506020830151614194816142f3565b60008060408385031215614f9d57600080fd5b8251614fa8816142f3565b6020939093015192949293505050565b600060c08284031215614fca57600080fd5b60405160c081018181106001600160401b0382111715614fec57614fec614514565b80604052508251815260208301516020820152604083015160408201526060830151615017816143db565b6060820152608083015161502a816142f3565b608082015260a083015161503d816142f3565b60a08201529392505050565b858152608060208201526000615063608083018688614ba5565b6040830194909452509015156060909101529392505050565b60008060006060848603121561509157600080fd5b83516001600160401b038111156150a757600080fd5b6150b386828701614b07565b93505060208401519150604084015161434c816142f3565b600060208083850312156150de57600080fd5b82516001600160401b038111156150f457600080fd5b8301601f8101851361510557600080fd5b80516151136145c8826149b1565b81815260059190911b8201830190838101908783111561513257600080fd5b928401925b82841015614afc57835161514a816143db565b82529284019290840190615137565b803582526020810135602083015260408101356040830152606081013561517f816143db565b6001600160a01b03166060830152608081013561519b816142f3565b8015156080840152505050565b6000808335601e198436030181126151bf57600080fd5b83016020810192503590506001600160401b038111156151de57600080fd5b8060051b36038213156142ec57600080fd5b8183526000602080850194508260005b8581101561522f578135615213816140eb565b6001600160e01b03191687529582019590820190600101615200565b509495945050505050565b60008235605e1983360301811261525057600080fd5b90910192915050565b6000610120888352602088818501526040828186015261527b8386018a614255565b9250606061528b8187018a615159565b858403610100870152868452828401600588901b85018401896000805b8b81101561530d57888403601f190185526152c3838e61523a565b803585526152d3898201826151a8565b888b8801526152e589880182846151f0565b928a013592915050600382106152f9578384fd5b9488015293870193918701916001016152a8565b50919f9e505050505050505050505050505050565b6000806040838503121561533557600080fd5b8251615340816143db565b6020840151909250614194816143db565b60006101008783526020818185015261536c82850189614255565b9150604061537c81860189615159565b84830360e0860152858352818301600587901b840183018860005b8981101561540357868303601f190184526153b2828c61523a565b6060813585526153c4888301836151a8565b828a8801526153d683880182846151f0565b925050508682013591506153e9826142f3565b901515938601939093529285019290850190600101615397565b50909c9b505050505050505050505050565b6000806040838503121561542857600080fd5b825191506020830151614194816143db565b9283526001600160a01b039190911660208301526001600160e01b031916604082015260600190565b60008282101561548357634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b600082516154b0818460208701614225565b919091019291505056fe44656c656761746563616c6c2069735265616c6d55706772616461626c65204661696c6564360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212207cf62b12fc267195c9cf1b83b0528771e5e1a4fe2afd80e9699a28e250ceca3064736f6c634300080f0033",
  "libraries": {
    "LContextManagement": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "LAccessControl": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "LRealmManagement": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "LGroupManagement": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "LRoleManagement": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "hasAccess(bytes32,address,bytes4)": {
        "details": "Function called by apps to check ACL",
        "returns": {
          "_0": "boolean indicating whether the ACL allows"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20153,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20155,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_domainName",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 20157,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_domainVersion",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 20159,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_domainRealm",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 20161,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_isSafeMode",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 20163,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_isUpgradable",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 20168,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)64_storage"
      },
      {
        "astId": 9470,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_dataMaps",
        "offset": 0,
        "slot": "69",
        "type": "t_struct(DataMaps)9467_storage"
      },
      {
        "astId": 20341,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "74",
        "type": "t_uint16"
      },
      {
        "astId": 20344,
        "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
        "label": "_initializing",
        "offset": 2,
        "slot": "74",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)64_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[64]",
        "numberOfBytes": "2048"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(Status)9390": {
        "encoding": "inplace",
        "label": "enum AccessControlStorage.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_enum(Status)9390))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => enum AccessControlStorage.Status))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_enum(Status)9390)"
      },
      "t_mapping(t_bytes32,t_enum(Status)9390)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum AccessControlStorage.Status)",
        "numberOfBytes": "32",
        "value": "t_enum(Status)9390"
      },
      "t_mapping(t_bytes32,t_struct(Context)9411_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorage.Context)",
        "numberOfBytes": "32",
        "value": "t_struct(Context)9411_storage"
      },
      "t_mapping(t_bytes32,t_struct(Group)9439_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorage.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)9439_storage"
      },
      "t_mapping(t_bytes32,t_struct(Realm)9431_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorage.Realm)",
        "numberOfBytes": "32",
        "value": "t_struct(Realm)9431_storage"
      },
      "t_mapping(t_bytes32,t_struct(Role)9421_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorage.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)9421_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_struct(RoleStat)9396_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct AccessControlStorage.RoleStat)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleStat)9396_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)17576_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.AddressSet",
        "members": [
          {
            "astId": 17575,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)17275_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)17469_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 17468,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)17275_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Context)9411_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.Context",
        "members": [
          {
            "astId": 9398,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "realm",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9400,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "smca",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9402,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "isEnabled",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 9407,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "resources",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes4,t_struct(RoleStat)9396_storage)"
          },
          {
            "astId": 9410,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "funcSet",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Bytes32Set)17469_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(DataMaps)9467_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.DataMaps",
        "members": [
          {
            "astId": 9446,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "accountMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_enum(Status)9390))"
          },
          {
            "astId": 9451,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "ctxMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(Context)9411_storage)"
          },
          {
            "astId": 9456,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "roleMap",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(Role)9421_storage)"
          },
          {
            "astId": 9461,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "realmMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_struct(Realm)9431_storage)"
          },
          {
            "astId": 9466,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "groupMap",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes32,t_struct(Group)9439_storage)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Group)9439_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.Group",
        "members": [
          {
            "astId": 9433,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9435,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "isEnabled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 9438,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "roleSet",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Bytes32Set)17469_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Realm)9431_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.Realm",
        "members": [
          {
            "astId": 9423,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9425,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "isEnabled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 9427,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "isUpgradable",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 9430,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "ctxSet",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Bytes32Set)17469_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Role)9421_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.Role",
        "members": [
          {
            "astId": 9413,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9415,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "group",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 9417,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "isEnabled",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9420,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "accountSet",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)17576_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleStat)9396_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorage.RoleStat",
        "members": [
          {
            "astId": 9392,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "role",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9395,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(Status)9390"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)17275_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Set",
        "members": [
          {
            "astId": 17270,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 17274,
            "contract": "src/contracts/acl/AccessControlManager.sol:AccessControlManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}