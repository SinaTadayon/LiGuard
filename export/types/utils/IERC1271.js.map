{"version":3,"file":"IERC1271.js","sourceRoot":"","sources":["../../../../typechain/types/utils/IERC1271.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type { FunctionFragment, Result } from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../common\";\n\nexport interface IERC1271Interface extends utils.Interface {\n  functions: {\n    \"isValidSignature(bytes32,bytes)\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | \"isValidSignature\"\n      | \"isValidSignature(bytes32,bytes)\"\n  ): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"isValidSignature\",\n    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"isValidSignature(bytes32,bytes)\",\n    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]\n  ): string;\n\n  decodeFunctionResult(\n    functionFragment: \"isValidSignature\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"isValidSignature(bytes32,bytes)\",\n    data: BytesLike\n  ): Result;\n\n  events: {};\n}\n\nexport interface IERC1271 extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: IERC1271Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    isValidSignature(\n      hash: PromiseOrValue<BytesLike>,\n      signature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<[string] & { magicValue: string }>;\n\n    \"isValidSignature(bytes32,bytes)\"(\n      hash: PromiseOrValue<BytesLike>,\n      signature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<[string] & { magicValue: string }>;\n  };\n\n  isValidSignature(\n    hash: PromiseOrValue<BytesLike>,\n    signature: PromiseOrValue<BytesLike>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  \"isValidSignature(bytes32,bytes)\"(\n    hash: PromiseOrValue<BytesLike>,\n    signature: PromiseOrValue<BytesLike>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  callStatic: {\n    isValidSignature(\n      hash: PromiseOrValue<BytesLike>,\n      signature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    \"isValidSignature(bytes32,bytes)\"(\n      hash: PromiseOrValue<BytesLike>,\n      signature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n  };\n\n  filters: {};\n\n  estimateGas: {\n    isValidSignature(\n      hash: PromiseOrValue<BytesLike>,\n      signature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    \"isValidSignature(bytes32,bytes)\"(\n      hash: PromiseOrValue<BytesLike>,\n      signature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    isValidSignature(\n      hash: PromiseOrValue<BytesLike>,\n      signature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    \"isValidSignature(bytes32,bytes)\"(\n      hash: PromiseOrValue<BytesLike>,\n      signature: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"]}