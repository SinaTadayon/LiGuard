{"version":3,"file":"LRealmManagement.js","sourceRoot":"","sources":["../../../../../typechain/types/lib/acl/LRealmManagement.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type { FunctionFragment, Result } from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../../common\";\n\nexport interface LRealmManagementInterface extends utils.Interface {\n  functions: {\n    \"LIB_NAME()\": FunctionFragment;\n    \"LIB_VERSION()\": FunctionFragment;\n    \"getLibrary()\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | \"LIB_NAME\"\n      | \"LIB_NAME()\"\n      | \"LIB_VERSION\"\n      | \"LIB_VERSION()\"\n      | \"getLibrary\"\n      | \"getLibrary()\"\n  ): FunctionFragment;\n\n  encodeFunctionData(functionFragment: \"LIB_NAME\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"LIB_NAME()\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"LIB_VERSION\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"LIB_VERSION()\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getLibrary\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getLibrary()\",\n    values?: undefined\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"LIB_NAME\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"LIB_NAME()\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"LIB_VERSION\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"LIB_VERSION()\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"getLibrary\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"getLibrary()\",\n    data: BytesLike\n  ): Result;\n\n  events: {};\n}\n\nexport interface LRealmManagement extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: LRealmManagementInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    LIB_NAME(overrides?: CallOverrides): Promise<[string]>;\n\n    \"LIB_NAME()\"(overrides?: CallOverrides): Promise<[string]>;\n\n    LIB_VERSION(overrides?: CallOverrides): Promise<[string]>;\n\n    \"LIB_VERSION()\"(overrides?: CallOverrides): Promise<[string]>;\n\n    getLibrary(overrides?: CallOverrides): Promise<[string]>;\n\n    \"getLibrary()\"(overrides?: CallOverrides): Promise<[string]>;\n  };\n\n  LIB_NAME(overrides?: CallOverrides): Promise<string>;\n\n  \"LIB_NAME()\"(overrides?: CallOverrides): Promise<string>;\n\n  LIB_VERSION(overrides?: CallOverrides): Promise<string>;\n\n  \"LIB_VERSION()\"(overrides?: CallOverrides): Promise<string>;\n\n  getLibrary(overrides?: CallOverrides): Promise<string>;\n\n  \"getLibrary()\"(overrides?: CallOverrides): Promise<string>;\n\n  callStatic: {\n    LIB_NAME(overrides?: CallOverrides): Promise<string>;\n\n    \"LIB_NAME()\"(overrides?: CallOverrides): Promise<string>;\n\n    LIB_VERSION(overrides?: CallOverrides): Promise<string>;\n\n    \"LIB_VERSION()\"(overrides?: CallOverrides): Promise<string>;\n\n    getLibrary(overrides?: CallOverrides): Promise<string>;\n\n    \"getLibrary()\"(overrides?: CallOverrides): Promise<string>;\n  };\n\n  filters: {};\n\n  estimateGas: {\n    LIB_NAME(overrides?: CallOverrides): Promise<BigNumber>;\n\n    \"LIB_NAME()\"(overrides?: CallOverrides): Promise<BigNumber>;\n\n    LIB_VERSION(overrides?: CallOverrides): Promise<BigNumber>;\n\n    \"LIB_VERSION()\"(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getLibrary(overrides?: CallOverrides): Promise<BigNumber>;\n\n    \"getLibrary()\"(overrides?: CallOverrides): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    LIB_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    \"LIB_NAME()\"(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    LIB_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    \"LIB_VERSION()\"(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    \"getLibrary()\"(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n  };\n}\n"]}