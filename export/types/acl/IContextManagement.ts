/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IContextManagement {
  export type ResponseContextStruct = {
    name: PromiseOrValue<string>;
    version: PromiseOrValue<string>;
    smca: PromiseOrValue<string>;
    realm: PromiseOrValue<BytesLike>;
    isEnabled: PromiseOrValue<boolean>;
    isUpgradable: PromiseOrValue<boolean>;
  };

  export type ResponseContextStructOutput = [
    string,
    string,
    string,
    string,
    boolean,
    boolean
  ] & {
    name: string;
    version: string;
    smca: string;
    realm: string;
    isEnabled: boolean;
    isUpgradable: boolean;
  };

  export type RequestContextStruct = {
    role: PromiseOrValue<BytesLike>;
    funcSelectors: PromiseOrValue<BytesLike>[];
    isEnabled: PromiseOrValue<boolean>;
  };

  export type RequestContextStructOutput = [string, string[], boolean] & {
    role: string;
    funcSelectors: string[];
    isEnabled: boolean;
  };
}

export interface IContextManagementInterface extends utils.Interface {
  functions: {
    "disableContext(bytes32)": FunctionFragment;
    "enableContext(bytes32)": FunctionFragment;
    "enableUpgradeContext(bytes32)": FunctionFragment;
    "getContextFuncs(bytes32)": FunctionFragment;
    "getContextInfo(bytes32)": FunctionFragment;
    "grantContextRole(bytes32,bytes4,bytes32)": FunctionFragment;
    "hasContextRole(bytes32,bytes32,bytes4)": FunctionFragment;
    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])": FunctionFragment;
    "revokeContextRole(bytes32,bytes4,bytes32)": FunctionFragment;
    "updateContext(bytes32,(bytes32,bytes4[],bool)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "disableContext"
      | "disableContext(bytes32)"
      | "enableContext"
      | "enableContext(bytes32)"
      | "enableUpgradeContext"
      | "enableUpgradeContext(bytes32)"
      | "getContextFuncs"
      | "getContextFuncs(bytes32)"
      | "getContextInfo"
      | "getContextInfo(bytes32)"
      | "grantContextRole"
      | "grantContextRole(bytes32,bytes4,bytes32)"
      | "hasContextRole"
      | "hasContextRole(bytes32,bytes32,bytes4)"
      | "registerContext"
      | "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"
      | "revokeContextRole"
      | "revokeContextRole(bytes32,bytes4,bytes32)"
      | "updateContext"
      | "updateContext(bytes32,(bytes32,bytes4[],bool)[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "disableContext",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableContext(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableContext",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableContext(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableUpgradeContext",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableUpgradeContext(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContextFuncs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContextFuncs(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContextInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContextInfo(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantContextRole",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantContextRole(bytes32,bytes4,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasContextRole",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasContextRole(bytes32,bytes32,bytes4)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContext",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IContextManagement.RequestContextStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IContextManagement.RequestContextStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeContextRole",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeContextRole(bytes32,bytes4,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContext",
    values: [
      PromiseOrValue<BytesLike>,
      IContextManagement.RequestContextStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContext(bytes32,(bytes32,bytes4[],bool)[])",
    values: [
      PromiseOrValue<BytesLike>,
      IContextManagement.RequestContextStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "disableContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableContext(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableContext(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUpgradeContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUpgradeContext(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContextFuncs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContextFuncs(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContextInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContextInfo(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantContextRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantContextRole(bytes32,bytes4,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasContextRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasContextRole(bytes32,bytes32,bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeContextRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeContextRole(bytes32,bytes4,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContext(bytes32,(bytes32,bytes4[],bool)[])",
    data: BytesLike
  ): Result;

  events: {
    "ContextRegistered(bytes32,address,address,bytes32)": EventFragment;
    "ContextRoleGranted(bytes32,bytes32,address,bytes4,bytes32)": EventFragment;
    "ContextRoleRevoked(bytes32,bytes32,address,bytes4,bytes32)": EventFragment;
    "ContextUpdated(bytes32,address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContextRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContextRegistered(bytes32,address,address,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextRoleGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContextRoleGranted(bytes32,bytes32,address,bytes4,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextRoleRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContextRoleRevoked(bytes32,bytes32,address,bytes4,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContextUpdated(bytes32,address,address,bytes32)"
  ): EventFragment;
}

export interface ContextRegisteredEventObject {
  context: string;
  scma: string;
  sender: string;
  realm: string;
}
export type ContextRegisteredEvent = TypedEvent<
  [string, string, string, string],
  ContextRegisteredEventObject
>;

export type ContextRegisteredEventFilter =
  TypedEventFilter<ContextRegisteredEvent>;

export interface ContextRoleGrantedEventObject {
  context: string;
  role: string;
  sender: string;
  functionSelector: string;
  realm: string;
}
export type ContextRoleGrantedEvent = TypedEvent<
  [string, string, string, string, string],
  ContextRoleGrantedEventObject
>;

export type ContextRoleGrantedEventFilter =
  TypedEventFilter<ContextRoleGrantedEvent>;

export interface ContextRoleRevokedEventObject {
  context: string;
  role: string;
  sender: string;
  functionSelector: string;
  realm: string;
}
export type ContextRoleRevokedEvent = TypedEvent<
  [string, string, string, string, string],
  ContextRoleRevokedEventObject
>;

export type ContextRoleRevokedEventFilter =
  TypedEventFilter<ContextRoleRevokedEvent>;

export interface ContextUpdatedEventObject {
  context: string;
  scma: string;
  sender: string;
  realm: string;
}
export type ContextUpdatedEvent = TypedEvent<
  [string, string, string, string],
  ContextUpdatedEventObject
>;

export type ContextUpdatedEventFilter = TypedEventFilter<ContextUpdatedEvent>;

export interface IContextManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IContextManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    disableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "disableContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "enableContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableUpgradeContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "enableUpgradeContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getContextFuncs(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getContextInfo(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IContextManagement.ResponseContextStructOutput]>;

    "getContextInfo(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IContextManagement.ResponseContextStructOutput]>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "grantContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasContextRole(bytes32,bytes32,bytes4)"(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerContext(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateContext(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  disableContext(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "disableContext(bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableContext(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "enableContext(bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableUpgradeContext(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "enableUpgradeContext(bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContextFuncs(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getContextFuncs(bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getContextInfo(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IContextManagement.ResponseContextStructOutput>;

  "getContextInfo(bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IContextManagement.ResponseContextStructOutput>;

  grantContextRole(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "grantContextRole(bytes32,bytes4,bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasContextRole(
    ctx: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasContextRole(bytes32,bytes32,bytes4)"(
    ctx: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerContext(
    newContract: PromiseOrValue<string>,
    realm: PromiseOrValue<BytesLike>,
    rc: IContextManagement.RequestContextStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
    newContract: PromiseOrValue<string>,
    realm: PromiseOrValue<BytesLike>,
    rc: IContextManagement.RequestContextStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeContextRole(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeContextRole(bytes32,bytes4,bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateContext(
    ctx: PromiseOrValue<BytesLike>,
    rc: IContextManagement.RequestContextStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
    ctx: PromiseOrValue<BytesLike>,
    rc: IContextManagement.RequestContextStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    disableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "disableContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "enableContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableUpgradeContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "enableUpgradeContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getContextFuncs(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getContextInfo(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IContextManagement.ResponseContextStructOutput>;

    "getContextInfo(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IContextManagement.ResponseContextStructOutput>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "grantContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasContextRole(bytes32,bytes32,bytes4)"(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerContext(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "revokeContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateContext(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ContextRegistered(bytes32,address,address,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextRegisteredEventFilter;
    ContextRegistered(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextRegisteredEventFilter;

    "ContextRoleGranted(bytes32,bytes32,address,bytes4,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleGrantedEventFilter;
    ContextRoleGranted(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleGrantedEventFilter;

    "ContextRoleRevoked(bytes32,bytes32,address,bytes4,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleRevokedEventFilter;
    ContextRoleRevoked(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleRevokedEventFilter;

    "ContextUpdated(bytes32,address,address,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextUpdatedEventFilter;
    ContextUpdated(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextUpdatedEventFilter;
  };

  estimateGas: {
    disableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "disableContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "enableContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableUpgradeContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "enableUpgradeContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContextFuncs(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContextInfo(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContextInfo(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "grantContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasContextRole(bytes32,bytes32,bytes4)"(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerContext(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateContext(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    disableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "disableContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "enableContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableUpgradeContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "enableUpgradeContext(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContextFuncs(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContextInfo(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContextInfo(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "grantContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasContextRole(bytes32,bytes32,bytes4)"(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerContext(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateContext(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
