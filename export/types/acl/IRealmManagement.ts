/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IRealmManagementInterface extends utils.Interface {
  functions: {
    "addRealm(string,bool)": FunctionFragment;
    "disabledRealm(bytes32)": FunctionFragment;
    "enableUpgradeRealm(bytes32)": FunctionFragment;
    "enabledRealm(bytes32)": FunctionFragment;
    "getRealm(bytes32)": FunctionFragment;
    "getRealmContextes(bytes32)": FunctionFragment;
    "grantRealmContext(bytes32,bytes32)": FunctionFragment;
    "hasRealmContext(bytes32,bytes32)": FunctionFragment;
    "revokeRealmContext(bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRealm"
      | "addRealm(string,bool)"
      | "disabledRealm"
      | "disabledRealm(bytes32)"
      | "enableUpgradeRealm"
      | "enableUpgradeRealm(bytes32)"
      | "enabledRealm"
      | "enabledRealm(bytes32)"
      | "getRealm"
      | "getRealm(bytes32)"
      | "getRealmContextes"
      | "getRealmContextes(bytes32)"
      | "grantRealmContext"
      | "grantRealmContext(bytes32,bytes32)"
      | "hasRealmContext"
      | "hasRealmContext(bytes32,bytes32)"
      | "revokeRealmContext"
      | "revokeRealmContext(bytes32,bytes32)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRealm",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRealm(string,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "disabledRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "disabledRealm(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableUpgradeRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableUpgradeRealm(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledRealm(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealm(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealmContextes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealmContextes(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRealmContext",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRealmContext(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRealmContext",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRealmContext(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRealmContext",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRealmContext(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "addRealm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRealm(string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disabledRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disabledRealm(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUpgradeRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUpgradeRealm(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledRealm(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRealm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRealm(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealmContextes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealmContextes(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRealmContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRealmContext(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRealmContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRealmContext(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRealmContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRealmContext(bytes32,bytes32)",
    data: BytesLike
  ): Result;

  events: {
    "RealmContextGranted(bytes32,bytes32,address)": EventFragment;
    "RealmDisabled(bytes32,address)": EventFragment;
    "RealmEnabled(bytes32,address)": EventFragment;
    "RealmRegistered(bytes32,address,string,bool)": EventFragment;
    "RealmRoleRevoked(bytes32,bytes32,address)": EventFragment;
    "RealmUpgradeEnabled(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RealmContextGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmContextGranted(bytes32,bytes32,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmDisabled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmDisabled(bytes32,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmEnabled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmEnabled(bytes32,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmRegistered(bytes32,address,string,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmRoleRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmRoleRevoked(bytes32,bytes32,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmUpgradeEnabled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmUpgradeEnabled(bytes32,address)"
  ): EventFragment;
}

export interface RealmContextGrantedEventObject {
  realm: string;
  context: string;
  sender: string;
}
export type RealmContextGrantedEvent = TypedEvent<
  [string, string, string],
  RealmContextGrantedEventObject
>;

export type RealmContextGrantedEventFilter =
  TypedEventFilter<RealmContextGrantedEvent>;

export interface RealmDisabledEventObject {
  realm: string;
  sender: string;
}
export type RealmDisabledEvent = TypedEvent<
  [string, string],
  RealmDisabledEventObject
>;

export type RealmDisabledEventFilter = TypedEventFilter<RealmDisabledEvent>;

export interface RealmEnabledEventObject {
  realm: string;
  sender: string;
}
export type RealmEnabledEvent = TypedEvent<
  [string, string],
  RealmEnabledEventObject
>;

export type RealmEnabledEventFilter = TypedEventFilter<RealmEnabledEvent>;

export interface RealmRegisteredEventObject {
  realm: string;
  sender: string;
  name: string;
  isEnabled: boolean;
}
export type RealmRegisteredEvent = TypedEvent<
  [string, string, string, boolean],
  RealmRegisteredEventObject
>;

export type RealmRegisteredEventFilter = TypedEventFilter<RealmRegisteredEvent>;

export interface RealmRoleRevokedEventObject {
  realm: string;
  context: string;
  sender: string;
}
export type RealmRoleRevokedEvent = TypedEvent<
  [string, string, string],
  RealmRoleRevokedEventObject
>;

export type RealmRoleRevokedEventFilter =
  TypedEventFilter<RealmRoleRevokedEvent>;

export interface RealmUpgradeEnabledEventObject {
  realm: string;
  sender: string;
}
export type RealmUpgradeEnabledEvent = TypedEvent<
  [string, string],
  RealmUpgradeEnabledEventObject
>;

export type RealmUpgradeEnabledEventFilter =
  TypedEventFilter<RealmUpgradeEnabledEvent>;

export interface IRealmManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRealmManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRealm(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addRealm(string,bool)"(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "disabledRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableUpgradeRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "enableUpgradeRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "enabledRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getRealmContextes(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getRealmContextes(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "grantRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addRealm(
    name: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addRealm(string,bool)"(
    name: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disabledRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "disabledRealm(bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableUpgradeRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "enableUpgradeRealm(bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enabledRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "enabledRealm(bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  "getRealm(bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  getRealmContextes(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getRealmContextes(bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantRealmContext(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "grantRealmContext(bytes32,bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRealmContext(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRealmContext(bytes32,bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRealmContext(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeRealmContext(bytes32,bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRealm(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "addRealm(string,bool)"(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    disabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "disabledRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableUpgradeRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "enableUpgradeRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "enabledRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getRealmContextes(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getRealmContextes(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "grantRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "revokeRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RealmContextGranted(bytes32,bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmContextGrantedEventFilter;
    RealmContextGranted(
      realm?: PromiseOrValue<BytesLike> | null,
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmContextGrantedEventFilter;

    "RealmDisabled(bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmDisabledEventFilter;
    RealmDisabled(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmDisabledEventFilter;

    "RealmEnabled(bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmEnabledEventFilter;
    RealmEnabled(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmEnabledEventFilter;

    "RealmRegistered(bytes32,address,string,bool)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      isEnabled?: null
    ): RealmRegisteredEventFilter;
    RealmRegistered(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      isEnabled?: null
    ): RealmRegisteredEventFilter;

    "RealmRoleRevoked(bytes32,bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmRoleRevokedEventFilter;
    RealmRoleRevoked(
      realm?: PromiseOrValue<BytesLike> | null,
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmRoleRevokedEventFilter;

    "RealmUpgradeEnabled(bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmUpgradeEnabledEventFilter;
    RealmUpgradeEnabled(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmUpgradeEnabledEventFilter;
  };

  estimateGas: {
    addRealm(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addRealm(string,bool)"(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "disabledRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableUpgradeRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "enableUpgradeRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "enabledRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealmContextes(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealmContextes(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "grantRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRealm(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addRealm(string,bool)"(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "disabledRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableUpgradeRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "enableUpgradeRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "enabledRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealmContextes(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealmContextes(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "grantRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
