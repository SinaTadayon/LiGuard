/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IRealmManagementInterface extends utils.Interface {
  functions: {
    "getRealm(bytes32)": FunctionFragment;
    "getRealmContexts(bytes32)": FunctionFragment;
    "hasRealmContext(bytes32,bytes32)": FunctionFragment;
    "registerRealm(string,bool,bool)": FunctionFragment;
    "setRealmStat(bytes32,bool)": FunctionFragment;
    "setRealmUpgradeStat(bytes32,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getRealm"
      | "getRealm(bytes32)"
      | "getRealmContexts"
      | "getRealmContexts(bytes32)"
      | "hasRealmContext"
      | "hasRealmContext(bytes32,bytes32)"
      | "registerRealm"
      | "registerRealm(string,bool,bool)"
      | "setRealmStat"
      | "setRealmStat(bytes32,bool)"
      | "setRealmUpgradeStat"
      | "setRealmUpgradeStat(bytes32,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealm(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealmContexts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealmContexts(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRealmContext",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRealmContext(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRealm",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRealm(string,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmStat",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmStat(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmUpgradeStat",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmUpgradeStat(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "getRealm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRealm(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealmContexts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealmContexts(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRealmContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRealmContext(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRealm(string,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmStat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmStat(bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmUpgradeStat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmUpgradeStat(bytes32,bool)",
    data: BytesLike
  ): Result;

  events: {
    "RealmRegistered(bytes32,address,string,bool,bool)": EventFragment;
    "RealmStatChanged(bytes32,address,bool)": EventFragment;
    "RealmUpgradeStatChanged(bytes32,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RealmRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmRegistered(bytes32,address,string,bool,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmStatChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmStatChanged(bytes32,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmUpgradeStatChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmUpgradeStatChanged(bytes32,address,bool)"
  ): EventFragment;
}

export interface RealmRegisteredEventObject {
  realm: string;
  sender: string;
  name: string;
  status: boolean;
  isUpgradable: boolean;
}
export type RealmRegisteredEvent = TypedEvent<
  [string, string, string, boolean, boolean],
  RealmRegisteredEventObject
>;

export type RealmRegisteredEventFilter = TypedEventFilter<RealmRegisteredEvent>;

export interface RealmStatChangedEventObject {
  realm: string;
  sender: string;
  status: boolean;
}
export type RealmStatChangedEvent = TypedEvent<
  [string, string, boolean],
  RealmStatChangedEventObject
>;

export type RealmStatChangedEventFilter =
  TypedEventFilter<RealmStatChangedEvent>;

export interface RealmUpgradeStatChangedEventObject {
  realm: string;
  sender: string;
  status: boolean;
}
export type RealmUpgradeStatChangedEvent = TypedEvent<
  [string, string, boolean],
  RealmUpgradeStatChangedEventObject
>;

export type RealmUpgradeStatChangedEventFilter =
  TypedEventFilter<RealmUpgradeStatChangedEvent>;

export interface IRealmManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRealmManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean, boolean]>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean, boolean]>;

    getRealmContexts(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getRealmContexts(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerRealm(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerRealm(string,bool,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRealmStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRealmStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRealmUpgradeStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRealmUpgradeStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean, boolean]>;

  "getRealm(bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean, boolean]>;

  getRealmContexts(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getRealmContexts(bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  hasRealmContext(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRealmContext(bytes32,bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerRealm(
    name: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    isUpgradable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerRealm(string,bool,bool)"(
    name: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    isUpgradable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRealmStat(
    realm: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRealmStat(bytes32,bool)"(
    realm: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRealmUpgradeStat(
    realm: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRealmUpgradeStat(bytes32,bool)"(
    realm: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean, boolean]>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean, boolean]>;

    getRealmContexts(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getRealmContexts(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerRealm(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "registerRealm(string,bool,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    setRealmStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setRealmStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRealmUpgradeStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setRealmUpgradeStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RealmRegistered(bytes32,address,string,bool,bool)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      status?: null,
      isUpgradable?: null
    ): RealmRegisteredEventFilter;
    RealmRegistered(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      status?: null,
      isUpgradable?: null
    ): RealmRegisteredEventFilter;

    "RealmStatChanged(bytes32,address,bool)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): RealmStatChangedEventFilter;
    RealmStatChanged(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): RealmStatChangedEventFilter;

    "RealmUpgradeStatChanged(bytes32,address,bool)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): RealmUpgradeStatChangedEventFilter;
    RealmUpgradeStatChanged(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): RealmUpgradeStatChangedEventFilter;
  };

  estimateGas: {
    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealmContexts(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealmContexts(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRealm(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerRealm(string,bool,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRealmStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRealmStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRealmUpgradeStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRealmUpgradeStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealmContexts(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealmContexts(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRealm(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerRealm(string,bool,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRealmStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRealmStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRealmUpgradeStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRealmUpgradeStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
