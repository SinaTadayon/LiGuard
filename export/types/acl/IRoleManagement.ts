/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IRoleManagementInterface extends utils.Interface {
  functions: {
    "addRole(string,string,bool)": FunctionFragment;
    "getRole(bytes32)": FunctionFragment;
    "getRoleContextes(bytes32)": FunctionFragment;
    "getRoleUsers(bytes32)": FunctionFragment;
    "grantRoleAccount(bytes32,address)": FunctionFragment;
    "hasAccountRole(bytes32,address)": FunctionFragment;
    "revokeRoleAccount(bytes32,address)": FunctionFragment;
    "setDisabledRole(bytes32)": FunctionFragment;
    "setEnabledRole(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRole"
      | "addRole(string,string,bool)"
      | "getRole"
      | "getRole(bytes32)"
      | "getRoleContextes"
      | "getRoleContextes(bytes32)"
      | "getRoleUsers"
      | "getRoleUsers(bytes32)"
      | "grantRoleAccount"
      | "grantRoleAccount(bytes32,address)"
      | "hasAccountRole"
      | "hasAccountRole(bytes32,address)"
      | "revokeRoleAccount"
      | "revokeRoleAccount(bytes32,address)"
      | "setDisabledRole"
      | "setDisabledRole(bytes32)"
      | "setEnabledRole"
      | "setEnabledRole(bytes32)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRole(string,string,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleContextes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleContextes(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleUsers",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleUsers(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoleAccount",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoleAccount(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccountRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccountRole(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoleAccount",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoleAccount(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisabledRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisabledRole(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnabledRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnabledRole(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "addRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRole(string,string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRole(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleContextes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleContextes(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleUsers(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRoleAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRoleAccount(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccountRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccountRole(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoleAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoleAccount(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisabledRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisabledRole(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnabledRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnabledRole(bytes32)",
    data: BytesLike
  ): Result;

  events: {
    "RoleAccountGranted(bytes32,address,address,bytes32)": EventFragment;
    "RoleAccountRevoked(bytes32,address,address,bytes32)": EventFragment;
    "RoleDisabled(bytes32,address,bytes32)": EventFragment;
    "RoleEnabled(bytes32,address,bytes32)": EventFragment;
    "RoleRegistered(bytes32,string,address,bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAccountGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleAccountGranted(bytes32,address,address,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAccountRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleAccountRevoked(bytes32,address,address,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleDisabled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleDisabled(bytes32,address,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleEnabled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleEnabled(bytes32,address,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleRegistered(bytes32,string,address,bytes32,bool)"
  ): EventFragment;
}

export interface RoleAccountGrantedEventObject {
  role: string;
  account: string;
  sender: string;
  group: string;
}
export type RoleAccountGrantedEvent = TypedEvent<
  [string, string, string, string],
  RoleAccountGrantedEventObject
>;

export type RoleAccountGrantedEventFilter =
  TypedEventFilter<RoleAccountGrantedEvent>;

export interface RoleAccountRevokedEventObject {
  role: string;
  account: string;
  sender: string;
  group: string;
}
export type RoleAccountRevokedEvent = TypedEvent<
  [string, string, string, string],
  RoleAccountRevokedEventObject
>;

export type RoleAccountRevokedEventFilter =
  TypedEventFilter<RoleAccountRevokedEvent>;

export interface RoleDisabledEventObject {
  role: string;
  sender: string;
  group: string;
}
export type RoleDisabledEvent = TypedEvent<
  [string, string, string],
  RoleDisabledEventObject
>;

export type RoleDisabledEventFilter = TypedEventFilter<RoleDisabledEvent>;

export interface RoleEnabledEventObject {
  role: string;
  sender: string;
  group: string;
}
export type RoleEnabledEvent = TypedEvent<
  [string, string, string],
  RoleEnabledEventObject
>;

export type RoleEnabledEventFilter = TypedEventFilter<RoleEnabledEvent>;

export interface RoleRegisteredEventObject {
  role: string;
  name: string;
  sender: string;
  group: string;
  isEnabled: boolean;
}
export type RoleRegisteredEvent = TypedEvent<
  [string, string, string, string, boolean],
  RoleRegisteredEventObject
>;

export type RoleRegisteredEventFilter = TypedEventFilter<RoleRegisteredEvent>;

export interface IRoleManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRoleManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addRole(string,string,bool)"(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    "getRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getRoleContextes(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getRoleContextes(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRoleUsers(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getRoleUsers(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "grantRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasAccountRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setDisabledRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEnabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setEnabledRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addRole(
    name: PromiseOrValue<string>,
    group: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addRole(string,string,bool)"(
    name: PromiseOrValue<string>,
    group: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRole(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, boolean]>;

  "getRole(bytes32)"(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, boolean]>;

  getRoleContextes(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getRoleContextes(bytes32)"(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoleUsers(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getRoleUsers(bytes32)"(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantRoleAccount(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "grantRoleAccount(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasAccountRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasAccountRole(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRoleAccount(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeRoleAccount(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisabledRole(
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setDisabledRole(bytes32)"(
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEnabledRole(
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setEnabledRole(bytes32)"(
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "addRole(string,string,bool)"(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    "getRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getRoleContextes(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getRoleContextes(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoleUsers(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getRoleUsers(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "grantRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasAccountRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "revokeRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDisabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setDisabledRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setEnabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setEnabledRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RoleAccountGranted(bytes32,address,address,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null
    ): RoleAccountGrantedEventFilter;
    RoleAccountGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null
    ): RoleAccountGrantedEventFilter;

    "RoleAccountRevoked(bytes32,address,address,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null
    ): RoleAccountRevokedEventFilter;
    RoleAccountRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null
    ): RoleAccountRevokedEventFilter;

    "RoleDisabled(bytes32,address,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null
    ): RoleDisabledEventFilter;
    RoleDisabled(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null
    ): RoleDisabledEventFilter;

    "RoleEnabled(bytes32,address,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null
    ): RoleEnabledEventFilter;
    RoleEnabled(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null
    ): RoleEnabledEventFilter;

    "RoleRegistered(bytes32,string,address,bytes32,bool)"(
      role?: PromiseOrValue<BytesLike> | null,
      name?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null,
      isEnabled?: null
    ): RoleRegisteredEventFilter;
    RoleRegistered(
      role?: PromiseOrValue<BytesLike> | null,
      name?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null,
      isEnabled?: null
    ): RoleRegisteredEventFilter;
  };

  estimateGas: {
    addRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addRole(string,string,bool)"(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleContextes(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleContextes(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleUsers(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleUsers(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "grantRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasAccountRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setDisabledRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEnabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setEnabledRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addRole(string,string,bool)"(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleContextes(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleContextes(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleUsers(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleUsers(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "grantRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAccountRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setDisabledRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEnabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setEnabledRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
