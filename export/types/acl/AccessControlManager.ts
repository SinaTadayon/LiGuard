/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IContextManagement {
  export type RequestContextStruct = {
    realm: PromiseOrValue<BytesLike>;
    smca: PromiseOrValue<string>;
  };

  export type RequestContextStructOutput = [string, string] & {
    realm: string;
    smca: string;
  };

  export type RequestContextResourceStruct = {
    role: PromiseOrValue<BytesLike>;
    funcSelectors: PromiseOrValue<BytesLike>[];
  };

  export type RequestContextResourceStructOutput = [string, string[]] & {
    role: string;
    funcSelectors: string[];
  };
}

export interface AccessControlManagerInterface extends utils.Interface {
  functions: {
    "LIVELY_ADMIN_ROLE()": FunctionFragment;
    "LIVELY_GENERAL_GROUP()": FunctionFragment;
    "LIVELY_GENERAL_REALM()": FunctionFragment;
    "LIVELY_SYSTEM_ADMIN_ROLE()": FunctionFragment;
    "addGroup(string,bool)": FunctionFragment;
    "addRealm(string,bool)": FunctionFragment;
    "addRole(string,string,bool)": FunctionFragment;
    "contractContext()": FunctionFragment;
    "contractName()": FunctionFragment;
    "contractRealm()": FunctionFragment;
    "contractRegisteration()": FunctionFragment;
    "contractVersion()": FunctionFragment;
    "disableContext(bytes32)": FunctionFragment;
    "disabledGroup(bytes32)": FunctionFragment;
    "disabledRealm(bytes32)": FunctionFragment;
    "enableContext(bytes32)": FunctionFragment;
    "enableUpgradeContext(bytes32)": FunctionFragment;
    "enableUpgradeRealm(bytes32)": FunctionFragment;
    "enabledGroup(bytes32)": FunctionFragment;
    "enabledRealm(bytes32)": FunctionFragment;
    "getAccessControl()": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getContext(bytes32)": FunctionFragment;
    "getContextFuncs(bytes32)": FunctionFragment;
    "getGroup(bytes32)": FunctionFragment;
    "getGroupRoles(bytes32)": FunctionFragment;
    "getInitializedCount()": FunctionFragment;
    "getRealm(bytes32)": FunctionFragment;
    "getRealmContextes(bytes32)": FunctionFragment;
    "getRole(bytes32)": FunctionFragment;
    "getRoleContextes(bytes32)": FunctionFragment;
    "getRoleUsers(bytes32)": FunctionFragment;
    "grantContextRole(bytes32,bytes4,bytes32)": FunctionFragment;
    "grantGroupRole(bytes32,bytes32)": FunctionFragment;
    "grantRealmContext(bytes32,bytes32)": FunctionFragment;
    "grantRoleAccount(bytes32,address)": FunctionFragment;
    "hasAccess(bytes32,address,bytes4)": FunctionFragment;
    "hasAccountRole(bytes32,address)": FunctionFragment;
    "hasContextRole(bytes32,bytes32,bytes4)": FunctionFragment;
    "hasGroupRole(bytes32,bytes32)": FunctionFragment;
    "hasLivelyAdminRole(address)": FunctionFragment;
    "hasLivelyGroup(bytes32)": FunctionFragment;
    "hasLivelyRealm(bytes32)": FunctionFragment;
    "hasRealmContext(bytes32,bytes32)": FunctionFragment;
    "hasSystemAdminRole(address)": FunctionFragment;
    "initialize(string,string,string,address)": FunctionFragment;
    "isActivated()": FunctionFragment;
    "isEnabled(bytes32)": FunctionFragment;
    "isInitializing()": FunctionFragment;
    "isUpgradable()": FunctionFragment;
    "isUpgradeEnabled(bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerContext((bytes32,address),(bytes32,bytes4[])[])": FunctionFragment;
    "revokeContextRole(bytes32,bytes4,bytes32)": FunctionFragment;
    "revokeGroupRole(bytes32,bytes32)": FunctionFragment;
    "revokeRealmContext(bytes32,bytes32)": FunctionFragment;
    "revokeRoleAccount(bytes32,address)": FunctionFragment;
    "setActivity(bool)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setDisabledRole(bytes32)": FunctionFragment;
    "setEnabledRole(bytes32)": FunctionFragment;
    "setUpgradability(bool)": FunctionFragment;
    "subjectAddress()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateContext((bytes32,address),(bytes32,bytes4[])[])": FunctionFragment;
    "upgradeTo(address,bytes,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LIVELY_ADMIN_ROLE"
      | "LIVELY_GENERAL_GROUP"
      | "LIVELY_GENERAL_REALM"
      | "LIVELY_SYSTEM_ADMIN_ROLE"
      | "addGroup"
      | "addRealm"
      | "addRole"
      | "contractContext"
      | "contractName"
      | "contractRealm"
      | "contractRegisteration"
      | "contractVersion"
      | "disableContext"
      | "disabledGroup"
      | "disabledRealm"
      | "enableContext"
      | "enableUpgradeContext"
      | "enableUpgradeRealm"
      | "enabledGroup"
      | "enabledRealm"
      | "getAccessControl"
      | "getAdmin"
      | "getContext"
      | "getContextFuncs"
      | "getGroup"
      | "getGroupRoles"
      | "getInitializedCount"
      | "getRealm"
      | "getRealmContextes"
      | "getRole"
      | "getRoleContextes"
      | "getRoleUsers"
      | "grantContextRole"
      | "grantGroupRole"
      | "grantRealmContext"
      | "grantRoleAccount"
      | "hasAccess"
      | "hasAccountRole"
      | "hasContextRole"
      | "hasGroupRole"
      | "hasLivelyAdminRole"
      | "hasLivelyGroup"
      | "hasLivelyRealm"
      | "hasRealmContext"
      | "hasSystemAdminRole"
      | "initialize"
      | "isActivated"
      | "isEnabled"
      | "isInitializing"
      | "isUpgradable"
      | "isUpgradeEnabled"
      | "proxiableUUID"
      | "registerContext"
      | "revokeContextRole"
      | "revokeGroupRole"
      | "revokeRealmContext"
      | "revokeRoleAccount"
      | "setActivity"
      | "setAdmin"
      | "setDisabledRole"
      | "setEnabledRole"
      | "setUpgradability"
      | "subjectAddress"
      | "supportsInterface"
      | "updateContext"
      | "upgradeTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LIVELY_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_GENERAL_GROUP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_GENERAL_REALM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_SYSTEM_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addGroup",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRealm",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contractContext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractRealm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractRegisteration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableContext",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "disabledGroup",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "disabledRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableContext",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableUpgradeContext",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableUpgradeRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledGroup",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContext",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContextFuncs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroup",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupRoles",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealmContextes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleContextes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleUsers",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantContextRole",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantGroupRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRealmContext",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoleAccount",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccountRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasContextRole",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGroupRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLivelyAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLivelyGroup",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLivelyRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRealmContext",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSystemAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isActivated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEnabled",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitializing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUpgradable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUpgradeEnabled",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerContext",
    values: [
      IContextManagement.RequestContextStruct,
      IContextManagement.RequestContextResourceStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeContextRole",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeGroupRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRealmContext",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoleAccount",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setActivity",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisabledRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnabledRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradability",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "subjectAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContext",
    values: [
      IContextManagement.RequestContextStruct,
      IContextManagement.RequestContextResourceStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "LIVELY_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_GENERAL_GROUP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_GENERAL_REALM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_SYSTEM_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addGroup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRealm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRegisteration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disabledGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disabledRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUpgradeContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUpgradeRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getContext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContextFuncs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGroup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGroupRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRealm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRealmContextes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleContextes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantContextRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantGroupRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRealmContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRoleAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAccountRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasContextRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGroupRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLivelyAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLivelyGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLivelyRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRealmContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSystemAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEnabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitializing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUpgradable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUpgradeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeContextRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeGroupRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRealmContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoleAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDisabledRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnabledRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;

  events: {
    "ActivityChanged(address,address,bytes32,bool)": EventFragment;
    "AdminChanged(address,address,address)": EventFragment;
    "ContextRegistered(bytes32,address,address,bytes32)": EventFragment;
    "ContextRoleGranted(bytes32,bytes32,address,bytes4,bytes32)": EventFragment;
    "ContextRoleRevoked(bytes32,bytes32,address,bytes4,bytes32)": EventFragment;
    "ContextUpdated(bytes32,address,address)": EventFragment;
    "GroupDisabled(bytes32,address)": EventFragment;
    "GroupEnabled(bytes32,address)": EventFragment;
    "GroupRegistered(bytes32,address,string,bool)": EventFragment;
    "GroupRoleGranted(bytes32,bytes32,address)": EventFragment;
    "GroupRoleRevoked(bytes32,bytes32,address)": EventFragment;
    "Initialized(address,address,address,string,string,bytes32,uint16)": EventFragment;
    "RealmContextGranted(bytes32,bytes32,address)": EventFragment;
    "RealmDisabled(bytes32,address)": EventFragment;
    "RealmEnabled(bytes32,address)": EventFragment;
    "RealmRegistered(bytes32,address,string,bool)": EventFragment;
    "RealmRoleRevoked(bytes32,bytes32,address)": EventFragment;
    "RealmUpgradeEnabled(bytes32,address)": EventFragment;
    "RoleAccountGranted(bytes32,address,address,bytes32)": EventFragment;
    "RoleAccountRevoked(bytes32,address,address,bytes32)": EventFragment;
    "RoleDisabled(bytes32,address,bytes32)": EventFragment;
    "RoleEnabled(bytes32,address,bytes32)": EventFragment;
    "RoleRegistered(bytes32,string,address,bytes32,bool)": EventFragment;
    "UpgradabilityChanged(address,address,bytes32,bool)": EventFragment;
    "Upgraded(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextRoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupRoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmContextGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmRoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmUpgradeEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAccountGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAccountRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradabilityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface ActivityChangedEventObject {
  sender: string;
  proxy: string;
  realm: string;
  value: boolean;
}
export type ActivityChangedEvent = TypedEvent<
  [string, string, string, boolean],
  ActivityChangedEventObject
>;

export type ActivityChangedEventFilter = TypedEventFilter<ActivityChangedEvent>;

export interface AdminChangedEventObject {
  sender: string;
  proxy: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ContextRegisteredEventObject {
  context: string;
  scma: string;
  sender: string;
  realm: string;
}
export type ContextRegisteredEvent = TypedEvent<
  [string, string, string, string],
  ContextRegisteredEventObject
>;

export type ContextRegisteredEventFilter =
  TypedEventFilter<ContextRegisteredEvent>;

export interface ContextRoleGrantedEventObject {
  context: string;
  role: string;
  sender: string;
  functionSelector: string;
  realm: string;
}
export type ContextRoleGrantedEvent = TypedEvent<
  [string, string, string, string, string],
  ContextRoleGrantedEventObject
>;

export type ContextRoleGrantedEventFilter =
  TypedEventFilter<ContextRoleGrantedEvent>;

export interface ContextRoleRevokedEventObject {
  context: string;
  role: string;
  sender: string;
  functionSelector: string;
  realm: string;
}
export type ContextRoleRevokedEvent = TypedEvent<
  [string, string, string, string, string],
  ContextRoleRevokedEventObject
>;

export type ContextRoleRevokedEventFilter =
  TypedEventFilter<ContextRoleRevokedEvent>;

export interface ContextUpdatedEventObject {
  context: string;
  scma: string;
  sender: string;
}
export type ContextUpdatedEvent = TypedEvent<
  [string, string, string],
  ContextUpdatedEventObject
>;

export type ContextUpdatedEventFilter = TypedEventFilter<ContextUpdatedEvent>;

export interface GroupDisabledEventObject {
  group: string;
  sender: string;
}
export type GroupDisabledEvent = TypedEvent<
  [string, string],
  GroupDisabledEventObject
>;

export type GroupDisabledEventFilter = TypedEventFilter<GroupDisabledEvent>;

export interface GroupEnabledEventObject {
  group: string;
  sender: string;
}
export type GroupEnabledEvent = TypedEvent<
  [string, string],
  GroupEnabledEventObject
>;

export type GroupEnabledEventFilter = TypedEventFilter<GroupEnabledEvent>;

export interface GroupRegisteredEventObject {
  group: string;
  sender: string;
  name: string;
  isEnabled: boolean;
}
export type GroupRegisteredEvent = TypedEvent<
  [string, string, string, boolean],
  GroupRegisteredEventObject
>;

export type GroupRegisteredEventFilter = TypedEventFilter<GroupRegisteredEvent>;

export interface GroupRoleGrantedEventObject {
  group: string;
  role: string;
  sender: string;
}
export type GroupRoleGrantedEvent = TypedEvent<
  [string, string, string],
  GroupRoleGrantedEventObject
>;

export type GroupRoleGrantedEventFilter =
  TypedEventFilter<GroupRoleGrantedEvent>;

export interface GroupRoleRevokedEventObject {
  group: string;
  role: string;
  sender: string;
}
export type GroupRoleRevokedEvent = TypedEvent<
  [string, string, string],
  GroupRoleRevokedEventObject
>;

export type GroupRoleRevokedEventFilter =
  TypedEventFilter<GroupRoleRevokedEvent>;

export interface InitializedEventObject {
  sender: string;
  proxy: string;
  subject: string;
  name: string;
  version: string;
  realm: string;
  initializedCount: number;
}
export type InitializedEvent = TypedEvent<
  [string, string, string, string, string, string, number],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RealmContextGrantedEventObject {
  realm: string;
  context: string;
  sender: string;
}
export type RealmContextGrantedEvent = TypedEvent<
  [string, string, string],
  RealmContextGrantedEventObject
>;

export type RealmContextGrantedEventFilter =
  TypedEventFilter<RealmContextGrantedEvent>;

export interface RealmDisabledEventObject {
  realm: string;
  sender: string;
}
export type RealmDisabledEvent = TypedEvent<
  [string, string],
  RealmDisabledEventObject
>;

export type RealmDisabledEventFilter = TypedEventFilter<RealmDisabledEvent>;

export interface RealmEnabledEventObject {
  realm: string;
  sender: string;
}
export type RealmEnabledEvent = TypedEvent<
  [string, string],
  RealmEnabledEventObject
>;

export type RealmEnabledEventFilter = TypedEventFilter<RealmEnabledEvent>;

export interface RealmRegisteredEventObject {
  realm: string;
  sender: string;
  name: string;
  isEnabled: boolean;
}
export type RealmRegisteredEvent = TypedEvent<
  [string, string, string, boolean],
  RealmRegisteredEventObject
>;

export type RealmRegisteredEventFilter = TypedEventFilter<RealmRegisteredEvent>;

export interface RealmRoleRevokedEventObject {
  realm: string;
  context: string;
  sender: string;
}
export type RealmRoleRevokedEvent = TypedEvent<
  [string, string, string],
  RealmRoleRevokedEventObject
>;

export type RealmRoleRevokedEventFilter =
  TypedEventFilter<RealmRoleRevokedEvent>;

export interface RealmUpgradeEnabledEventObject {
  realm: string;
  sender: string;
}
export type RealmUpgradeEnabledEvent = TypedEvent<
  [string, string],
  RealmUpgradeEnabledEventObject
>;

export type RealmUpgradeEnabledEventFilter =
  TypedEventFilter<RealmUpgradeEnabledEvent>;

export interface RoleAccountGrantedEventObject {
  role: string;
  account: string;
  sender: string;
  group: string;
}
export type RoleAccountGrantedEvent = TypedEvent<
  [string, string, string, string],
  RoleAccountGrantedEventObject
>;

export type RoleAccountGrantedEventFilter =
  TypedEventFilter<RoleAccountGrantedEvent>;

export interface RoleAccountRevokedEventObject {
  role: string;
  account: string;
  sender: string;
  group: string;
}
export type RoleAccountRevokedEvent = TypedEvent<
  [string, string, string, string],
  RoleAccountRevokedEventObject
>;

export type RoleAccountRevokedEventFilter =
  TypedEventFilter<RoleAccountRevokedEvent>;

export interface RoleDisabledEventObject {
  role: string;
  sender: string;
  group: string;
}
export type RoleDisabledEvent = TypedEvent<
  [string, string, string],
  RoleDisabledEventObject
>;

export type RoleDisabledEventFilter = TypedEventFilter<RoleDisabledEvent>;

export interface RoleEnabledEventObject {
  role: string;
  sender: string;
  group: string;
}
export type RoleEnabledEvent = TypedEvent<
  [string, string, string],
  RoleEnabledEventObject
>;

export type RoleEnabledEventFilter = TypedEventFilter<RoleEnabledEvent>;

export interface RoleRegisteredEventObject {
  role: string;
  name: string;
  sender: string;
  group: string;
  isEnabled: boolean;
}
export type RoleRegisteredEvent = TypedEvent<
  [string, string, string, string, boolean],
  RoleRegisteredEventObject
>;

export type RoleRegisteredEventFilter = TypedEventFilter<RoleRegisteredEvent>;

export interface UpgradabilityChangedEventObject {
  sender: string;
  proxy: string;
  realm: string;
  value: boolean;
}
export type UpgradabilityChangedEvent = TypedEvent<
  [string, string, string, boolean],
  UpgradabilityChangedEventObject
>;

export type UpgradabilityChangedEventFilter =
  TypedEventFilter<UpgradabilityChangedEvent>;

export interface UpgradedEventObject {
  sender: string;
  proxy: string;
  newImplementation: string;
}
export type UpgradedEvent = TypedEvent<
  [string, string, string],
  UpgradedEventObject
>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AccessControlManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccessControlManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LIVELY_GENERAL_GROUP(overrides?: CallOverrides): Promise<[string]>;

    LIVELY_GENERAL_REALM(overrides?: CallOverrides): Promise<[string]>;

    LIVELY_SYSTEM_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addGroup(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRealm(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractContext(overrides?: CallOverrides): Promise<[string]>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    contractRealm(overrides?: CallOverrides): Promise<[string]>;

    contractRegisteration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<[string]>;

    disableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableUpgradeContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableUpgradeRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccessControl(overrides?: CallOverrides): Promise<[string]>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    getContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, string, boolean]>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getInitializedCount(overrides?: CallOverrides): Promise<[number]>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getRealmContextes(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getRoleContextes(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRoleUsers(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasAccess(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasLivelyAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasLivelyGroup(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasLivelyRealm(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSystemAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isActivated(overrides?: CallOverrides): Promise<[boolean]>;

    isEnabled(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitializing(overrides?: CallOverrides): Promise<[boolean]>;

    isUpgradable(overrides?: CallOverrides): Promise<[boolean]>;

    isUpgradeEnabled(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registerContext(
      rc: IContextManagement.RequestContextStruct,
      rcr: IContextManagement.RequestContextResourceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setActivity(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEnabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpgradability(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subjectAddress(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateContext(
      rc: IContextManagement.RequestContextStruct,
      rcr: IContextManagement.RequestContextResourceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  LIVELY_GENERAL_GROUP(overrides?: CallOverrides): Promise<string>;

  LIVELY_GENERAL_REALM(overrides?: CallOverrides): Promise<string>;

  LIVELY_SYSTEM_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addGroup(
    name: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRealm(
    name: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRole(
    name: PromiseOrValue<string>,
    group: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractContext(overrides?: CallOverrides): Promise<string>;

  contractName(overrides?: CallOverrides): Promise<string>;

  contractRealm(overrides?: CallOverrides): Promise<string>;

  contractRegisteration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractVersion(overrides?: CallOverrides): Promise<string>;

  disableContext(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disabledGroup(
    group: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disabledRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableContext(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableUpgradeContext(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableUpgradeRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enabledGroup(
    group: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enabledRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccessControl(overrides?: CallOverrides): Promise<string>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getContext(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, string, boolean]>;

  getContextFuncs(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getGroup(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  getGroupRoles(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getInitializedCount(overrides?: CallOverrides): Promise<number>;

  getRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  getRealmContextes(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRole(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, boolean]>;

  getRoleContextes(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRoleUsers(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantContextRole(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantGroupRole(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRealmContext(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRoleAccount(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasAccess(
    context: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAccountRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasContextRole(
    ctx: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasGroupRole(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasLivelyAdminRole(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasLivelyGroup(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasLivelyRealm(
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRealmContext(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSystemAdminRole(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    domainName: PromiseOrValue<string>,
    domainVersion: PromiseOrValue<string>,
    domainRealm: PromiseOrValue<string>,
    accessControlManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isActivated(overrides?: CallOverrides): Promise<boolean>;

  isEnabled(
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitializing(overrides?: CallOverrides): Promise<boolean>;

  isUpgradable(overrides?: CallOverrides): Promise<boolean>;

  isUpgradeEnabled(
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registerContext(
    rc: IContextManagement.RequestContextStruct,
    rcr: IContextManagement.RequestContextResourceStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeContextRole(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeGroupRole(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRealmContext(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRoleAccount(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setActivity(
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisabledRole(
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEnabledRole(
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpgradability(
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subjectAddress(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateContext(
    rc: IContextManagement.RequestContextStruct,
    rcr: IContextManagement.RequestContextResourceStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    forceCall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    LIVELY_GENERAL_GROUP(overrides?: CallOverrides): Promise<string>;

    LIVELY_GENERAL_REALM(overrides?: CallOverrides): Promise<string>;

    LIVELY_SYSTEM_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addGroup(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    addRealm(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    addRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    contractContext(overrides?: CallOverrides): Promise<string>;

    contractName(overrides?: CallOverrides): Promise<string>;

    contractRealm(overrides?: CallOverrides): Promise<string>;

    contractRegisteration(overrides?: CallOverrides): Promise<boolean>;

    contractVersion(overrides?: CallOverrides): Promise<string>;

    disableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableUpgradeContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableUpgradeRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAccessControl(overrides?: CallOverrides): Promise<string>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, string, boolean]>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getInitializedCount(overrides?: CallOverrides): Promise<number>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getRealmContextes(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getRoleContextes(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoleUsers(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    grantGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    grantRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAccess(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasLivelyAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasLivelyGroup(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasLivelyRealm(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSystemAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isActivated(overrides?: CallOverrides): Promise<boolean>;

    isEnabled(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitializing(overrides?: CallOverrides): Promise<boolean>;

    isUpgradable(overrides?: CallOverrides): Promise<boolean>;

    isUpgradeEnabled(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registerContext(
      rc: IContextManagement.RequestContextStruct,
      rcr: IContextManagement.RequestContextResourceStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setActivity(
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDisabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setEnabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUpgradability(
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    subjectAddress(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateContext(
      rc: IContextManagement.RequestContextStruct,
      rcr: IContextManagement.RequestContextResourceStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ActivityChanged(address,address,bytes32,bool)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      realm?: PromiseOrValue<BytesLike> | null,
      value?: null
    ): ActivityChangedEventFilter;
    ActivityChanged(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      realm?: PromiseOrValue<BytesLike> | null,
      value?: null
    ): ActivityChangedEventFilter;

    "AdminChanged(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "ContextRegistered(bytes32,address,address,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextRegisteredEventFilter;
    ContextRegistered(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextRegisteredEventFilter;

    "ContextRoleGranted(bytes32,bytes32,address,bytes4,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleGrantedEventFilter;
    ContextRoleGranted(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleGrantedEventFilter;

    "ContextRoleRevoked(bytes32,bytes32,address,bytes4,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleRevokedEventFilter;
    ContextRoleRevoked(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleRevokedEventFilter;

    "ContextUpdated(bytes32,address,address)"(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ContextUpdatedEventFilter;
    ContextUpdated(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ContextUpdatedEventFilter;

    "GroupDisabled(bytes32,address)"(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupDisabledEventFilter;
    GroupDisabled(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupDisabledEventFilter;

    "GroupEnabled(bytes32,address)"(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupEnabledEventFilter;
    GroupEnabled(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupEnabledEventFilter;

    "GroupRegistered(bytes32,address,string,bool)"(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      isEnabled?: null
    ): GroupRegisteredEventFilter;
    GroupRegistered(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      isEnabled?: null
    ): GroupRegisteredEventFilter;

    "GroupRoleGranted(bytes32,bytes32,address)"(
      group?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupRoleGrantedEventFilter;
    GroupRoleGranted(
      group?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupRoleGrantedEventFilter;

    "GroupRoleRevoked(bytes32,bytes32,address)"(
      group?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupRoleRevokedEventFilter;
    GroupRoleRevoked(
      group?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupRoleRevokedEventFilter;

    "Initialized(address,address,address,string,string,bytes32,uint16)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      subject?: PromiseOrValue<string> | null,
      name?: null,
      version?: null,
      realm?: null,
      initializedCount?: null
    ): InitializedEventFilter;
    Initialized(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      subject?: PromiseOrValue<string> | null,
      name?: null,
      version?: null,
      realm?: null,
      initializedCount?: null
    ): InitializedEventFilter;

    "RealmContextGranted(bytes32,bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmContextGrantedEventFilter;
    RealmContextGranted(
      realm?: PromiseOrValue<BytesLike> | null,
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmContextGrantedEventFilter;

    "RealmDisabled(bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmDisabledEventFilter;
    RealmDisabled(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmDisabledEventFilter;

    "RealmEnabled(bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmEnabledEventFilter;
    RealmEnabled(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmEnabledEventFilter;

    "RealmRegistered(bytes32,address,string,bool)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      isEnabled?: null
    ): RealmRegisteredEventFilter;
    RealmRegistered(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      isEnabled?: null
    ): RealmRegisteredEventFilter;

    "RealmRoleRevoked(bytes32,bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmRoleRevokedEventFilter;
    RealmRoleRevoked(
      realm?: PromiseOrValue<BytesLike> | null,
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmRoleRevokedEventFilter;

    "RealmUpgradeEnabled(bytes32,address)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmUpgradeEnabledEventFilter;
    RealmUpgradeEnabled(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): RealmUpgradeEnabledEventFilter;

    "RoleAccountGranted(bytes32,address,address,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null
    ): RoleAccountGrantedEventFilter;
    RoleAccountGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null
    ): RoleAccountGrantedEventFilter;

    "RoleAccountRevoked(bytes32,address,address,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null
    ): RoleAccountRevokedEventFilter;
    RoleAccountRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null
    ): RoleAccountRevokedEventFilter;

    "RoleDisabled(bytes32,address,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null
    ): RoleDisabledEventFilter;
    RoleDisabled(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null
    ): RoleDisabledEventFilter;

    "RoleEnabled(bytes32,address,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null
    ): RoleEnabledEventFilter;
    RoleEnabled(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null
    ): RoleEnabledEventFilter;

    "RoleRegistered(bytes32,string,address,bytes32,bool)"(
      role?: PromiseOrValue<BytesLike> | null,
      name?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null,
      isEnabled?: null
    ): RoleRegisteredEventFilter;
    RoleRegistered(
      role?: PromiseOrValue<BytesLike> | null,
      name?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null,
      isEnabled?: null
    ): RoleRegisteredEventFilter;

    "UpgradabilityChanged(address,address,bytes32,bool)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      realm?: PromiseOrValue<BytesLike> | null,
      value?: null
    ): UpgradabilityChangedEventFilter;
    UpgradabilityChanged(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      realm?: PromiseOrValue<BytesLike> | null,
      value?: null
    ): UpgradabilityChangedEventFilter;

    "Upgraded(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LIVELY_GENERAL_GROUP(overrides?: CallOverrides): Promise<BigNumber>;

    LIVELY_GENERAL_REALM(overrides?: CallOverrides): Promise<BigNumber>;

    LIVELY_SYSTEM_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addGroup(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRealm(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractContext(overrides?: CallOverrides): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    contractRealm(overrides?: CallOverrides): Promise<BigNumber>;

    contractRegisteration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    disableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableUpgradeContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableUpgradeRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccessControl(overrides?: CallOverrides): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitializedCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealmContextes(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleContextes(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleUsers(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasAccess(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLivelyAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLivelyGroup(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLivelyRealm(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSystemAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isActivated(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabled(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitializing(overrides?: CallOverrides): Promise<BigNumber>;

    isUpgradable(overrides?: CallOverrides): Promise<BigNumber>;

    isUpgradeEnabled(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registerContext(
      rc: IContextManagement.RequestContextStruct,
      rcr: IContextManagement.RequestContextResourceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setActivity(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEnabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpgradability(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subjectAddress(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateContext(
      rc: IContextManagement.RequestContextStruct,
      rcr: IContextManagement.RequestContextResourceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIVELY_GENERAL_GROUP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_GENERAL_REALM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_SYSTEM_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addGroup(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRealm(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRealm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRegisteration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableUpgradeContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableUpgradeRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enabledRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccessControl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContext(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitializedCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealmContextes(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleContextes(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleUsers(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasAccess(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasLivelyAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasLivelyGroup(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasLivelyRealm(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSystemAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isActivated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEnabled(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitializing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUpgradable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUpgradeEnabled(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerContext(
      rc: IContextManagement.RequestContextStruct,
      rcr: IContextManagement.RequestContextResourceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setActivity(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEnabledRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpgradability(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subjectAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateContext(
      rc: IContextManagement.RequestContextStruct,
      rcr: IContextManagement.RequestContextResourceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
