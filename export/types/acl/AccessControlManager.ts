/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IContextManagement {
  export type ResponseContextStruct = {
    name: PromiseOrValue<string>;
    version: PromiseOrValue<string>;
    smca: PromiseOrValue<string>;
    realm: PromiseOrValue<BytesLike>;
    isSafeMode: PromiseOrValue<boolean>;
    isUpgradable: PromiseOrValue<boolean>;
  };

  export type ResponseContextStructOutput = [
    string,
    string,
    string,
    string,
    boolean,
    boolean
  ] & {
    name: string;
    version: string;
    smca: string;
    realm: string;
    isSafeMode: boolean;
    isUpgradable: boolean;
  };

  export type RequestContextStruct = {
    role: PromiseOrValue<BytesLike>;
    funcSelectors: PromiseOrValue<BytesLike>[];
    isEnabled: PromiseOrValue<boolean>;
  };

  export type RequestContextStructOutput = [string, string[], boolean] & {
    role: string;
    funcSelectors: string[];
    isEnabled: boolean;
  };
}

export interface AccessControlManagerInterface extends utils.Interface {
  functions: {
    "ACCESS_CONTROL_NAME()": FunctionFragment;
    "ACCESS_CONTROL_VERSION()": FunctionFragment;
    "ANONYMOUSE_ROLE()": FunctionFragment;
    "CONTEXT_MANAGEMENT_NAME()": FunctionFragment;
    "CONTEXT_MANAGEMENT_VERSION()": FunctionFragment;
    "GROUP_MANAGEMENT_NAME()": FunctionFragment;
    "GROUP_MANAGEMENT_VERSION()": FunctionFragment;
    "LIVELY_ADMIN_ROLE()": FunctionFragment;
    "LIVELY_GENERAL_GROUP()": FunctionFragment;
    "LIVELY_GENERAL_REALM()": FunctionFragment;
    "LIVELY_SYSTEM_ADMIN_ROLE()": FunctionFragment;
    "REALM_MANAGEMENT_NAME()": FunctionFragment;
    "REALM_MANAGEMENT_VERSION()": FunctionFragment;
    "ROLE_MANAGEMENT_NAME()": FunctionFragment;
    "ROLE_MANAGEMENT_VERSION()": FunctionFragment;
    "contractContext()": FunctionFragment;
    "contractName()": FunctionFragment;
    "contractRealm()": FunctionFragment;
    "contractRegisteration()": FunctionFragment;
    "contractVersion()": FunctionFragment;
    "getAccessControlManager()": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getContextFuncs(bytes32)": FunctionFragment;
    "getContextInfo(bytes32)": FunctionFragment;
    "getGroup(bytes32)": FunctionFragment;
    "getGroupRoles(bytes32)": FunctionFragment;
    "getInitializedCount()": FunctionFragment;
    "getRealm(bytes32)": FunctionFragment;
    "getRealmContexts(bytes32)": FunctionFragment;
    "getRole(bytes32)": FunctionFragment;
    "getRoleAccounts(bytes32)": FunctionFragment;
    "grantContextRole(bytes32,bytes4,bytes32)": FunctionFragment;
    "grantRoleAccount(bytes32,address)": FunctionFragment;
    "hasAccess(bytes32,address,bytes4)": FunctionFragment;
    "hasAccountRole(bytes32,address)": FunctionFragment;
    "hasContextRole(bytes32,bytes32,bytes4)": FunctionFragment;
    "hasGroupRole(bytes32,bytes32)": FunctionFragment;
    "hasLivelyAdminRole(address)": FunctionFragment;
    "hasLivelyGroup(bytes32)": FunctionFragment;
    "hasLivelyRealm(bytes32)": FunctionFragment;
    "hasRealmContext(bytes32,bytes32)": FunctionFragment;
    "hasSystemAdminRole(address)": FunctionFragment;
    "initialize(string,string,string,address)": FunctionFragment;
    "isInitializing()": FunctionFragment;
    "isSafeMode(bytes32)": FunctionFragment;
    "isSafeMode()": FunctionFragment;
    "isUpgradable(bytes32)": FunctionFragment;
    "isUpgradable()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])": FunctionFragment;
    "registerGroup(string,bool)": FunctionFragment;
    "registerRealm(string,bool,bool)": FunctionFragment;
    "registerRole(string,bytes32,bool)": FunctionFragment;
    "revokeContextRole(bytes32,bytes4,bytes32)": FunctionFragment;
    "revokeRoleAccount(bytes32,address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setContextRealm(bytes32,bytes32)": FunctionFragment;
    "setContextSafeMode(bytes32,bool)": FunctionFragment;
    "setContextUpgradeState(bytes32,bool)": FunctionFragment;
    "setGroupStat(bytes32,bool)": FunctionFragment;
    "setRealmStat(bytes32,bool)": FunctionFragment;
    "setRealmUpgradeStat(bytes32,bool)": FunctionFragment;
    "setRoleGroup(bytes32,bytes32)": FunctionFragment;
    "setRoleStat(bytes32,bool)": FunctionFragment;
    "setSafeModeState(bool)": FunctionFragment;
    "setUpgradeState(bool)": FunctionFragment;
    "subjectAddress()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateContext(bytes32,(bytes32,bytes4[],bool)[])": FunctionFragment;
    "upgradeTo(address,bytes,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACCESS_CONTROL_NAME"
      | "ACCESS_CONTROL_NAME()"
      | "ACCESS_CONTROL_VERSION"
      | "ACCESS_CONTROL_VERSION()"
      | "ANONYMOUSE_ROLE"
      | "ANONYMOUSE_ROLE()"
      | "CONTEXT_MANAGEMENT_NAME"
      | "CONTEXT_MANAGEMENT_NAME()"
      | "CONTEXT_MANAGEMENT_VERSION"
      | "CONTEXT_MANAGEMENT_VERSION()"
      | "GROUP_MANAGEMENT_NAME"
      | "GROUP_MANAGEMENT_NAME()"
      | "GROUP_MANAGEMENT_VERSION"
      | "GROUP_MANAGEMENT_VERSION()"
      | "LIVELY_ADMIN_ROLE"
      | "LIVELY_ADMIN_ROLE()"
      | "LIVELY_GENERAL_GROUP"
      | "LIVELY_GENERAL_GROUP()"
      | "LIVELY_GENERAL_REALM"
      | "LIVELY_GENERAL_REALM()"
      | "LIVELY_SYSTEM_ADMIN_ROLE"
      | "LIVELY_SYSTEM_ADMIN_ROLE()"
      | "REALM_MANAGEMENT_NAME"
      | "REALM_MANAGEMENT_NAME()"
      | "REALM_MANAGEMENT_VERSION"
      | "REALM_MANAGEMENT_VERSION()"
      | "ROLE_MANAGEMENT_NAME"
      | "ROLE_MANAGEMENT_NAME()"
      | "ROLE_MANAGEMENT_VERSION"
      | "ROLE_MANAGEMENT_VERSION()"
      | "contractContext"
      | "contractContext()"
      | "contractName"
      | "contractName()"
      | "contractRealm"
      | "contractRealm()"
      | "contractRegisteration"
      | "contractRegisteration()"
      | "contractVersion"
      | "contractVersion()"
      | "getAccessControlManager"
      | "getAccessControlManager()"
      | "getAdmin"
      | "getAdmin()"
      | "getContextFuncs"
      | "getContextFuncs(bytes32)"
      | "getContextInfo"
      | "getContextInfo(bytes32)"
      | "getGroup"
      | "getGroup(bytes32)"
      | "getGroupRoles"
      | "getGroupRoles(bytes32)"
      | "getInitializedCount"
      | "getInitializedCount()"
      | "getRealm"
      | "getRealm(bytes32)"
      | "getRealmContexts"
      | "getRealmContexts(bytes32)"
      | "getRole"
      | "getRole(bytes32)"
      | "getRoleAccounts"
      | "getRoleAccounts(bytes32)"
      | "grantContextRole"
      | "grantContextRole(bytes32,bytes4,bytes32)"
      | "grantRoleAccount"
      | "grantRoleAccount(bytes32,address)"
      | "hasAccess"
      | "hasAccess(bytes32,address,bytes4)"
      | "hasAccountRole"
      | "hasAccountRole(bytes32,address)"
      | "hasContextRole"
      | "hasContextRole(bytes32,bytes32,bytes4)"
      | "hasGroupRole"
      | "hasGroupRole(bytes32,bytes32)"
      | "hasLivelyAdminRole"
      | "hasLivelyAdminRole(address)"
      | "hasLivelyGroup"
      | "hasLivelyGroup(bytes32)"
      | "hasLivelyRealm"
      | "hasLivelyRealm(bytes32)"
      | "hasRealmContext"
      | "hasRealmContext(bytes32,bytes32)"
      | "hasSystemAdminRole"
      | "hasSystemAdminRole(address)"
      | "initialize"
      | "initialize(string,string,string,address)"
      | "isInitializing"
      | "isInitializing()"
      | "isSafeMode(bytes32)"
      | "isSafeMode()"
      | "isUpgradable(bytes32)"
      | "isUpgradable()"
      | "proxiableUUID"
      | "proxiableUUID()"
      | "registerContext"
      | "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"
      | "registerGroup"
      | "registerGroup(string,bool)"
      | "registerRealm"
      | "registerRealm(string,bool,bool)"
      | "registerRole"
      | "registerRole(string,bytes32,bool)"
      | "revokeContextRole"
      | "revokeContextRole(bytes32,bytes4,bytes32)"
      | "revokeRoleAccount"
      | "revokeRoleAccount(bytes32,address)"
      | "setAdmin"
      | "setAdmin(address)"
      | "setContextRealm"
      | "setContextRealm(bytes32,bytes32)"
      | "setContextSafeMode"
      | "setContextSafeMode(bytes32,bool)"
      | "setContextUpgradeState"
      | "setContextUpgradeState(bytes32,bool)"
      | "setGroupStat"
      | "setGroupStat(bytes32,bool)"
      | "setRealmStat"
      | "setRealmStat(bytes32,bool)"
      | "setRealmUpgradeStat"
      | "setRealmUpgradeStat(bytes32,bool)"
      | "setRoleGroup"
      | "setRoleGroup(bytes32,bytes32)"
      | "setRoleStat"
      | "setRoleStat(bytes32,bool)"
      | "setSafeModeState"
      | "setSafeModeState(bool)"
      | "setUpgradeState"
      | "setUpgradeState(bool)"
      | "subjectAddress"
      | "subjectAddress()"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "updateContext"
      | "updateContext(bytes32,(bytes32,bytes4[],bool)[])"
      | "upgradeTo"
      | "upgradeTo(address,bytes,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCESS_CONTROL_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACCESS_CONTROL_NAME()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACCESS_CONTROL_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACCESS_CONTROL_VERSION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ANONYMOUSE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ANONYMOUSE_ROLE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTEXT_MANAGEMENT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTEXT_MANAGEMENT_NAME()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTEXT_MANAGEMENT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTEXT_MANAGEMENT_VERSION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GROUP_MANAGEMENT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GROUP_MANAGEMENT_NAME()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GROUP_MANAGEMENT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GROUP_MANAGEMENT_VERSION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_ADMIN_ROLE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_GENERAL_GROUP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_GENERAL_GROUP()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_GENERAL_REALM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_GENERAL_REALM()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_SYSTEM_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIVELY_SYSTEM_ADMIN_ROLE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REALM_MANAGEMENT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REALM_MANAGEMENT_NAME()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REALM_MANAGEMENT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REALM_MANAGEMENT_VERSION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MANAGEMENT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MANAGEMENT_NAME()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MANAGEMENT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MANAGEMENT_VERSION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractContext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractContext()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractName()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractRealm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractRealm()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractRegisteration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractRegisteration()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessControlManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessControlManager()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAdmin()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContextFuncs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContextFuncs(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContextInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContextInfo(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroup",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroup(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupRoles",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupRoles(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializedCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealm(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealmContexts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealmContexts(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAccounts",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAccounts(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantContextRole",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantContextRole(bytes32,bytes4,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoleAccount",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoleAccount(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess(bytes32,address,bytes4)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccountRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccountRole(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasContextRole",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasContextRole(bytes32,bytes32,bytes4)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGroupRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGroupRole(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLivelyAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLivelyAdminRole(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLivelyGroup",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLivelyGroup(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLivelyRealm",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLivelyRealm(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRealmContext",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRealmContext(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSystemAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSystemAdminRole(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(string,string,string,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitializing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitializing()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSafeMode(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSafeMode()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUpgradable(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUpgradable()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerContext",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IContextManagement.RequestContextStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IContextManagement.RequestContextStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerGroup",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerGroup(string,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRealm",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRealm(string,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRole(string,bytes32,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeContextRole",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeContextRole(bytes32,bytes4,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoleAccount",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoleAccount(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContextRealm",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContextRealm(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContextSafeMode",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContextSafeMode(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContextUpgradeState",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContextUpgradeState(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGroupStat",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGroupStat(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmStat",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmStat(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmUpgradeStat",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealmUpgradeStat(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleGroup",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleGroup(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleStat",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleStat(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeModeState",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeModeState(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradeState",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradeState(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "subjectAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subjectAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContext",
    values: [
      PromiseOrValue<BytesLike>,
      IContextManagement.RequestContextStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContext(bytes32,(bytes32,bytes4[],bool)[])",
    values: [
      PromiseOrValue<BytesLike>,
      IContextManagement.RequestContextStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo(address,bytes,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROL_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROL_NAME()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROL_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROL_VERSION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ANONYMOUSE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ANONYMOUSE_ROLE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONTEXT_MANAGEMENT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONTEXT_MANAGEMENT_NAME()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONTEXT_MANAGEMENT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONTEXT_MANAGEMENT_VERSION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GROUP_MANAGEMENT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GROUP_MANAGEMENT_NAME()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GROUP_MANAGEMENT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GROUP_MANAGEMENT_VERSION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_ADMIN_ROLE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_GENERAL_GROUP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_GENERAL_GROUP()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_GENERAL_REALM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_GENERAL_REALM()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_SYSTEM_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIVELY_SYSTEM_ADMIN_ROLE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REALM_MANAGEMENT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REALM_MANAGEMENT_NAME()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REALM_MANAGEMENT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REALM_MANAGEMENT_VERSION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MANAGEMENT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MANAGEMENT_NAME()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MANAGEMENT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MANAGEMENT_VERSION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractContext()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractName()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRealm()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRegisteration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractRegisteration()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessControlManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessControlManager()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmin()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContextFuncs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContextFuncs(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContextInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContextInfo(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGroup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGroup(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupRoles(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializedCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRealm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRealm(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealmContexts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealmContexts(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRole(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAccounts(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantContextRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantContextRole(bytes32,bytes4,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRoleAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRoleAccount(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAccess(bytes32,address,bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccountRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccountRole(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasContextRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasContextRole(bytes32,bytes32,bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGroupRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGroupRole(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLivelyAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLivelyAdminRole(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLivelyGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLivelyGroup(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLivelyRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLivelyRealm(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRealmContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRealmContext(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSystemAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSystemAdminRole(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(string,string,string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitializing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitializing()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSafeMode(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSafeMode()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUpgradable(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUpgradable()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerGroup(string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRealm(string,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRole(string,bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeContextRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeContextRole(bytes32,bytes4,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoleAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoleAccount(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdmin(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContextRealm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContextRealm(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContextSafeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContextSafeMode(bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContextUpgradeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContextUpgradeState(bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGroupStat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGroupStat(bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmStat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmStat(bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmUpgradeStat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealmUpgradeStat(bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleGroup(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleStat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleStat(bytes32,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeModeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeModeState(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradeState(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContext(bytes32,(bytes32,bytes4[],bool)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTo(address,bytes,bool)",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address,address)": EventFragment;
    "ContextRealmChanged(bytes32,address,bytes32,bytes32)": EventFragment;
    "ContextRegistered(bytes32,address,address,bytes32)": EventFragment;
    "ContextRoleGranted(bytes32,bytes32,address,bytes4,bytes32)": EventFragment;
    "ContextRoleRevoked(bytes32,bytes32,address,bytes4,bytes32)": EventFragment;
    "ContextUpdated(bytes32,address,address,bytes32)": EventFragment;
    "GroupRegistered(bytes32,address,string,bool)": EventFragment;
    "GroupStatChanged(bytes32,address,bool)": EventFragment;
    "Initialized(address,address,address,string,string,bytes32,uint16)": EventFragment;
    "RealmRegistered(bytes32,address,string,bool,bool)": EventFragment;
    "RealmStatChanged(bytes32,address,bool)": EventFragment;
    "RealmUpgradeStatChanged(bytes32,address,bool)": EventFragment;
    "RoleAccountGranted(bytes32,address,address)": EventFragment;
    "RoleAccountRevoked(bytes32,address,address)": EventFragment;
    "RoleGroupChanged(bytes32,address,bytes32,bytes32)": EventFragment;
    "RoleRegistered(bytes32,string,address,bytes32,bool)": EventFragment;
    "RoleStatChanged(bytes32,address,bytes32,bool)": EventFragment;
    "SafeModeStateChanged(address,address,bytes32,bool)": EventFragment;
    "UpgradeStateChanged(address,address,bytes32,bool)": EventFragment;
    "Upgraded(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AdminChanged(address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextRealmChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContextRealmChanged(bytes32,address,bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContextRegistered(bytes32,address,address,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextRoleGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContextRoleGranted(bytes32,bytes32,address,bytes4,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextRoleRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContextRoleRevoked(bytes32,bytes32,address,bytes4,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContextUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ContextUpdated(bytes32,address,address,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GroupRegistered(bytes32,address,string,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupStatChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GroupStatChanged(bytes32,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Initialized(address,address,address,string,string,bytes32,uint16)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmRegistered(bytes32,address,string,bool,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmStatChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmStatChanged(bytes32,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RealmUpgradeStatChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RealmUpgradeStatChanged(bytes32,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAccountGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleAccountGranted(bytes32,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAccountRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleAccountRevoked(bytes32,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGroupChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleGroupChanged(bytes32,address,bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleRegistered(bytes32,string,address,bytes32,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleStatChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleStatChanged(bytes32,address,bytes32,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeModeStateChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SafeModeStateChanged(address,address,bytes32,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeStateChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpgradeStateChanged(address,address,bytes32,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Upgraded(address,address,address)"
  ): EventFragment;
}

export interface AdminChangedEventObject {
  sender: string;
  proxy: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ContextRealmChangedEventObject {
  context: string;
  sender: string;
  newRealm: string;
  oldRealm: string;
}
export type ContextRealmChangedEvent = TypedEvent<
  [string, string, string, string],
  ContextRealmChangedEventObject
>;

export type ContextRealmChangedEventFilter =
  TypedEventFilter<ContextRealmChangedEvent>;

export interface ContextRegisteredEventObject {
  context: string;
  scma: string;
  sender: string;
  realm: string;
}
export type ContextRegisteredEvent = TypedEvent<
  [string, string, string, string],
  ContextRegisteredEventObject
>;

export type ContextRegisteredEventFilter =
  TypedEventFilter<ContextRegisteredEvent>;

export interface ContextRoleGrantedEventObject {
  context: string;
  role: string;
  sender: string;
  functionSelector: string;
  realm: string;
}
export type ContextRoleGrantedEvent = TypedEvent<
  [string, string, string, string, string],
  ContextRoleGrantedEventObject
>;

export type ContextRoleGrantedEventFilter =
  TypedEventFilter<ContextRoleGrantedEvent>;

export interface ContextRoleRevokedEventObject {
  context: string;
  role: string;
  sender: string;
  functionSelector: string;
  realm: string;
}
export type ContextRoleRevokedEvent = TypedEvent<
  [string, string, string, string, string],
  ContextRoleRevokedEventObject
>;

export type ContextRoleRevokedEventFilter =
  TypedEventFilter<ContextRoleRevokedEvent>;

export interface ContextUpdatedEventObject {
  context: string;
  scma: string;
  sender: string;
  realm: string;
}
export type ContextUpdatedEvent = TypedEvent<
  [string, string, string, string],
  ContextUpdatedEventObject
>;

export type ContextUpdatedEventFilter = TypedEventFilter<ContextUpdatedEvent>;

export interface GroupRegisteredEventObject {
  group: string;
  sender: string;
  name: string;
  status: boolean;
}
export type GroupRegisteredEvent = TypedEvent<
  [string, string, string, boolean],
  GroupRegisteredEventObject
>;

export type GroupRegisteredEventFilter = TypedEventFilter<GroupRegisteredEvent>;

export interface GroupStatChangedEventObject {
  group: string;
  sender: string;
  status: boolean;
}
export type GroupStatChangedEvent = TypedEvent<
  [string, string, boolean],
  GroupStatChangedEventObject
>;

export type GroupStatChangedEventFilter =
  TypedEventFilter<GroupStatChangedEvent>;

export interface InitializedEventObject {
  sender: string;
  proxy: string;
  subject: string;
  name: string;
  version: string;
  realm: string;
  initializedCount: number;
}
export type InitializedEvent = TypedEvent<
  [string, string, string, string, string, string, number],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RealmRegisteredEventObject {
  realm: string;
  sender: string;
  name: string;
  status: boolean;
  isUpgradable: boolean;
}
export type RealmRegisteredEvent = TypedEvent<
  [string, string, string, boolean, boolean],
  RealmRegisteredEventObject
>;

export type RealmRegisteredEventFilter = TypedEventFilter<RealmRegisteredEvent>;

export interface RealmStatChangedEventObject {
  realm: string;
  sender: string;
  status: boolean;
}
export type RealmStatChangedEvent = TypedEvent<
  [string, string, boolean],
  RealmStatChangedEventObject
>;

export type RealmStatChangedEventFilter =
  TypedEventFilter<RealmStatChangedEvent>;

export interface RealmUpgradeStatChangedEventObject {
  realm: string;
  sender: string;
  status: boolean;
}
export type RealmUpgradeStatChangedEvent = TypedEvent<
  [string, string, boolean],
  RealmUpgradeStatChangedEventObject
>;

export type RealmUpgradeStatChangedEventFilter =
  TypedEventFilter<RealmUpgradeStatChangedEvent>;

export interface RoleAccountGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleAccountGrantedEvent = TypedEvent<
  [string, string, string],
  RoleAccountGrantedEventObject
>;

export type RoleAccountGrantedEventFilter =
  TypedEventFilter<RoleAccountGrantedEvent>;

export interface RoleAccountRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleAccountRevokedEvent = TypedEvent<
  [string, string, string],
  RoleAccountRevokedEventObject
>;

export type RoleAccountRevokedEventFilter =
  TypedEventFilter<RoleAccountRevokedEvent>;

export interface RoleGroupChangedEventObject {
  role: string;
  sender: string;
  newGroup: string;
  oldGroup: string;
}
export type RoleGroupChangedEvent = TypedEvent<
  [string, string, string, string],
  RoleGroupChangedEventObject
>;

export type RoleGroupChangedEventFilter =
  TypedEventFilter<RoleGroupChangedEvent>;

export interface RoleRegisteredEventObject {
  role: string;
  name: string;
  sender: string;
  group: string;
  isEnabled: boolean;
}
export type RoleRegisteredEvent = TypedEvent<
  [string, string, string, string, boolean],
  RoleRegisteredEventObject
>;

export type RoleRegisteredEventFilter = TypedEventFilter<RoleRegisteredEvent>;

export interface RoleStatChangedEventObject {
  role: string;
  sender: string;
  group: string;
  status: boolean;
}
export type RoleStatChangedEvent = TypedEvent<
  [string, string, string, boolean],
  RoleStatChangedEventObject
>;

export type RoleStatChangedEventFilter = TypedEventFilter<RoleStatChangedEvent>;

export interface SafeModeStateChangedEventObject {
  sender: string;
  proxy: string;
  realm: string;
  state: boolean;
}
export type SafeModeStateChangedEvent = TypedEvent<
  [string, string, string, boolean],
  SafeModeStateChangedEventObject
>;

export type SafeModeStateChangedEventFilter =
  TypedEventFilter<SafeModeStateChangedEvent>;

export interface UpgradeStateChangedEventObject {
  sender: string;
  proxy: string;
  realm: string;
  state: boolean;
}
export type UpgradeStateChangedEvent = TypedEvent<
  [string, string, string, boolean],
  UpgradeStateChangedEventObject
>;

export type UpgradeStateChangedEventFilter =
  TypedEventFilter<UpgradeStateChangedEvent>;

export interface UpgradedEventObject {
  sender: string;
  proxy: string;
  newImplementation: string;
}
export type UpgradedEvent = TypedEvent<
  [string, string, string],
  UpgradedEventObject
>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AccessControlManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccessControlManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCESS_CONTROL_NAME(overrides?: CallOverrides): Promise<[string]>;

    "ACCESS_CONTROL_NAME()"(overrides?: CallOverrides): Promise<[string]>;

    ACCESS_CONTROL_VERSION(overrides?: CallOverrides): Promise<[string]>;

    "ACCESS_CONTROL_VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    ANONYMOUSE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ANONYMOUSE_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    CONTEXT_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<[string]>;

    "CONTEXT_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<[string]>;

    CONTEXT_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<[string]>;

    "CONTEXT_MANAGEMENT_VERSION()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    GROUP_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<[string]>;

    "GROUP_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<[string]>;

    GROUP_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<[string]>;

    "GROUP_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "LIVELY_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    LIVELY_GENERAL_GROUP(overrides?: CallOverrides): Promise<[string]>;

    "LIVELY_GENERAL_GROUP()"(overrides?: CallOverrides): Promise<[string]>;

    LIVELY_GENERAL_REALM(overrides?: CallOverrides): Promise<[string]>;

    "LIVELY_GENERAL_REALM()"(overrides?: CallOverrides): Promise<[string]>;

    LIVELY_SYSTEM_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "LIVELY_SYSTEM_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    REALM_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<[string]>;

    "REALM_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<[string]>;

    REALM_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<[string]>;

    "REALM_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    ROLE_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<[string]>;

    ROLE_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    contractContext(overrides?: CallOverrides): Promise<[string]>;

    "contractContext()"(overrides?: CallOverrides): Promise<[string]>;

    contractName(overrides?: CallOverrides): Promise<[string]>;

    "contractName()"(overrides?: CallOverrides): Promise<[string]>;

    contractRealm(overrides?: CallOverrides): Promise<[string]>;

    "contractRealm()"(overrides?: CallOverrides): Promise<[string]>;

    contractRegisteration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "contractRegisteration()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<[string]>;

    "contractVersion()"(overrides?: CallOverrides): Promise<[string]>;

    getAccessControlManager(overrides?: CallOverrides): Promise<[string]>;

    "getAccessControlManager()"(overrides?: CallOverrides): Promise<[string]>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    "getAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getContextFuncs(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getContextInfo(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IContextManagement.ResponseContextStructOutput]>;

    "getContextInfo(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IContextManagement.ResponseContextStructOutput]>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    "getGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getGroupRoles(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getInitializedCount(overrides?: CallOverrides): Promise<[number]>;

    "getInitializedCount()"(overrides?: CallOverrides): Promise<[number]>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean, boolean]>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean, boolean]>;

    getRealmContexts(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getRealmContexts(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    "getRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getRoleAccounts(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getRoleAccounts(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "grantContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "grantRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasAccess(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasAccess(bytes32,address,bytes4)"(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasAccountRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasContextRole(bytes32,bytes32,bytes4)"(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasLivelyAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasLivelyAdminRole(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasLivelyGroup(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasLivelyGroup(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasLivelyRealm(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasLivelyRealm(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasSystemAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasSystemAdminRole(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(string,string,string,address)"(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitializing(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitializing()"(overrides?: CallOverrides): Promise<[boolean]>;

    "isSafeMode(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSafeMode()"(overrides?: CallOverrides): Promise<[boolean]>;

    "isUpgradable(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isUpgradable()"(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<[string]>;

    registerContext(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerGroup(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerGroup(string,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRealm(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerRealm(string,bool,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerRole(string,bytes32,bool)"(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContextRealm(
      ctx: PromiseOrValue<BytesLike>,
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setContextRealm(bytes32,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContextSafeMode(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setContextSafeMode(bytes32,bool)"(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContextUpgradeState(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setContextUpgradeState(bytes32,bool)"(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGroupStat(
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setGroupStat(bytes32,bool)"(
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRealmStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRealmStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRealmUpgradeStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRealmUpgradeStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoleGroup(
      role: PromiseOrValue<BytesLike>,
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRoleGroup(bytes32,bytes32)"(
      role: PromiseOrValue<BytesLike>,
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoleStat(
      role: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRoleStat(bytes32,bool)"(
      role: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSafeModeState(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setSafeModeState(bool)"(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpgradeState(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUpgradeState(bool)"(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subjectAddress(overrides?: CallOverrides): Promise<[string]>;

    "subjectAddress()"(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateContext(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ACCESS_CONTROL_NAME(overrides?: CallOverrides): Promise<string>;

  "ACCESS_CONTROL_NAME()"(overrides?: CallOverrides): Promise<string>;

  ACCESS_CONTROL_VERSION(overrides?: CallOverrides): Promise<string>;

  "ACCESS_CONTROL_VERSION()"(overrides?: CallOverrides): Promise<string>;

  ANONYMOUSE_ROLE(overrides?: CallOverrides): Promise<string>;

  "ANONYMOUSE_ROLE()"(overrides?: CallOverrides): Promise<string>;

  CONTEXT_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<string>;

  "CONTEXT_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<string>;

  CONTEXT_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<string>;

  "CONTEXT_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<string>;

  GROUP_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<string>;

  "GROUP_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<string>;

  GROUP_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<string>;

  "GROUP_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<string>;

  LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "LIVELY_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  LIVELY_GENERAL_GROUP(overrides?: CallOverrides): Promise<string>;

  "LIVELY_GENERAL_GROUP()"(overrides?: CallOverrides): Promise<string>;

  LIVELY_GENERAL_REALM(overrides?: CallOverrides): Promise<string>;

  "LIVELY_GENERAL_REALM()"(overrides?: CallOverrides): Promise<string>;

  LIVELY_SYSTEM_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "LIVELY_SYSTEM_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  REALM_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<string>;

  "REALM_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<string>;

  REALM_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<string>;

  "REALM_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<string>;

  ROLE_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<string>;

  "ROLE_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<string>;

  ROLE_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<string>;

  "ROLE_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<string>;

  contractContext(overrides?: CallOverrides): Promise<string>;

  "contractContext()"(overrides?: CallOverrides): Promise<string>;

  contractName(overrides?: CallOverrides): Promise<string>;

  "contractName()"(overrides?: CallOverrides): Promise<string>;

  contractRealm(overrides?: CallOverrides): Promise<string>;

  "contractRealm()"(overrides?: CallOverrides): Promise<string>;

  contractRegisteration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "contractRegisteration()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractVersion(overrides?: CallOverrides): Promise<string>;

  "contractVersion()"(overrides?: CallOverrides): Promise<string>;

  getAccessControlManager(overrides?: CallOverrides): Promise<string>;

  "getAccessControlManager()"(overrides?: CallOverrides): Promise<string>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  getContextFuncs(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getContextFuncs(bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getContextInfo(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IContextManagement.ResponseContextStructOutput>;

  "getContextInfo(bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IContextManagement.ResponseContextStructOutput>;

  getGroup(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  "getGroup(bytes32)"(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  getGroupRoles(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getGroupRoles(bytes32)"(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getInitializedCount(overrides?: CallOverrides): Promise<number>;

  "getInitializedCount()"(overrides?: CallOverrides): Promise<number>;

  getRealm(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean, boolean]>;

  "getRealm(bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean, boolean]>;

  getRealmContexts(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getRealmContexts(bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRole(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, boolean]>;

  "getRole(bytes32)"(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, boolean]>;

  getRoleAccounts(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getRoleAccounts(bytes32)"(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantContextRole(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "grantContextRole(bytes32,bytes4,bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRoleAccount(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "grantRoleAccount(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasAccess(
    context: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasAccess(bytes32,address,bytes4)"(
    context: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAccountRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasAccountRole(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasContextRole(
    ctx: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasContextRole(bytes32,bytes32,bytes4)"(
    ctx: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasGroupRole(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasGroupRole(bytes32,bytes32)"(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasLivelyAdminRole(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasLivelyAdminRole(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasLivelyGroup(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasLivelyGroup(bytes32)"(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasLivelyRealm(
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasLivelyRealm(bytes32)"(
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRealmContext(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRealmContext(bytes32,bytes32)"(
    realm: PromiseOrValue<BytesLike>,
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasSystemAdminRole(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasSystemAdminRole(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    domainName: PromiseOrValue<string>,
    domainVersion: PromiseOrValue<string>,
    domainRealm: PromiseOrValue<string>,
    accessControlManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(string,string,string,address)"(
    domainName: PromiseOrValue<string>,
    domainVersion: PromiseOrValue<string>,
    domainRealm: PromiseOrValue<string>,
    accessControlManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitializing(overrides?: CallOverrides): Promise<boolean>;

  "isInitializing()"(overrides?: CallOverrides): Promise<boolean>;

  "isSafeMode(bytes32)"(
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSafeMode()"(overrides?: CallOverrides): Promise<boolean>;

  "isUpgradable(bytes32)"(
    context: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isUpgradable()"(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  registerContext(
    newContract: PromiseOrValue<string>,
    realm: PromiseOrValue<BytesLike>,
    rc: IContextManagement.RequestContextStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
    newContract: PromiseOrValue<string>,
    realm: PromiseOrValue<BytesLike>,
    rc: IContextManagement.RequestContextStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerGroup(
    name: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerGroup(string,bool)"(
    name: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRealm(
    name: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    isUpgradable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerRealm(string,bool,bool)"(
    name: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    isUpgradable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRole(
    name: PromiseOrValue<string>,
    group: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerRole(string,bytes32,bool)"(
    name: PromiseOrValue<string>,
    group: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeContextRole(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeContextRole(bytes32,bytes4,bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    functionSelector: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRoleAccount(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeRoleAccount(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContextRealm(
    ctx: PromiseOrValue<BytesLike>,
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setContextRealm(bytes32,bytes32)"(
    ctx: PromiseOrValue<BytesLike>,
    realm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContextSafeMode(
    ctx: PromiseOrValue<BytesLike>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setContextSafeMode(bytes32,bool)"(
    ctx: PromiseOrValue<BytesLike>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContextUpgradeState(
    ctx: PromiseOrValue<BytesLike>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setContextUpgradeState(bytes32,bool)"(
    ctx: PromiseOrValue<BytesLike>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGroupStat(
    group: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setGroupStat(bytes32,bool)"(
    group: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRealmStat(
    realm: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRealmStat(bytes32,bool)"(
    realm: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRealmUpgradeStat(
    realm: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRealmUpgradeStat(bytes32,bool)"(
    realm: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoleGroup(
    role: PromiseOrValue<BytesLike>,
    group: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRoleGroup(bytes32,bytes32)"(
    role: PromiseOrValue<BytesLike>,
    group: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoleStat(
    role: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRoleStat(bytes32,bool)"(
    role: PromiseOrValue<BytesLike>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSafeModeState(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setSafeModeState(bool)"(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpgradeState(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUpgradeState(bool)"(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subjectAddress(overrides?: CallOverrides): Promise<string>;

  "subjectAddress()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateContext(
    ctx: PromiseOrValue<BytesLike>,
    rc: IContextManagement.RequestContextStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
    ctx: PromiseOrValue<BytesLike>,
    rc: IContextManagement.RequestContextStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    forceCall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "upgradeTo(address,bytes,bool)"(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    forceCall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACCESS_CONTROL_NAME(overrides?: CallOverrides): Promise<string>;

    "ACCESS_CONTROL_NAME()"(overrides?: CallOverrides): Promise<string>;

    ACCESS_CONTROL_VERSION(overrides?: CallOverrides): Promise<string>;

    "ACCESS_CONTROL_VERSION()"(overrides?: CallOverrides): Promise<string>;

    ANONYMOUSE_ROLE(overrides?: CallOverrides): Promise<string>;

    "ANONYMOUSE_ROLE()"(overrides?: CallOverrides): Promise<string>;

    CONTEXT_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<string>;

    "CONTEXT_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<string>;

    CONTEXT_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<string>;

    "CONTEXT_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<string>;

    GROUP_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<string>;

    "GROUP_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<string>;

    GROUP_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<string>;

    "GROUP_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<string>;

    LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "LIVELY_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    LIVELY_GENERAL_GROUP(overrides?: CallOverrides): Promise<string>;

    "LIVELY_GENERAL_GROUP()"(overrides?: CallOverrides): Promise<string>;

    LIVELY_GENERAL_REALM(overrides?: CallOverrides): Promise<string>;

    "LIVELY_GENERAL_REALM()"(overrides?: CallOverrides): Promise<string>;

    LIVELY_SYSTEM_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "LIVELY_SYSTEM_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    REALM_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<string>;

    "REALM_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<string>;

    REALM_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<string>;

    "REALM_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<string>;

    ROLE_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<string>;

    "ROLE_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<string>;

    ROLE_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<string>;

    "ROLE_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<string>;

    contractContext(overrides?: CallOverrides): Promise<string>;

    "contractContext()"(overrides?: CallOverrides): Promise<string>;

    contractName(overrides?: CallOverrides): Promise<string>;

    "contractName()"(overrides?: CallOverrides): Promise<string>;

    contractRealm(overrides?: CallOverrides): Promise<string>;

    "contractRealm()"(overrides?: CallOverrides): Promise<string>;

    contractRegisteration(overrides?: CallOverrides): Promise<string>;

    "contractRegisteration()"(overrides?: CallOverrides): Promise<string>;

    contractVersion(overrides?: CallOverrides): Promise<string>;

    "contractVersion()"(overrides?: CallOverrides): Promise<string>;

    getAccessControlManager(overrides?: CallOverrides): Promise<string>;

    "getAccessControlManager()"(overrides?: CallOverrides): Promise<string>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getContextFuncs(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getContextInfo(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IContextManagement.ResponseContextStructOutput>;

    "getContextInfo(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IContextManagement.ResponseContextStructOutput>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    "getGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getGroupRoles(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getInitializedCount(overrides?: CallOverrides): Promise<number>;

    "getInitializedCount()"(overrides?: CallOverrides): Promise<number>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean, boolean]>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean, boolean]>;

    getRealmContexts(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getRealmContexts(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    "getRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getRoleAccounts(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getRoleAccounts(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "grantContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "grantRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAccess(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasAccess(bytes32,address,bytes4)"(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasAccountRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasContextRole(bytes32,bytes32,bytes4)"(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasLivelyAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasLivelyAdminRole(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasLivelyGroup(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasLivelyGroup(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasLivelyRealm(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasLivelyRealm(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasSystemAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasSystemAdminRole(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,string,address)"(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitializing(overrides?: CallOverrides): Promise<boolean>;

    "isInitializing()"(overrides?: CallOverrides): Promise<boolean>;

    "isSafeMode(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSafeMode()"(overrides?: CallOverrides): Promise<boolean>;

    "isUpgradable(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isUpgradable()"(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    registerContext(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    registerGroup(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "registerGroup(string,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerRealm(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "registerRealm(string,bool,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "registerRole(string,bytes32,bool)"(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "revokeContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "revokeRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setAdmin(address)"(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setContextRealm(
      ctx: PromiseOrValue<BytesLike>,
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setContextRealm(bytes32,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setContextSafeMode(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setContextSafeMode(bytes32,bool)"(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setContextUpgradeState(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setContextUpgradeState(bytes32,bool)"(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setGroupStat(
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setGroupStat(bytes32,bool)"(
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRealmStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setRealmStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRealmUpgradeStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setRealmUpgradeStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRoleGroup(
      role: PromiseOrValue<BytesLike>,
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setRoleGroup(bytes32,bytes32)"(
      role: PromiseOrValue<BytesLike>,
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setRoleStat(
      role: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setRoleStat(bytes32,bool)"(
      role: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setSafeModeState(
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setSafeModeState(bool)"(
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUpgradeState(
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setUpgradeState(bool)"(
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    subjectAddress(overrides?: CallOverrides): Promise<string>;

    "subjectAddress()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateContext(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "ContextRealmChanged(bytes32,address,bytes32,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      newRealm?: PromiseOrValue<BytesLike> | null,
      oldRealm?: null
    ): ContextRealmChangedEventFilter;
    ContextRealmChanged(
      context?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      newRealm?: PromiseOrValue<BytesLike> | null,
      oldRealm?: null
    ): ContextRealmChangedEventFilter;

    "ContextRegistered(bytes32,address,address,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextRegisteredEventFilter;
    ContextRegistered(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextRegisteredEventFilter;

    "ContextRoleGranted(bytes32,bytes32,address,bytes4,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleGrantedEventFilter;
    ContextRoleGranted(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleGrantedEventFilter;

    "ContextRoleRevoked(bytes32,bytes32,address,bytes4,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleRevokedEventFilter;
    ContextRoleRevoked(
      context?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      functionSelector?: null,
      realm?: null
    ): ContextRoleRevokedEventFilter;

    "ContextUpdated(bytes32,address,address,bytes32)"(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextUpdatedEventFilter;
    ContextUpdated(
      context?: PromiseOrValue<BytesLike> | null,
      scma?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      realm?: null
    ): ContextUpdatedEventFilter;

    "GroupRegistered(bytes32,address,string,bool)"(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      status?: null
    ): GroupRegisteredEventFilter;
    GroupRegistered(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      status?: null
    ): GroupRegisteredEventFilter;

    "GroupStatChanged(bytes32,address,bool)"(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): GroupStatChangedEventFilter;
    GroupStatChanged(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): GroupStatChangedEventFilter;

    "Initialized(address,address,address,string,string,bytes32,uint16)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      subject?: PromiseOrValue<string> | null,
      name?: null,
      version?: null,
      realm?: null,
      initializedCount?: null
    ): InitializedEventFilter;
    Initialized(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      subject?: PromiseOrValue<string> | null,
      name?: null,
      version?: null,
      realm?: null,
      initializedCount?: null
    ): InitializedEventFilter;

    "RealmRegistered(bytes32,address,string,bool,bool)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      status?: null,
      isUpgradable?: null
    ): RealmRegisteredEventFilter;
    RealmRegistered(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      status?: null,
      isUpgradable?: null
    ): RealmRegisteredEventFilter;

    "RealmStatChanged(bytes32,address,bool)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): RealmStatChangedEventFilter;
    RealmStatChanged(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): RealmStatChangedEventFilter;

    "RealmUpgradeStatChanged(bytes32,address,bool)"(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): RealmUpgradeStatChangedEventFilter;
    RealmUpgradeStatChanged(
      realm?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      status?: null
    ): RealmUpgradeStatChangedEventFilter;

    "RoleAccountGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleAccountGrantedEventFilter;
    RoleAccountGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleAccountGrantedEventFilter;

    "RoleAccountRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleAccountRevokedEventFilter;
    RoleAccountRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleAccountRevokedEventFilter;

    "RoleGroupChanged(bytes32,address,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      newGroup?: PromiseOrValue<BytesLike> | null,
      oldGroup?: null
    ): RoleGroupChangedEventFilter;
    RoleGroupChanged(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      newGroup?: PromiseOrValue<BytesLike> | null,
      oldGroup?: null
    ): RoleGroupChangedEventFilter;

    "RoleRegistered(bytes32,string,address,bytes32,bool)"(
      role?: PromiseOrValue<BytesLike> | null,
      name?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null,
      isEnabled?: null
    ): RoleRegisteredEventFilter;
    RoleRegistered(
      role?: PromiseOrValue<BytesLike> | null,
      name?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      group?: null,
      isEnabled?: null
    ): RoleRegisteredEventFilter;

    "RoleStatChanged(bytes32,address,bytes32,bool)"(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null,
      status?: null
    ): RoleStatChangedEventFilter;
    RoleStatChanged(
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      group?: PromiseOrValue<BytesLike> | null,
      status?: null
    ): RoleStatChangedEventFilter;

    "SafeModeStateChanged(address,address,bytes32,bool)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      realm?: PromiseOrValue<BytesLike> | null,
      state?: null
    ): SafeModeStateChangedEventFilter;
    SafeModeStateChanged(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      realm?: PromiseOrValue<BytesLike> | null,
      state?: null
    ): SafeModeStateChangedEventFilter;

    "UpgradeStateChanged(address,address,bytes32,bool)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      realm?: PromiseOrValue<BytesLike> | null,
      state?: null
    ): UpgradeStateChangedEventFilter;
    UpgradeStateChanged(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      realm?: PromiseOrValue<BytesLike> | null,
      state?: null
    ): UpgradeStateChangedEventFilter;

    "Upgraded(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      sender?: PromiseOrValue<string> | null,
      proxy?: PromiseOrValue<string> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    ACCESS_CONTROL_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "ACCESS_CONTROL_NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    ACCESS_CONTROL_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "ACCESS_CONTROL_VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    ANONYMOUSE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ANONYMOUSE_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONTEXT_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTEXT_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONTEXT_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTEXT_MANAGEMENT_VERSION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GROUP_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "GROUP_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    GROUP_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "GROUP_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "LIVELY_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    LIVELY_GENERAL_GROUP(overrides?: CallOverrides): Promise<BigNumber>;

    "LIVELY_GENERAL_GROUP()"(overrides?: CallOverrides): Promise<BigNumber>;

    LIVELY_GENERAL_REALM(overrides?: CallOverrides): Promise<BigNumber>;

    "LIVELY_GENERAL_REALM()"(overrides?: CallOverrides): Promise<BigNumber>;

    LIVELY_SYSTEM_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "LIVELY_SYSTEM_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    REALM_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "REALM_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    REALM_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "REALM_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_MANAGEMENT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_MANAGEMENT_NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_MANAGEMENT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_MANAGEMENT_VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractContext(overrides?: CallOverrides): Promise<BigNumber>;

    "contractContext()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractName(overrides?: CallOverrides): Promise<BigNumber>;

    "contractName()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractRealm(overrides?: CallOverrides): Promise<BigNumber>;

    "contractRealm()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractRegisteration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "contractRegisteration()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "contractVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    "getAccessControlManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContextFuncs(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContextInfo(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContextInfo(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGroupRoles(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitializedCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitializedCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealmContexts(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRealmContexts(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAccounts(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAccounts(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "grantContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "grantRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasAccess(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasAccess(bytes32,address,bytes4)"(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasAccountRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasContextRole(bytes32,bytes32,bytes4)"(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLivelyAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasLivelyAdminRole(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLivelyGroup(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasLivelyGroup(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLivelyRealm(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasLivelyRealm(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasSystemAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasSystemAdminRole(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(string,string,string,address)"(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitializing(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitializing()"(overrides?: CallOverrides): Promise<BigNumber>;

    "isSafeMode(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSafeMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    "isUpgradable(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isUpgradable()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerContext(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerGroup(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerGroup(string,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRealm(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerRealm(string,bool,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerRole(string,bytes32,bool)"(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setAdmin(address)"(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContextRealm(
      ctx: PromiseOrValue<BytesLike>,
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setContextRealm(bytes32,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContextSafeMode(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setContextSafeMode(bytes32,bool)"(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContextUpgradeState(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setContextUpgradeState(bytes32,bool)"(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGroupStat(
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setGroupStat(bytes32,bool)"(
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRealmStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRealmStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRealmUpgradeStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRealmUpgradeStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoleGroup(
      role: PromiseOrValue<BytesLike>,
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRoleGroup(bytes32,bytes32)"(
      role: PromiseOrValue<BytesLike>,
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoleStat(
      role: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRoleStat(bytes32,bool)"(
      role: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSafeModeState(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setSafeModeState(bool)"(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpgradeState(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUpgradeState(bool)"(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subjectAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "subjectAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateContext(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCESS_CONTROL_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ACCESS_CONTROL_NAME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACCESS_CONTROL_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ACCESS_CONTROL_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ANONYMOUSE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ANONYMOUSE_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONTEXT_MANAGEMENT_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CONTEXT_MANAGEMENT_NAME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONTEXT_MANAGEMENT_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CONTEXT_MANAGEMENT_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GROUP_MANAGEMENT_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "GROUP_MANAGEMENT_NAME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GROUP_MANAGEMENT_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "GROUP_MANAGEMENT_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LIVELY_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_GENERAL_GROUP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_GENERAL_GROUP()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_GENERAL_REALM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_GENERAL_REALM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIVELY_SYSTEM_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LIVELY_SYSTEM_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REALM_MANAGEMENT_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REALM_MANAGEMENT_NAME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REALM_MANAGEMENT_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REALM_MANAGEMENT_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_MANAGEMENT_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_MANAGEMENT_NAME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_MANAGEMENT_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_MANAGEMENT_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractContext()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRealm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractRealm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractRegisteration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "contractRegisteration()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccessControlManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccessControlManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContextFuncs(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContextFuncs(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContextInfo(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContextInfo(bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGroupRoles(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitializedCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInitializedCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealm(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealm(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealmContexts(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRealmContexts(bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRole(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAccounts(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAccounts(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "grantContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "grantRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasAccess(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAccess(bytes32,address,bytes4)"(
      context: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccountRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAccountRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasContextRole(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasContextRole(bytes32,bytes32,bytes4)"(
      ctx: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasLivelyAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasLivelyAdminRole(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasLivelyGroup(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasLivelyGroup(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasLivelyRealm(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasLivelyRealm(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRealmContext(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRealmContext(bytes32,bytes32)"(
      realm: PromiseOrValue<BytesLike>,
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasSystemAdminRole(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasSystemAdminRole(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,string,address)"(
      domainName: PromiseOrValue<string>,
      domainVersion: PromiseOrValue<string>,
      domainRealm: PromiseOrValue<string>,
      accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitializing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitializing()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSafeMode(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSafeMode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isUpgradable(bytes32)"(
      context: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isUpgradable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerContext(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerContext(address,bytes32,(bytes32,bytes4[],bool)[])"(
      newContract: PromiseOrValue<string>,
      realm: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerGroup(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerGroup(string,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRealm(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerRealm(string,bool,bool)"(
      name: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      isUpgradable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRole(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerRole(string,bytes32,bool)"(
      name: PromiseOrValue<string>,
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeContextRole(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeContextRole(bytes32,bytes4,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      functionSelector: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoleAccount(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRoleAccount(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContextRealm(
      ctx: PromiseOrValue<BytesLike>,
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setContextRealm(bytes32,bytes32)"(
      ctx: PromiseOrValue<BytesLike>,
      realm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContextSafeMode(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setContextSafeMode(bytes32,bool)"(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContextUpgradeState(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setContextUpgradeState(bytes32,bool)"(
      ctx: PromiseOrValue<BytesLike>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGroupStat(
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setGroupStat(bytes32,bool)"(
      group: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRealmStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRealmStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRealmUpgradeStat(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRealmUpgradeStat(bytes32,bool)"(
      realm: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoleGroup(
      role: PromiseOrValue<BytesLike>,
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRoleGroup(bytes32,bytes32)"(
      role: PromiseOrValue<BytesLike>,
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoleStat(
      role: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRoleStat(bytes32,bool)"(
      role: PromiseOrValue<BytesLike>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSafeModeState(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setSafeModeState(bool)"(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpgradeState(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUpgradeState(bool)"(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subjectAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "subjectAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateContext(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateContext(bytes32,(bytes32,bytes4[],bool)[])"(
      ctx: PromiseOrValue<BytesLike>,
      rc: IContextManagement.RequestContextStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address,bytes,bool)"(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      forceCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
