/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IGroupManagementInterface extends utils.Interface {
  functions: {
    "addGroup(string,bool)": FunctionFragment;
    "disabledGroup(bytes32)": FunctionFragment;
    "enabledGroup(bytes32)": FunctionFragment;
    "getGroup(bytes32)": FunctionFragment;
    "getGroupRoles(bytes32)": FunctionFragment;
    "grantGroupRole(bytes32,bytes32)": FunctionFragment;
    "hasGroupRole(bytes32,bytes32)": FunctionFragment;
    "revokeGroupRole(bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addGroup"
      | "addGroup(string,bool)"
      | "disabledGroup"
      | "disabledGroup(bytes32)"
      | "enabledGroup"
      | "enabledGroup(bytes32)"
      | "getGroup"
      | "getGroup(bytes32)"
      | "getGroupRoles"
      | "getGroupRoles(bytes32)"
      | "grantGroupRole"
      | "grantGroupRole(bytes32,bytes32)"
      | "hasGroupRole"
      | "hasGroupRole(bytes32,bytes32)"
      | "revokeGroupRole"
      | "revokeGroupRole(bytes32,bytes32)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addGroup",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "addGroup(string,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "disabledGroup",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "disabledGroup(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledGroup",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledGroup(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroup",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroup(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupRoles",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupRoles(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantGroupRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantGroupRole(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGroupRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGroupRole(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeGroupRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeGroupRole(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "addGroup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addGroup(string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disabledGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disabledGroup(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledGroup(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGroup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGroup(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupRoles(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantGroupRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantGroupRole(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGroupRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGroupRole(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeGroupRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeGroupRole(bytes32,bytes32)",
    data: BytesLike
  ): Result;

  events: {
    "GroupDisabled(bytes32,address)": EventFragment;
    "GroupEnabled(bytes32,address)": EventFragment;
    "GroupRegistered(bytes32,address,string,bool)": EventFragment;
    "GroupRoleGranted(bytes32,bytes32,address)": EventFragment;
    "GroupRoleRevoked(bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GroupDisabled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GroupDisabled(bytes32,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupEnabled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GroupEnabled(bytes32,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupRegistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GroupRegistered(bytes32,address,string,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupRoleGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GroupRoleGranted(bytes32,bytes32,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupRoleRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GroupRoleRevoked(bytes32,bytes32,address)"
  ): EventFragment;
}

export interface GroupDisabledEventObject {
  group: string;
  sender: string;
}
export type GroupDisabledEvent = TypedEvent<
  [string, string],
  GroupDisabledEventObject
>;

export type GroupDisabledEventFilter = TypedEventFilter<GroupDisabledEvent>;

export interface GroupEnabledEventObject {
  group: string;
  sender: string;
}
export type GroupEnabledEvent = TypedEvent<
  [string, string],
  GroupEnabledEventObject
>;

export type GroupEnabledEventFilter = TypedEventFilter<GroupEnabledEvent>;

export interface GroupRegisteredEventObject {
  group: string;
  sender: string;
  name: string;
  isEnabled: boolean;
}
export type GroupRegisteredEvent = TypedEvent<
  [string, string, string, boolean],
  GroupRegisteredEventObject
>;

export type GroupRegisteredEventFilter = TypedEventFilter<GroupRegisteredEvent>;

export interface GroupRoleGrantedEventObject {
  group: string;
  role: string;
  sender: string;
}
export type GroupRoleGrantedEvent = TypedEvent<
  [string, string, string],
  GroupRoleGrantedEventObject
>;

export type GroupRoleGrantedEventFilter =
  TypedEventFilter<GroupRoleGrantedEvent>;

export interface GroupRoleRevokedEventObject {
  group: string;
  role: string;
  sender: string;
}
export type GroupRoleRevokedEvent = TypedEvent<
  [string, string, string],
  GroupRoleRevokedEventObject
>;

export type GroupRoleRevokedEventFilter =
  TypedEventFilter<GroupRoleRevokedEvent>;

export interface IGroupManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGroupManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGroup(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addGroup(string,bool)"(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "disabledGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "enabledGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    "getGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getGroupRoles(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    grantGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "grantGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addGroup(
    name: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addGroup(string,bool)"(
    name: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disabledGroup(
    group: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "disabledGroup(bytes32)"(
    group: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enabledGroup(
    group: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "enabledGroup(bytes32)"(
    group: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGroup(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  "getGroup(bytes32)"(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean]>;

  getGroupRoles(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getGroupRoles(bytes32)"(
    group: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  grantGroupRole(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "grantGroupRole(bytes32,bytes32)"(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasGroupRole(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasGroupRole(bytes32,bytes32)"(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeGroupRole(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeGroupRole(bytes32,bytes32)"(
    group: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGroup(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "addGroup(string,bool)"(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    disabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "disabledGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "enabledGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    "getGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean]>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getGroupRoles(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    grantGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "grantGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "revokeGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "GroupDisabled(bytes32,address)"(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupDisabledEventFilter;
    GroupDisabled(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupDisabledEventFilter;

    "GroupEnabled(bytes32,address)"(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupEnabledEventFilter;
    GroupEnabled(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupEnabledEventFilter;

    "GroupRegistered(bytes32,address,string,bool)"(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      isEnabled?: null
    ): GroupRegisteredEventFilter;
    GroupRegistered(
      group?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      name?: null,
      isEnabled?: null
    ): GroupRegisteredEventFilter;

    "GroupRoleGranted(bytes32,bytes32,address)"(
      group?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupRoleGrantedEventFilter;
    GroupRoleGranted(
      group?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupRoleGrantedEventFilter;

    "GroupRoleRevoked(bytes32,bytes32,address)"(
      group?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupRoleRevokedEventFilter;
    GroupRoleRevoked(
      group?: PromiseOrValue<BytesLike> | null,
      role?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null
    ): GroupRoleRevokedEventFilter;
  };

  estimateGas: {
    addGroup(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addGroup(string,bool)"(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "disabledGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "enabledGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGroupRoles(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "grantGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGroup(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addGroup(string,bool)"(
      name: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "disabledGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enabledGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "enabledGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGroup(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGroup(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupRoles(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGroupRoles(bytes32)"(
      group: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "grantGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeGroupRole(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeGroupRole(bytes32,bytes32)"(
      group: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
