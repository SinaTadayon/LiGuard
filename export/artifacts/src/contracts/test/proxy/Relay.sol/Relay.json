{
  "contractName": "Relay",
  "sourceName": "src/contracts/test/proxy/Relay.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5060405161010d38038061010d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b607b806100926000396000f3fe608060405236601057600e6013565b005b600e5b601a34601c565b565b600054366000803760008036600085855af190503d6000803e8080156040573d6000f35b3d6000fdfea2646970667358221220f7a9d15d534fff6c3891396833aad25bee368ea1de66a68b83e72c99fe046b1664736f6c63430008110033",
  "deployedBytecode": "0x608060405236601057600e6013565b005b600e5b601a34601c565b565b600054366000803760008036600085855af190503d6000803e8080156040573d6000f35b3d6000fdfea2646970667358221220f7a9d15d534fff6c3891396833aad25bee368ea1de66a68b83e72c99fe046b1664736f6c63430008110033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "This contract provides a fallback function that relay all calls to another contract using the EVM instruction `call`. We refer to the second contract as the _destContract behind the forwarder Additionally, forward to the _destContract can be triggered manually through the {_fallback} function, or to a different contract through the {_forward} function. The success and return data of the call will be returned back to the caller of the relay.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_29756": {
          "entryPoint": null,
          "id": 29756,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "abi_decode_tuple_t_address_fromMemory": {
          "entryPoint": 84,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:306:75",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:75",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "95:209:75",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "141:16:75",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "150:1:75",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "153:1:75",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "143:6:75"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "143:12:75"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "143:12:75"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "116:7:75"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "125:9:75"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "112:3:75"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "112:23:75"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "137:2:75",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "108:3:75"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "108:32:75"
                      },
                      "nodeType": "YulIf",
                      "src": "105:52:75"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "166:29:75",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "185:9:75"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "179:5:75"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "179:16:75"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "170:5:75",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "258:16:75",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "267:1:75",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "270:1:75",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "260:6:75"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "260:12:75"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "260:12:75"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "217:5:75"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "228:5:75"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "243:3:75",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "248:1:75",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "239:3:75"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "239:11:75"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "252:1:75",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "235:3:75"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "235:19:75"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "224:3:75"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "224:31:75"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "214:2:75"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "214:42:75"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "207:6:75"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "207:50:75"
                      },
                      "nodeType": "YulIf",
                      "src": "204:70:75"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "283:15:75",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "293:5:75"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "283:6:75"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "61:9:75",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "72:7:75",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "84:6:75",
                    "type": ""
                  }
                ],
                "src": "14:290:75"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
          "id": 75,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x10D CODESIZE SUB DUP1 PUSH2 0x10D DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x54 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x7B DUP1 PUSH2 0x92 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x10 JUMPI PUSH1 0xE PUSH1 0x13 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xE JUMPDEST PUSH1 0x1A CALLVALUE PUSH1 0x1C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP6 DUP6 GAS CALL SWAP1 POP RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 0xA9 0xD1 0x5D MSTORE8 0x4F SELFDESTRUCT PUSH13 0x3891396833AAD25BEE368EA1DE PUSH7 0xA68B83E72C99FE DIV PUSH12 0x1664736F6C63430008110033 ",
      "sourceMap": "536:2141:51:-:0;;;593:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;637:13;:28;;-1:-1:-1;;;;;;637:28:51;-1:-1:-1;;;;;637:28:51;;;;;;;;;;536:2141;;14:290:75;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:75;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:75:o;:::-;536:2141:51;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@_29782": {
          "entryPoint": null,
          "id": 29782,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_29790": {
          "entryPoint": null,
          "id": 29790,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_fallback_29774": {
          "entryPoint": 19,
          "id": 29774,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_forward_29764": {
          "entryPoint": 28,
          "id": 29764,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x10 JUMPI PUSH1 0xE PUSH1 0x13 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xE JUMPDEST PUSH1 0x1A CALLVALUE PUSH1 0x1C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP6 DUP6 GAS CALL SWAP1 POP RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 0xA9 0xD1 0x5D MSTORE8 0x4F SELFDESTRUCT PUSH13 0x3891396833AAD25BEE368EA1DE PUSH7 0xA68B83E72C99FE DIV PUSH12 0x1664736F6C63430008110033 ",
      "sourceMap": "536:2141:51:-:0;;;;;;2657:11;:9;:11::i;:::-;536:2141;;2405:11;2059:74;2107:19;2116:9;2107:8;:19::i;:::-;2059:74::o;872:964::-;1012:18;1006:25;1290:14;1287:1;1284;1271:34;1493:1;1490;1474:14;1471:1;1464:5;1458:4;1451:5;1446:49;1432:63;;1569:16;1566:1;1563;1548:38;1607:6;1674:66;;;;1789:16;1786:1;1779:27;1674:66;1709:16;1706:1;1699:27"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "24600",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "": "infinite"
      },
      "internal": {
        "_fallback()": "infinite",
        "_forward(uint256)": "infinite"
      }
    },
    "methodIdentifiers": {}
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract provides a fallback function that relay all calls to another contract using the EVM instruction `call`. We refer to the second contract as the _destContract behind the forwarder Additionally, forward to the _destContract can be triggered manually through the {_fallback} function, or to a different contract through the {_forward} function. The success and return data of the call will be returned back to the caller of the relay.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/test/proxy/Relay.sol\":\"Relay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/test/proxy/Relay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This contract provides a fallback function that relay all calls to another contract using the EVM\\n * instruction `call`. We refer to the second contract as the _destContract behind the forwarder\\n *\\n * Additionally, forward to the _destContract can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_forward} function.\\n *\\n * The success and return data of the call will be returned back to the caller of the relay.\\n */\\ncontract Relay {\\n    address private _destContract;\\n\\n    constructor(address destContract) {\\n        _destContract = destContract;\\n    }\\n\\n    /**\\n     * @dev Forwards the current call to `_destContract`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _forward(uint256 value) internal {\\n        assembly {\\n            // loading state variable to stack\\n            let addr := sload(_destContract.slot)\\n\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := call(gas(), addr, value, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Forward the current call to the address returned by `_destContract`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _forward(msg.value);\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_destContract`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    // solhint-disable-next-line\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_destContract`. Will run if call data\\n     * is empty.\\n     */\\n    // solhint-disable-next-line\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xaada6dc9473a7c307f882bf5ced614496923758714242a79fe262846290225d3\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 29746,
        "contract": "src/contracts/test/proxy/Relay.sol:Relay",
        "label": "_destContract",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}