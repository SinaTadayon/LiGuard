{
  "contractName": "AccessControlManagerTest",
  "sourceName": "src/contracts/test/acl/AccessControlManagerTest.sol",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subject",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "initCount",
          "type": "uint16"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "LocalAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SafeModeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "realm",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "UpgradeStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractContext",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRealm",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSafeMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgradable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLocalAdmin",
          "type": "address"
        }
      ],
      "name": "setLocalAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setSafeMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setUpgradeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subjectAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "forceCall",
          "type": "bool"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200004360017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd62000127565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc146200007457620000746200014f565b620000a160017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610462000127565b60008051602062001c3a83398151915214620000c157620000c16200014f565b33620000ea60008051602062001c3a83398151915260001b6200012460201b62000d931760201c565b80546001600160a01b03929092166001600160a01b03199092169190911790556003805461ffff60a01b1916600160a01b17905562000165565b90565b818103818111156200014957634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052600160045260246000fd5b608051611a73620001c7600039600081816104150152818161045e015281816105dc0152818161061c015281816107b1015281816108470152818161088701528181610a3f01528181610a7f01528181610ba80152610be80152611a736000f3fe60806040526004361061010c5760003560e01c806375d0c0dc1161009a578063be22465d11610061578063be22465d146102e0578063d3e024b8146102ff578063d9dc1f1914610314578063f698da2514610334578063f94a0adb1461034957005b806375d0c0dc1461026e5780638129fc1c14610283578063870666cb14610298578063a0a8e460146102ad578063b4a0bdf3146102c257005b806352d1902d116100de57806352d1902d146101b25780635479d940146101d557806358dbc45d146101f45780637147855d14610221578063756af45f1461024e57005b806301ffc9a71461011557806338d38c971461014a57806344b7e5f21461017257806348e6be1c1461019257005b3661011357005b005b34801561012157600080fd5b506101356101303660046116d5565b61035e565b60405190151581526020015b60405180910390f35b34801561015657600080fd5b5061015f6103f5565b60405161ffff9091168152602001610141565b34801561017e57600080fd5b5061013561018d366004611718565b610409565b34801561019e57600080fd5b506101356101ad366004611718565b6105d0565b3480156101be57600080fd5b506101c76107a4565b604051908152602001610141565b3480156101e157600080fd5b50600354600160a81b900460ff16610135565b34801561020057600080fd5b50610209610831565b6040516001600160a01b039091168152602001610141565b34801561022d57600080fd5b5061024161023c366004611762565b61083b565b6040516101419190611884565b34801561025a57600080fd5b50610113610269366004611897565b610976565b34801561027a57600080fd5b506000546101c7565b34801561028f57600080fd5b50610113610a35565b3480156102a457600080fd5b506101c7610b91565b3480156102b957600080fd5b506001546101c7565b3480156102ce57600080fd5b506003546001600160a01b0316610209565b3480156102ec57600080fd5b50600354600160a01b900460ff16610135565b34801561030b57600080fd5b506002546101c7565b34801561032057600080fd5b5061013561032f366004611897565b610b9c565b34801561034057600080fd5b506101c7610d1d565b34801561035557600080fd5b50610209610d89565b60006001600160e01b031982166314b8343560e31b148061038f57506001600160e01b031982166396dc457560e01b145b806103aa57506001600160e01b031982166308ea925b60e41b145b806103c557506001600160e01b03198216637d22131d60e11b145b806103e057506001600160e01b031982166370319bff60e11b145b806103ef57506103ef82610d96565b92915050565b6000610404604b5461ffff1690565b905090565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361045c5760405162461bcd60e51b8152600401610453906118b2565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661048e610de6565b6001600160a01b0316146104b45760405162461bcd60e51b8152600401610453906118e1565b60006104c3604b5461ffff1690565b61ffff16116105145760405162461bcd60e51b815260206004820152601860248201527f436f6e7472616374204e6f7420496e697469616c697a656400000000000000006044820152606401610453565b61052463225bf2f960e11b610e07565b6105685760405162461bcd60e51b815260206004820152601560248201527429b2ba29b0b332a6b7b232902337b93134b23232b760591b6044820152606401610453565b6003805460ff60a01b1916600160a01b8415150217905560025430336001600160a01b03167fdd452a31d2e164a1ea436c084842c27d24ae2548a575a869f71b05a4ed16243f856040516105c0911515815260200190565b60405180910390a450805b919050565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361061a5760405162461bcd60e51b8152600401610453906118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661064c610de6565b6001600160a01b0316146106725760405162461bcd60e51b8152600401610453906118e1565b600354600160a01b900460ff161561069c5760405162461bcd60e51b81526004016104539061190f565b6106ac631239af8760e21b610e07565b6106f85760405162461bcd60e51b815260206004820152601a60248201527f5365745570677261646553746174757320466f7262696464656e0000000000006044820152606401610453565b610700610f70565b61074c5760405162461bcd60e51b815260206004820152601760248201527f5265616c6d205570677261646520466f7262696464656e0000000000000000006044820152606401610453565b6003805460ff60a81b1916600160a81b8415150217905560025430336001600160a01b03167fe9f97ad94c2ba252dcfc525e004f608ac5cb886955d8fc87d9e0ee070a698c56856040516105c0911515815260200190565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461081e5760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c20436f6e74726163742044656c656761746563616c6c0000006044820152606401610453565b50600080516020611a1e83398151915290565b6000610404610de6565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108855760405162461bcd60e51b8152600401610453906118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108b7610de6565b6001600160a01b0316146108dd5760405162461bcd60e51b8152600401610453906118e1565b600354600160a01b900460ff16156109075760405162461bcd60e51b81526004016104539061190f565b600354600160a81b900460ff166109585760405162461bcd60e51b8152602060048201526015602482015274155c19dc9859194810d85b1b0814995a9958dd1959605a1b6044820152606401610453565b610961846110ae565b61096c848484611175565b90505b9392505050565b600354600160a01b900460ff16156109a05760405162461bcd60e51b81526004016104539061190f565b6109b063756af45f60e01b610e07565b6109fc5760405162461bcd60e51b815260206004820152601a60248201527f57697468647261772042616c616e636520466f7262696464656e0000000000006044820152606401610453565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610a31573d6000803e3d6000fd5b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a7d5760405162461bcd60e51b8152600401610453906118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610aaf610de6565b6001600160a01b031614610ad55760405162461bcd60e51b8152600401610453906118e1565b604b5460029062010000900460ff16158015610af95750604b5461ffff8083169116105b610b455760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a6564000000006044820152606401610453565b604b805460646049557ff92fa926bd2752cdf04e181d860ff72908ca25527923d5ab68f37886040ec574604a5562ffffff191661ffff90921691909117620100001762ff000019169055565b6000610404306113c6565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610be65760405162461bcd60e51b8152600401610453906118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c18610de6565b6001600160a01b031614610c3e5760405162461bcd60e51b8152600401610453906118e1565b600354600160a01b900460ff1615610c685760405162461bcd60e51b81526004016104539061190f565b610c7863d9dc1f1960e01b610e07565b610cc45760405162461bcd60e51b815260206004820152601760248201527f5365744c6f63616c41646d696e20466f7262696464656e0000000000000000006044820152606401610453565b6001600160a01b038216610d0c5760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b6044820152606401610453565b610d1582611405565b506001919050565b600061040460008054600154604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600061040461147c565b90565b60006001600160e01b031982166314751dbf60e01b1480610dc757506001600160e01b031982166352d1902d60e01b145b806103ef57506301ffc9a760e01b6001600160e01b03198316146103ef565b6000600080516020611a1e8339815191525b546001600160a01b0316919050565b6003546000906001600160a01b03163003610ef55760006363d59cf360e11b610e2f306113c6565b3385604051602401610e4393929190611946565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506000610ec0610e84610de6565b836040518060400160405280601d81526020017f44656c656761746563616c6c20686173416363657373204661696c65640000008152506114a4565b90508060018251610ed1919061196f565b81518110610ee157610ee1611990565b60209101015160f81c600114949350505050565b6003546001600160a01b031663c7ab39e6610f0f306113c6565b33856040518463ffffffff1660e01b8152600401610f2f93929190611946565b602060405180830381865afa158015610f4c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef91906119a6565b6003546000906001600160a01b0316300361103857600063e25d75f060e01b600254604051602401610fa491815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506000611004610fe5610de6565b836040518060600160405280602581526020016119f9602591396114a4565b90508060018251611015919061196f565b8151811061102557611025611990565b60209101015160f81c6001149392505050565b600354600254604051630e25d75f60e41b81526001600160a01b039092169163e25d75f09161106d9160040190815260200190565b602060405180830381865afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040491906119a6565b6110b6610de6565b6001600160a01b0316816001600160a01b0316036111165760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204e657720496d706c656d656e746174696f6e0000000000006044820152606401610453565b611126637147855d60e01b610e07565b6111725760405162461bcd60e51b815260206004820152601960248201527f5570677261646520436f6e7465787420466f7262696464656e000000000000006044820152606401610453565b50565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156111bf576111aa8461156d565b5060408051600081526020810190915261096f565b836001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611219575060408051601f3d908101601f19168201909252611216918101906119c3565b60015b61125d5760405162461bcd60e51b8152602060048201526015602482015274125b1b1959d85b0815555414c810dbdb9d1c9858dd605a1b6044820152606401610453565b600080516020611a1e83398151915281146112b25760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a590815555414c810dbdb9d1c9858dd605a1b6044820152606401610453565b506040516301ffc9a760e01b81526314751dbf60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa92505050801561131a575060408051601f3d908101601f19168201909252611317918101906119a6565b60015b6113665760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204950726f787920436f6e74726163740000000000000000006044820152606401610453565b806113b35760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204950726f787920436f6e74726163740000000000000000006044820152606401610453565b506113bf8484846115ee565b905061096f565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f54ab0d18de7958786ba1ad85966d59baa2b395455f0530dcdcfd732e6af539e29181900360200190a350565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610df8565b60606001600160a01b0384163b6114f85760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b6044820152606401610453565b600080856001600160a01b03168560405161151391906119dc565b600060405180830381855af49150503d806000811461154e576040519150601f19603f3d011682016040523d82523d6000602084013e611553565b606091505b5091509150611563828286611658565b9695505050505050565b6001600160a01b0381163b6115bf5760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b6044820152606401610453565b600080516020611a1e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606115f984611691565b6000835111806116065750815b15611641576113bf84846040518060400160405280601381526020017211195b1959d85d1958d85b1b0811985a5b1959606a1b8152506114a4565b505060408051600081526020810190915292915050565b6060831561166757508161096f565b8251156116775782518084602001fd5b8160405162461bcd60e51b81526004016104539190611884565b61169a8161156d565b6040516001600160a01b03821690309033907f354bd4b6eb65d64e6c79c53fa4f983a5e6bec4824ce4627c71be0b2722f4917e90600090a450565b6000602082840312156116e757600080fd5b81356001600160e01b03198116811461096f57600080fd5b801515811461117257600080fd5b80356105cb816116ff565b60006020828403121561172a57600080fd5b813561096f816116ff565b80356001600160a01b03811681146105cb57600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561177757600080fd5b61178084611735565b9250602084013567ffffffffffffffff8082111561179d57600080fd5b818601915086601f8301126117b157600080fd5b8135818111156117c3576117c361174c565b604051601f8201601f19908116603f011681019083821181831017156117eb576117eb61174c565b8160405282815289602084870101111561180457600080fd5b82602086016020830137600060208483010152809650505050505061182b6040850161170d565b90509250925092565b60005b8381101561184f578181015183820152602001611837565b50506000910152565b60008151808452611870816020860160208601611834565b601f01601f19169290920160200192915050565b60208152600061096f6020830184611858565b6000602082840312156118a957600080fd5b61096f82611735565b602080825260159082015274125b1b1959d85b0810dbdb9d1c9858dd0810d85b1b605a1b604082015260600190565b602080825260149082015273141c9bde1e4810d85b1b195908125b9d985b1a5960621b604082015260600190565b60208082526017908201527f536166654d6f64653a2043616c6c2052656a6563746564000000000000000000604082015260600190565b9283526001600160a01b039190911660208301526001600160e01b031916604082015260600190565b818103818111156103ef57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119b857600080fd5b815161096f816116ff565b6000602082840312156119d557600080fd5b5051919050565b600082516119ee818460208701611834565b919091019291505056fe44656c656761746563616c6c2069735265616c6d55706772616461626c65204661696c6564360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220de191515ff94dad1d46a13331b196009553f43ab588f7d1db26089652ec9357e64736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
  "deployedBytecode": "0x60806040526004361061010c5760003560e01c806375d0c0dc1161009a578063be22465d11610061578063be22465d146102e0578063d3e024b8146102ff578063d9dc1f1914610314578063f698da2514610334578063f94a0adb1461034957005b806375d0c0dc1461026e5780638129fc1c14610283578063870666cb14610298578063a0a8e460146102ad578063b4a0bdf3146102c257005b806352d1902d116100de57806352d1902d146101b25780635479d940146101d557806358dbc45d146101f45780637147855d14610221578063756af45f1461024e57005b806301ffc9a71461011557806338d38c971461014a57806344b7e5f21461017257806348e6be1c1461019257005b3661011357005b005b34801561012157600080fd5b506101356101303660046116d5565b61035e565b60405190151581526020015b60405180910390f35b34801561015657600080fd5b5061015f6103f5565b60405161ffff9091168152602001610141565b34801561017e57600080fd5b5061013561018d366004611718565b610409565b34801561019e57600080fd5b506101356101ad366004611718565b6105d0565b3480156101be57600080fd5b506101c76107a4565b604051908152602001610141565b3480156101e157600080fd5b50600354600160a81b900460ff16610135565b34801561020057600080fd5b50610209610831565b6040516001600160a01b039091168152602001610141565b34801561022d57600080fd5b5061024161023c366004611762565b61083b565b6040516101419190611884565b34801561025a57600080fd5b50610113610269366004611897565b610976565b34801561027a57600080fd5b506000546101c7565b34801561028f57600080fd5b50610113610a35565b3480156102a457600080fd5b506101c7610b91565b3480156102b957600080fd5b506001546101c7565b3480156102ce57600080fd5b506003546001600160a01b0316610209565b3480156102ec57600080fd5b50600354600160a01b900460ff16610135565b34801561030b57600080fd5b506002546101c7565b34801561032057600080fd5b5061013561032f366004611897565b610b9c565b34801561034057600080fd5b506101c7610d1d565b34801561035557600080fd5b50610209610d89565b60006001600160e01b031982166314b8343560e31b148061038f57506001600160e01b031982166396dc457560e01b145b806103aa57506001600160e01b031982166308ea925b60e41b145b806103c557506001600160e01b03198216637d22131d60e11b145b806103e057506001600160e01b031982166370319bff60e11b145b806103ef57506103ef82610d96565b92915050565b6000610404604b5461ffff1690565b905090565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361045c5760405162461bcd60e51b8152600401610453906118b2565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661048e610de6565b6001600160a01b0316146104b45760405162461bcd60e51b8152600401610453906118e1565b60006104c3604b5461ffff1690565b61ffff16116105145760405162461bcd60e51b815260206004820152601860248201527f436f6e7472616374204e6f7420496e697469616c697a656400000000000000006044820152606401610453565b61052463225bf2f960e11b610e07565b6105685760405162461bcd60e51b815260206004820152601560248201527429b2ba29b0b332a6b7b232902337b93134b23232b760591b6044820152606401610453565b6003805460ff60a01b1916600160a01b8415150217905560025430336001600160a01b03167fdd452a31d2e164a1ea436c084842c27d24ae2548a575a869f71b05a4ed16243f856040516105c0911515815260200190565b60405180910390a450805b919050565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361061a5760405162461bcd60e51b8152600401610453906118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661064c610de6565b6001600160a01b0316146106725760405162461bcd60e51b8152600401610453906118e1565b600354600160a01b900460ff161561069c5760405162461bcd60e51b81526004016104539061190f565b6106ac631239af8760e21b610e07565b6106f85760405162461bcd60e51b815260206004820152601a60248201527f5365745570677261646553746174757320466f7262696464656e0000000000006044820152606401610453565b610700610f70565b61074c5760405162461bcd60e51b815260206004820152601760248201527f5265616c6d205570677261646520466f7262696464656e0000000000000000006044820152606401610453565b6003805460ff60a81b1916600160a81b8415150217905560025430336001600160a01b03167fe9f97ad94c2ba252dcfc525e004f608ac5cb886955d8fc87d9e0ee070a698c56856040516105c0911515815260200190565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461081e5760405162461bcd60e51b815260206004820152601d60248201527f496c6c6567616c20436f6e74726163742044656c656761746563616c6c0000006044820152606401610453565b50600080516020611a1e83398151915290565b6000610404610de6565b60606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108855760405162461bcd60e51b8152600401610453906118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108b7610de6565b6001600160a01b0316146108dd5760405162461bcd60e51b8152600401610453906118e1565b600354600160a01b900460ff16156109075760405162461bcd60e51b81526004016104539061190f565b600354600160a81b900460ff166109585760405162461bcd60e51b8152602060048201526015602482015274155c19dc9859194810d85b1b0814995a9958dd1959605a1b6044820152606401610453565b610961846110ae565b61096c848484611175565b90505b9392505050565b600354600160a01b900460ff16156109a05760405162461bcd60e51b81526004016104539061190f565b6109b063756af45f60e01b610e07565b6109fc5760405162461bcd60e51b815260206004820152601a60248201527f57697468647261772042616c616e636520466f7262696464656e0000000000006044820152606401610453565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610a31573d6000803e3d6000fd5b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a7d5760405162461bcd60e51b8152600401610453906118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610aaf610de6565b6001600160a01b031614610ad55760405162461bcd60e51b8152600401610453906118e1565b604b5460029062010000900460ff16158015610af95750604b5461ffff8083169116105b610b455760405162461bcd60e51b815260206004820152601c60248201527f436f6e747261637420416c726561647920496e697469616c697a6564000000006044820152606401610453565b604b805460646049557ff92fa926bd2752cdf04e181d860ff72908ca25527923d5ab68f37886040ec574604a5562ffffff191661ffff90921691909117620100001762ff000019169055565b6000610404306113c6565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610be65760405162461bcd60e51b8152600401610453906118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c18610de6565b6001600160a01b031614610c3e5760405162461bcd60e51b8152600401610453906118e1565b600354600160a01b900460ff1615610c685760405162461bcd60e51b81526004016104539061190f565b610c7863d9dc1f1960e01b610e07565b610cc45760405162461bcd60e51b815260206004820152601760248201527f5365744c6f63616c41646d696e20466f7262696464656e0000000000000000006044820152606401610453565b6001600160a01b038216610d0c5760405162461bcd60e51b815260206004820152600f60248201526e1059191c995cdcc8125b9d985b1a59608a1b6044820152606401610453565b610d1582611405565b506001919050565b600061040460008054600154604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600061040461147c565b90565b60006001600160e01b031982166314751dbf60e01b1480610dc757506001600160e01b031982166352d1902d60e01b145b806103ef57506301ffc9a760e01b6001600160e01b03198316146103ef565b6000600080516020611a1e8339815191525b546001600160a01b0316919050565b6003546000906001600160a01b03163003610ef55760006363d59cf360e11b610e2f306113c6565b3385604051602401610e4393929190611946565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506000610ec0610e84610de6565b836040518060400160405280601d81526020017f44656c656761746563616c6c20686173416363657373204661696c65640000008152506114a4565b90508060018251610ed1919061196f565b81518110610ee157610ee1611990565b60209101015160f81c600114949350505050565b6003546001600160a01b031663c7ab39e6610f0f306113c6565b33856040518463ffffffff1660e01b8152600401610f2f93929190611946565b602060405180830381865afa158015610f4c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef91906119a6565b6003546000906001600160a01b0316300361103857600063e25d75f060e01b600254604051602401610fa491815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506000611004610fe5610de6565b836040518060600160405280602581526020016119f9602591396114a4565b90508060018251611015919061196f565b8151811061102557611025611990565b60209101015160f81c6001149392505050565b600354600254604051630e25d75f60e41b81526001600160a01b039092169163e25d75f09161106d9160040190815260200190565b602060405180830381865afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040491906119a6565b6110b6610de6565b6001600160a01b0316816001600160a01b0316036111165760405162461bcd60e51b815260206004820152601a60248201527f496c6c6567616c204e657720496d706c656d656e746174696f6e0000000000006044820152606401610453565b611126637147855d60e01b610e07565b6111725760405162461bcd60e51b815260206004820152601960248201527f5570677261646520436f6e7465787420466f7262696464656e000000000000006044820152606401610453565b50565b60607f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156111bf576111aa8461156d565b5060408051600081526020810190915261096f565b836001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611219575060408051601f3d908101601f19168201909252611216918101906119c3565b60015b61125d5760405162461bcd60e51b8152602060048201526015602482015274125b1b1959d85b0815555414c810dbdb9d1c9858dd605a1b6044820152606401610453565b600080516020611a1e83398151915281146112b25760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a590815555414c810dbdb9d1c9858dd605a1b6044820152606401610453565b506040516301ffc9a760e01b81526314751dbf60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa92505050801561131a575060408051601f3d908101601f19168201909252611317918101906119a6565b60015b6113665760405162461bcd60e51b815260206004820152601760248201527f496c6c6567616c204950726f787920436f6e74726163740000000000000000006044820152606401610453565b806113b35760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964204950726f787920436f6e74726163740000000000000000006044820152606401610453565b506113bf8484846115ee565b905061096f565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0383166001600160a01b031990911681179091556040805191825251309133917f54ab0d18de7958786ba1ad85966d59baa2b395455f0530dcdcfd732e6af539e29181900360200190a350565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610df8565b60606001600160a01b0384163b6114f85760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b6044820152606401610453565b600080856001600160a01b03168560405161151391906119dc565b600060405180830381855af49150503d806000811461154e576040519150601f19603f3d011682016040523d82523d6000602084013e611553565b606091505b5091509150611563828286611658565b9695505050505050565b6001600160a01b0381163b6115bf5760405162461bcd60e51b8152602060048201526018602482015277496c6c6567616c20436f6e7472616374204164647265737360401b6044820152606401610453565b600080516020611a1e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60606115f984611691565b6000835111806116065750815b15611641576113bf84846040518060400160405280601381526020017211195b1959d85d1958d85b1b0811985a5b1959606a1b8152506114a4565b505060408051600081526020810190915292915050565b6060831561166757508161096f565b8251156116775782518084602001fd5b8160405162461bcd60e51b81526004016104539190611884565b61169a8161156d565b6040516001600160a01b03821690309033907f354bd4b6eb65d64e6c79c53fa4f983a5e6bec4824ce4627c71be0b2722f4917e90600090a450565b6000602082840312156116e757600080fd5b81356001600160e01b03198116811461096f57600080fd5b801515811461117257600080fd5b80356105cb816116ff565b60006020828403121561172a57600080fd5b813561096f816116ff565b80356001600160a01b03811681146105cb57600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561177757600080fd5b61178084611735565b9250602084013567ffffffffffffffff8082111561179d57600080fd5b818601915086601f8301126117b157600080fd5b8135818111156117c3576117c361174c565b604051601f8201601f19908116603f011681019083821181831017156117eb576117eb61174c565b8160405282815289602084870101111561180457600080fd5b82602086016020830137600060208483010152809650505050505061182b6040850161170d565b90509250925092565b60005b8381101561184f578181015183820152602001611837565b50506000910152565b60008151808452611870816020860160208601611834565b601f01601f19169290920160200192915050565b60208152600061096f6020830184611858565b6000602082840312156118a957600080fd5b61096f82611735565b602080825260159082015274125b1b1959d85b0810dbdb9d1c9858dd0810d85b1b605a1b604082015260600190565b602080825260149082015273141c9bde1e4810d85b1b195908125b9d985b1a5960621b604082015260600190565b60208082526017908201527f536166654d6f64653a2043616c6c2052656a6563746564000000000000000000604082015260600190565b9283526001600160a01b039190911660208301526001600160e01b031916604082015260600190565b818103818111156103ef57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119b857600080fd5b815161096f816116ff565b6000602082840312156119d557600080fd5b5051919050565b600082516119ee818460208701611834565b919091019291505056fe44656c656761746563616c6c2069735265616c6d55706772616461626c65204661696c6564360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220de191515ff94dad1d46a13331b196009553f43ab588f7d1db26089652ec9357e64736f6c63430008110033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_18895": {
          "entryPoint": null,
          "id": 18895,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_20273": {
          "entryPoint": null,
          "id": 20273,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_msgSender_28184": {
          "entryPoint": null,
          "id": 28184,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@getAddressSlot_3485": {
          "entryPoint": 292,
          "id": 3485,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 295,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x01": {
          "entryPoint": 335,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:373:76",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:76",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "63:176:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "73:17:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "85:1:76"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "88:1:76"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "81:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "81:9:76"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "73:4:76"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "122:111:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "143:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "150:3:76",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "155:10:76",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "146:3:76"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "146:20:76"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "136:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "136:31:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "136:31:76"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "187:1:76",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "190:4:76",
                                  "type": "",
                                  "value": "0x11"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "180:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "180:15:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "180:15:76"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "215:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "218:4:76",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "208:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "208:15:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "208:15:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "diff",
                            "nodeType": "YulIdentifier",
                            "src": "105:4:76"
                          },
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "111:1:76"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "102:2:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "102:11:76"
                      },
                      "nodeType": "YulIf",
                      "src": "99:134:76"
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "45:1:76",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "48:1:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "54:4:76",
                    "type": ""
                  }
                ],
                "src": "14:225:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "276:95:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "293:1:76",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "300:3:76",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "305:10:76",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "296:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "296:20:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "286:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "286:31:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "286:31:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "333:1:76",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "336:4:76",
                            "type": "",
                            "value": "0x01"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "326:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "326:15:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "326:15:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "357:1:76",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "360:4:76",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "350:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "350:15:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "350:15:76"
                    }
                  ]
                },
                "name": "panic_error_0x01",
                "nodeType": "YulFunctionDefinition",
                "src": "244:127:76"
              }
            ]
          },
          "contents": "{\n    { }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x01()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n}",
          "id": 76,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x43 PUSH1 0x1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBD PUSH3 0x127 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC EQ PUSH3 0x74 JUMPI PUSH3 0x74 PUSH3 0x14F JUMP JUMPDEST PUSH3 0xA1 PUSH1 0x1 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6104 PUSH3 0x127 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1C3A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE EQ PUSH3 0xC1 JUMPI PUSH3 0xC1 PUSH3 0x14F JUMP JUMPDEST CALLER PUSH3 0xEA PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1C3A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 SHL PUSH3 0x124 PUSH1 0x20 SHL PUSH3 0xD93 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH2 0xFFFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH3 0x165 JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x149 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1A73 PUSH3 0x1C7 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x415 ADD MSTORE DUP2 DUP2 PUSH2 0x45E ADD MSTORE DUP2 DUP2 PUSH2 0x5DC ADD MSTORE DUP2 DUP2 PUSH2 0x61C ADD MSTORE DUP2 DUP2 PUSH2 0x7B1 ADD MSTORE DUP2 DUP2 PUSH2 0x847 ADD MSTORE DUP2 DUP2 PUSH2 0x887 ADD MSTORE DUP2 DUP2 PUSH2 0xA3F ADD MSTORE DUP2 DUP2 PUSH2 0xA7F ADD MSTORE DUP2 DUP2 PUSH2 0xBA8 ADD MSTORE PUSH2 0xBE8 ADD MSTORE PUSH2 0x1A73 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75D0C0DC GT PUSH2 0x9A JUMPI DUP1 PUSH4 0xBE22465D GT PUSH2 0x61 JUMPI DUP1 PUSH4 0xBE22465D EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0xD3E024B8 EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0xD9DC1F19 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xF698DA25 EQ PUSH2 0x334 JUMPI DUP1 PUSH4 0xF94A0ADB EQ PUSH2 0x349 JUMPI STOP JUMPDEST DUP1 PUSH4 0x75D0C0DC EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x870666CB EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xA0A8E460 EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0xB4A0BDF3 EQ PUSH2 0x2C2 JUMPI STOP JUMPDEST DUP1 PUSH4 0x52D1902D GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x5479D940 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x58DBC45D EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0x7147855D EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x756AF45F EQ PUSH2 0x24E JUMPI STOP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x38D38C97 EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0x44B7E5F2 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x48E6BE1C EQ PUSH2 0x192 JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0x113 JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0x16D5 JUMP JUMPDEST PUSH2 0x35E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x3F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x141 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH2 0x18D CALLDATASIZE PUSH1 0x4 PUSH2 0x1718 JUMP JUMPDEST PUSH2 0x409 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x1718 JUMP JUMPDEST PUSH2 0x5D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0x7A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x141 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x135 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x831 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x141 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x241 PUSH2 0x23C CALLDATASIZE PUSH1 0x4 PUSH2 0x1762 JUMP JUMPDEST PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0x1884 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x1897 JUMP JUMPDEST PUSH2 0x976 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x1C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0xA35 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0xB91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x209 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x135 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x1C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x1897 JUMP JUMPDEST PUSH2 0xB9C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0xD1D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0xD89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x14B83435 PUSH1 0xE3 SHL EQ DUP1 PUSH2 0x38F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x96DC4575 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x3AA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x8EA925B PUSH1 0xE4 SHL EQ JUMPDEST DUP1 PUSH2 0x3C5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7D22131D PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x3E0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x70319BFF PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x3EF JUMPI POP PUSH2 0x3EF DUP3 PUSH2 0xD96 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 PUSH1 0x4B SLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x45C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x48E PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C3 PUSH1 0x4B SLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND GT PUSH2 0x514 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E7472616374204E6F7420496E697469616C697A65640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0x524 PUSH4 0x225BF2F9 PUSH1 0xE1 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x568 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x29B2BA29B0B332A6B7B232902337B93134B23232B7 PUSH1 0x59 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP5 ISZERO ISZERO MUL OR SWAP1 SSTORE PUSH1 0x2 SLOAD ADDRESS CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDD452A31D2E164A1EA436C084842C27D24AE2548A575A869F71B05A4ED16243F DUP6 PUSH1 0x40 MLOAD PUSH2 0x5C0 SWAP2 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP DUP1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x61A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x64C PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x672 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x69C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x190F JUMP JUMPDEST PUSH2 0x6AC PUSH4 0x1239AF87 PUSH1 0xE2 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x6F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5365745570677261646553746174757320466F7262696464656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0x700 PUSH2 0xF70 JUMP JUMPDEST PUSH2 0x74C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265616C6D205570677261646520466F7262696464656E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL DUP5 ISZERO ISZERO MUL OR SWAP1 SSTORE PUSH1 0x2 SLOAD ADDRESS CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE9F97AD94C2BA252DCFC525E004F608AC5CB886955D8FC87D9E0EE070A698C56 DUP6 PUSH1 0x40 MLOAD PUSH2 0x5C0 SWAP2 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x81E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496C6C6567616C20436F6E74726163742044656C656761746563616C6C000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1A1E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x885 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8B7 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x907 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x190F JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x958 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x155C19DC9859194810D85B1B0814995A9958DD1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0x961 DUP5 PUSH2 0x10AE JUMP JUMPDEST PUSH2 0x96C DUP5 DUP5 DUP5 PUSH2 0x1175 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x190F JUMP JUMPDEST PUSH2 0x9B0 PUSH4 0x756AF45F PUSH1 0xE0 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x9FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57697468647261772042616C616E636520466F7262696464656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xA7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAAF PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xAD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x4B SLOAD PUSH1 0x2 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xAF9 JUMPI POP PUSH1 0x4B SLOAD PUSH2 0xFFFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH2 0xB45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E747261637420416C726561647920496E697469616C697A656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x4B DUP1 SLOAD PUSH1 0x64 PUSH1 0x49 SSTORE PUSH32 0xF92FA926BD2752CDF04E181D860FF72908CA25527923D5AB68F37886040EC574 PUSH1 0x4A SSTORE PUSH3 0xFFFFFF NOT AND PUSH2 0xFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH3 0x10000 OR PUSH3 0xFF0000 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 ADDRESS PUSH2 0x13C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xBE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC18 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x190F JUMP JUMPDEST PUSH2 0xC78 PUSH4 0xD9DC1F19 PUSH1 0xE0 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0xCC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5365744C6F63616C41646D696E20466F7262696464656E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD0C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1059191C995CDCC8125B9D985B1A59 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0xD15 DUP3 PUSH2 0x1405 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 PUSH2 0x147C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x14751DBF PUSH1 0xE0 SHL EQ DUP1 PUSH2 0xDC7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x52D1902D PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x3EF JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1A1E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0xEF5 JUMPI PUSH1 0x0 PUSH4 0x63D59CF3 PUSH1 0xE1 SHL PUSH2 0xE2F ADDRESS PUSH2 0x13C6 JUMP JUMPDEST CALLER DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE43 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH1 0x0 PUSH2 0xEC0 PUSH2 0xE84 PUSH2 0xDE6 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x44656C656761746563616C6C20686173416363657373204661696C6564000000 DUP2 MSTORE POP PUSH2 0x14A4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xED1 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xEE1 JUMPI PUSH2 0xEE1 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x20 SWAP2 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0x1 EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC7AB39E6 PUSH2 0xF0F ADDRESS PUSH2 0x13C6 JUMP JUMPDEST CALLER DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF2F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3EF SWAP2 SWAP1 PUSH2 0x19A6 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x1038 JUMPI PUSH1 0x0 PUSH4 0xE25D75F0 PUSH1 0xE0 SHL PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFA4 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH1 0x0 PUSH2 0x1004 PUSH2 0xFE5 PUSH2 0xDE6 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19F9 PUSH1 0x25 SWAP2 CODECOPY PUSH2 0x14A4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0x1015 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1025 JUMPI PUSH2 0x1025 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x20 SWAP2 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0x1 EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xE25D75F PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xE25D75F0 SWAP2 PUSH2 0x106D SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x108A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x404 SWAP2 SWAP1 PUSH2 0x19A6 JUMP JUMPDEST PUSH2 0x10B6 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1116 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496C6C6567616C204E657720496D706C656D656E746174696F6E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0x1126 PUSH4 0x7147855D PUSH1 0xE0 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x1172 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5570677261646520436F6E7465787420466F7262696464656E00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11BF JUMPI PUSH2 0x11AA DUP5 PUSH2 0x156D JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x96F JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1219 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1216 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x125D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x125B1B1959D85B0815555414C810DBDB9D1C9858DD PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1A1E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x125B9D985B1A590815555414C810DBDB9D1C9858DD PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x14751DBF PUSH1 0xE0 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x131A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1317 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19A6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1366 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496C6C6567616C204950726F787920436F6E7472616374000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST DUP1 PUSH2 0x13B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964204950726F787920436F6E7472616374000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST POP PUSH2 0x13BF DUP5 DUP5 DUP5 PUSH2 0x15EE JUMP JUMPDEST SWAP1 POP PUSH2 0x96F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP4 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD ADDRESS SWAP2 CALLER SWAP2 PUSH32 0x54AB0D18DE7958786BA1AD85966D59BAA2B395455F0530DCDCFD732E6AF539E2 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0xDF8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x14F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x496C6C6567616C20436F6E74726163742041646472657373 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1513 SWAP2 SWAP1 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x154E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1553 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1563 DUP3 DUP3 DUP7 PUSH2 0x1658 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x15BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x496C6C6567616C20436F6E74726163742041646472657373 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1A1E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15F9 DUP5 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT DUP1 PUSH2 0x1606 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0x1641 JUMPI PUSH2 0x13BF DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH19 0x11195B1959D85D1958D85B1B0811985A5B1959 PUSH1 0x6A SHL DUP2 MSTORE POP PUSH2 0x14A4 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1667 JUMPI POP DUP2 PUSH2 0x96F JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1677 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP2 SWAP1 PUSH2 0x1884 JUMP JUMPDEST PUSH2 0x169A DUP2 PUSH2 0x156D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 ADDRESS SWAP1 CALLER SWAP1 PUSH32 0x354BD4B6EB65D64E6C79C53FA4F983A5E6BEC4824CE4627C71BE0B2722F4917E SWAP1 PUSH1 0x0 SWAP1 LOG4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x96F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5CB DUP2 PUSH2 0x16FF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x96F DUP2 PUSH2 0x16FF JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1780 DUP5 PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x179D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x17B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x17C3 JUMPI PUSH2 0x17C3 PUSH2 0x174C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x17EB JUMPI PUSH2 0x17EB PUSH2 0x174C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP10 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP7 POP POP POP POP POP POP PUSH2 0x182B PUSH1 0x40 DUP6 ADD PUSH2 0x170D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x184F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1837 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1870 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1834 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x96F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1858 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x96F DUP3 PUSH2 0x1735 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x125B1B1959D85B0810DBDB9D1C9858DD0810D85B1B PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x141C9BDE1E4810D85B1B195908125B9D985B1A59 PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6F64653A2043616C6C2052656A6563746564000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3EF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x96F DUP2 PUSH2 0x16FF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19EE DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1834 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID DIFFICULTY PUSH6 0x6C6567617465 PUSH4 0x616C6C20 PUSH10 0x735265616C6D55706772 PUSH2 0x6461 PUSH3 0x6C6520 CHAINID PUSH2 0x696C PUSH6 0x64360894A13B LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220DE NOT ISZERO ISZERO SELFDESTRUCT SWAP5 0xDA 0xD1 0xD4 PUSH11 0x13331B196009553F43AB58 DUP16 PUSH30 0x1DB26089652EC9357E64736F6C63430008110033B53127684A568B3173AE SGT 0xB9 0xF8 0xA6 ADD PUSH15 0x243E63B6E8EE1178D6A717850B5D61 SUB ",
      "sourceMap": "699:1074:47:-:0;;;2438:4:41;2394:49;;1129:16:47;;;;;;;;;-1:-1:-1;4522:54:40;4575:1;4530:41;4522:54;:::i;:::-;1541:66:41;4490:87:40;4483:95;;;;:::i;:::-;4614:45;4658:1;4622:32;4614:45;:::i;:::-;-1:-1:-1;;;;;;;;;;;4591:69:40;4584:77;;;;:::i;:::-;659:10:74;4719:40:40;-1:-1:-1;;;;;;;;;;;4747:11:40;;4719:27;;;;;:40;;:::i;:::-;:61;;-1:-1:-1;;;;;4719:61:40;;;;-1:-1:-1;;;;;;4719:61:40;;;;;;;;;4839:13;:21;;-1:-1:-1;;;;4866:18:40;-1:-1:-1;;;4866:18:40;;;699:1074:47;;1480:131:14;1597:4;1480:131::o;14:225:76:-;81:9;;;102:11;;;99:134;;;155:10;150:3;146:20;143:1;136:31;190:4;187:1;180:15;218:4;215:1;208:15;99:134;14:225;;;;:::o;244:127::-;305:10;300:3;296:20;293:1;286:31;336:4;333:1;326:15;360:4;357:1;350:15;244:127;699:1074:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@_19620": {
          "entryPoint": null,
          "id": 19620,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_19625": {
          "entryPoint": null,
          "id": 19625,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_authorizeUpgrade_19291": {
          "entryPoint": 4270,
          "id": 19291,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_domainSeparatorV4_19573": {
          "entryPoint": null,
          "id": 19573,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_getInitializedCount_19970": {
          "entryPoint": null,
          "id": 19970,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_getLocalAdmin_19354": {
          "entryPoint": 5244,
          "id": 19354,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_hasPermission_18786": {
          "entryPoint": 3591,
          "id": 18786,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_implementation_19052": {
          "entryPoint": 3558,
          "id": 19052,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_isRealmUpgradable_18840": {
          "entryPoint": 3952,
          "id": 18840,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_msgSender_28184": {
          "entryPoint": null,
          "id": 28184,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_setImplementation_19076": {
          "entryPoint": 5485,
          "id": 19076,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_setLocalAdmin_19380": {
          "entryPoint": 5125,
          "id": 19380,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_upgradeToAndCallUUPS_19220": {
          "entryPoint": 4469,
          "id": 19220,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@_upgradeToAndCall_19134": {
          "entryPoint": 5614,
          "id": 19134,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@_upgradeTo_19097": {
          "entryPoint": 5777,
          "id": 19097,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@accessControlManager_19518": {
          "entryPoint": null,
          "id": 19518,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@contractContext_19510": {
          "entryPoint": 2961,
          "id": 19510,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@contractName_19480": {
          "entryPoint": null,
          "id": 19480,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@contractRealm_19496": {
          "entryPoint": null,
          "id": 19496,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@contractVersion_19488": {
          "entryPoint": null,
          "id": 19488,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@domainSeparator_19552": {
          "entryPoint": 3357,
          "id": 19552,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@functionDelegateCall_2712": {
          "entryPoint": 5284,
          "id": 2712,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@generateCtx_3273": {
          "entryPoint": 5062,
          "id": 3273,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getAddressSlot_3485": {
          "entryPoint": 3475,
          "id": 3485,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getBooleanSlot_3496": {
          "entryPoint": null,
          "id": 3496,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@initVersion_19582": {
          "entryPoint": 1013,
          "id": 19582,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@initialize_20294": {
          "entryPoint": 2613,
          "id": 20294,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@isContract_2463": {
          "entryPoint": null,
          "id": 2463,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@isSafeMode_19535": {
          "entryPoint": null,
          "id": 19535,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@isUpgradable_19543": {
          "entryPoint": null,
          "id": 19543,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@localAdmin_19300": {
          "entryPoint": 3465,
          "id": 19300,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@proxiableUUID_19232": {
          "entryPoint": 1956,
          "id": 19232,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@setLocalAdmin_19341": {
          "entryPoint": 2972,
          "id": 19341,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@setSafeMode_19424": {
          "entryPoint": 1033,
          "id": 19424,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@setUpgradeStatus_19472": {
          "entryPoint": 1488,
          "id": 19472,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@subjectAddress_19527": {
          "entryPoint": 2097,
          "id": 19527,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@supportsInterface_19038": {
          "entryPoint": 3478,
          "id": 19038,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@supportsInterface_20344": {
          "entryPoint": 862,
          "id": 20344,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@supportsInterface_28145": {
          "entryPoint": null,
          "id": 28145,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@upgradeTo_19267": {
          "entryPoint": 2107,
          "id": 19267,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@verifyCallResult_2743": {
          "entryPoint": 5720,
          "id": 2743,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@withdrawBalance_19615": {
          "entryPoint": 2422,
          "id": 19615,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "abi_decode_address": {
          "entryPoint": 5941,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_bool": {
          "entryPoint": 5901,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 6295,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_bytes_memory_ptrt_bool": {
          "entryPoint": 5986,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_bool": {
          "entryPoint": 5912,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bool_fromMemory": {
          "entryPoint": 6566,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes32_fromMemory": {
          "entryPoint": 6595,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes4": {
          "entryPoint": 5845,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_bytes": {
          "entryPoint": 6232,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 6620,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_address_t_bytes4__to_t_bytes32_t_address_t_bytes4__fromStack_reversed": {
          "entryPoint": 6470,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 6,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed": {
          "entryPoint": 6276,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1743d58f28debdf6a6a953e43c947ed9f3ea362b1c501624c84e7c7983b4abbb__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1aaf981f30054a65d39418944b5359c2dc3baea9641d1d5e407dcf99bc044957__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_27daff9643cb907a79280a48368f7240b6c3f1e3dd4424231416bc06e573edf1__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_27fddb5e90054188951c7d3210cd2c13109ea6bf6cc68d2ec0eee31c40360d39__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_2946dcfeb949540b6a13ffe1d28bb66968c72b47f5c640af5b9575b0322fbb71__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_70d9559ff25a3560ddd416fd1f9841fa59a34c484b3b694a97b0259d7e7cd34b__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_70ddeff3550863f5fe7a006931e638acd5da5445ef0ef2d52d6528c5ccbe4c29__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_8122b027808cd0877c813c37ddfc9ed2c232c21136d0c0f9b2ece5f62cd10512__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_81c9bb89a80e66169f6f16a4373efe0bb1710b75168b6f0a34909df98a63b9de__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_8ecd261bf6348ea490454a5d090fdd7f5d46a72961b077993357598493da28a3__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 6322,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_999b8d24795d7f45e7f3006064c0e9d2e15f910e6d37309e8cf2bad0d7d6e8ef__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_adac9d597554a1bfa0bebd65d312131cc29ee8becd0972dd6f271055ee9e9b4e__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_ae56fcfaf2dee18f69e59768e5fd7058ccde6091fc2bfe209e5bbfceb2ff3b07__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_bc4b571414e1ccc3b39fd01cdf42feb8a9063af545693af3672df5f5495d797d__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_d2cfdc489448cdcbb4af0483f9a19686c950133ed5508983f3178c4eee112762__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 6415,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_dd938394e2d548bdb34e19729728ff292e3bc891112353d04c4773753f9d07d3__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_ea1de5e66f64c7661e43e17531270585624c08a7135df9af07f4d0b226d14082__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_f130e6b50da7ec9a0722a72a8a367cd43948ddc555763da2e03ecf4cbaf2c972__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_f8aeb1efdb15db64a2e64cfdb422cf3989b25f29200398250689d763ed3fefdd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_fbed617c85f9149bb4d65264da518f104ac547573d5a7bca75f5e6588ecc40e7__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 6369,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 6511,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "copy_memory_to_memory_with_cleanup": {
          "entryPoint": 6196,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "panic_error_0x32": {
          "entryPoint": 6544,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 5964,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_bool": {
          "entryPoint": 5887,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:13570:76",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:76",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "83:217:76",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "129:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "138:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "141:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "131:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "131:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "131:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "104:7:76"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "113:9:76"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "100:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "100:23:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "125:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "96:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "96:32:76"
                      },
                      "nodeType": "YulIf",
                      "src": "93:52:76"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "154:36:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "180:9:76"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "167:12:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "167:23:76"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "158:5:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "254:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "263:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "266:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "256:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "256:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "256:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "212:5:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "223:5:76"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "234:3:76",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "239:10:76",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "230:3:76"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "230:20:76"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "219:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "219:32:76"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "209:2:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "209:43:76"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "202:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "202:51:76"
                      },
                      "nodeType": "YulIf",
                      "src": "199:71:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "279:15:76",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "289:5:76"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "279:6:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes4",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "49:9:76",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "60:7:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "72:6:76",
                    "type": ""
                  }
                ],
                "src": "14:286:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "400:92:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "410:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "422:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "433:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "418:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "418:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "410:4:76"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "452:9:76"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "477:6:76"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "470:6:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "470:14:76"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "463:6:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "463:22:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "445:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "445:41:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "445:41:76"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "369:9:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "380:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "391:4:76",
                    "type": ""
                  }
                ],
                "src": "305:187:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "596:89:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "606:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "618:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "629:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "614:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "614:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "606:4:76"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "648:9:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "663:6:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "671:6:76",
                                "type": "",
                                "value": "0xffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "659:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "659:19:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "641:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "641:38:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "641:38:76"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "565:9:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "576:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "587:4:76",
                    "type": ""
                  }
                ],
                "src": "497:188:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "732:76:76",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "786:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "795:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "798:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "788:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "788:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "788:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "755:5:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "776:5:76"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "769:6:76"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "769:13:76"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "762:6:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "762:21:76"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "752:2:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "752:32:76"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "745:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "745:40:76"
                      },
                      "nodeType": "YulIf",
                      "src": "742:60:76"
                    }
                  ]
                },
                "name": "validator_revert_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "721:5:76",
                    "type": ""
                  }
                ],
                "src": "690:118:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "859:82:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "869:29:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "891:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "878:12:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "878:20:76"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "869:5:76"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "929:5:76"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bool",
                          "nodeType": "YulIdentifier",
                          "src": "907:21:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "907:28:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "907:28:76"
                    }
                  ]
                },
                "name": "abi_decode_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "838:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "849:5:76",
                    "type": ""
                  }
                ],
                "src": "813:128:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1013:174:76",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1059:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1068:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1071:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1061:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1061:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1061:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1034:7:76"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1043:9:76"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1030:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1030:23:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1055:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1026:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1026:32:76"
                      },
                      "nodeType": "YulIf",
                      "src": "1023:52:76"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "1084:36:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1110:9:76"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1097:12:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1097:23:76"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "1088:5:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1151:5:76"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bool",
                          "nodeType": "YulIdentifier",
                          "src": "1129:21:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1129:28:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1129:28:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1166:15:76",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "1176:5:76"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1166:6:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "979:9:76",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "990:7:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1002:6:76",
                    "type": ""
                  }
                ],
                "src": "946:241:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1293:76:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1303:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1315:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1326:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1311:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1311:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1303:4:76"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1345:9:76"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1356:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1338:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1338:25:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1338:25:76"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1262:9:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1273:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1284:4:76",
                    "type": ""
                  }
                ],
                "src": "1192:177:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1475:102:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1485:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1497:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1508:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1493:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1493:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1485:4:76"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1527:9:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1542:6:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1558:3:76",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1563:1:76",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1554:3:76"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1554:11:76"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1567:1:76",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1550:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1550:19:76"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1538:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1538:32:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1520:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1520:51:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1520:51:76"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1444:9:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1455:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1466:4:76",
                    "type": ""
                  }
                ],
                "src": "1374:203:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1631:124:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1641:29:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1663:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1650:12:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1650:20:76"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "1641:5:76"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1733:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1742:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1745:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1735:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1735:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1735:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1692:5:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1703:5:76"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1718:3:76",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1723:1:76",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1714:3:76"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1714:11:76"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1727:1:76",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1710:3:76"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1710:19:76"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1699:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1699:31:76"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "1689:2:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1689:42:76"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1682:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1682:50:76"
                      },
                      "nodeType": "YulIf",
                      "src": "1679:70:76"
                    }
                  ]
                },
                "name": "abi_decode_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "1610:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "1621:5:76",
                    "type": ""
                  }
                ],
                "src": "1582:173:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1792:95:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1809:1:76",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1816:3:76",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1821:10:76",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "1812:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1812:20:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1802:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1802:31:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1802:31:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1849:1:76",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1852:4:76",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1842:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1842:15:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1842:15:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1873:1:76",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1876:4:76",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "1866:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1866:15:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1866:15:76"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "1760:127:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2002:953:76",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2048:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2057:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2060:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2050:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2050:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2050:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2023:7:76"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2032:9:76"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2019:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2019:23:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2044:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2015:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2015:32:76"
                      },
                      "nodeType": "YulIf",
                      "src": "2012:52:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2073:39:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2102:9:76"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "2083:18:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2083:29:76"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2073:6:76"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2121:46:76",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2152:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2163:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2148:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2148:18:76"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2135:12:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2135:32:76"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "2125:6:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2176:28:76",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2186:18:76",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "2180:2:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2231:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2240:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2243:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2233:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2233:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2233:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2219:6:76"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2227:2:76"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2216:2:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2216:14:76"
                      },
                      "nodeType": "YulIf",
                      "src": "2213:34:76"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2256:32:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2270:9:76"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "2281:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2266:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2266:22:76"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "2260:2:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2336:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2345:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2348:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2338:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2338:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2338:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2315:2:76"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2319:4:76",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2311:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2311:13:76"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2326:7:76"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2307:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2307:27:76"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2300:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2300:35:76"
                      },
                      "nodeType": "YulIf",
                      "src": "2297:55:76"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2361:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "2384:2:76"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2371:12:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2371:16:76"
                      },
                      "variables": [
                        {
                          "name": "_3",
                          "nodeType": "YulTypedName",
                          "src": "2365:2:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2410:22:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "2412:16:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2412:18:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2412:18:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "2402:2:76"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2406:2:76"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2399:2:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2399:10:76"
                      },
                      "nodeType": "YulIf",
                      "src": "2396:36:76"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2441:17:76",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2455:2:76",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "not",
                          "nodeType": "YulIdentifier",
                          "src": "2451:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2451:7:76"
                      },
                      "variables": [
                        {
                          "name": "_4",
                          "nodeType": "YulTypedName",
                          "src": "2445:2:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2467:23:76",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2487:2:76",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "2481:5:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2481:9:76"
                      },
                      "variables": [
                        {
                          "name": "memPtr",
                          "nodeType": "YulTypedName",
                          "src": "2471:6:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2499:71:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2521:6:76"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "2545:2:76"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2549:4:76",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2541:3:76"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2541:13:76"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "2556:2:76"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2537:3:76"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2537:22:76"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2561:2:76",
                                    "type": "",
                                    "value": "63"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2533:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2533:31:76"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "2566:2:76"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2529:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2529:40:76"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2517:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2517:53:76"
                      },
                      "variables": [
                        {
                          "name": "newFreePtr",
                          "nodeType": "YulTypedName",
                          "src": "2503:10:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2629:22:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "2631:16:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2631:18:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2631:18:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2588:10:76"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2600:2:76"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2585:2:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2585:18:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2608:10:76"
                              },
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2620:6:76"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2605:2:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2605:22:76"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "2582:2:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2582:46:76"
                      },
                      "nodeType": "YulIf",
                      "src": "2579:72:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2667:2:76",
                            "type": "",
                            "value": "64"
                          },
                          {
                            "name": "newFreePtr",
                            "nodeType": "YulIdentifier",
                            "src": "2671:10:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2660:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2660:22:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2660:22:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2698:6:76"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "2706:2:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2691:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2691:18:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2691:18:76"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2755:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2764:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2767:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2757:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2757:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2757:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2732:2:76"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2736:2:76"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2728:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2728:11:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2741:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2724:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2724:20:76"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "2746:7:76"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2721:2:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2721:33:76"
                      },
                      "nodeType": "YulIf",
                      "src": "2718:53:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2797:6:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2805:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2793:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2793:15:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2814:2:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2818:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2810:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2810:11:76"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "2823:2:76"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "2780:12:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2780:46:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2780:46:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2850:6:76"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2858:2:76"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2846:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2846:15:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2863:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2842:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2842:24:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2868:1:76",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2835:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2835:35:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2835:35:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2879:16:76",
                      "value": {
                        "name": "memPtr",
                        "nodeType": "YulIdentifier",
                        "src": "2889:6:76"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2879:6:76"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2904:45:76",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2934:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2945:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2930:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2930:18:76"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_bool",
                          "nodeType": "YulIdentifier",
                          "src": "2914:15:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2914:35:76"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "2904:6:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_bytes_memory_ptrt_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1952:9:76",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1963:7:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1975:6:76",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1983:6:76",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "1991:6:76",
                    "type": ""
                  }
                ],
                "src": "1892:1063:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3026:184:76",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3036:10:76",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "3045:1:76",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "3040:1:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3105:63:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "3130:3:76"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3135:1:76"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3126:3:76"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3126:11:76"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "3149:3:76"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3154:1:76"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3145:3:76"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3145:11:76"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3139:5:76"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3139:18:76"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "3119:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3119:39:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3119:39:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "3066:1:76"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3069:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "3063:2:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3063:13:76"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "3077:19:76",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "3079:15:76",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "3088:1:76"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3091:2:76",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "3084:3:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3084:10:76"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3079:1:76"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "3059:3:76",
                        "statements": []
                      },
                      "src": "3055:113:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "3188:3:76"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3193:6:76"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3184:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3184:16:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3202:1:76",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3177:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3177:27:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3177:27:76"
                    }
                  ]
                },
                "name": "copy_memory_to_memory_with_cleanup",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "3004:3:76",
                    "type": ""
                  },
                  {
                    "name": "dst",
                    "nodeType": "YulTypedName",
                    "src": "3009:3:76",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "3014:6:76",
                    "type": ""
                  }
                ],
                "src": "2960:250:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3264:221:76",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3274:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3294:5:76"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "3288:5:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3288:12:76"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "3278:6:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "3316:3:76"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3321:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3309:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3309:19:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3309:19:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3376:5:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3383:4:76",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3372:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3372:16:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3394:3:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3399:4:76",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3390:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3390:14:76"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "3406:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "3337:34:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3337:76:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3337:76:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3422:57:76",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3437:3:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "3450:6:76"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3458:2:76",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3446:3:76"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3446:15:76"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3467:2:76",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "3463:3:76"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3463:7:76"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3442:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3442:29:76"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3433:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3433:39:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3474:4:76",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3429:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3429:50:76"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "3422:3:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_bytes",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "3241:5:76",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "3248:3:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "3256:3:76",
                    "type": ""
                  }
                ],
                "src": "3215:270:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3609:98:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3626:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3637:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3619:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3619:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3619:21:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3649:52:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "3674:6:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3686:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3697:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3682:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3682:18:76"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "3657:16:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3657:44:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3649:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3578:9:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3589:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3600:4:76",
                    "type": ""
                  }
                ],
                "src": "3490:217:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3782:116:76",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3828:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3837:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3840:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3830:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3830:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3830:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3803:7:76"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3812:9:76"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3799:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3799:23:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3824:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3795:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3795:32:76"
                      },
                      "nodeType": "YulIf",
                      "src": "3792:52:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3853:39:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3882:9:76"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "3863:18:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3863:29:76"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3853:6:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3748:9:76",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3759:7:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3771:6:76",
                    "type": ""
                  }
                ],
                "src": "3712:186:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4077:171:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4094:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4105:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4087:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4087:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4087:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4128:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4139:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4124:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4124:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4144:2:76",
                            "type": "",
                            "value": "21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4117:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4117:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4117:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4167:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4178:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4163:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4163:18:76"
                          },
                          {
                            "hexValue": "496c6c6567616c20436f6e74726163742043616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4183:23:76",
                            "type": "",
                            "value": "Illegal Contract Call"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4156:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4156:51:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4156:51:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4216:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4228:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4239:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4224:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4224:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4216:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_8ecd261bf6348ea490454a5d090fdd7f5d46a72961b077993357598493da28a3__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4054:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4068:4:76",
                    "type": ""
                  }
                ],
                "src": "3903:345:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4427:170:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4444:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4455:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4437:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4437:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4437:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4478:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4489:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4474:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4474:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4494:2:76",
                            "type": "",
                            "value": "20"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4467:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4467:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4467:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4517:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4528:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4513:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4513:18:76"
                          },
                          {
                            "hexValue": "50726f78792043616c6c656420496e76616c6964",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4533:22:76",
                            "type": "",
                            "value": "Proxy Called Invalid"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4506:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4506:50:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4506:50:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4565:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4577:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4588:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4573:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4573:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4565:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_fbed617c85f9149bb4d65264da518f104ac547573d5a7bca75f5e6588ecc40e7__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4404:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4418:4:76",
                    "type": ""
                  }
                ],
                "src": "4253:344:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4776:174:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4793:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4804:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4786:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4786:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4786:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4827:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4838:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4823:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4823:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4843:2:76",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4816:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4816:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4816:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4866:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4877:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4862:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4862:18:76"
                          },
                          {
                            "hexValue": "436f6e7472616374204e6f7420496e697469616c697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "4882:26:76",
                            "type": "",
                            "value": "Contract Not Initialized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4855:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4855:54:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4855:54:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4918:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4930:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4941:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4926:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4926:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4918:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_bc4b571414e1ccc3b39fd01cdf42feb8a9063af545693af3672df5f5495d797d__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4753:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4767:4:76",
                    "type": ""
                  }
                ],
                "src": "4602:348:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5129:171:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5146:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5157:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5139:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5139:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5139:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5180:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5191:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5176:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5176:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5196:2:76",
                            "type": "",
                            "value": "21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5169:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5169:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5169:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5219:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5230:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5215:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5215:18:76"
                          },
                          {
                            "hexValue": "536574536166654d6f646520466f7262696464656e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "5235:23:76",
                            "type": "",
                            "value": "SetSafeMode Forbidden"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5208:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5208:51:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5208:51:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5268:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5280:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5291:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5276:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5276:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5268:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_27daff9643cb907a79280a48368f7240b6c3f1e3dd4424231416bc06e573edf1__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5106:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5120:4:76",
                    "type": ""
                  }
                ],
                "src": "4955:345:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5479:173:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5496:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5507:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5489:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5489:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5489:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5530:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5541:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5526:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5526:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5546:2:76",
                            "type": "",
                            "value": "23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5519:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5519:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5519:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5569:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5580:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5565:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5565:18:76"
                          },
                          {
                            "hexValue": "536166654d6f64653a2043616c6c2052656a6563746564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "5585:25:76",
                            "type": "",
                            "value": "SafeMode: Call Rejected"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5558:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5558:53:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5558:53:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5620:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5632:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5643:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5628:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5628:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5620:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_d2cfdc489448cdcbb4af0483f9a19686c950133ed5508983f3178c4eee112762__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5456:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5470:4:76",
                    "type": ""
                  }
                ],
                "src": "5305:347:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5831:176:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5848:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5859:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5841:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5841:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5841:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5882:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5893:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5878:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5878:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5898:2:76",
                            "type": "",
                            "value": "26"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5871:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5871:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5871:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5921:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5932:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5917:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5917:18:76"
                          },
                          {
                            "hexValue": "5365745570677261646553746174757320466f7262696464656e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "5937:28:76",
                            "type": "",
                            "value": "SetUpgradeStatus Forbidden"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "5910:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5910:56:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "5910:56:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5975:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5987:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5998:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5983:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5983:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "5975:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_adac9d597554a1bfa0bebd65d312131cc29ee8becd0972dd6f271055ee9e9b4e__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5808:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "5822:4:76",
                    "type": ""
                  }
                ],
                "src": "5657:350:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6186:173:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6203:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6214:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6196:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6196:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6196:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6237:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6248:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6233:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6233:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6253:2:76",
                            "type": "",
                            "value": "23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6226:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6226:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6226:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6276:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6287:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6272:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6272:18:76"
                          },
                          {
                            "hexValue": "5265616c6d205570677261646520466f7262696464656e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6292:25:76",
                            "type": "",
                            "value": "Realm Upgrade Forbidden"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6265:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6265:53:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6265:53:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6327:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6339:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6350:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6335:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6335:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6327:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_ea1de5e66f64c7661e43e17531270585624c08a7135df9af07f4d0b226d14082__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6163:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6177:4:76",
                    "type": ""
                  }
                ],
                "src": "6012:347:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6538:179:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6555:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6566:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6548:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6548:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6548:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6589:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6600:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6585:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6585:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6605:2:76",
                            "type": "",
                            "value": "29"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6578:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6578:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6578:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6628:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6639:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6624:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6624:18:76"
                          },
                          {
                            "hexValue": "496c6c6567616c20436f6e74726163742044656c656761746563616c6c",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "6644:31:76",
                            "type": "",
                            "value": "Illegal Contract Delegatecall"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6617:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6617:59:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6617:59:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6685:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6697:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6708:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "6693:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6693:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "6685:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_70d9559ff25a3560ddd416fd1f9841fa59a34c484b3b694a97b0259d7e7cd34b__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6515:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6529:4:76",
                    "type": ""
                  }
                ],
                "src": "6364:353:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6896:171:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6913:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6924:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6906:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6906:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6906:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6947:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6958:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6943:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6943:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6963:2:76",
                            "type": "",
                            "value": "21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6936:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6936:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6936:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6986:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6997:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6982:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6982:18:76"
                          },
                          {
                            "hexValue": "557067726164652043616c6c2052656a6563746564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7002:23:76",
                            "type": "",
                            "value": "Upgrade Call Rejected"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "6975:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6975:51:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6975:51:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7035:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7047:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7058:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7043:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7043:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7035:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_ae56fcfaf2dee18f69e59768e5fd7058ccde6091fc2bfe209e5bbfceb2ff3b07__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6873:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "6887:4:76",
                    "type": ""
                  }
                ],
                "src": "6722:345:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7246:176:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7263:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7274:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7256:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7256:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7256:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7297:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7308:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7293:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7293:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7313:2:76",
                            "type": "",
                            "value": "26"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7286:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7286:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7286:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7336:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7347:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7332:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7332:18:76"
                          },
                          {
                            "hexValue": "57697468647261772042616c616e636520466f7262696464656e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7352:28:76",
                            "type": "",
                            "value": "Withdraw Balance Forbidden"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7325:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7325:56:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7325:56:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7390:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7402:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7413:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7398:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7398:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7390:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1743d58f28debdf6a6a953e43c947ed9f3ea362b1c501624c84e7c7983b4abbb__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7223:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7237:4:76",
                    "type": ""
                  }
                ],
                "src": "7072:350:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7601:178:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7618:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7629:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7611:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7611:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7611:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7652:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7663:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7648:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7648:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7668:2:76",
                            "type": "",
                            "value": "28"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7641:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7641:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7641:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7691:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7702:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7687:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7687:18:76"
                          },
                          {
                            "hexValue": "436f6e747261637420416c726561647920496e697469616c697a6564",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "7707:30:76",
                            "type": "",
                            "value": "Contract Already Initialized"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7680:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7680:58:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7680:58:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7747:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7759:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7770:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7755:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7755:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "7747:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_f8aeb1efdb15db64a2e64cfdb422cf3989b25f29200398250689d763ed3fefdd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7578:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7592:4:76",
                    "type": ""
                  }
                ],
                "src": "7427:352:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7958:173:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7975:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7986:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7968:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7968:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7968:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8009:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8020:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8005:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8005:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8025:2:76",
                            "type": "",
                            "value": "23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "7998:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7998:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "7998:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8048:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8059:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8044:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8044:18:76"
                          },
                          {
                            "hexValue": "5365744c6f63616c41646d696e20466f7262696464656e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8064:25:76",
                            "type": "",
                            "value": "SetLocalAdmin Forbidden"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8037:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8037:53:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8037:53:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8099:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8111:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8122:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8107:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8107:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8099:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_81c9bb89a80e66169f6f16a4373efe0bb1710b75168b6f0a34909df98a63b9de__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7935:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "7949:4:76",
                    "type": ""
                  }
                ],
                "src": "7784:347:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8310:165:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8327:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8338:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8320:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8320:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8320:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8361:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8372:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8357:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8357:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8377:2:76",
                            "type": "",
                            "value": "15"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8350:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8350:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8350:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8400:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8411:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8396:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8396:18:76"
                          },
                          {
                            "hexValue": "4164647265737320496e76616c6964",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "8416:17:76",
                            "type": "",
                            "value": "Address Invalid"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8389:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8389:45:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8389:45:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8443:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8455:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8466:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8451:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8451:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8443:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_27fddb5e90054188951c7d3210cd2c13109ea6bf6cc68d2ec0eee31c40360d39__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8287:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8301:4:76",
                    "type": ""
                  }
                ],
                "src": "8136:339:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8635:215:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "8645:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8657:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8668:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8653:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8653:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8645:4:76"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8687:9:76"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "8698:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8680:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8680:25:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8680:25:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8725:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8736:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8721:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8721:18:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8745:6:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8761:3:76",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8766:1:76",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "8757:3:76"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8757:11:76"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8770:1:76",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8753:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8753:19:76"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "8741:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8741:32:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8714:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8714:60:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8714:60:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8794:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8805:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8790:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8790:18:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "8814:6:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8826:3:76",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8831:10:76",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "8822:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8822:20:76"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "8810:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8810:33:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8783:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8783:61:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8783:61:76"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_address_t_bytes4__to_t_bytes32_t_address_t_bytes4__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8588:9:76",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "8599:6:76",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "8607:6:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8615:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8626:4:76",
                    "type": ""
                  }
                ],
                "src": "8480:370:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8904:176:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "8914:17:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "8926:1:76"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "8929:1:76"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "8922:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8922:9:76"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "8914:4:76"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8963:111:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8984:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8991:3:76",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8996:10:76",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "8987:3:76"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8987:20:76"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8977:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8977:31:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8977:31:76"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9028:1:76",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9031:4:76",
                                  "type": "",
                                  "value": "0x11"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "9021:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "9021:15:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "9021:15:76"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9056:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9059:4:76",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "9049:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "9049:15:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "9049:15:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "diff",
                            "nodeType": "YulIdentifier",
                            "src": "8946:4:76"
                          },
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "8952:1:76"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "8943:2:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8943:11:76"
                      },
                      "nodeType": "YulIf",
                      "src": "8940:134:76"
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "8886:1:76",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "8889:1:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "8895:4:76",
                    "type": ""
                  }
                ],
                "src": "8855:225:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9117:95:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9134:1:76",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9141:3:76",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9146:10:76",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "9137:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9137:20:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9127:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9127:31:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9127:31:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9174:1:76",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9177:4:76",
                            "type": "",
                            "value": "0x32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9167:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9167:15:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9167:15:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9198:1:76",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9201:4:76",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "9191:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9191:15:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9191:15:76"
                    }
                  ]
                },
                "name": "panic_error_0x32",
                "nodeType": "YulFunctionDefinition",
                "src": "9085:127:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9295:167:76",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "9341:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9350:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9353:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "9343:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "9343:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "9343:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9316:7:76"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9325:9:76"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "9312:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9312:23:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9337:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "9308:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9308:32:76"
                      },
                      "nodeType": "YulIf",
                      "src": "9305:52:76"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "9366:29:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9385:9:76"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "9379:5:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9379:16:76"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "9370:5:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9426:5:76"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bool",
                          "nodeType": "YulIdentifier",
                          "src": "9404:21:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9404:28:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9404:28:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9441:15:76",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "9451:5:76"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "9441:6:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9261:9:76",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "9272:7:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9284:6:76",
                    "type": ""
                  }
                ],
                "src": "9217:245:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9641:176:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9658:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9669:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9651:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9651:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9651:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9692:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9703:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9688:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9688:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9708:2:76",
                            "type": "",
                            "value": "26"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9681:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9681:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9681:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9731:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9742:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9727:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9727:18:76"
                          },
                          {
                            "hexValue": "496c6c6567616c204e657720496d706c656d656e746174696f6e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9747:28:76",
                            "type": "",
                            "value": "Illegal New Implementation"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9720:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9720:56:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9720:56:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9785:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9797:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9808:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9793:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9793:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9785:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_2946dcfeb949540b6a13ffe1d28bb66968c72b47f5c640af5b9575b0322fbb71__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9618:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9632:4:76",
                    "type": ""
                  }
                ],
                "src": "9467:350:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9996:175:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10013:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10024:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10006:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10006:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10006:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10047:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10058:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10043:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10043:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10063:2:76",
                            "type": "",
                            "value": "25"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10036:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10036:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10036:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10086:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10097:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10082:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10082:18:76"
                          },
                          {
                            "hexValue": "5570677261646520436f6e7465787420466f7262696464656e",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10102:27:76",
                            "type": "",
                            "value": "Upgrade Context Forbidden"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10075:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10075:55:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10075:55:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10139:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10151:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10162:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10147:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10147:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10139:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_dd938394e2d548bdb34e19729728ff292e3bc891112353d04c4773753f9d07d3__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9973:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9987:4:76",
                    "type": ""
                  }
                ],
                "src": "9822:349:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10257:103:76",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10303:16:76",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10312:1:76",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "10315:1:76",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "10305:6:76"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10305:12:76"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10305:12:76"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10278:7:76"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10287:9:76"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "10274:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10274:23:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10299:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "10270:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10270:32:76"
                      },
                      "nodeType": "YulIf",
                      "src": "10267:52:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10328:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10344:9:76"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "10338:5:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10338:16:76"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "10328:6:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10223:9:76",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "10234:7:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "10246:6:76",
                    "type": ""
                  }
                ],
                "src": "10176:184:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10539:171:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10556:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10567:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10549:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10549:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10549:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10590:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10601:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10586:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10586:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10606:2:76",
                            "type": "",
                            "value": "21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10579:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10579:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10579:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10629:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10640:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10625:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10625:18:76"
                          },
                          {
                            "hexValue": "496c6c6567616c205555505320436f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10645:23:76",
                            "type": "",
                            "value": "Illegal UUPS Contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10618:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10618:51:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10618:51:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10678:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10690:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10701:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10686:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10686:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10678:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_f130e6b50da7ec9a0722a72a8a367cd43948ddc555763da2e03ecf4cbaf2c972__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10516:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10530:4:76",
                    "type": ""
                  }
                ],
                "src": "10365:345:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10889:171:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10906:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10917:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10899:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10899:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10899:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10940:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10951:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10936:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10936:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10956:2:76",
                            "type": "",
                            "value": "21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10929:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10929:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10929:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10979:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10990:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10975:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10975:18:76"
                          },
                          {
                            "hexValue": "496e76616c6964205555505320436f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "10995:23:76",
                            "type": "",
                            "value": "Invalid UUPS Contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10968:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10968:51:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10968:51:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11028:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11040:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11051:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11036:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11036:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11028:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1aaf981f30054a65d39418944b5359c2dc3baea9641d1d5e407dcf99bc044957__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "10866:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10880:4:76",
                    "type": ""
                  }
                ],
                "src": "10715:345:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11164:103:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "11174:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11186:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11197:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11182:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11182:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11174:4:76"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11216:9:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11231:6:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11243:3:76",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11248:10:76",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "11239:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11239:20:76"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "11227:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11227:33:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11209:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11209:52:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11209:52:76"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11133:9:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11144:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11155:4:76",
                    "type": ""
                  }
                ],
                "src": "11065:202:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11446:173:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11463:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11474:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11456:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11456:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11456:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11497:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11508:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11493:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11493:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11513:2:76",
                            "type": "",
                            "value": "23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11486:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11486:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11486:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11536:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11547:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11532:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11532:18:76"
                          },
                          {
                            "hexValue": "496c6c6567616c204950726f787920436f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11552:25:76",
                            "type": "",
                            "value": "Illegal IProxy Contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11525:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11525:53:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11525:53:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11587:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11599:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11610:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11595:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11595:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11587:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_999b8d24795d7f45e7f3006064c0e9d2e15f910e6d37309e8cf2bad0d7d6e8ef__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11423:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11437:4:76",
                    "type": ""
                  }
                ],
                "src": "11272:347:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11798:173:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11815:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11826:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11808:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11808:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11808:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11849:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11860:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11845:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11845:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11865:2:76",
                            "type": "",
                            "value": "23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11838:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11838:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11838:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11888:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11899:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11884:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11884:18:76"
                          },
                          {
                            "hexValue": "496e76616c6964204950726f787920436f6e7472616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11904:25:76",
                            "type": "",
                            "value": "Invalid IProxy Contract"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11877:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11877:53:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11877:53:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11939:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11951:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11962:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11947:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11947:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11939:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_70ddeff3550863f5fe7a006931e638acd5da5445ef0ef2d52d6528c5ccbe4c29__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11775:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11789:4:76",
                    "type": ""
                  }
                ],
                "src": "11624:347:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12095:110:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "12112:3:76"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12125:2:76",
                                    "type": "",
                                    "value": "96"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12129:6:76"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "12121:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12121:15:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12142:26:76",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "12138:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12138:31:76"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12117:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12117:53:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12105:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12105:66:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12105:66:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12180:19:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "12191:3:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12196:2:76",
                            "type": "",
                            "value": "20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12187:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12187:12:76"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "12180:3:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "12071:3:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "12076:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "12087:3:76",
                    "type": ""
                  }
                ],
                "src": "11976:229:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12423:276:76",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "12433:27:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12445:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12456:3:76",
                            "type": "",
                            "value": "160"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12441:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12441:19:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "12433:4:76"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12476:9:76"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "12487:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12469:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12469:25:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12469:25:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12514:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12525:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12510:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12510:18:76"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "12530:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12503:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12503:34:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12503:34:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12557:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12568:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12553:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12553:18:76"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "12573:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12546:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12546:34:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12546:34:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12600:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12611:2:76",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12596:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12596:18:76"
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "12616:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12589:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12589:34:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12589:34:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12643:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12654:3:76",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12639:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12639:19:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "12664:6:76"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12680:3:76",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12685:1:76",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "12676:3:76"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12676:11:76"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12689:1:76",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12672:3:76"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12672:19:76"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12660:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12660:32:76"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12632:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12632:61:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12632:61:76"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12360:9:76",
                    "type": ""
                  },
                  {
                    "name": "value4",
                    "nodeType": "YulTypedName",
                    "src": "12371:6:76",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "12379:6:76",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "12387:6:76",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "12395:6:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "12403:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12414:4:76",
                    "type": ""
                  }
                ],
                "src": "12210:489:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12878:174:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12895:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12906:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12888:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12888:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12888:21:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12929:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12940:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12925:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12925:18:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12945:2:76",
                            "type": "",
                            "value": "24"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12918:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12918:30:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12918:30:76"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12968:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12979:2:76",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12964:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12964:18:76"
                          },
                          {
                            "hexValue": "496c6c6567616c20436f6e74726163742041646472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "12984:26:76",
                            "type": "",
                            "value": "Illegal Contract Address"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12957:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12957:54:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12957:54:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13020:26:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13032:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13043:2:76",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13028:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13028:18:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13020:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_8122b027808cd0877c813c37ddfc9ed2c232c21136d0c0f9b2ece5f62cd10512__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12855:9:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12869:4:76",
                    "type": ""
                  }
                ],
                "src": "12704:348:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13194:150:76",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "13204:27:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "13224:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "13218:5:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13218:13:76"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "13208:6:76",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "13279:6:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13287:4:76",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13275:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13275:17:76"
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "13294:3:76"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "13299:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "13240:34:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13240:66:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13240:66:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13315:23:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "13326:3:76"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "13331:6:76"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13322:3:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13322:16:76"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "13315:3:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "13170:3:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13175:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "13186:3:76",
                    "type": ""
                  }
                ],
                "src": "13057:287:76"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13470:98:76",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13487:9:76"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13498:2:76",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13480:6:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13480:21:76"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13480:21:76"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13510:52:76",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "13535:6:76"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13547:9:76"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13558:2:76",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13543:3:76"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13543:18:76"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_bytes",
                          "nodeType": "YulIdentifier",
                          "src": "13518:16:76"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13518:44:76"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13510:4:76"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13439:9:76",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13450:6:76",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13461:4:76",
                    "type": ""
                  }
                ],
                "src": "13349:219:76"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_bool(value)\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptrt_bool(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n        value2 := abi_decode_bool(add(headStart, 64))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8ecd261bf6348ea490454a5d090fdd7f5d46a72961b077993357598493da28a3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Illegal Contract Call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fbed617c85f9149bb4d65264da518f104ac547573d5a7bca75f5e6588ecc40e7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Proxy Called Invalid\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_bc4b571414e1ccc3b39fd01cdf42feb8a9063af545693af3672df5f5495d797d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Contract Not Initialized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_27daff9643cb907a79280a48368f7240b6c3f1e3dd4424231416bc06e573edf1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"SetSafeMode Forbidden\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d2cfdc489448cdcbb4af0483f9a19686c950133ed5508983f3178c4eee112762__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"SafeMode: Call Rejected\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_adac9d597554a1bfa0bebd65d312131cc29ee8becd0972dd6f271055ee9e9b4e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"SetUpgradeStatus Forbidden\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ea1de5e66f64c7661e43e17531270585624c08a7135df9af07f4d0b226d14082__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Realm Upgrade Forbidden\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_70d9559ff25a3560ddd416fd1f9841fa59a34c484b3b694a97b0259d7e7cd34b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Illegal Contract Delegatecall\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ae56fcfaf2dee18f69e59768e5fd7058ccde6091fc2bfe209e5bbfceb2ff3b07__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Upgrade Call Rejected\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1743d58f28debdf6a6a953e43c947ed9f3ea362b1c501624c84e7c7983b4abbb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Withdraw Balance Forbidden\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8aeb1efdb15db64a2e64cfdb422cf3989b25f29200398250689d763ed3fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Contract Already Initialized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_81c9bb89a80e66169f6f16a4373efe0bb1710b75168b6f0a34909df98a63b9de__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"SetLocalAdmin Forbidden\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_27fddb5e90054188951c7d3210cd2c13109ea6bf6cc68d2ec0eee31c40360d39__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Address Invalid\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_bytes4__to_t_bytes32_t_address_t_bytes4__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), and(value2, shl(224, 0xffffffff)))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_2946dcfeb949540b6a13ffe1d28bb66968c72b47f5c640af5b9575b0322fbb71__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Illegal New Implementation\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_dd938394e2d548bdb34e19729728ff292e3bc891112353d04c4773753f9d07d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Upgrade Context Forbidden\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_f130e6b50da7ec9a0722a72a8a367cd43948ddc555763da2e03ecf4cbaf2c972__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Illegal UUPS Contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1aaf981f30054a65d39418944b5359c2dc3baea9641d1d5e407dcf99bc044957__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Invalid UUPS Contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_t_stringliteral_999b8d24795d7f45e7f3006064c0e9d2e15f910e6d37309e8cf2bad0d7d6e8ef__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Illegal IProxy Contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_70ddeff3550863f5fe7a006931e638acd5da5445ef0ef2d52d6528c5ccbe4c29__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Invalid IProxy Contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        end := add(pos, 20)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_8122b027808cd0877c813c37ddfc9ed2c232c21136d0c0f9b2ece5f62cd10512__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Illegal Contract Address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n}",
          "id": 76,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {
        "19655": [
          {
            "length": 32,
            "start": 1045
          },
          {
            "length": 32,
            "start": 1118
          },
          {
            "length": 32,
            "start": 1500
          },
          {
            "length": 32,
            "start": 1564
          },
          {
            "length": 32,
            "start": 1969
          },
          {
            "length": 32,
            "start": 2119
          },
          {
            "length": 32,
            "start": 2183
          },
          {
            "length": 32,
            "start": 2623
          },
          {
            "length": 32,
            "start": 2687
          },
          {
            "length": 32,
            "start": 2984
          },
          {
            "length": 32,
            "start": 3048
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75D0C0DC GT PUSH2 0x9A JUMPI DUP1 PUSH4 0xBE22465D GT PUSH2 0x61 JUMPI DUP1 PUSH4 0xBE22465D EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0xD3E024B8 EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0xD9DC1F19 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xF698DA25 EQ PUSH2 0x334 JUMPI DUP1 PUSH4 0xF94A0ADB EQ PUSH2 0x349 JUMPI STOP JUMPDEST DUP1 PUSH4 0x75D0C0DC EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x870666CB EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xA0A8E460 EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0xB4A0BDF3 EQ PUSH2 0x2C2 JUMPI STOP JUMPDEST DUP1 PUSH4 0x52D1902D GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x5479D940 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x58DBC45D EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0x7147855D EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x756AF45F EQ PUSH2 0x24E JUMPI STOP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x38D38C97 EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0x44B7E5F2 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x48E6BE1C EQ PUSH2 0x192 JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0x113 JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0x16D5 JUMP JUMPDEST PUSH2 0x35E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x3F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x141 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH2 0x18D CALLDATASIZE PUSH1 0x4 PUSH2 0x1718 JUMP JUMPDEST PUSH2 0x409 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x1718 JUMP JUMPDEST PUSH2 0x5D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0x7A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x141 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x135 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0x831 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x141 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x241 PUSH2 0x23C CALLDATASIZE PUSH1 0x4 PUSH2 0x1762 JUMP JUMPDEST PUSH2 0x83B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0x1884 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x1897 JUMP JUMPDEST PUSH2 0x976 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x1C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0xA35 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0xB91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x209 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x135 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x1C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH2 0x32F CALLDATASIZE PUSH1 0x4 PUSH2 0x1897 JUMP JUMPDEST PUSH2 0xB9C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0xD1D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x209 PUSH2 0xD89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x14B83435 PUSH1 0xE3 SHL EQ DUP1 PUSH2 0x38F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x96DC4575 PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x3AA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x8EA925B PUSH1 0xE4 SHL EQ JUMPDEST DUP1 PUSH2 0x3C5 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7D22131D PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x3E0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x70319BFF PUSH1 0xE1 SHL EQ JUMPDEST DUP1 PUSH2 0x3EF JUMPI POP PUSH2 0x3EF DUP3 PUSH2 0xD96 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 PUSH1 0x4B SLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x45C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x48E PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C3 PUSH1 0x4B SLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND GT PUSH2 0x514 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E7472616374204E6F7420496E697469616C697A65640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0x524 PUSH4 0x225BF2F9 PUSH1 0xE1 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x568 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x29B2BA29B0B332A6B7B232902337B93134B23232B7 PUSH1 0x59 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP5 ISZERO ISZERO MUL OR SWAP1 SSTORE PUSH1 0x2 SLOAD ADDRESS CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDD452A31D2E164A1EA436C084842C27D24AE2548A575A869F71B05A4ED16243F DUP6 PUSH1 0x40 MLOAD PUSH2 0x5C0 SWAP2 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP DUP1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x61A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x64C PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x672 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x69C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x190F JUMP JUMPDEST PUSH2 0x6AC PUSH4 0x1239AF87 PUSH1 0xE2 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x6F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5365745570677261646553746174757320466F7262696464656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0x700 PUSH2 0xF70 JUMP JUMPDEST PUSH2 0x74C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265616C6D205570677261646520466F7262696464656E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA8 SHL NOT AND PUSH1 0x1 PUSH1 0xA8 SHL DUP5 ISZERO ISZERO MUL OR SWAP1 SSTORE PUSH1 0x2 SLOAD ADDRESS CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE9F97AD94C2BA252DCFC525E004F608AC5CB886955D8FC87D9E0EE070A698C56 DUP6 PUSH1 0x40 MLOAD PUSH2 0x5C0 SWAP2 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x81E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496C6C6567616C20436F6E74726163742044656C656761746563616C6C000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1A1E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x885 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8B7 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x907 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x190F JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x958 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x155C19DC9859194810D85B1B0814995A9958DD1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0x961 DUP5 PUSH2 0x10AE JUMP JUMPDEST PUSH2 0x96C DUP5 DUP5 DUP5 PUSH2 0x1175 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x190F JUMP JUMPDEST PUSH2 0x9B0 PUSH4 0x756AF45F PUSH1 0xE0 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x9FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57697468647261772042616C616E636520466F7262696464656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA31 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xA7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xAAF PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xAD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x4B SLOAD PUSH1 0x2 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xAF9 JUMPI POP PUSH1 0x4B SLOAD PUSH2 0xFFFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH2 0xB45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F6E747261637420416C726561647920496E697469616C697A656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x4B DUP1 SLOAD PUSH1 0x64 PUSH1 0x49 SSTORE PUSH32 0xF92FA926BD2752CDF04E181D860FF72908CA25527923D5AB68F37886040EC574 PUSH1 0x4A SSTORE PUSH3 0xFFFFFF NOT AND PUSH2 0xFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH3 0x10000 OR PUSH3 0xFF0000 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 ADDRESS PUSH2 0x13C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0xBE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18B2 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC18 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP1 PUSH2 0x190F JUMP JUMPDEST PUSH2 0xC78 PUSH4 0xD9DC1F19 PUSH1 0xE0 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0xCC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5365744C6F63616C41646D696E20466F7262696464656E000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD0C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1059191C995CDCC8125B9D985B1A59 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0xD15 DUP3 PUSH2 0x1405 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 PUSH2 0x147C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x14751DBF PUSH1 0xE0 SHL EQ DUP1 PUSH2 0xDC7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x52D1902D PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x3EF JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1A1E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0xEF5 JUMPI PUSH1 0x0 PUSH4 0x63D59CF3 PUSH1 0xE1 SHL PUSH2 0xE2F ADDRESS PUSH2 0x13C6 JUMP JUMPDEST CALLER DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xE43 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH1 0x0 PUSH2 0xEC0 PUSH2 0xE84 PUSH2 0xDE6 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x44656C656761746563616C6C20686173416363657373204661696C6564000000 DUP2 MSTORE POP PUSH2 0x14A4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0xED1 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0xEE1 JUMPI PUSH2 0xEE1 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x20 SWAP2 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0x1 EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC7AB39E6 PUSH2 0xF0F ADDRESS PUSH2 0x13C6 JUMP JUMPDEST CALLER DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF2F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1946 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3EF SWAP2 SWAP1 PUSH2 0x19A6 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS SUB PUSH2 0x1038 JUMPI PUSH1 0x0 PUSH4 0xE25D75F0 PUSH1 0xE0 SHL PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFA4 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH1 0x0 PUSH2 0x1004 PUSH2 0xFE5 PUSH2 0xDE6 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19F9 PUSH1 0x25 SWAP2 CODECOPY PUSH2 0x14A4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0x1015 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1025 JUMPI PUSH2 0x1025 PUSH2 0x1990 JUMP JUMPDEST PUSH1 0x20 SWAP2 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0x1 EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xE25D75F PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xE25D75F0 SWAP2 PUSH2 0x106D SWAP2 PUSH1 0x4 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x108A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x404 SWAP2 SWAP1 PUSH2 0x19A6 JUMP JUMPDEST PUSH2 0x10B6 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1116 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496C6C6567616C204E657720496D706C656D656E746174696F6E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH2 0x1126 PUSH4 0x7147855D PUSH1 0xE0 SHL PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x1172 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5570677261646520436F6E7465787420466F7262696464656E00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11BF JUMPI PUSH2 0x11AA DUP5 PUSH2 0x156D JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x96F JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1219 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1216 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x125D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x125B1B1959D85B0815555414C810DBDB9D1C9858DD PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1A1E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x125B9D985B1A590815555414C810DBDB9D1C9858DD PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x14751DBF PUSH1 0xE0 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x131A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1317 SWAP2 DUP2 ADD SWAP1 PUSH2 0x19A6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1366 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496C6C6567616C204950726F787920436F6E7472616374000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST DUP1 PUSH2 0x13B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964204950726F787920436F6E7472616374000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST POP PUSH2 0x13BF DUP5 DUP5 DUP5 PUSH2 0x15EE JUMP JUMPDEST SWAP1 POP PUSH2 0x96F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP4 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x34 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD ADDRESS SWAP2 CALLER SWAP2 PUSH32 0x54AB0D18DE7958786BA1AD85966D59BAA2B395455F0530DCDCFD732E6AF539E2 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0xDF8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x14F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x496C6C6567616C20436F6E74726163742041646472657373 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1513 SWAP2 SWAP1 PUSH2 0x19DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x154E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1553 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1563 DUP3 DUP3 DUP7 PUSH2 0x1658 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x15BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x496C6C6567616C20436F6E74726163742041646472657373 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x453 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1A1E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15F9 DUP5 PUSH2 0x1691 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT DUP1 PUSH2 0x1606 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 0x1641 JUMPI PUSH2 0x13BF DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH19 0x11195B1959D85D1958D85B1B0811985A5B1959 PUSH1 0x6A SHL DUP2 MSTORE POP PUSH2 0x14A4 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1667 JUMPI POP DUP2 PUSH2 0x96F JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1677 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x453 SWAP2 SWAP1 PUSH2 0x1884 JUMP JUMPDEST PUSH2 0x169A DUP2 PUSH2 0x156D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 ADDRESS SWAP1 CALLER SWAP1 PUSH32 0x354BD4B6EB65D64E6C79C53FA4F983A5E6BEC4824CE4627C71BE0B2722F4917E SWAP1 PUSH1 0x0 SWAP1 LOG4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x96F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5CB DUP2 PUSH2 0x16FF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x172A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x96F DUP2 PUSH2 0x16FF JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1780 DUP5 PUSH2 0x1735 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x179D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x17B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x17C3 JUMPI PUSH2 0x17C3 PUSH2 0x174C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x17EB JUMPI PUSH2 0x17EB PUSH2 0x174C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP10 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP7 POP POP POP POP POP POP PUSH2 0x182B PUSH1 0x40 DUP6 ADD PUSH2 0x170D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x184F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1837 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1870 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1834 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x96F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1858 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x96F DUP3 PUSH2 0x1735 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH21 0x125B1B1959D85B0810DBDB9D1C9858DD0810D85B1B PUSH1 0x5A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x141C9BDE1E4810D85B1B195908125B9D985B1A59 PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6F64653A2043616C6C2052656A6563746564000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3EF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x96F DUP2 PUSH2 0x16FF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19EE DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1834 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID DIFFICULTY PUSH6 0x6C6567617465 PUSH4 0x616C6C20 PUSH10 0x735265616C6D55706772 PUSH2 0x6461 PUSH3 0x6C6520 CHAINID PUSH2 0x696C PUSH6 0x64360894A13B LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220DE NOT ISZERO ISZERO SELFDESTRUCT SWAP5 0xDA 0xD1 0xD4 PUSH11 0x13331B196009553F43AB58 DUP16 PUSH30 0x1DB26089652EC9357E64736F6C6343000811003300000000000000000000 ",
      "sourceMap": "699:1074:47:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1334:437;;;;;;;;;;-1:-1:-1;1334:437:47;;;;;:::i;:::-;;:::i;:::-;;;470:14:76;;463:22;445:41;;433:2;418:18;1334:437:47;;;;;;;;13315:94:40;;;;;;;;;;;;;:::i;:::-;;;671:6:76;659:19;;;641:38;;629:2;614:18;13315:94:40;497:188:76;11499:345:40;;;;;;;;;;-1:-1:-1;11499:345:40;;;;;:::i;:::-;;:::i;11848:414::-;;;;;;;;;;-1:-1:-1;11848:414:40;;;;;:::i;:::-;;:::i;9386:125::-;;;;;;;;;;;;;:::i;:::-;;;1338:25:76;;;1326:2;1311:18;9386:125:40;1192:177:76;12950:84:40;;;;;;;;;;-1:-1:-1;13016:13:40;;-1:-1:-1;;;13016:13:40;;;;12950:84;;12769:93;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1538:32:76;;;1520:51;;1508:2;1493:18;12769:93:40;1374:203:76;9515:371:40;;;;;;;;;;-1:-1:-1;9515:371:40;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;13413:256::-;;;;;;;;;;-1:-1:-1;13413:256:40;;;;;:::i;:::-;;:::i;12266:85::-;;;;;;;;;;-1:-1:-1;12313:7:40;12335:11;12266:85;;1149:126:47;;;;;;;;;;;;;:::i;12541:117:40:-;;;;;;;;;;;;;:::i;12355:91::-;;;;;;;;;;-1:-1:-1;12427:14:40;;12355:91;;12662:103;;;;;;;;;;-1:-1:-1;12739:21:40;;-1:-1:-1;;;;;12739:21:40;12662:103;;12866:80;;;;;;;;;;-1:-1:-1;12930:11:40;;-1:-1:-1;;;12930:11:40;;;;12866:80;;12450:87;;;;;;;;;;-1:-1:-1;12520:12:40;;12450:87;;10610:337;;;;;;;;;;-1:-1:-1;10610:337:40;;;;;:::i;:::-;;:::i;13038:97::-;;;;;;;;;;;;;:::i;10518:88::-;;;;;;;;;;;;;:::i;1334:437:47:-;1411:4;-1:-1:-1;;;;;;1436:47:47;;-1:-1:-1;;;1436:47:47;;:108;;-1:-1:-1;;;;;;;1493:51:47;;-1:-1:-1;;;1493:51:47;1436:108;:166;;;-1:-1:-1;;;;;;;1554:48:47;;-1:-1:-1;;;1554:48:47;1436:166;:225;;;-1:-1:-1;;;;;;;1612:49:47;;-1:-1:-1;;;1612:49:47;1436:225;:284;;;-1:-1:-1;;;;;;;1671:49:47;;-1:-1:-1;;;1671:49:47;1436:284;:330;;;;1730:36;1754:11;1730:23;:36::i;:::-;1423:343;1334:437;-1:-1:-1;;1334:437:47:o;13315:94:40:-;13361:6;13382:22;4574:12:45;;;;;4498:93;13382:22:40;13375:29;;13315:94;:::o;11499:345::-;11561:4;-1:-1:-1;;;;;2090:6:40;2073:23;2081:4;2073:23;2065:57;;;;-1:-1:-1;;;2065:57:40;;;;;;;:::i;:::-;;;;;;;;;2157:6;-1:-1:-1;;;;;2136:27:40;:17;:15;:17::i;:::-;-1:-1:-1;;;;;2136:27:40;;2128:60;;;;-1:-1:-1;;;2128:60:40;;;;;;;:::i;:::-;11606:1:::1;11581:22;4574:12:45::0;;;;;4498:93;11581:22:40::1;:26;;;11573:63;;;::::0;-1:-1:-1;;;11573:63:40;;4804:2:76;11573:63:40::1;::::0;::::1;4786:21:76::0;4843:2;4823:18;;;4816:30;4882:26;4862:18;;;4855:54;4926:18;;11573:63:40::1;4602:348:76::0;11573:63:40::1;11650:41;-1:-1:-1::0;;;11650:14:40::1;:41::i;:::-;11642:75;;;::::0;-1:-1:-1;;;11642:75:40;;5157:2:76;11642:75:40::1;::::0;::::1;5139:21:76::0;5196:2;5176:18;;;5169:30;-1:-1:-1;;;5215:18:76;;;5208:51;5276:18;;11642:75:40::1;4955:345:76::0;11642:75:40::1;11723:11;:20:::0;;-1:-1:-1;;;;11723:20:40::1;-1:-1:-1::0;;;11723:20:40;::::1;;;;::::0;;11799:12:::1;::::0;11792:4:::1;659:10:74::0;-1:-1:-1;;;;;11754:66:40::1;;11813:6;11754:66;;;;470:14:76::0;463:22;445:41;;433:2;418:18;;305:187;11754:66:40::1;;;;;;;;-1:-1:-1::0;11833:6:40;2194:1:::1;11499:345:::0;;;:::o;11848:414::-;11915:4;-1:-1:-1;;;;;2090:6:40;2073:23;2081:4;2073:23;2065:57;;;;-1:-1:-1;;;2065:57:40;;;;;;;:::i;:::-;2157:6;-1:-1:-1;;;;;2136:27:40;:17;:15;:17::i;:::-;-1:-1:-1;;;;;2136:27:40;;2128:60;;;;-1:-1:-1;;;2128:60:40;;;;;;;:::i;:::-;11936:11:::1;::::0;-1:-1:-1;;;11936:11:40;::::1;;;11935:12;11927:48;;;;-1:-1:-1::0;;;11927:48:40::1;;;;;;;:::i;:::-;11989:46;-1:-1:-1::0;;;11989:14:40::1;:46::i;:::-;11981:85;;;::::0;-1:-1:-1;;;11981:85:40;;5859:2:76;11981:85:40::1;::::0;::::1;5841:21:76::0;5898:2;5878:18;;;5871:30;5937:28;5917:18;;;5910:56;5983:18;;11981:85:40::1;5657:350:76::0;11981:85:40::1;12080:20;:18;:20::i;:::-;12072:56;;;::::0;-1:-1:-1;;;12072:56:40;;6214:2:76;12072:56:40::1;::::0;::::1;6196:21:76::0;6253:2;6233:18;;;6226:30;6292:25;6272:18;;;6265:53;6335:18;;12072:56:40::1;6012:347:76::0;12072:56:40::1;12134:13;:22:::0;;-1:-1:-1;;;;12134:22:40::1;-1:-1:-1::0;;;12134:22:40;::::1;;;;::::0;;12217:12:::1;::::0;12210:4:::1;659:10:74::0;-1:-1:-1;;;;;12167:71:40::1;;12231:6;12167:71;;;;470:14:76::0;463:22;445:41;;433:2;418:18;;305:187;9386:125:40;9464:7;2632:4;-1:-1:-1;;;;;2641:6:40;2624:23;;2616:65;;;;-1:-1:-1;;;2616:65:40;;6566:2:76;2616:65:40;;;6548:21:76;6605:2;6585:18;;;6578:30;6644:31;6624:18;;;6617:59;6693:18;;2616:65:40;6364:353:76;2616:65:40;-1:-1:-1;;;;;;;;;;;;9386:125:40;:::o;12769:93::-;12818:7;12840:17;:15;:17::i;9515:371::-;9648:12;-1:-1:-1;;;;;2090:6:40;2073:23;2081:4;2073:23;2065:57;;;;-1:-1:-1;;;2065:57:40;;;;;;;:::i;:::-;2157:6;-1:-1:-1;;;;;2136:27:40;:17;:15;:17::i;:::-;-1:-1:-1;;;;;2136:27:40;;2128:60;;;;-1:-1:-1;;;2128:60:40;;;;;;;:::i;:::-;9677:11:::1;::::0;-1:-1:-1;;;9677:11:40;::::1;;;9676:12;9668:48;;;;-1:-1:-1::0;;;9668:48:40::1;;;;;;;:::i;:::-;9730:13;::::0;-1:-1:-1;;;9730:13:40;::::1;;;9722:47;;;::::0;-1:-1:-1;;;9722:47:40;;6924:2:76;9722:47:40::1;::::0;::::1;6906:21:76::0;6963:2;6943:18;;;6936:30;-1:-1:-1;;;6982:18:76;;;6975:51;7043:18;;9722:47:40::1;6722:345:76::0;9722:47:40::1;9775:36;9793:17;9775;:36::i;:::-;9824:57;9846:17;9865:4;9871:9;9824:21;:57::i;:::-;9817:64;;2194:1;9515:371:::0;;;;;:::o;13413:256::-;13479:11;;-1:-1:-1;;;13479:11:40;;;;13478:12;13470:48;;;;-1:-1:-1;;;13470:48:40;;;;;;;:::i;:::-;13532:45;-1:-1:-1;;;13532:14:40;:45::i;:::-;13524:84;;;;-1:-1:-1;;;13524:84:40;;7274:2:76;13524:84:40;;;7256:21:76;7313:2;7293:18;;;7286:30;7352:28;7332:18;;;7325:56;7398:18;;13524:84:40;7072:350:76;13524:84:40;13614:50;;-1:-1:-1;;;;;13614:27:40;;;13642:21;13614:50;;;;;;;;;13642:21;13614:27;:50;;;;;;;;;;;;;;;;;;;;;13413:256;:::o;1149:126:47:-;-1:-1:-1;;;;;2090:6:40;2073:23;2081:4;2073:23;2065:57;;;;-1:-1:-1;;;2065:57:40;;;;;;;:::i;:::-;2157:6;-1:-1:-1;;;;;2136:27:40;:17;:15;:17::i;:::-;-1:-1:-1;;;;;2136:27:40;;2128:60;;;;-1:-1:-1;;;2128:60:40;;;;;;;:::i;:::-;3443:13:45::1;::::0;1202:1:47::1;::::0;3443:13:45;;::::1;;;3442:14;:40:::0;::::1;;;-1:-1:-1::0;3460:12:45::1;::::0;:22:::1;::::0;;::::1;:12:::0;::::1;:22;3442:40;3434:81;;;::::0;-1:-1:-1;;;3434:81:45;;7629:2:76;3434:81:45::1;::::0;::::1;7611:21:76::0;7668:2;7648:18;;;7641:30;7707;7687:18;;;7680:58;7755:18;;3434:81:45::1;7427:352:76::0;3434:81:45::1;3521:12;:22:::0;;1227:3:47::2;1211:13:::0;:19;1246:24:::2;1236:7;:34:::0;-1:-1:-1;;3549:20:45;3521:22:::1;::::0;;::::1;3549:20:::0;;;;;::::1;-1:-1:-1::0;;3582:21:45::1;::::0;;1149:126:47:o;12541:117:40:-;12591:7;12613:40;12647:4;12613:25;:40::i;10610:337::-;10684:4;-1:-1:-1;;;;;2090:6:40;2073:23;2081:4;2073:23;2065:57;;;;-1:-1:-1;;;2065:57:40;;;;;;;:::i;:::-;2157:6;-1:-1:-1;;;;;2136:27:40;:17;:15;:17::i;:::-;-1:-1:-1;;;;;2136:27:40;;2128:60;;;;-1:-1:-1;;;2128:60:40;;;;;;;:::i;:::-;10705:11:::1;::::0;-1:-1:-1;;;10705:11:40;::::1;;;10704:12;10696:48;;;;-1:-1:-1::0;;;10696:48:40::1;;;;;;;:::i;:::-;10758:43;-1:-1:-1::0;;;10758:14:40::1;:43::i;:::-;10750:79;;;::::0;-1:-1:-1;;;10750:79:40;;7986:2:76;10750:79:40::1;::::0;::::1;7968:21:76::0;8025:2;8005:18;;;7998:30;8064:25;8044:18;;;8037:53;8107:18;;10750:79:40::1;7784:347:76::0;10750:79:40::1;-1:-1:-1::0;;;;;10843:27:40;::::1;10835:55;;;::::0;-1:-1:-1;;;10835:55:40;;8338:2:76;10835:55:40::1;::::0;::::1;8320:21:76::0;8377:2;8357:18;;;8350:30;-1:-1:-1;;;8396:18:76;;;8389:45;8451:18;;10835:55:40::1;8136:339:76::0;10835:55:40::1;10896:29;10911:13;10896:14;:29::i;:::-;-1:-1:-1::0;10938:4:40::1;10610:337:::0;;;:::o;13038:97::-;13088:7;13110:20;13192:7;13247:11;;13260:14;;13224:81;;;2291:95:41;13224:81:40;;;12469:25:76;12510:18;;;12503:34;;;;12553:18;;;12546:34;13276:13:40;12596:18:76;;;12589:34;13299:4:40;12639:19:76;;;12632:61;12441:19;;13224:81:40;;;;;;;;;;;;13214:92;;;;;;13207:99;;13139:172;;10518:88;10563:7;10585:16;:14;:16::i;1480:131:14:-;1597:4;1480:131::o;6034:260:40:-;6119:4;-1:-1:-1;;;;;;6144:39:40;;-1:-1:-1;;;6144:39:40;;:99;;-1:-1:-1;;;;;;;6193:50:40;;-1:-1:-1;;;6193:50:40;6144:99;:145;;;-1:-1:-1;;;;;;;;;;858:40:71;;;6253:36:40;754:149:71;6364:141:40;6423:7;-1:-1:-1;;;;;;;;;;;6445:49:40;:55;-1:-1:-1;;;;;6445:55:40;;6364:141;-1:-1:-1;6364:141:40:o;2899:687::-;2991:21;;2958:4;;-1:-1:-1;;;;;2991:21:40;2982:4;2974:38;2970:612;;3022:17;-1:-1:-1;;;3117:40:40;3151:4;3117:25;:40::i;:::-;659:10:74;3189:8:40;3042:163;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3042:163:40;;;;;;;;;;;;;;-1:-1:-1;;;;;3042:163:40;-1:-1:-1;;;;;;3042:163:40;;;;;;;;;;;-1:-1:-1;;3239:87:40;3269:17;:15;:17::i;:::-;3288:4;3239:87;;;;;;;;;;;;;;;;;:29;:87::i;:::-;3213:113;;3347:10;3378:1;3358:10;:17;:21;;;;:::i;:::-;3347:33;;;;;;;;:::i;:::-;;;;;;;;3385:1;3341:45;;;-1:-1:-1;;;;2899:687:40:o;2970:612::-;3437:21;;-1:-1:-1;;;;;3437:21:40;3422:47;3481:40;3515:4;3481:25;:40::i;:::-;659:10:74;3557:8:40;3422:153;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;3590:540::-;3671:21;;3638:4;;-1:-1:-1;;;;;3671:21:40;3662:4;3654:38;3650:476;;3702:17;3745:41;;;3788:12;;3722:79;;;;;;1338:25:76;;1326:2;1311:18;;1192:177;3722:79:40;;;;-1:-1:-1;;3722:79:40;;;;;;;;;;;;;;-1:-1:-1;;;;;3722:79:40;-1:-1:-1;;;;;;3722:79:40;;;;;;;;;;;-1:-1:-1;;3835:127:40;3874:17;:15;:17::i;:::-;3901:4;3835:127;;;;;;;;;;;;;;;;;:29;:127::i;:::-;3809:153;;3983:10;4014:1;3994:10;:17;:21;;;;:::i;:::-;3983:33;;;;;;;;:::i;:::-;;;;;;;;4021:1;3977:45;;;-1:-1:-1;;;3590:540:40:o;3650:476::-;4065:21;;4106:12;;4050:69;;-1:-1:-1;;;4050:69:40;;-1:-1:-1;;;;;4065:21:40;;;;4050:55;;:69;;;;1338:25:76;;;1326:2;1311:18;;1192:177;4050:69:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;10272:242::-;10378:17;:15;:17::i;:::-;-1:-1:-1;;;;;10357:38:40;:17;-1:-1:-1;;;;;10357:38:40;;10349:77;;;;-1:-1:-1;;;10349:77:40;;9669:2:76;10349:77:40;;;9651:21:76;9708:2;9688:18;;;9681:30;9747:28;9727:18;;;9720:56;9793:18;;10349:77:40;9467:350:76;10349:77:40;10440:39;-1:-1:-1;;;10440:14:40;:39::i;:::-;10432:77;;;;-1:-1:-1;;;10432:77:40;;10024:2:76;10432:77:40;;;10006:21:76;10063:2;10043:18;;;10036:30;10102:27;10082:18;;;10075:55;10147:18;;10432:77:40;9822:349:76;10432:77:40;10272:242;:::o;7703:1115::-;7830:12;1212:66:41;8142:49:40;;;8138:676;;;8201:37;8220:17;8201:18;:37::i;:::-;-1:-1:-1;8253:12:40;;;8263:1;8253:12;;;;;;;;8246:19;;8138:676;8308:17;-1:-1:-1;;;;;8290:50:40;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8290:52:40;;;;;;;;-1:-1:-1;;8290:52:40;;;;;;;;;;;;:::i;:::-;;;8286:218;;8464:31;;-1:-1:-1;;;8464:31:40;;10567:2:76;8464:31:40;;;10549:21:76;10606:2;10586:18;;;10579:30;-1:-1:-1;;;10625:18:76;;;10618:51;10686:18;;8464:31:40;10365:345:76;8286:218:40;-1:-1:-1;;;;;;;;;;;8384:28:40;;8376:62;;;;-1:-1:-1;;;8376:62:40;;10917:2:76;8376:62:40;;;10899:21:76;10956:2;10936:18;;;10929:30;-1:-1:-1;;;10975:18:76;;;10968:51;11036:18;;8376:62:40;10715:345:76;8376:62:40;-1:-1:-1;8516:70:40;;-1:-1:-1;;;8516:70:40;;-1:-1:-1;;;8516:70:40;;;11209:52:76;-1:-1:-1;;;;;8516:44:40;;;;;11182:18:76;;8516:70:40;;;;;;;;;;;;;;;;;;-1:-1:-1;8516:70:40;;;;;;;;-1:-1:-1;;8516:70:40;;;;;;;;;;;;:::i;:::-;;;8512:227;;8697:33;;-1:-1:-1;;;8697:33:40;;11474:2:76;8697:33:40;;;11456:21:76;11513:2;11493:18;;;11486:30;11552:25;11532:18;;;11525:53;11595:18;;8697:33:40;11272:347:76;8512:227:40;8632:11;8624:47;;;;-1:-1:-1;;;8624:47:40;;11826:2:76;8624:47:40;;;11808:21:76;11865:2;11845:18;;;11838:30;11904:25;11884:18;;;11877:53;11947:18;;8624:47:40;11624:347:76;8624:47:40;8587:93;8754:53;8772:17;8791:4;8797:9;8754:17;:53::i;:::-;8747:60;;;;146:130:11;242:28;;-1:-1:-1;;12125:2:76;12121:15;;;12117:53;242:28:11;;;12105:66:76;210:7:11;;12187:12:76;;242:28:11;;;;;;;;;;;;232:39;;;;;;225:46;;146:130;;;:::o;11245:186:40:-;2177:66:41;11302:57:40;;-1:-1:-1;;;;;11302:57:40;;-1:-1:-1;;;;;;11302:57:40;;;;;;;;11370:56;;;1520:51:76;;;11370:56:40;11410:4;;659:10:74;;11370:56:40;;;;;1508:2:76;11370:56:40;;;11245:186;:::o;11049:122::-;11098:7;2177:66:41;11120:40:40;1480:131:14;6159:408:7;6281:12;-1:-1:-1;;;;;1395:19:7;;;6301:64;;;;-1:-1:-1;;;6301:64:7;;12906:2:76;6301:64:7;;;12888:21:76;12945:2;12925:18;;;12918:30;-1:-1:-1;;;12964:18:76;;;12957:54;13028:18;;6301:64:7;12704:348:76;6301:64:7;6428:12;6442:23;6469:6;-1:-1:-1;;;;;6469:19:7;6489:4;6469:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6427:67;;;;6507:55;6533:7;6542:10;6554:7;6507:25;:55::i;:::-;6500:62;6159:408;-1:-1:-1;;;;;;6159:408:7:o;6588:230:40:-;-1:-1:-1;;;;;1395:19:7;;;6657:75:40;;;;-1:-1:-1;;;6657:75:40;;12906:2:76;6657:75:40;;;12888:21:76;12945:2;12925:18;;;12918:30;-1:-1:-1;;;12964:18:76;;;12957:54;13028:18;;6657:75:40;12704:348:76;6657:75:40;-1:-1:-1;;;;;;;;;;;6738:75:40;;-1:-1:-1;;;;;;6738:75:40;-1:-1:-1;;;;;6738:75:40;;;;;;;;;;6588:230::o;7203:340::-;7326:12;7346:29;7357:17;7346:10;:29::i;:::-;7399:1;7385:4;:11;:15;:28;;;;7404:9;7385:28;7381:133;;;7430:77;7460:17;7479:4;7430:77;;;;;;;;;;;;;-1:-1:-1;;;7430:77:40;;;:29;:77::i;7381:133::-;-1:-1:-1;;7526:12:40;;;7536:1;7526:12;;;;;;;;;7519:19;-1:-1:-1;;7203:340:40:o;6739:624:7:-;6871:12;6895:7;6891:468;;;-1:-1:-1;6919:10:7;6912:17;;6891:468;7014:17;;:21;7010:343;;7224:10;7218:17;7274:15;7261:10;7257:2;7253:19;7246:44;7010:343;7331:12;7324:20;;-1:-1:-1;;;7324:20:7;;;;;;;;:::i;6912:169:40:-;6974:37;6993:17;6974:18;:37::i;:::-;7022:54;;-1:-1:-1;;;;;7022:54:40;;;7051:4;;7031:10;;7022:54;;;;;6912:169;:::o;14:286:76:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:76;;209:43;;199:71;;266:1;263;256:12;690:118;776:5;769:13;762:21;755:5;752:32;742:60;;798:1;795;788:12;813:128;878:20;;907:28;878:20;907:28;:::i;946:241::-;1002:6;1055:2;1043:9;1034:7;1030:23;1026:32;1023:52;;;1071:1;1068;1061:12;1023:52;1110:9;1097:23;1129:28;1151:5;1129:28;:::i;1582:173::-;1650:20;;-1:-1:-1;;;;;1699:31:76;;1689:42;;1679:70;;1745:1;1742;1735:12;1760:127;1821:10;1816:3;1812:20;1809:1;1802:31;1852:4;1849:1;1842:15;1876:4;1873:1;1866:15;1892:1063;1975:6;1983;1991;2044:2;2032:9;2023:7;2019:23;2015:32;2012:52;;;2060:1;2057;2050:12;2012:52;2083:29;2102:9;2083:29;:::i;:::-;2073:39;;2163:2;2152:9;2148:18;2135:32;2186:18;2227:2;2219:6;2216:14;2213:34;;;2243:1;2240;2233:12;2213:34;2281:6;2270:9;2266:22;2256:32;;2326:7;2319:4;2315:2;2311:13;2307:27;2297:55;;2348:1;2345;2338:12;2297:55;2384:2;2371:16;2406:2;2402;2399:10;2396:36;;;2412:18;;:::i;:::-;2487:2;2481:9;2455:2;2541:13;;-1:-1:-1;;2537:22:76;;;2561:2;2533:31;2529:40;2517:53;;;2585:18;;;2605:22;;;2582:46;2579:72;;;2631:18;;:::i;:::-;2671:10;2667:2;2660:22;2706:2;2698:6;2691:18;2746:7;2741:2;2736;2732;2728:11;2724:20;2721:33;2718:53;;;2767:1;2764;2757:12;2718:53;2823:2;2818;2814;2810:11;2805:2;2797:6;2793:15;2780:46;2868:1;2863:2;2858;2850:6;2846:15;2842:24;2835:35;2889:6;2879:16;;;;;;;2914:35;2945:2;2934:9;2930:18;2914:35;:::i;:::-;2904:45;;1892:1063;;;;;:::o;2960:250::-;3045:1;3055:113;3069:6;3066:1;3063:13;3055:113;;;3145:11;;;3139:18;3126:11;;;3119:39;3091:2;3084:10;3055:113;;;-1:-1:-1;;3202:1:76;3184:16;;3177:27;2960:250::o;3215:270::-;3256:3;3294:5;3288:12;3321:6;3316:3;3309:19;3337:76;3406:6;3399:4;3394:3;3390:14;3383:4;3376:5;3372:16;3337:76;:::i;:::-;3467:2;3446:15;-1:-1:-1;;3442:29:76;3433:39;;;;3474:4;3429:50;;3215:270;-1:-1:-1;;3215:270:76:o;3490:217::-;3637:2;3626:9;3619:21;3600:4;3657:44;3697:2;3686:9;3682:18;3674:6;3657:44;:::i;3712:186::-;3771:6;3824:2;3812:9;3803:7;3799:23;3795:32;3792:52;;;3840:1;3837;3830:12;3792:52;3863:29;3882:9;3863:29;:::i;3903:345::-;4105:2;4087:21;;;4144:2;4124:18;;;4117:30;-1:-1:-1;;;4178:2:76;4163:18;;4156:51;4239:2;4224:18;;3903:345::o;4253:344::-;4455:2;4437:21;;;4494:2;4474:18;;;4467:30;-1:-1:-1;;;4528:2:76;4513:18;;4506:50;4588:2;4573:18;;4253:344::o;5305:347::-;5507:2;5489:21;;;5546:2;5526:18;;;5519:30;5585:25;5580:2;5565:18;;5558:53;5643:2;5628:18;;5305:347::o;8480:370::-;8680:25;;;-1:-1:-1;;;;;8741:32:76;;;;8736:2;8721:18;;8714:60;-1:-1:-1;;;;;;8810:33:76;8805:2;8790:18;;8783:61;8668:2;8653:18;;8480:370::o;8855:225::-;8922:9;;;8943:11;;;8940:134;;;8996:10;8991:3;8987:20;8984:1;8977:31;9031:4;9028:1;9021:15;9059:4;9056:1;9049:15;9085:127;9146:10;9141:3;9137:20;9134:1;9127:31;9177:4;9174:1;9167:15;9201:4;9198:1;9191:15;9217:245;9284:6;9337:2;9325:9;9316:7;9312:23;9308:32;9305:52;;;9353:1;9350;9343:12;9305:52;9385:9;9379:16;9404:28;9426:5;9404:28;:::i;10176:184::-;10246:6;10299:2;10287:9;10278:7;10274:23;10270:32;10267:52;;;10315:1;10312;10305:12;10267:52;-1:-1:-1;10338:16:76;;10176:184;-1:-1:-1;10176:184:76:o;13057:287::-;13186:3;13224:6;13218:13;13240:66;13299:6;13294:3;13287:4;13279:6;13275:17;13240:66;:::i;:::-;13322:16;;;;;13057:287;-1:-1:-1;;13057:287:76:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1354200",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "": "185",
        "accessControlManager()": "2442",
        "contractContext()": "462",
        "contractName()": "2315",
        "contractRealm()": "2336",
        "contractVersion()": "2381",
        "domainSeparator()": "4749",
        "initVersion()": "2391",
        "initialize()": "infinite",
        "isSafeMode()": "2332",
        "isUpgradable()": "2355",
        "localAdmin()": "2511",
        "proxiableUUID()": "infinite",
        "setLocalAdmin(address)": "infinite",
        "setSafeMode(bool)": "infinite",
        "setUpgradeStatus(bool)": "infinite",
        "subjectAddress()": "infinite",
        "supportsInterface(bytes4)": "infinite",
        "upgradeTo(address,bytes,bool)": "infinite",
        "withdrawBalance(address)": "infinite"
      }
    },
    "methodIdentifiers": {
      "accessControlManager()": "b4a0bdf3",
      "contractContext()": "870666cb",
      "contractName()": "75d0c0dc",
      "contractRealm()": "d3e024b8",
      "contractVersion()": "a0a8e460",
      "domainSeparator()": "f698da25",
      "initVersion()": "38d38c97",
      "initialize()": "8129fc1c",
      "isSafeMode()": "be22465d",
      "isUpgradable()": "5479d940",
      "localAdmin()": "f94a0adb",
      "proxiableUUID()": "52d1902d",
      "setLocalAdmin(address)": "d9dc1f19",
      "setSafeMode(bool)": "44b7e5f2",
      "setUpgradeStatus(bool)": "48e6be1c",
      "subjectAddress()": "58dbc45d",
      "supportsInterface(bytes4)": "01ffc9a7",
      "upgradeTo(address,bytes,bool)": "7147855d",
      "withdrawBalance(address)": "756af45f"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"initCount\",\"type\":\"uint16\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"LocalAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SafeModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"realm\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpgradeStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractContext\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRealm\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLocalAdmin\",\"type\":\"address\"}],\"name\":\"setLocalAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setSafeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setUpgradeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forceCall\",\"type\":\"bool\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/test/acl/AccessControlManagerTest.sol\":\"AccessControlManagerTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/acl/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../lib/struct/LEnumerableMap.sol\\\";\\nimport \\\"../proxy/BaseUUPSStorage.sol\\\";\\n\\nabstract contract AccessControlStorage is BaseUUPSStorage {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableMap for LEnumerableMap.Bytes32ToBytes32Map;\\n  using LEnumerableMap for LEnumerableMap.AddressToUintMap;\\n\\n  enum Status {\\n    NONE,\\n    ENABLED,\\n    DISABLED\\n  }\\n\\n  struct RoleStat {\\n    bytes32 role;\\n    Status status;\\n  }\\n\\n  struct Context {\\n    bytes32 realm;\\n    address contractId;\\n    bool isEnabled;\\n    mapping(bytes4 => RoleStat) resources; // function selector => RoleStat\\n    LEnumerableSet.Bytes32Set funcSet;\\n  }\\n\\n  struct Role {\\n    bytes32 group;\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.AddressSet accountSet;\\n  }\\n\\n  struct Realm {\\n    string name;\\n    bool isEnabled;\\n    bool isUpgradable;\\n    LEnumerableSet.Bytes32Set ctxSet;\\n  }\\n\\n  struct Group {\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.Bytes32Set roleSet;\\n  }\\n\\n  struct DataCollections {\\n    mapping(address => mapping(bytes32 => Status)) accountMap;\\n    mapping(bytes32 => Context) ctxMap;\\n    mapping(bytes32 => Role) roleMap;\\n    mapping(bytes32 => Realm) realmMap;\\n    mapping(bytes32 => Group) groupMap;\\n  }\\n\\n  DataCollections internal _data;\\n}\\n\",\"keccak256\":\"0x60509d8305172425766c720799c949fa5571e2db7935d6726d8b6408b2009aeb\",\"license\":\"MIT\"},\"src/contracts/acl/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAccessControl {\\n  /**\\n   * @dev Function called by apps to check ACL\\n   * @return boolean indicating whether the ACL allows\\n   */\\n  function hasAccess(\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool);\\n\\n  function isLivelySystemAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyAssetManagerRole(address account) external view returns (bool);\\n\\n  function isLivelyAssetAdminRole(address account) external view returns (bool);\\n\\n  function isLivelyCommunityDaoRole(address account) external view returns (bool);\\n\\n  function isLivelyCommunityDaoExecutorRole(address account) external view returns (bool);\\n\\n  function isLivelyGeneralGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyDaoGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyAssetGroup(bytes32 role) external view returns (bool);\\n\\n  function isLivelyGeneralRealm(bytes32 context) external view returns (bool);\\n\\n  function isLivelyAssetRealm(bytes32 context) external view returns (bool);\\n\\n  function isContextSafeMode(bytes32 context) external view returns (bool);\\n\\n  function isContextUpgradable(bytes32 context) external view returns (bool);\\n\\n  function isContextExists(bytes32 context) external view returns (bool);\\n\\n  function isContextFunctionExists(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextFunctionEnabled(bytes32 context, bytes4 functionSelector) external view returns (bool);\\n\\n  function isContextEnabled(bytes32 context) external view returns (bool);\\n\\n  function isGroupExists(bytes32 group) external view returns (bool);\\n\\n  function isGroupEnabled(bytes32 group) external view returns (bool);\\n\\n  function isRoleExists(bytes32 role) external view returns (bool);\\n\\n  function isRoleEnabled(bytes32 role) external view returns (bool);\\n\\n  function isRealmExists(bytes32 realm) external view returns (bool);\\n\\n  function isRealmEnabled(bytes32 realm) external view returns (bool); \\n\\n  function isRealmUpgradable(bytes32 realm) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x625c97e65b5c357c09f26f92a6c8f7e8043aeb191323a71fa6aed0670d8d1dca\",\"license\":\"MIT\"},\"src/contracts/acl/IContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IContextManagement {\\n  enum UpdateContextStatus {\\n    DISABLE,\\n    ENABLE,\\n    REMOVE\\n  }\\n\\n  struct RequestContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool status;\\n  }\\n\\n   struct RequestPredictContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    bytes32 salt;\\n    address subject;\\n    address deployer;\\n    bool status;\\n  }\\n\\n  struct RequestRegisterContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    bool isEnabled;\\n  }\\n\\n  struct RequestUpdateContext {\\n    bytes32 role;\\n    bytes4[] funcSelectors;\\n    UpdateContextStatus updateStatus;\\n  }\\n\\n  struct ResponseContext {\\n    bytes32 name;\\n    bytes32 version;\\n    bytes32 realm;\\n    address contractId;\\n    bool isSafeMode;\\n    bool isUpgradable;\\n  }\\n\\n  event ContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, bytes32 realm);\\n\\n  event PredictContextRegistered(bytes32 indexed context, address indexed contractId, address indexed sender, address signer, address deployer, address subject, bytes32 realm);\\n\\n  event ContextUpdated(bytes32 indexed context, address indexed contractId, address indexed sender, bytes32 realm);\\n\\n  event ContextStatusChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bool status);\\n\\n  event ContextFuncRoleAdded(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextFuncRemoved(bytes32 indexed context, address indexed sender, bytes4 functionSelector, bytes32 realm);\\n\\n  event ContextRoleGranted(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRoleRevoked(\\n    bytes32 indexed context,\\n    bytes32 indexed role,\\n    address indexed sender,\\n    bytes4 functionSelector,\\n    bytes32 realm\\n  );\\n\\n  event ContextRealmChanged(bytes32 indexed context, address indexed sender, bytes32 indexed realm, bytes32 oldRealm);\\n\\n  function registerContext(\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestRegisterContext[] calldata rcr\\n  ) external returns (bytes32);\\n\\n  function registerPredictContext(\\n    bytes memory signature,\\n    RequestPredictContext calldata rpc,\\n    RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32);\\n\\n  function updateContext(\\n    bytes32 ctx,\\n    bytes memory signature,\\n    RequestContext calldata rc,\\n    RequestUpdateContext[] calldata ruc\\n  ) external returns (address);\\n\\n  function addContextFuncRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function removeContextFunc(bytes32 ctx, bytes4 functionSelector) external returns (bool);\\n\\n  function grantContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function revokeContextRole(\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bool);\\n\\n  function setContextRealm(bytes32 ctx, bytes32 realm) external returns (bool);\\n\\n  function setContextStatus(bytes32 ctx, bool status) external returns (bool);\\n\\n  function hasContextRole(\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool);\\n\\n  function getContextInfo(bytes32 ctx) external view returns (ResponseContext memory);\\n\\n  function getContextFuncs(bytes32 ctx) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0x4811f66509db07ea5b29faf433bf0209e8fd13a822ec371a0da2178289fce71b\",\"license\":\"MIT\"},\"src/contracts/acl/IGroupManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGroupManagement {\\n  event GroupRegistered(bytes32 indexed group, address indexed sender, string name, bool status);\\n\\n  event GroupStatusChanged(bytes32 indexed group, address indexed sender, bool status);\\n\\n  function registerGroup(string calldata name, bool status) external returns (bytes32);\\n\\n  function setGroupStatus(bytes32 group, bool status) external returns (bool);\\n\\n  function hasGroupRole(bytes32 group, bytes32 role) external view returns (bool);\\n\\n  function getGroupInfo(bytes32 group) external view returns (string memory, bool);\\n\\n  function getGroupRoles(bytes32 group) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xef419de7dcf0029fe7a05850895dc4ce569d743e695d7eb2d9d345d185b267f8\",\"license\":\"MIT\"},\"src/contracts/acl/IRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRealmManagement {\\n  event RealmRegistered(bytes32 indexed realm, address indexed sender, string name, bool status, bool isUpgradable);\\n\\n  event RealmStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  event RealmUpgradeStatusChanged(bytes32 indexed realm, address indexed sender, bool status);\\n\\n  function registerRealm(\\n    string calldata name,\\n    bool status,\\n    bool isUpgradable\\n  ) external returns (bytes32);\\n\\n  function setRealmStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function setRealmUpgradeStatus(bytes32 realm, bool status) external returns (bool);\\n\\n  function hasRealmContext(bytes32 realm, bytes32 context) external view returns (bool);\\n\\n  function getRealmInfo(bytes32 realm)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bool,\\n      bool\\n    );\\n\\n  function getRealmContexts(bytes32 realm) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x7058ef3754e6c4b92a61e2e908df2708f1c110fc82100338abe2ce98f3b02c0f\",\"license\":\"MIT\"},\"src/contracts/acl/IRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRoleManagement {\\n\\n  struct RegiterRoleRequest {\\n    bytes32 group;\\n    string name;    \\n    bool status;\\n  }\\n\\n  struct UpdateRoleRequest {\\n    bytes32 role;\\n    address account;\\n  }\\n\\n  event RoleAccountGranted(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleAccountRevoked(address indexed sender, bytes32 indexed role, address indexed account);\\n\\n  event RoleRegistered(\\n    address indexed sender,\\n    bytes32 indexed role,\\n    string indexed name,\\n    bytes32 group,\\n    bool isEnabled\\n  );\\n\\n  event RoleStatusChanged(address indexed sender, bytes32 indexed role, bytes32 indexed group, bool status);\\n\\n  event RoleGroupChanged(address indexed sender, bytes32 indexed role, bytes32 indexed newGroup, bytes32 oldGroup);\\n\\n  function registerRole(\\n    string calldata name,\\n    bytes32 group,\\n    bool status\\n  ) external returns (bytes32);\\n\\n  function batchRegisterRole(RegiterRoleRequest[] calldata requests) external returns(bytes32[] memory);\\n\\n  function grantRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchGrantRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function revokeRoleAccount(bytes32 role, address account) external returns (bool);\\n\\n  function batchRevokeRoleAccount(UpdateRoleRequest[] calldata requests) external returns (bool);\\n\\n  function setRoleStatus(bytes32 role, bool status) external returns (bool);\\n\\n  function setRoleGroup(bytes32 role, bytes32 group) external returns (bool);\\n\\n  function getRoleInfo(bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    );\\n\\n  function getRoleAccounts(bytes32 role) external view returns (address[] memory);\\n\\n  function hasRoleAccount(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x18e7657fdde30362e8c0186ac84acfdbc161c4f8f06e1e3cb009021d8fe5ab58\",\"license\":\"MIT\"},\"src/contracts/lib/LAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary LAddress {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"SendValue Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Call With Value Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Insufficient Balance For Call\\\");\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Static Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Delegate Call Failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory message\\n  ) internal returns (bytes memory) {\\n    require(LAddress.isContract(target), \\\"Illegal Contract Address\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return LAddress.verifyCallResult(success, returndata, message);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x46ff4e0c56534a0f20a61d889f7c384fd66bc82e5fef22957accbfd49f96eec1\",\"license\":\"MIT\"},\"src/contracts/lib/LContextUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the context\\n */\\nlibrary LContextUtils {\\n  function generateCtx(address contractId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(contractId));\\n  }\\n}\\n\",\"keccak256\":\"0x379d3f1670e48d86daed450ef0f5b75e59c592aa92b0d9ca2034d1888730969d\",\"license\":\"MIT\"},\"src/contracts/lib/LStorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary LStorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x26ff635954bfc3cb770fe6d88fb985634429e6df94f0aed880e2882e299f301a\",\"license\":\"MIT\"},\"src/contracts/lib/LStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary LStrings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n      return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\",\"keccak256\":\"0x24ae105c45515c06b38bbb435d508d4569a2d03f4b060dc43680bde225c8ee14\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../../acl/IGroupManagement.sol\\\";\\nimport \\\"../../acl/IRealmManagement.sol\\\";\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\n\\nlibrary LAccessControl {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LAccessControl\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant LIVELY_GENERAL_REALM = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_REALM\\\"));\\n  bytes32 public constant LIVELY_ASSET_REALM = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_REALM\\\"));\\n\\n  bytes32 public constant LIVELY_GENERAL_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_GENERAL_GROUP\\\"));\\n  bytes32 public constant LIVELY_DAO_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_DAO_GROUP\\\"));\\n  bytes32 public constant LIVELY_ASSET_GROUP = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_GROUP\\\"));\\n\\n  bytes32 public constant LIVELY_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ADMIN_ROLE\\\"));\\n  bytes32 public constant LIVELY_SYSTEM_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_SYSTEM_ADMIN_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_ASSET_MANAGER_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_MANAGER_ROLE\\\"));\\n  bytes32 public constant LIVELY_ASSET_ADMIN_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ASSET_ADMIN_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_COMMUNITY_DAO_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_COMMUNITY_DAO_ROLE\\\"));  \\n  bytes32 public constant LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\\\"));\\n  \\n  bytes32 public constant LIVELY_ANONYMOUS_ROLE = keccak256(abi.encodePacked(\\\"LIVELY_ANONYMOUS_ROLE\\\"));\\n\\n  function initializeContext(AccessControlStorage.DataCollections storage data) external {\\n    data.accountMap[msg.sender][LIVELY_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n    data.accountMap[msg.sender][LIVELY_SYSTEM_ADMIN_ROLE] = AccessControlStorage.Status.ENABLED;\\n\\n    data.roleMap[LIVELY_ADMIN_ROLE].name = \\\"LIVELY_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].name = \\\"LIVELY_SYSTEM_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].group = LIVELY_GENERAL_GROUP;\\n    data.roleMap[LIVELY_SYSTEM_ADMIN_ROLE].accountSet.add(msg.sender);\\n\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].name = \\\"LIVELY_ASSET_MANAGER_ROLE\\\";\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ASSET_MANAGER_ROLE].group = LIVELY_ASSET_GROUP;\\n\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].name = \\\"LIVELY_ASSET_ADMIN_ROLE\\\";\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ASSET_ADMIN_ROLE].group = LIVELY_ASSET_GROUP;\\n\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].name = \\\"LIVELY_COMMUNITY_DAO_ROLE\\\";\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_COMMUNITY_DAO_ROLE].group = LIVELY_DAO_GROUP;\\n\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].name = \\\"LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE\\\";\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE].group = LIVELY_DAO_GROUP;\\n    \\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].name = \\\"LIVELY_ANONYMOUS_ROLE\\\";\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].isEnabled = true;\\n    data.roleMap[LIVELY_ANONYMOUS_ROLE].group = LIVELY_GENERAL_GROUP;\\n\\n    data.groupMap[LIVELY_GENERAL_GROUP].name = \\\"LIVELY_GENERAL_GROUP\\\";\\n    data.groupMap[LIVELY_GENERAL_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_ADMIN_ROLE);\\n    data.groupMap[LIVELY_GENERAL_GROUP].roleSet.add(LIVELY_SYSTEM_ADMIN_ROLE);\\n\\n    data.groupMap[LIVELY_DAO_GROUP].name = \\\"LIVELY_DAO_GROUP\\\";\\n    data.groupMap[LIVELY_DAO_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_DAO_GROUP].roleSet.add(LIVELY_COMMUNITY_DAO_ROLE);\\n    data.groupMap[LIVELY_DAO_GROUP].roleSet.add(LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE);\\n\\n    data.groupMap[LIVELY_ASSET_GROUP].name = \\\"LIVELY_ASSET_GROUP\\\";\\n    data.groupMap[LIVELY_ASSET_GROUP].isEnabled = true;\\n    data.groupMap[LIVELY_ASSET_GROUP].roleSet.add(LIVELY_ASSET_MANAGER_ROLE);\\n    data.groupMap[LIVELY_ASSET_GROUP].roleSet.add(LIVELY_ASSET_ADMIN_ROLE);\\n\\n    data.realmMap[LIVELY_GENERAL_REALM].name = \\\"LIVELY_GENERAL_REALM\\\";\\n    data.realmMap[LIVELY_GENERAL_REALM].isEnabled = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].isUpgradable = true;\\n    data.realmMap[LIVELY_GENERAL_REALM].ctxSet.add(LContextUtils.generateCtx(address(this)));\\n\\n    data.realmMap[LIVELY_ASSET_REALM].name = \\\"LIVELY_ASSET_REALM\\\";\\n    data.realmMap[LIVELY_ASSET_REALM].isEnabled = true;\\n    data.realmMap[LIVELY_ASSET_REALM].isUpgradable = true;  \\n  }\\n\\n  function createRequestContext() external pure returns (IContextManagement.RequestRegisterContext[] memory) {\\n    IContextManagement.RequestRegisterContext[] memory rrc = new IContextManagement.RequestRegisterContext[](2);\\n    rrc[0].role = LIVELY_ADMIN_ROLE;\\n    rrc[0].isEnabled = true;\\n    rrc[0].funcSelectors = new bytes4[](22);\\n    rrc[0].funcSelectors[0] = IProxy.setUpgradeStatus.selector;\\n    rrc[0].funcSelectors[1] = IProxy.setSafeMode.selector;\\n    rrc[0].funcSelectors[2] = IContextManagement.addContextFuncRole.selector;\\n    rrc[0].funcSelectors[3] = IContextManagement.removeContextFunc.selector;\\n    rrc[0].funcSelectors[4] = IContextManagement.grantContextRole.selector;\\n    rrc[0].funcSelectors[5] = IContextManagement.revokeContextRole.selector;\\n    rrc[0].funcSelectors[6] = IContextManagement.setContextRealm.selector;\\n    rrc[0].funcSelectors[7] = IContextManagement.setContextStatus.selector;\\n    rrc[0].funcSelectors[8] = IRoleManagement.registerRole.selector;\\n    rrc[0].funcSelectors[9] = IRoleManagement.batchRegisterRole.selector;\\n    rrc[0].funcSelectors[10] = IRoleManagement.grantRoleAccount.selector;\\n    rrc[0].funcSelectors[11] = IRoleManagement.batchGrantRoleAccount.selector;\\n    rrc[0].funcSelectors[12] = IRoleManagement.revokeRoleAccount.selector;\\n    rrc[0].funcSelectors[13] = IRoleManagement.batchRevokeRoleAccount.selector;\\n    rrc[0].funcSelectors[14] = IRoleManagement.setRoleStatus.selector;\\n    rrc[0].funcSelectors[15] = IRoleManagement.setRoleGroup.selector;\\n    rrc[0].funcSelectors[16] = IGroupManagement.registerGroup.selector;\\n    rrc[0].funcSelectors[17] = IGroupManagement.setGroupStatus.selector;\\n    rrc[0].funcSelectors[18] = IRealmManagement.registerRealm.selector;\\n    rrc[0].funcSelectors[19] = IRealmManagement.setRealmStatus.selector;\\n    rrc[0].funcSelectors[20] = IRealmManagement.setRealmUpgradeStatus.selector;\\n    rrc[0].funcSelectors[21] = bytes4(keccak256(\\\"withdrawBalance(address)\\\"));\\n\\n    rrc[1].role = LIVELY_SYSTEM_ADMIN_ROLE;\\n    rrc[1].isEnabled = true;\\n    rrc[1].funcSelectors = new bytes4[](4);\\n    rrc[1].funcSelectors[0] = IProxy.setLocalAdmin.selector;\\n    rrc[1].funcSelectors[1] = IProxy.upgradeTo.selector;\\n    rrc[1].funcSelectors[2] = IContextManagement.registerContext.selector;\\n    rrc[1].funcSelectors[3] = IContextManagement.updateContext.selector;\\n\\n    return rrc;\\n  }\\n\\n  function hasAccess(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    address account,\\n    bytes4 signature\\n  ) external view returns (bool) {\\n    bytes32 role = data.ctxMap[context].resources[signature].role;\\n    // console.log(\\\"hasAccess called, address: %s\\\", account);\\n\\n    // console.log(\\\"data.ctxMap[context].smca: %s\\\", data.ctxMap[context].smca);\\n    // console.log(\\\"data.ctxMap[context].isEnabled:\\\");\\n    // console.logBool(data.ctxMap[context].isEnabled);\\n    // console.log(\\\"data.ctxMap[context].realm: \\\");\\n    // console.logBytes32(data.ctxMap[context].realm);\\n    // console.log(\\\"data.ctxMap[context].resources[signature].status: \\\");\\n    // console.logBytes1(bytes1(uint8(data.ctxMap[context].resources[signature].status)));\\n    // console.log(\\\"data.ctxMap[context].resources[signature].role: \\\");\\n    // console.logBytes32(data.ctxMap[context].resources[signature].role);\\n\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].name: %s\\\", data.realmMap[data.ctxMap[context].realm].name);\\n    // console.log(\\\"data.realmMap[data.ctxMap[context].realm].isEnabled: \\\");\\n    // console.logBool(data.realmMap[data.ctxMap[context].realm].isEnabled);\\n\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].name: %s\\\", data.groupMap[data.roleMap[role].group].name);\\n    // console.log(\\\"data.groupMap[data.roleMap[role].group].isEnabled: \\\");\\n    // console.logBool(data.groupMap[data.roleMap[role].group].isEnabled);\\n\\n    // console.log(\\\"data.accountMap[account][role]: \\\");\\n    // console.logBytes1(bytes1(uint8(data.accountMap[account][role])));\\n\\n    if (role == LIVELY_ANONYMOUS_ROLE) {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED;\\n    } else {\\n      return\\n        data.ctxMap[context].isEnabled &&\\n        data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED &&\\n        data.realmMap[data.ctxMap[context].realm].isEnabled &&\\n        data.groupMap[data.roleMap[role].group].isEnabled &&\\n        data.accountMap[account][role] == AccessControlStorage.Status.ENABLED;\\n    }\\n  }\\n\\n  function isLivelySystemAdminRole(AccessControlStorage.DataCollections storage data, address account)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.accountMap[account][LIVELY_SYSTEM_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAdminRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAssetManagerRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ASSET_MANAGER_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyAssetAdminRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_ASSET_ADMIN_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyCommunityDaoRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_COMMUNITY_DAO_ROLE] == AccessControlStorage.Status.ENABLED;  \\n  }\\n\\n  function isLivelyCommunityDaoExecutorRole(AccessControlStorage.DataCollections storage data, address account) external view returns (bool) {\\n    return data.accountMap[account][LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isLivelyGeneralGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_GENERAL_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyAssetGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_ASSET_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyDaoGroup(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return data.groupMap[LIVELY_DAO_GROUP].roleSet.contains(role);\\n  }\\n\\n  function isLivelyGeneralRealm(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.realmMap[LIVELY_GENERAL_REALM].ctxSet.contains(context);\\n  }\\n\\n  function isLivelyAssetRealm(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return data.realmMap[LIVELY_ASSET_REALM].ctxSet.contains(context);\\n  }\\n\\n\\n  function isContextSafeMode(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return IProxy(data.ctxMap[context].contractId).isSafeMode();\\n  }\\n\\n  function isContextUpgradable(AccessControlStorage.DataCollections storage data, bytes32 context)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return IProxy(data.ctxMap[context].contractId).isUpgradable();\\n  }\\n\\n  function isRealmUpgradable(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    if (bytes(data.realmMap[realm].name).length == 0) return false;\\n    return data.realmMap[realm].isUpgradable;\\n  }\\n\\n  function isGroupExists(AccessControlStorage.DataCollections storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0;\\n  }\\n\\n  function isGroupEnabled(AccessControlStorage.DataCollections storage data, bytes32 group) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length > 0 && data.groupMap[group].isEnabled;\\n  }\\n\\n  function isContextExists(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0);\\n  }\\n\\n  function isContextFunctionExists(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0) && data.ctxMap[context].funcSet.contains(functionSelector);\\n  }\\n\\n  function isContextFunctionEnabled(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 context,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return\\n      data.ctxMap[context].contractId != address(0) &&\\n      data.ctxMap[context].resources[functionSelector].status == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function isContextEnabled(AccessControlStorage.DataCollections storage data, bytes32 context) external view returns (bool) {\\n    return data.ctxMap[context].contractId != address(0) && data.ctxMap[context].isEnabled;\\n  }\\n\\n  function isRoleExists(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0;\\n  }\\n\\n  function isRoleEnabled(AccessControlStorage.DataCollections storage data, bytes32 role) external view returns (bool) {\\n    return bytes(data.roleMap[role].name).length > 0 && data.roleMap[role].isEnabled;\\n  }\\n\\n  function isRealmExists(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0;\\n  }\\n\\n  function isRealmEnabled(AccessControlStorage.DataCollections storage data, bytes32 realm) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length > 0 && data.realmMap[realm].isEnabled;\\n  }\\n}\\n\",\"keccak256\":\"0x222138d7d05b0fdf2796daea6bca334ae7fe93e7edbdc902b1931509cfa3cd59\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LContextManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../../proxy/IProxy.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\nimport \\\"../cryptography/LECDSA.sol\\\";\\nimport \\\"../proxy/LClones.sol\\\";\\n\\nlibrary LContextManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LClones for address;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LContextManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  bytes32 public constant TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n  \\n  bytes32 public constant CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"Context(address contractId,string name,string version,string realm)\\\");\\n  \\n  bytes32 public constant PREDICT_CTX_MESSAGE_TYPEHASH =\\n    keccak256(\\\"PredictContext(address deployer,address subject,string realm)\\\");\\n\\n  function registerAccessControlManagerContext(\\n    AccessControlStorage.DataCollections storage data,\\n    address newContract,\\n    bytes32 realm,\\n    IContextManagement.RequestRegisterContext[] calldata rc\\n  ) external returns (bytes32) {\\n    return _registerContext(data, newContract, realm, true, rc);\\n  }\\n\\n  function registerContext(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes memory signature,\\n    IContextManagement.RequestContext calldata rc,\\n    IContextManagement.RequestRegisterContext[] calldata rrc\\n  ) external returns (bytes32, address) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    bytes32 structHash = _getContextMessageHash(rc.contractId, rc.name, rc.version, rc.realm);\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal ECDASA Signature\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msgSigner,\\n        IContextManagement.registerContext.selector\\n      ),\\n      \\\"RegisterContext Access Denied\\\"\\n    );\\n    return (_registerContext(data, rc.contractId, rc.realm, rc.status, rrc), msgSigner);\\n  }\\n\\n  function registerPredictContext(\\n      AccessControlStorage.DataCollections storage data,\\n      bytes memory signature,\\n      IContextManagement.RequestPredictContext calldata rpc,\\n      IContextManagement.RequestRegisterContext[] calldata rrc\\n  ) external returns (address, bytes32, address) {\\n        require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    bytes32 structHash = _getPredictContextMessageHash(rpc.deployer, rpc.subject, rpc.realm);\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal ECDASA Signature\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msgSigner,\\n        IContextManagement.registerContext.selector\\n      ),\\n      \\\"RegisterPredictContext Access Denied\\\"\\n    );\\n\\n    (address contractId, bytes32 ctx) = _registerPredictContext(data, rrc, rpc);\\n    return (contractId, ctx, msgSigner);\\n  }\\n\\n\\n  function _getContextMessageHash(\\n    address contractId,\\n    bytes32 name,\\n    bytes32 version,\\n    bytes32 realm\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(CTX_MESSAGE_TYPEHASH, contractId, name, version, realm));\\n  }\\n\\n  function _getPredictContextMessageHash(\\n    address deployer,\\n    address subject,\\n    bytes32 realm\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(PREDICT_CTX_MESSAGE_TYPEHASH, deployer, subject, realm));\\n  }\\n\\n  function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\n    return LECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          TYPE_HASH,\\n          IProxy(address(this)).contractName(),\\n          IProxy(address(this)).contractVersion(),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  function _registerContext(\\n    AccessControlStorage.DataCollections storage data,\\n    address newContract,\\n    bytes32 realm,\\n    bool status,\\n    IContextManagement.RequestRegisterContext[] calldata rrc\\n  ) private returns (bytes32) {\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    bytes32 ctx = LContextUtils.generateCtx(newContract);\\n    require(data.ctxMap[ctx].contractId == address(0), \\\"Context Already Registered\\\");\\n    data.realmMap[realm].ctxSet.add(ctx);\\n    AccessControlStorage.Context storage newContext = data.ctxMap[ctx];\\n    newContext.realm = realm;\\n    newContext.contractId = newContract;\\n    newContext.isEnabled = status;\\n\\n    for (uint256 i = 0; i < rrc.length; i++) {\\n      require(bytes(data.roleMap[rrc[i].role].name).length != 0, \\\"Role Not Found\\\");\\n      for (uint256 j = 0; j < rrc[i].funcSelectors.length; j++) {\\n        newContext.resources[rrc[i].funcSelectors[j]].role = rrc[i].role;\\n        newContext.resources[rrc[i].funcSelectors[j]].status = rrc[i].isEnabled\\n          ? AccessControlStorage.Status.ENABLED\\n          : AccessControlStorage.Status.DISABLED;\\n        newContext.funcSet.add(rrc[i].funcSelectors[j]);\\n      }\\n    }\\n\\n    return ctx;\\n  }\\n\\n  function _registerPredictContext(\\n    AccessControlStorage.DataCollections storage data,\\n    IContextManagement.RequestRegisterContext[] calldata rrc,\\n    IContextManagement.RequestPredictContext calldata rpc\\n  ) private returns (address, bytes32) {\\n    require(bytes(data.realmMap[rpc.realm].name).length != 0, \\\"Realm Not Found\\\");\\n\\n    address predictedContractId = rpc.subject.predictDeterministicAddress(rpc.salt, rpc.deployer);\\n    bytes32 ctx = LContextUtils.generateCtx(predictedContractId);\\n\\n    require(data.ctxMap[ctx].contractId == address(0), \\\"Context Already Registered\\\");\\n    data.realmMap[rpc.realm].ctxSet.add(ctx);\\n    AccessControlStorage.Context storage newContext = data.ctxMap[ctx];\\n    newContext.realm = rpc.realm;\\n    newContext.contractId = predictedContractId;\\n    newContext.isEnabled = rpc.status;\\n\\n    for (uint256 i = 0; i < rrc.length; i++) {  \\n      require(bytes(data.roleMap[rrc[i].role].name).length != 0, \\\"Role Not Found\\\");\\n      for (uint256 j = 0; j < rrc[i].funcSelectors.length; j++) {\\n        newContext.resources[rrc[i].funcSelectors[j]].role = rrc[i].role;\\n        newContext.resources[rrc[i].funcSelectors[j]].status = rrc[i].isEnabled\\n          ? AccessControlStorage.Status.ENABLED\\n          : AccessControlStorage.Status.DISABLED;\\n        newContext.funcSet.add(rrc[i].funcSelectors[j]);\\n      }\\n    }\\n\\n    return (predictedContractId, ctx);\\n  }\\n\\n  function updateContext(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes memory signature,\\n    IContextManagement.RequestContext calldata rc,\\n    IContextManagement.RequestUpdateContext[] calldata ruc\\n  ) external returns (address, address) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    bytes32 structHash = _getContextMessageHash(rc.contractId, rc.name, rc.version, rc.realm);\\n    bytes32 msgDigest = _hashTypedDataV4(structHash);\\n    (address msgSigner, LECDSA.RecoverError recoverErr) = LECDSA.tryRecover(msgDigest, signature);\\n    require(recoverErr == LECDSA.RecoverError.NoError, \\\"Illegal ECDASA Signature\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msgSigner,\\n        IContextManagement.updateContext.selector\\n      ),\\n      \\\"UpdateContext Access Denied\\\"\\n    );\\n    return (_updateContext(data, ctx, rc.realm, rc.status, ruc), msgSigner);\\n  }\\n\\n  function _updateContext(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes32 realm,\\n    bool status,\\n    IContextManagement.RequestUpdateContext[] calldata ruc\\n  ) internal returns (address) {\\n    address contractId = data.ctxMap[ctx].contractId;\\n    require(contractId != address(0), \\\"Context Not Found\\\");\\n    require(contractId == msg.sender, \\\"Update Context Forbidden\\\");\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    data.ctxMap[ctx].isEnabled = status;\\n\\n    if (data.ctxMap[ctx].realm != realm) {\\n      data.realmMap[data.ctxMap[ctx].realm].ctxSet.remove(ctx);\\n      data.realmMap[realm].ctxSet.add(ctx);\\n    }\\n    data.ctxMap[ctx].realm = realm;\\n\\n    for (uint256 i = 0; i < ruc.length; i++) {\\n      require(bytes(data.roleMap[ruc[i].role].name).length != 0, \\\"Role Not Found\\\");\\n      for (uint256 j = 0; j < ruc[i].funcSelectors.length; j++) {\\n        if (\\n          ruc[i].updateStatus == IContextManagement.UpdateContextStatus.ENABLE ||\\n          ruc[i].updateStatus == IContextManagement.UpdateContextStatus.DISABLE\\n        ) {\\n          data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].role = ruc[i].role;\\n          data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].status = ruc[i].updateStatus ==\\n            IContextManagement.UpdateContextStatus.ENABLE\\n            ? AccessControlStorage.Status.ENABLED\\n            : AccessControlStorage.Status.DISABLED;\\n          if (!data.ctxMap[ctx].funcSet.contains(ruc[i].funcSelectors[j])) {\\n            data.ctxMap[ctx].funcSet.add(ruc[i].funcSelectors[j]);\\n          }\\n        } else {\\n          delete data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].role;\\n          delete data.ctxMap[ctx].resources[ruc[i].funcSelectors[j]].status;\\n          data.ctxMap[ctx].funcSet.remove(ruc[i].funcSelectors[j]);\\n        }\\n      }\\n    }\\n    return contractId;\\n  }\\n\\n  function addContextFuncRole(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.addContextFuncRole.selector\\n      ),\\n      \\\"AddContextFuncRole Access Denied\\\"\\n    );\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(!data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Already Exists\\\");\\n    data.ctxMap[ctx].resources[functionSelector].role = role;\\n    data.ctxMap[ctx].resources[functionSelector].status = AccessControlStorage.Status.ENABLED;\\n    data.ctxMap[ctx].funcSet.add(functionSelector);\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function removeContextFunc(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.removeContextFunc.selector\\n      ),\\n      \\\"RemoveContextFunc Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Remove ACL Context\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Not Found\\\");\\n    delete data.ctxMap[ctx].resources[functionSelector].role;\\n    delete data.ctxMap[ctx].resources[functionSelector].status;\\n    data.ctxMap[ctx].funcSet.remove(functionSelector);\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function grantContextRole(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.grantContextRole.selector\\n      ),\\n      \\\"GrantContextRole Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Grant ACL Context\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Not Found\\\");\\n    data.ctxMap[ctx].resources[functionSelector].role = role;\\n    data.ctxMap[ctx].resources[functionSelector].status = AccessControlStorage.Status.ENABLED;\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function revokeContextRole(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes4 functionSelector,\\n    bytes32 role\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.revokeContextRole.selector\\n      ),\\n      \\\"RevokeContextRole Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Revoke ACL Context\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(data.ctxMap[ctx].funcSet.contains(functionSelector), \\\"FunctionSelector Not Found\\\");\\n    data.ctxMap[ctx].resources[functionSelector].status = AccessControlStorage.Status.DISABLED;\\n    return data.ctxMap[ctx].realm;\\n  }\\n\\n  function setContextStatus(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bool status\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.setContextStatus.selector\\n      ),\\n      \\\"SetContextStatus Access Denied\\\"\\n    );\\n\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Change ACL Context Status\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    data.ctxMap[ctx].isEnabled = status;\\n    return (true, data.ctxMap[ctx].realm);\\n  }\\n\\n  function setContextRealm(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes32 realm\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IContextManagement.setContextRealm.selector\\n      ),\\n      \\\"SetContextRealm Access Denied\\\"\\n    );\\n    require(LContextUtils.generateCtx(address(this)) != ctx, \\\"Illegal Change ACL Context Realm\\\");\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    require(data.ctxMap[ctx].realm != realm, \\\"Illegal Realm Duplication\\\");\\n    bytes32 oldRealm = data.ctxMap[ctx].realm;\\n    data.realmMap[realm].ctxSet.add(ctx);\\n    data.realmMap[data.ctxMap[ctx].realm].ctxSet.remove(ctx);\\n    return (true, oldRealm);\\n  }\\n\\n  function hasContextRole(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 ctx,\\n    bytes32 role,\\n    bytes4 functionSelector\\n  ) external view returns (bool) {\\n    return\\n      data.ctxMap[ctx].contractId != address(0) &&\\n      data.ctxMap[ctx].resources[functionSelector].role == role &&\\n      data.ctxMap[ctx].resources[functionSelector].status == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function getContextInfo(AccessControlStorage.DataCollections storage data, bytes32 ctx)\\n    external\\n    view\\n    returns (IContextManagement.ResponseContext memory)\\n  {\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    bytes32 name = IProxy(data.ctxMap[ctx].contractId).contractName();\\n    bytes32 version = IProxy(data.ctxMap[ctx].contractId).contractVersion();\\n    bool isSafeMode = IProxy(data.ctxMap[ctx].contractId).isSafeMode();\\n    bool isUpgradable = IProxy(data.ctxMap[ctx].contractId).isUpgradable();\\n\\n    return\\n      IContextManagement.ResponseContext({\\n        name: name,\\n        version: version,\\n        contractId: data.ctxMap[ctx].contractId,\\n        realm: data.ctxMap[ctx].realm,\\n        isSafeMode: isSafeMode,\\n        isUpgradable: isUpgradable\\n      });\\n  }\\n\\n  function getContextFuncs(AccessControlStorage.DataCollections storage data, bytes32 ctx)\\n    external\\n    view\\n    returns (bytes4[] memory)\\n  {\\n    require(data.ctxMap[ctx].contractId != address(0), \\\"Context Not Found\\\");\\n    bytes4[] memory funcs = new bytes4[](data.ctxMap[ctx].funcSet.length());\\n    for (uint32 i = 0; i < data.ctxMap[ctx].funcSet.length(); i++) {\\n      funcs[i] = bytes4(data.ctxMap[ctx].funcSet.at(i));\\n    }\\n    return funcs;\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LAccessControl);\\n  }\\n}\\n\",\"keccak256\":\"0x73b98cc2577a2424df67838a0d79d66c83bacee97a68545d15a4228ca9104613\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LGroupManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../../acl/IGroupManagement.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\n\\nlibrary LGroupManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LGroupManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  function registerGroup(\\n    AccessControlStorage.DataCollections storage data,\\n    string calldata name,\\n    bool status\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IGroupManagement.registerGroup.selector\\n      ),\\n      \\\"RegisterGroup Access Denied\\\"\\n    );\\n    require(bytes(name).length != 0, \\\"Group Name Invalid\\\");\\n    bytes32 groupKey = keccak256(abi.encodePacked(name));\\n    require(bytes(data.groupMap[groupKey].name).length == 0, \\\"Group Already Registered\\\");\\n\\n    AccessControlStorage.Group storage newGroup = data.groupMap[groupKey];\\n    newGroup.name = name;\\n    newGroup.isEnabled = status;\\n    return groupKey;\\n  }\\n\\n  function setGroupStatus(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 group,\\n    bool status\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n\\n    if (group == LAccessControl.LIVELY_GENERAL_GROUP) {\\n      bytes32 context = LContextUtils.generateCtx(address(this));\\n      bytes4 signature = IRealmManagement.setRealmStatus.selector;\\n      bytes32 role = data.ctxMap[context].resources[signature].role;\\n      require(\\n        data.ctxMap[context].isEnabled &&\\n          data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED &&\\n          data.realmMap[data.ctxMap[context].realm].isEnabled &&\\n          data.accountMap[msg.sender][role] == AccessControlStorage.Status.ENABLED,\\n        \\\"SetGroupStatus Access Denied\\\"\\n      );\\n    } else {\\n      require(\\n        LAccessControl.hasAccess(\\n          data,\\n          LContextUtils.generateCtx(address(this)),\\n          msg.sender,\\n          IGroupManagement.setGroupStatus.selector\\n        ),\\n        \\\"SetGroupStatus Access Denied\\\"\\n      );\\n    }\\n    require(bytes(data.groupMap[group].name).length != 0, \\\"Group Not Found\\\");\\n    data.groupMap[group].isEnabled = status;\\n    return true;\\n  }\\n\\n  function hasGroupRole(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 group,\\n    bytes32 role\\n  ) external view returns (bool) {\\n    return bytes(data.groupMap[group].name).length != 0 && data.groupMap[group].roleSet.contains(role);\\n  }\\n\\n  function getGroupInfo(AccessControlStorage.DataCollections storage data, bytes32 group)\\n    external\\n    view\\n    returns (string memory, bool)\\n  {\\n    return (data.groupMap[group].name, data.groupMap[group].isEnabled);\\n  }\\n\\n  function getGroupRoles(AccessControlStorage.DataCollections storage data, bytes32 group)\\n    external\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return data.groupMap[group].roleSet.values();\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LAccessControl);\\n  }\\n}\\n\",\"keccak256\":\"0xa104d3dd0fbf1502f00a44e05bc054342a83f9e60834733ccb6d7699cf587fd0\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LRealmManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../../acl/IRealmManagement.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\n\\nlibrary LRealmManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LRealmManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  function registerRealm(\\n    AccessControlStorage.DataCollections storage data,\\n    string calldata name,\\n    bool status,\\n    bool isUpgradable\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRealmManagement.registerRealm.selector\\n      ),\\n      \\\"RegisterRealm Access Denied\\\"\\n    );\\n    require(bytes(name).length != 0, \\\"Realm Name Invalid\\\");\\n    bytes32 realmKey = keccak256(abi.encodePacked(name));\\n    require(bytes(data.realmMap[realmKey].name).length == 0, \\\"Realm Already Registered\\\");\\n\\n    AccessControlStorage.Realm storage newRealm = data.realmMap[realmKey];\\n    newRealm.name = name;\\n    newRealm.isEnabled = status;\\n    newRealm.isUpgradable = isUpgradable;\\n    return realmKey;\\n  }\\n\\n  function setRealmStatus(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 realm,\\n    bool status\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    if (LAccessControl.LIVELY_GENERAL_REALM == realm) {\\n      bytes32 context = LContextUtils.generateCtx(address(this));\\n      bytes4 signature = IRealmManagement.setRealmStatus.selector;\\n      bytes32 role = data.ctxMap[context].resources[signature].role;\\n      require(\\n        data.ctxMap[context].isEnabled &&\\n          data.ctxMap[context].resources[signature].status == AccessControlStorage.Status.ENABLED &&\\n          data.groupMap[data.roleMap[role].group].isEnabled &&\\n          data.accountMap[msg.sender][role] == AccessControlStorage.Status.ENABLED,\\n        \\\"SetRealmStatus Access Denied\\\"\\n      );\\n    } else {\\n      require(\\n        LAccessControl.hasAccess(\\n          data,\\n          LContextUtils.generateCtx(address(this)),\\n          msg.sender,\\n          IRealmManagement.setRealmStatus.selector\\n        ),\\n        \\\"SetRealmStatus Access Denied\\\"\\n      );\\n    }\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    data.realmMap[realm].isEnabled = status;\\n    return true;\\n  }\\n\\n  function setRealmUpgradeStatus(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 realm,\\n    bool status\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRealmManagement.setRealmUpgradeStatus.selector\\n      ),\\n      \\\"SetRealmUpgradeStatus Access Denied\\\"\\n    );\\n    require(bytes(data.realmMap[realm].name).length != 0, \\\"Realm Not Found\\\");\\n    data.realmMap[realm].isUpgradable = status;\\n    return true;\\n  }\\n\\n  function hasRealmContext(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 realm,\\n    bytes32 context\\n  ) external view returns (bool) {\\n    return bytes(data.realmMap[realm].name).length != 0 && data.realmMap[realm].ctxSet.contains(context);\\n  }\\n\\n  function getRealmInfo(AccessControlStorage.DataCollections storage data, bytes32 realm)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bool,\\n      bool\\n    )\\n  {\\n    return (data.realmMap[realm].name, data.realmMap[realm].isEnabled, data.realmMap[realm].isUpgradable);\\n  }\\n\\n  function getRealmContexts(AccessControlStorage.DataCollections storage data, bytes32 realm)\\n    external\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return data.realmMap[realm].ctxSet.values();\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LAccessControl);\\n  }\\n}\\n\",\"keccak256\":\"0x5a009ff5a09c90b9dacc2b6083e8305a21f028ceac0ce5f638bee496e74b6c45\",\"license\":\"MIT\"},\"src/contracts/lib/acl/LRoleManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../acl/AccessControlStorage.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../struct/LEnumerableSet.sol\\\";\\nimport \\\"../LContextUtils.sol\\\";\\nimport \\\"./LAccessControl.sol\\\";\\n\\nlibrary LRoleManagement {\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n\\n  bytes32 public constant LIB_NAME = keccak256(abi.encodePacked(\\\"LRoleManagement\\\"));\\n  bytes32 public constant LIB_VERSION = keccak256(abi.encodePacked(\\\"1.0.0\\\"));\\n\\n  function registerRole(\\n    AccessControlStorage.DataCollections storage data,\\n    string calldata name,\\n    bytes32 group,\\n    bool isEnabled\\n  ) external returns (bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.registerRole.selector\\n      ),\\n      \\\"RegisterRole Access Denied\\\"\\n    );\\n  \\n    return _registerRole(data, name, group, isEnabled);\\n  }\\n\\n  function batchRegisterRole(AccessControlStorage.DataCollections storage data, IRoleManagement.RegiterRoleRequest[] calldata requests) external returns(bytes32[] memory) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.batchRegisterRole.selector\\n      ),\\n      \\\"BatchRegisterRole Access Denied\\\"\\n    );\\n    bytes32[] memory roles = new bytes32[](requests.length);\\n    for(uint i; i < requests.length; i++) {\\n      roles[i] = _registerRole(data, requests[i].name, requests[i].group, requests[i].status);\\n    }\\n    return roles;\\n  }\\n\\n  function _registerRole(\\n    AccessControlStorage.DataCollections storage data,\\n    string calldata name,\\n    bytes32 group,\\n    bool isEnabled\\n  ) private returns (bytes32) {\\n    require(bytes(data.groupMap[group].name).length != 0, \\\"Group Not Found\\\");\\n    require(bytes(name).length != 0, \\\"Role Name Invalid\\\");\\n    bytes32 roleKey = keccak256(abi.encodePacked(name));\\n    require(bytes(data.roleMap[roleKey].name).length == 0, \\\"Role Already Registered\\\");\\n\\n    data.groupMap[group].roleSet.add(roleKey);\\n    AccessControlStorage.Role storage newRole = data.roleMap[roleKey];\\n    newRole.name = name;\\n    newRole.group = group;\\n    newRole.isEnabled = isEnabled;\\n    return roleKey;\\n  }\\n\\n\\n  function grantRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.grantRoleAccount.selector\\n      ),\\n      \\\"GrantRoleAccount Access Denied\\\"\\n    );\\n\\n    _grantRoleAccount(data, role, account);\\n    return true;\\n  }\\n\\n  function batchGrantRoleAccount(AccessControlStorage.DataCollections storage data, IRoleManagement.UpdateRoleRequest[] calldata requests) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.batchGrantRoleAccount.selector\\n      ),\\n      \\\"BatchGrantRoleAccount Access Denied\\\"\\n    );\\n    for(uint i; i < requests.length; i++) {\\n      _grantRoleAccount(data, requests[i].role, requests[i].account);\\n    }\\n    return true;\\n  }\\n\\n   function _grantRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) private returns (bool) {\\n    if(role == LAccessControl.LIVELY_COMMUNITY_DAO_EXECUTOR_ROLE) {      \\n      require(account.code.length > 0, \\\"Illegal Grant Community Dao Executor Role\\\");\\n    }\\n\\n    if(role == LAccessControl.LIVELY_ASSET_MANAGER_ROLE) {      \\n      require(account.code.length > 0, \\\"Illegal Grant Asset Manager Role\\\");\\n    }\\n\\n    require(role != LAccessControl.LIVELY_ANONYMOUS_ROLE, \\\"Illegal Grant Anonymous Role\\\");\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(account != address(0), \\\"Address Invalid\\\");\\n    data.accountMap[account][role] = AccessControlStorage.Status.ENABLED;\\n    if (!data.roleMap[role].accountSet.contains(account)) {\\n      data.roleMap[role].accountSet.add(account);\\n    }\\n    return true;\\n  }\\n\\n  function revokeRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.revokeRoleAccount.selector\\n      ),\\n      \\\"RevokeRoleAccount Access Denied\\\"\\n    );\\n    \\n    _revokeRoleAccount(data, role, account);\\n    return true;\\n  }\\n\\n  function batchRevokeRoleAccount(AccessControlStorage.DataCollections storage data, IRoleManagement.UpdateRoleRequest[] calldata requests) external returns (bool) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.batchRevokeRoleAccount.selector\\n      ),\\n      \\\"BatchRevokeRoleAccount Access Denied\\\"\\n    );\\n    for(uint i; i < requests.length; i++) {\\n      _revokeRoleAccount(data, requests[i].role, requests[i].account);\\n    }\\n    return true;\\n  }\\n\\n  function _revokeRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) private returns (bool) {    \\n    if (role == LAccessControl.LIVELY_ADMIN_ROLE || role == LAccessControl.LIVELY_SYSTEM_ADMIN_ROLE) {\\n      require(data.roleMap[role].accountSet.length() > 1, \\\"Illegal Revoke Role Account\\\");    \\n    } \\n\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(account != address(0), \\\"Address Invalid\\\");\\n    require(data.roleMap[role].accountSet.contains(account), \\\"Account Not Found\\\");\\n    require(data.accountMap[account][role] != AccessControlStorage.Status.NONE, \\\"Account Role Not Found\\\");\\n    data.accountMap[account][role] = AccessControlStorage.Status.DISABLED;\\n    data.roleMap[role].accountSet.remove(account);\\n    return true;\\n  }\\n\\n  function setRoleStatus(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    bool status\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.setRoleStatus.selector\\n      ),\\n      \\\"SetRoleStatus Access Denied\\\"\\n    );\\n    require(\\n      role != LAccessControl.LIVELY_ANONYMOUS_ROLE &&\\n        role != LAccessControl.LIVELY_ADMIN_ROLE &&\\n        role != LAccessControl.LIVELY_SYSTEM_ADMIN_ROLE,\\n      \\\"Illegal Change Role Status\\\"\\n    );\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    data.roleMap[role].isEnabled = status;\\n    return (true, data.roleMap[role].group);\\n  }\\n\\n  function setRoleGroup(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    bytes32 group\\n  ) external returns (bool, bytes32) {\\n    require(!IProxy(address(this)).isSafeMode(), \\\"SafeMode: Call Rejected\\\");\\n    require(\\n      LAccessControl.hasAccess(\\n        data,\\n        LContextUtils.generateCtx(address(this)),\\n        msg.sender,\\n        IRoleManagement.setRoleGroup.selector\\n      ),\\n      \\\"SetRoleGroup Access Denied\\\"\\n    );\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    require(bytes(data.groupMap[group].name).length != 0, \\\"Group Not Found\\\");\\n    require(data.roleMap[role].group != group, \\\"Illegal Group Duplication\\\");\\n    bytes32 oldGroup = data.roleMap[role].group;\\n    data.groupMap[data.roleMap[role].group].roleSet.remove(role);\\n    data.groupMap[group].roleSet.add(role);\\n    data.roleMap[role].group = group;\\n    return (true, oldGroup);\\n  }\\n\\n  function getRoleInfo(AccessControlStorage.DataCollections storage data, bytes32 role)\\n    external\\n    view\\n    returns (\\n      string memory,\\n      bytes32,\\n      bool\\n    )\\n  {\\n    return (data.roleMap[role].name, data.roleMap[role].group, data.roleMap[role].isEnabled);\\n  }\\n\\n  function getRoleAccounts(AccessControlStorage.DataCollections storage data, bytes32 role)\\n    external\\n    view\\n    returns (address[] memory)\\n  {\\n    require(bytes(data.roleMap[role].name).length != 0, \\\"Role Not Found\\\");\\n    return data.roleMap[role].accountSet.values();\\n  }\\n\\n  function hasRoleAccount(\\n    AccessControlStorage.DataCollections storage data,\\n    bytes32 role,\\n    address account\\n  ) external view returns (bool) {\\n    return\\n      bytes(data.roleMap[role].name).length != 0 &&\\n      account != address(0) &&\\n      data.accountMap[account][role] == AccessControlStorage.Status.ENABLED;\\n  }\\n\\n  function getLibrary() external pure returns (address) {\\n    return address(LAccessControl);\\n  }\\n}\\n\",\"keccak256\":\"0x00b7871d16e2c3c1abac071ad263155139c49922e5284bf92cd3c107df62fb72\",\"license\":\"MIT\"},\"src/contracts/lib/cryptography/LECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../LStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary LECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS,\\n    InvalidSignatureV\\n  }\\n\\n  function _throwError(RecoverError error) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert(\\\"ECDSA: invalid signature\\\");\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert(\\\"ECDSA: invalid signature length\\\");\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert(\\\"ECDSA: invalid signature 's' value\\\");\\n    } else if (error == RecoverError.InvalidSignatureV) {\\n      revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature` or error string. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   *\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n    // Check the signature length\\n    // - case 65: r,s,v signature (standard)\\n    // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else if (signature.length == 64) {\\n      bytes32 r;\\n      bytes32 vs;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        vs := mload(add(signature, 0x40))\\n      }\\n      return tryRecover(hash, r, vs);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, signature);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address, RecoverError) {\\n    bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    uint8 v = uint8((uint256(vs) >> 255) + 27);\\n    return tryRecover(hash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    bytes32 r,\\n    bytes32 vs\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address, RecoverError) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS);\\n    }\\n    if (v != 27 && v != 28) {\\n      return (address(0), RecoverError.InvalidSignatureV);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature);\\n    }\\n\\n    return (signer, RecoverError.NoError);\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address) {\\n    (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n    _throwError(error);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n    // 32 is the length in bytes of hash,\\n    // enforced by the type signature above\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Message, created from `s`. This\\n   * produces hash corresponding to the one signed with the\\n   * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n   * JSON-RPC method as part of EIP-191.\\n   *\\n   * See {recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", LStrings.toString(s.length), s));\\n  }\\n\\n  /**\\n   * @dev Returns an Ethereum Signed Typed Data, created from a\\n   * `domainSeparator` and a `structHash`. This produces hash corresponding\\n   * to the one signed with the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n   * JSON-RPC method as part of EIP-712.\\n   *\\n   * See {recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n  }\\n}\\n\",\"keccak256\":\"0xc8056320321b6983c6685741b1ba607513a7c6817f4e4a7319b6b45ac9194565\",\"license\":\"MIT\"},\"src/contracts/lib/proxy/LClones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n */\\nlibrary LClones {\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n   *\\n   * This function uses the create opcode, which should never revert.\\n   */\\n  function clone(address implementation) internal returns (address instance) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      instance := create(0, ptr, 0x37)\\n    }\\n    require(instance != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n   *\\n   * This function uses the create2 opcode and a `salt` to deterministically deploy\\n   * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n   * the clones cannot be deployed twice at the same address.\\n   */\\n  function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      instance := create2(0, ptr, 0x37, salt)\\n    }\\n    require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(\\n    address implementation,\\n    bytes32 salt,\\n    address deployer\\n  ) internal pure returns (address predicted) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, implementation))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n      mstore(add(ptr, 0x38), shl(0x60, deployer))\\n      mstore(add(ptr, 0x4c), salt)\\n      mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n      predicted := keccak256(add(ptr, 0x37), 0x55)\\n    }\\n  }\\n\\n  /**\\n   * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n   */\\n  function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n    return predictDeterministicAddress(implementation, salt, address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xa7bf692e117b23688be8687bf9e4c3c31ffcaa8cf94d9946b33a1e8b4d953052\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./LEnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) \\n * - `address -> uint256` (`AddressToUintMap`) \\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) \\n * - `uint256 -> uint256` (`UintToUintMap`) \\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) \\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an array of EnumerableMap.\\n * ====\\n */\\nlibrary LEnumerableMap {\\n    using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        LEnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x902b2d606e688f51f33d0a1db574be9cc049c20e7c8fd43cde744e2ec3743eb6\",\"license\":\"MIT\"},\"src/contracts/lib/struct/LEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary LEnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xeb49909b77ba631382c48e9fead2e49f8b4c72f3325f7685d4bddfce32d7528b\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract BaseProxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overridden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x0cdd7d1cba849ef5036b204cac99363caeffbcad876afd3fa7f4fc22d71533f3\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC1822.sol\\\";\\nimport \\\"./IProxy.sol\\\";\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"./BaseUUPSStorage.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"../lib/LAddress.sol\\\";\\nimport \\\"../lib/LStorageSlot.sol\\\";\\nimport \\\"../acl/IAccessControl.sol\\\";\\nimport \\\"../acl/IContextManagement.sol\\\";\\nimport \\\"../utils/Message.sol\\\";\\nimport \\\"../utils/ERC165.sol\\\";\\nimport \\\"../lib/LContextUtils.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n\\n * An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\n\\nabstract contract BaseUUPSProxy is\\n  BaseUUPSStorage,\\n  BaseProxy,\\n  Initializable,\\n  IProxy,\\n  IERC1822Proxiable,\\n    Message,\\n    ERC165\\n{\\n  /**\\n   * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n   * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n   * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n   * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n   * fail.\\n   */\\n  modifier onlyProxy() {\\n    require(address(this) != __self, \\\"Illegal Contract Call\\\");\\n    require(_implementation() == __self, \\\"Proxy Called Invalid\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyLocalAdmin() {\\n    require(_getLocalAdmin() == _msgSender(), \\\"Caller Not Authorized\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n   * callable on the implementing contract but not through proxies.\\n   */\\n  modifier notDelegated() {\\n    require(address(this) == __self, \\\"Illegal Contract Delegatecall\\\");\\n    _;\\n  }\\n\\n  modifier safeModeCheck() {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    _;\\n  }\\n\\n  modifier aclCheck(bytes4 selector) {\\n    require(_hasPermission(selector), \\\"Access Denied\\\");\\n    _;\\n  }\\n\\n  function _hasPermission(bytes4 selector) internal returns (bool) {\\n    if (address(this) == _accessControlManager) {\\n      bytes memory data = abi.encodeWithSelector(\\n        IAccessControl.hasAccess.selector,\\n        LContextUtils.generateCtx(address(this)),\\n        _msgSender(),\\n        selector\\n      );\\n      bytes memory returndata = LAddress.functionDelegateCall(_implementation(), data, \\\"Delegatecall hasAccess Failed\\\");\\n      return uint8(returndata[returndata.length - 1]) == 1;\\n    } else {\\n      return\\n        IAccessControl(_accessControlManager).hasAccess(\\n          LContextUtils.generateCtx(address(this)),\\n          _msgSender(),\\n          selector\\n        );\\n    }\\n  }\\n\\n  function _isRealmUpgradable() internal returns (bool) {\\n    if (address(this) == _accessControlManager) {\\n      bytes memory data = abi.encodeWithSelector(IAccessControl.isRealmUpgradable.selector, _domainRealm);\\n      bytes memory returndata = LAddress.functionDelegateCall(\\n        _implementation(),\\n        data,\\n        \\\"Delegatecall isRealmUpgradable Failed\\\"\\n      );\\n      return uint8(returndata[returndata.length - 1]) == 1;\\n    } else {\\n      return IAccessControl(_accessControlManager).isRealmUpgradable(_domainRealm);\\n    }\\n  }\\n\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n   */\\n\\n  constructor() {\\n    assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n    assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n    // set contract Admin (implementation contract)\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = _msgSender();\\n\\n    // set _isUpgradable and _isSafeMode of contact\\n    _isUpgradable = false;\\n    _isSafeMode = true;\\n  }\\n\\n  function __BASE_UUPS_init(\\n    string calldata domainName,\\n    string calldata domainVersion,\\n    bytes32 domainRealm,\\n    address accessControl\\n  ) internal {\\n    __BASE_UUPS_init_unchained(domainName, domainVersion, domainRealm, accessControl);\\n  }\\n\\n  function __BASE_UUPS_init_unchained(\\n    string calldata domainName,\\n    string calldata domainVersion,\\n    bytes32 domainRealm,\\n    address accessControl\\n  ) internal onlyInitializing {\\n    _domainName = keccak256(abi.encodePacked(domainName));\\n    _domainVersion = keccak256(abi.encodePacked(domainVersion));\\n    _domainRealm = domainRealm;\\n    if (accessControl == address(0)) {\\n      _accessControlManager = address(this);\\n    } else {\\n      try IERC165(accessControl).supportsInterface(type(IAccessControl).interfaceId) returns (bool isSupported) {\\n        require(isSupported, \\\"Invalid AccessControlManager\\\");\\n      } catch {\\n        revert(\\\"Illegal AccessControlManager\\\");\\n      }\\n      _accessControlManager = accessControl;\\n    }\\n    _isUpgradable = false;\\n    _isSafeMode = false;\\n    _setLocalAdmin(_msgSender());\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return\\n      interfaceId == type(IProxy).interfaceId ||\\n      interfaceId == type(IERC1822Proxiable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation() internal view override returns (address) {\\n    return LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    require(LAddress.isContract(newImplementation), \\\"Illegal Contract Address\\\");\\n    LStorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(msg.sender, address(this), newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      return LAddress.functionDelegateCall(newImplementation, data, \\\"Delegatecall Failed\\\");\\n    }\\n    return new bytes(0);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCallUUPS(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal returns (bytes memory) {\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\n    if (LStorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n      _setImplementation(newImplementation);\\n      return new bytes(0);\\n    } else {\\n      try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n        require(slot == _IMPLEMENTATION_SLOT, \\\"Invalid UUPS Contract\\\");\\n      } catch {\\n        revert(\\\"Illegal UUPS Contract\\\");\\n      }\\n\\n      try IERC165(newImplementation).supportsInterface(type(IProxy).interfaceId) returns (bool isSupported) {\\n        require(isSupported, \\\"Invalid IProxy Contract\\\");\\n      } catch {\\n        revert(\\\"Illegal IProxy Contract\\\");\\n      }\\n\\n      return _upgradeToAndCall(newImplementation, data, forceCall);\\n    }\\n  }\\n\\n  /**\\n   * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n   * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n   */\\n  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n    return _IMPLEMENTATION_SLOT;\\n  }\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external virtual onlyProxy returns (bytes memory) {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_isUpgradable, \\\"Upgrade Call Rejected\\\");\\n    _authorizeUpgrade(newImplementation);\\n    return _upgradeToAndCallUUPS(newImplementation, data, forceCall);\\n  }\\n\\n  /**\\n   * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n   * {upgradeTo} and {upgradeToAndCall}.\\n   *\\n   * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n   *\\n   * ```solidity\\n   * function _authorizeUpgrade(address) internal override onlyOwner {}\\n   * ```\\n   */\\n  function _authorizeUpgrade(address newImplementation) internal virtual {\\n    require(newImplementation != _implementation(), \\\"Illegal New Implementation\\\");\\n    require(_hasPermission(this.upgradeTo.selector), \\\"Upgrade Context Forbidden\\\");\\n  }\\n\\n  function localAdmin() external view returns (address) {\\n    return _getLocalAdmin();\\n  }\\n\\n  function setLocalAdmin(address newLocalAdmin) external onlyProxy returns (bool) {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_hasPermission(this.setLocalAdmin.selector), \\\"SetLocalAdmin Forbidden\\\");\\n    require(newLocalAdmin != address(0), \\\"Address Invalid\\\");\\n    _setLocalAdmin(newLocalAdmin);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n   */\\n  function _getLocalAdmin() internal view returns (address) {\\n    return LStorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setLocalAdmin(address newAdmin) internal {\\n    LStorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    emit LocalAdminChanged(_msgSender(), address(this), newAdmin);\\n  }\\n\\n  // In each upgrade the initialize requirement must be changed\\n  function setSafeMode(bool status) external onlyProxy returns (bool) {\\n    require(_getInitializedCount() > 0, \\\"Contract Not Initialized\\\");\\n    require(_hasPermission(this.setSafeMode.selector), \\\"SetSafeMode Forbidden\\\");\\n    _isSafeMode = status;\\n    emit SafeModeChanged(_msgSender(), address(this), _domainRealm, status);\\n    return status;\\n  }\\n\\n  function setUpgradeStatus(bool status) external onlyProxy returns (bool) {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_hasPermission(this.setUpgradeStatus.selector), \\\"SetUpgradeStatus Forbidden\\\");\\n    require(_isRealmUpgradable(), \\\"Realm Upgrade Forbidden\\\");\\n    _isUpgradable = status;\\n    emit UpgradeStatusChanged(_msgSender(), address(this), _domainRealm, status);\\n    return status;\\n  }\\n\\n  function contractName() external view returns (bytes32) {\\n    return _domainName;\\n  }\\n\\n  function contractVersion() external view returns (bytes32) {\\n    return _domainVersion;\\n  }\\n\\n  function contractRealm() external view returns (bytes32) {\\n    return _domainRealm;\\n  }\\n\\n  function contractContext() external view returns (bytes32) {\\n    return LContextUtils.generateCtx(address(this));\\n  }\\n\\n  function accessControlManager() external view returns (address) {\\n    return _accessControlManager;\\n  }\\n\\n  function subjectAddress() external view returns (address) {\\n    return _implementation();\\n  }\\n\\n  function isSafeMode() external view returns (bool) {\\n    return _isSafeMode;\\n  }\\n\\n  function isUpgradable() external view returns (bool) {\\n    return _isUpgradable;\\n  }\\n\\n  function domainSeparator() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    return keccak256(abi.encode(_TYPE_HASH, _domainName, _domainVersion, block.chainid, address(this)));\\n  }\\n\\n  function initVersion() external view returns (uint16) {\\n    return _getInitializedCount();\\n  }\\n\\n  function withdrawBalance(address recepient) public {\\n    require(!_isSafeMode, \\\"SafeMode: Call Rejected\\\");\\n    require(_hasPermission(this.withdrawBalance.selector), \\\"Withdraw Balance Forbidden\\\");\\n    payable(recepient).transfer(address(this).balance);\\n  }\\n\\n  // solhint-disable-next-line\\n  receive() external payable override {}\\n\\n  // solhint-disable-next-line\\n  fallback() external payable override {}\\n}\\n\",\"keccak256\":\"0x17d650c8c3c542f8ad4dd341bac877f1dbad079e42c09109a6a4902491ff06f6\",\"license\":\"MIT\"},\"src/contracts/proxy/BaseUUPSStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n */\\n\\nabstract contract BaseUUPSStorage {\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n  bytes32 internal constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n   */\\n  bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  bytes32 internal constant _TYPE_HASH =\\n    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n  \\n  address internal immutable __self = address(this);\\n\\n  bytes32 internal _domainName;\\n  bytes32 internal _domainVersion;\\n  bytes32 internal _domainRealm;\\n  address internal _accessControlManager;\\n  bool internal _isSafeMode;\\n  bool internal _isUpgradable;\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   */\\n  uint256[64] private __reserved;\\n}\\n\",\"keccak256\":\"0x086334b0668244b8ff2ef60dd770da77ecfd05f705e7c2251c60553c4651bfad\",\"license\":\"MIT\"},\"src/contracts/proxy/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBaseProxy {\\n  event Upgraded(address indexed sender, address indexed proxy, address indexed newImplementation);\\n}\\n\",\"keccak256\":\"0x719d13ceb21e3fda10fc0ba5fb1b167b8736919d6c6a99f6268667acb8b4d062\",\"license\":\"MIT\"},\"src/contracts/proxy/IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n  /**\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n   * address.\\n   *\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n   * function revert if invoked through a proxy.\\n   */\\n  function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcdbcc1ffe347082b0f072839b359e6edc0f82790fccaffd511f5f3b1f3a05102\",\"license\":\"MIT\"},\"src/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IBaseProxy.sol\\\";\\n\\ninterface IProxy is IBaseProxy {\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event LocalAdminChanged(address indexed sender, address indexed proxy, address newAdmin);\\n\\n  event SafeModeChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  event UpgradeStatusChanged(address indexed sender, address indexed proxy, bytes32 indexed realm, bool status);\\n\\n  /**\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\n   */\\n  event Initialized(\\n    address indexed sender,\\n    address indexed proxy,\\n    address indexed subject,\\n    string name,\\n    string version,\\n    bytes32 realm,\\n    uint16 initCount\\n  );\\n\\n  function upgradeTo(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) external returns (bytes memory);\\n\\n  function setSafeMode(bool status) external returns (bool);\\n\\n  function setUpgradeStatus(bool status) external returns (bool);\\n\\n  function setLocalAdmin(address newAdmin) external returns (bool);\\n\\n  function contractName() external view returns (bytes32);\\n\\n  function contractVersion() external view returns (bytes32);\\n\\n  function contractRealm() external view returns (bytes32);\\n\\n  function contractContext() external view returns (bytes32);\\n\\n  function accessControlManager() external view returns (address);\\n\\n  function subjectAddress() external view returns (address);\\n\\n  function isSafeMode() external view returns (bool);\\n\\n  function isUpgradable() external view returns (bool);\\n\\n  function localAdmin() external view returns (address);\\n\\n  function domainSeparator() external view returns (bytes32);\\n\\n  function initVersion() external view returns (uint16);\\n\\n}\\n\",\"keccak256\":\"0x93bf3ccb33a8616fba3379b096e79e88ae3249882af81d1dc808eec6688800a7\",\"license\":\"MIT\"},\"src/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../lib/LAddress.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   * @custom:oz-retyped-from bool\\n   */\\n  uint16 private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n   */\\n  modifier initializer() {\\n    bool isTopLevelCall = !_initializing;\\n    require(\\n      (isTopLevelCall && _initialized < 1) || (!LAddress.isContract(address(this)) && _initialized == 1),\\n      \\\"Contract Already Initialized\\\"\\n    );\\n    _initialized = 1;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n    }\\n    _;\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n   * used to initialize parent contracts.\\n   *\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\n   * initialization.\\n   *\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n   * a contract, executing them in the right order is up to the developer or operator.\\n   */\\n  modifier reinitializer(uint16 version) {\\n    require(!_initializing && _initialized < version, \\\"Contract Already Initialized\\\");\\n    _initialized = version;\\n    _initializing = true;\\n    _;\\n    _initializing = false;\\n  }\\n\\n  /**\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n   */\\n  modifier onlyInitializing() {\\n    require(_initializing, \\\"Contract Not Initializing\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n   * through proxies.\\n   */\\n  function _disableInitializers() internal virtual {\\n    require(!_initializing, \\\"Contract Initializing Invalid\\\");\\n    if (_initialized < type(uint16).max) {\\n      _initialized = type(uint16).max;\\n    }\\n  }\\n\\n  function _getInitializedCount() internal view returns (uint16) {\\n    return _initialized;\\n  }\\n\\n  function _isInitializing() internal view returns (bool) {\\n    return _initializing;\\n  }\\n}\\n\",\"keccak256\":\"0xced45d5b03d0fcf6c7bef560d630a997ac0dd182cdbc55549fa3efceb932ea74\",\"license\":\"MIT\"},\"src/contracts/test/acl/AccessControlManagerTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./AccessControlStorageTest.sol\\\";\\nimport \\\"../../acl/IAccessControl.sol\\\";\\nimport \\\"../../acl/IGroupManagement.sol\\\";\\nimport \\\"../../acl/IRealmManagement.sol\\\";\\nimport \\\"../../acl/IRoleManagement.sol\\\";\\nimport \\\"../../acl/IContextManagement.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableMap.sol\\\";\\nimport \\\"../../lib/acl/LContextManagement.sol\\\";\\nimport \\\"../../lib/acl/LRoleManagement.sol\\\";\\nimport \\\"../../lib/acl/LGroupManagement.sol\\\";\\nimport \\\"../../lib/acl/LRealmManagement.sol\\\";\\nimport \\\"../../lib/acl/LAccessControl.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\nimport \\\"../../proxy/BaseUUPSProxy.sol\\\";\\n\\ncontract AccessControlManagerTest is\\n  AccessControlStorageTest,\\n  BaseUUPSProxy\\n  // IContextManagement,\\n  // IAccessControl,\\n  // IGroupManagement,\\n  // IRealmManagement,\\n  // IRoleManagement\\n{\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableMap for LEnumerableMap.Bytes32ToBytes32Map;\\n  using LEnumerableMap for LEnumerableMap.AddressToUintMap;\\n\\n  constructor() {}\\n\\n  function initialize() public onlyProxy reinitializer(2) {\\n    _data.dummy_1 = 100;\\n    dummy_2 = keccak256(\\\"UPDATE_TEST\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n    return\\n      interfaceId == type(IAccessControl).interfaceId ||\\n      interfaceId == type(IContextManagement).interfaceId ||\\n      interfaceId == type(IRoleManagement).interfaceId ||\\n      interfaceId == type(IGroupManagement).interfaceId ||\\n      interfaceId == type(IRealmManagement).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x1bff32c3d823b5c63ae46f3af7cef342830de37a0abbccd4882ef1c21c260442\",\"license\":\"MIT\"},\"src/contracts/test/acl/AccessControlStorageTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../../lib/struct/LEnumerableSet.sol\\\";\\nimport \\\"../../lib/struct/LEnumerableMap.sol\\\";\\nimport \\\"../../proxy/BaseUUPSStorage.sol\\\";\\n\\nabstract contract AccessControlStorageTest is BaseUUPSStorage {\\n  using LEnumerableSet for LEnumerableSet.AddressSet;\\n  using LEnumerableSet for LEnumerableSet.Bytes32Set;\\n  using LEnumerableMap for LEnumerableMap.Bytes32ToBytes32Map;\\n  using LEnumerableMap for LEnumerableMap.AddressToUintMap;\\n\\n  enum Status {\\n    NONE,\\n    ENABLED,\\n    DISABLED\\n  }\\n\\n  struct RoleStat {\\n    bytes32 role;\\n    Status status;\\n  }\\n\\n  struct Context {\\n    bytes32 realm;\\n    address contractId;\\n    bool isEnabled;\\n    mapping(bytes4 => RoleStat) resources; // function selector => RoleStat\\n    LEnumerableSet.Bytes32Set funcSet;\\n  }\\n\\n  struct Role {\\n    bytes32 group;\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.AddressSet accountSet;\\n  }\\n\\n  struct Realm {\\n    string name;\\n    bool isEnabled;\\n    bool isUpgradable;\\n    LEnumerableSet.Bytes32Set ctxSet;\\n  }\\n\\n  struct Group {\\n    string name;\\n    bool isEnabled;\\n    LEnumerableSet.Bytes32Set roleSet;\\n  }\\n\\n  struct DataCollections {\\n    mapping(address => mapping(bytes32 => Status)) accountMap;\\n    mapping(bytes32 => Context) ctxMap;\\n    mapping(bytes32 => Role) roleMap;\\n    mapping(bytes32 => Realm) realmMap;\\n    mapping(bytes32 => Group) groupMap;\\n    uint256 dummy_1;\\n  }\\n\\n  DataCollections internal _data;\\n  bytes32 internal dummy_2;\\n}\\n\",\"keccak256\":\"0xbe693ebff6ad0129a4acffbe2eccbd39efa777f31a909e2e3a48d3255b516cb0\",\"license\":\"MIT\"},\"src/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0xe50c06dcb5dd747db00a5fe5c5e9561408d8b334609990bf331902d87ee7fd07\",\"license\":\"MIT\"},\"src/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1a29e5e4f28e3c4116c0e31faa26fab4960723dd167b122ed9fc12b04753d1a8\",\"license\":\"MIT\"},\"src/contracts/utils/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Message {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0xd7f32a98cfe501a9cf4367741613707a55b5201aac314bd36c63af9733b3df72\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 19657,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "_domainName",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 19659,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "_domainVersion",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 19661,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "_domainRealm",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 19663,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 19665,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "_isSafeMode",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 19667,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "_isUpgradable",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 19672,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "__reserved",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)64_storage"
      },
      {
        "astId": 20454,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "_data",
        "offset": 0,
        "slot": "68",
        "type": "t_struct(DataCollections)20451_storage"
      },
      {
        "astId": 20456,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "dummy_2",
        "offset": 0,
        "slot": "74",
        "type": "t_bytes32"
      },
      {
        "astId": 19840,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "75",
        "type": "t_uint16"
      },
      {
        "astId": 19843,
        "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
        "label": "_initializing",
        "offset": 2,
        "slot": "75",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)64_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[64]",
        "numberOfBytes": "2048"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(Status)20372": {
        "encoding": "inplace",
        "label": "enum AccessControlStorageTest.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_enum(Status)20372))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => enum AccessControlStorageTest.Status))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_enum(Status)20372)"
      },
      "t_mapping(t_bytes32,t_enum(Status)20372)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum AccessControlStorageTest.Status)",
        "numberOfBytes": "32",
        "value": "t_enum(Status)20372"
      },
      "t_mapping(t_bytes32,t_struct(Context)20393_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorageTest.Context)",
        "numberOfBytes": "32",
        "value": "t_struct(Context)20393_storage"
      },
      "t_mapping(t_bytes32,t_struct(Group)20421_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorageTest.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)20421_storage"
      },
      "t_mapping(t_bytes32,t_struct(Realm)20413_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorageTest.Realm)",
        "numberOfBytes": "32",
        "value": "t_struct(Realm)20413_storage"
      },
      "t_mapping(t_bytes32,t_struct(Role)20403_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlStorageTest.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)20403_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_struct(RoleStat)20378_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct AccessControlStorageTest.RoleStat)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleStat)20378_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)15618_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.AddressSet",
        "members": [
          {
            "astId": 15617,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)15317_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)15511_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 15510,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)15317_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Context)20393_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorageTest.Context",
        "members": [
          {
            "astId": 20380,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "realm",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 20382,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "contractId",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20384,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "isEnabled",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 20389,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "resources",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes4,t_struct(RoleStat)20378_storage)"
          },
          {
            "astId": 20392,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "funcSet",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Bytes32Set)15511_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(DataCollections)20451_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorageTest.DataCollections",
        "members": [
          {
            "astId": 20428,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "accountMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_bytes32,t_enum(Status)20372))"
          },
          {
            "astId": 20433,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "ctxMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(Context)20393_storage)"
          },
          {
            "astId": 20438,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "roleMap",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(Role)20403_storage)"
          },
          {
            "astId": 20443,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "realmMap",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_struct(Realm)20413_storage)"
          },
          {
            "astId": 20448,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "groupMap",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_bytes32,t_struct(Group)20421_storage)"
          },
          {
            "astId": 20450,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "dummy_1",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Group)20421_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorageTest.Group",
        "members": [
          {
            "astId": 20415,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 20417,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "isEnabled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 20420,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "roleSet",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Bytes32Set)15511_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Realm)20413_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorageTest.Realm",
        "members": [
          {
            "astId": 20405,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 20407,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "isEnabled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 20409,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "isUpgradable",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 20412,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "ctxSet",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Bytes32Set)15511_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Role)20403_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorageTest.Role",
        "members": [
          {
            "astId": 20395,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "group",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 20397,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 20399,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "isEnabled",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 20402,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "accountSet",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)15618_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleStat)20378_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlStorageTest.RoleStat",
        "members": [
          {
            "astId": 20374,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "role",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 20377,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(Status)20372"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)15317_storage": {
        "encoding": "inplace",
        "label": "struct LEnumerableSet.Set",
        "members": [
          {
            "astId": 15312,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 15316,
            "contract": "src/contracts/test/acl/AccessControlManagerTest.sol:AccessControlManagerTest",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}